/*
    AUTOGENERATED! Do not modify this code.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Collections.Specialized;
using System.Data;
using System.Web.Configuration;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
using ibank.core;
using Bars.Classes;

namespace cim
{
    public sealed class VCimLicenseRecord : BbRecord
    {
        public VCimLicenseRecord(): base()
        {
            fillFields();
        }
        public VCimLicenseRecord(BbDataSource Parent) : base (Parent)
        {
            fillFields();
        }
        public VCimLicenseRecord(BbDataSource Parent, OracleDecimal RowScn, Decimal? LICENSE_ID, String OKPO, String NUM, Decimal? TYPE, String TYPE_TXT, Decimal? KV, Decimal? S, DateTime? BEGIN_DATE, DateTime? END_DATE, String COMMENTS, Decimal? S_DOC)
            : this(Parent)
        {
            this.LICENSE_ID = LICENSE_ID;
            this.OKPO = OKPO;
            this.NUM = NUM;
            this.TYPE = TYPE;
            this.TYPE_TXT = TYPE_TXT;
            this.KV = KV;
            this.S = S;
            this.BEGIN_DATE = BEGIN_DATE;
            this.END_DATE = END_DATE;
            this.COMMENTS = COMMENTS;
            this.S_DOC = S_DOC;
            this.RowScn = RowScn;
            this.IsRowscnSupported = false;
            this.ClearChanges();
        }
        private void fillFields()
        {
            Fields.Add( new BbField("LICENSE_ID", OracleDbType.Decimal, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "ID ліцензії"));
            Fields.Add( new BbField("OKPO", OracleDbType.Varchar2, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "ОКПО резидента"));
            Fields.Add( new BbField("NUM", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Номер ліцензії"));
            Fields.Add( new BbField("TYPE", OracleDbType.Decimal, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Тип ліцензії"));
            Fields.Add( new BbField("TYPE_TXT", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", ""));
            Fields.Add( new BbField("KV", OracleDbType.Decimal, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Код валюти"));
            Fields.Add( new BbField("S", OracleDbType.Decimal, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Сума"));
            Fields.Add( new BbField("BEGIN_DATE", OracleDbType.Date, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Дата ліцензії (скасування санкції)"));
            Fields.Add( new BbField("END_DATE", OracleDbType.Date, false, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Дата закінчення дії ліцензії"));
            Fields.Add( new BbField("COMMENTS", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Примітка"));
            Fields.Add( new BbField("S_DOC", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_LICENSE", ObjectTypes.View, "Ліцензії мінекономіки", "Сума пов`язаних документів"));        
        }
        public Decimal? LICENSE_ID { get { return (Decimal?)FindField("LICENSE_ID").Value; } set {SetField("LICENSE_ID", value);} }
        public String OKPO { get { return (String)FindField("OKPO").Value; } set {SetField("OKPO", value);} }
        public String NUM { get { return (String)FindField("NUM").Value; } set {SetField("NUM", value);} }
        public Decimal? TYPE { get { return (Decimal?)FindField("TYPE").Value; } set {SetField("TYPE", value);} }
        public String TYPE_TXT { get { return (String)FindField("TYPE_TXT").Value; } set {SetField("TYPE_TXT", value);} }
        public Decimal? KV { get { return (Decimal?)FindField("KV").Value; } set {SetField("KV", value);} }
        public Decimal? S { get { return (Decimal?)FindField("S").Value; } set {SetField("S", value);} }
        public DateTime? BEGIN_DATE { get { return (DateTime?)FindField("BEGIN_DATE").Value; } set {SetField("BEGIN_DATE", value);} }
        public DateTime? END_DATE { get { return (DateTime?)FindField("END_DATE").Value; } set {SetField("END_DATE", value);} }
        public String COMMENTS { get { return (String)FindField("COMMENTS").Value; } set {SetField("COMMENTS", value);} }
        public Decimal? S_DOC { get { return (Decimal?)FindField("S_DOC").Value; } set {SetField("S_DOC", value);} }
    }

    public sealed class VCimLicenseFilters : BbFilters
    {
        public VCimLicenseFilters(BbDataSource Parent) : base (Parent)
        {
            LICENSE_ID = new BBDecimalFilter(this, "LICENSE_ID");
            OKPO = new BBVarchar2Filter(this, "OKPO");
            NUM = new BBVarchar2Filter(this, "NUM");
            TYPE = new BBDecimalFilter(this, "TYPE");
            TYPE_TXT = new BBVarchar2Filter(this, "TYPE_TXT");
            KV = new BBDecimalFilter(this, "KV");
            S = new BBDecimalFilter(this, "S");
            BEGIN_DATE = new BBDateFilter(this, "BEGIN_DATE");
            END_DATE = new BBDateFilter(this, "END_DATE");
            COMMENTS = new BBVarchar2Filter(this, "COMMENTS");
            S_DOC = new BBDecimalFilter(this, "S_DOC");
        }
        public BBDecimalFilter LICENSE_ID;
        public BBVarchar2Filter OKPO;
        public BBVarchar2Filter NUM;
        public BBDecimalFilter TYPE;
        public BBVarchar2Filter TYPE_TXT;
        public BBDecimalFilter KV;
        public BBDecimalFilter S;
        public BBDateFilter BEGIN_DATE;
        public BBDateFilter END_DATE;
        public BBVarchar2Filter COMMENTS;
        public BBDecimalFilter S_DOC;
    }

    public partial class VCimLicense : BbTable<VCimLicenseRecord, VCimLicenseFilters>
    {
        public VCimLicense() : base(new BbConnection())
        {
            // base.Connection.RoleName = "WR_WCS";
        }
        public VCimLicense(BbConnection Connection)
            : base(Connection)
        {
        }
        public override List<VCimLicenseRecord> Select(VCimLicenseRecord Item)
        {
            List<VCimLicenseRecord> res = new List<VCimLicenseRecord>();
            OracleDataReader rdr = null;
            ConnectionResult connectionResult = Connection.InitConnection();
            try
            {
                rdr = ExecuteReader(Item);
                while (rdr.Read())
                {
                    res.Add(new VCimLicenseRecord(
                        this,
                        rdr.IsDBNull(0) ? OracleDecimal.Null : rdr.GetOracleDecimal(0),
                        rdr.IsDBNull(1) ?  (Decimal?)null : Convert.ToDecimal(rdr[1]), 
                        rdr.IsDBNull(2) ?  (String)null : Convert.ToString(rdr[2]), 
                        rdr.IsDBNull(3) ?  (String)null : Convert.ToString(rdr[3]), 
                        rdr.IsDBNull(4) ?  (Decimal?)null : Convert.ToDecimal(rdr[4]), 
                        rdr.IsDBNull(5) ?  (String)null : Convert.ToString(rdr[5]), 
                        rdr.IsDBNull(6) ?  (Decimal?)null : Convert.ToDecimal(rdr[6]), 
                        rdr.IsDBNull(7) ?  (Decimal?)null : Convert.ToDecimal(rdr[7]), 
                        rdr.IsDBNull(8) ?  (DateTime?)null : Convert.ToDateTime(rdr[8]), 
                        rdr.IsDBNull(9) ?  (DateTime?)null : Convert.ToDateTime(rdr[9]), 
                        rdr.IsDBNull(10) ?  (String)null : Convert.ToString(rdr[10]), 
                        rdr.IsDBNull(11) ?  (Decimal?)null : Convert.ToDecimal(rdr[11]))
                    );
                }
            }
            finally
            {
                DisposeDataReader(rdr);
                if (ConnectionResult.New == connectionResult)
                    Connection.CloseConnection();
            }
            return res;
        }
    }
}