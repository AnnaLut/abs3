.head 0 +  Application Description: ! /////////////////////////////////////////////////////////////////////////////////////////////////
! MsOffice.APL - Набор функций для экспорта данных из Centura builder  в Excel и Word
! + редактирование шаблонов договоров
! Для использования, на клиентской машине должен стоять Office
! Поддерживает все версии MS Office
! ООО Унити-Барс  ( C )  1999-2004
! Разработчик: Малышев И.В.
! /////////////////////////////////////////////////////////////////////////////////////////////////
.head 1 -  Outline Version - 4.0.26
.head 1 +  Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000B40000 002C000000020000 0003000000FFFFFF FFFFFFFFFFF8FFFF
0040: FFE2FFFFFFFFFFFF FF000000007C0200 004D010000010000 0001000000010000
0060: 000F4170706C6963 6174696F6E497465 6D01000000075769 6E646F7773
.enddata
.data DT_MAKERUNDLG
0000: 02000000002D433A 5C4261727339385C 544553545C50524F 4752414D535C4D53
0020: 4F66666963655C4D 534F66666963652E 65786530433A5C42 61727339385C5445
0040: 53545C50524F4752 414D535C4D534F66 666963655C546573 7443656E74757261
0060: 2E646C6C30433A5C 4261727339385C54 4553545C50524F47 52414D535C4D534F
0080: 66666963655C5465 737443656E747572 612E617063000001 010136443A5C426F
00A0: 726C616E645C4465 6C706869345C5072 6F6A656374735C41 75746F6D6174696F
00C0: 6E5C546573744365 6E747572612E7275 6E36443A5C426F72 6C616E645C44656C
00E0: 706869345C50726F 6A656374735C4175 746F6D6174696F6E 5C5465737443656E
0100: 747572612E646C6C 36443A5C426F726C 616E645C44656C70 6869345C50726F6A
0120: 656374735C417574 6F6D6174696F6E5C 5465737443656E74 7572612E61706300
0140: 00010101185C6261 727339385C42494E 5C4D534F66666963 652E6170641B5C62
0160: 61727339385C4249 4E5C546573744365 6E747572612E646C 6C1B5C6261727339
0180: 385C42494E5C5465 737443656E747572 612E617063000101 010103513A5C1251
01A0: 3A5C546573744365 6E747572612E646C 6C12513A5C546573 7443656E74757261
01C0: 2E61706300000101 01
.enddata
.head 2 -  Outline Window State: Normal
.head 2 +  Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
.head 3 -  Left:   -0.013"
.head 3 -  Top:    0.0"
.head 3 -  Width:  8.013"
.head 3 -  Height: 4.969"
.head 2 +  Options Box Location
.data VIEWINFO
0000: D4180909B80B1A00
.enddata
.data VIEWSIZE
0000: 0800
.enddata
.head 3 -  Visible? Yes
.head 3 -  Left:   4.15"
.head 3 -  Top:    1.885"
.head 3 -  Width:  3.8"
.head 3 -  Height: 2.073"
.head 2 +  Class Editor Location
.head 3 -  Visible? No
.head 3 -  Left:   0.575"
.head 3 -  Top:    0.094"
.head 3 -  Width:  5.063"
.head 3 -  Height: 2.719"
.head 2 +  Tool Palette Location
.head 3 -  Visible? No
.head 3 -  Left:   6.388"
.head 3 -  Top:    0.729"
.head 2 -  Fully Qualified External References? Yes
.head 2 -  Reject Multiple Window Instances? No
.head 2 -  Enable Runtime Checks Of External References? Yes
.head 2 -  Use Release 4.0 Scope Rules? No
.head 1 +  Libraries
.head 2 -  Dynalib: Global.apd
.head 2 -  File Include: Vtstr.apl
.head 2 -  File Include: VTARRAY.APL
.head 2 -  File Include: vtdos.apl
.head 1 +  Global Declarations
.head 2 +  Window Defaults
.head 3 +  Tool Bar
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Form Window
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Dialog Box
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Top Level Table Window
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Data Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Multiline Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Spin Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Background Text
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Pushbutton
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Radio Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Check Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Option Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Group Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Child Table Window
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  List Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Combo Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Line
.head 4 -  Line Color: Use Parent
.head 3 +  Frame
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: 3D Face Color
.head 3 +  Picture
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 2 -  Formats
.head 2 +  External Functions
.head 3 +  Library name: Autocon.dll
.head 4 -  ! MSOffice.apl Экспорт в оффис
.head 4 -  ! Общие функции
.head 4 +  Function: Unlock
.head 5 -  Description: Разблокировать Библиотеку
.head 5 -  Export Ordinal: 1
.head 5 +  Returns
.head 6 -  ! True - если удалость
.head 6 -  Boolean: BOOL
.head 5 +  Parameters
.head 6 -  ! Пароль разблокирования
.head 6 -  String: LPSTR
.head 4 +  Function: xlsErrorCode
.head 5 -  Description: Код ошибки Excel
.head 5 -  Export Ordinal: 2
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsErrorMessage
.head 5 -  Description: Сообщение об ошибке
.head 5 -  Export Ordinal: 3
.head 5 +  Returns
.head 6 -  String: LPSTR
.head 5 -  Parameters
.head 4 +  Function: wrdErrorCode
.head 5 -  Description: Код ошибки Word
.head 5 -  Export Ordinal: 4
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdErrorMessage
.head 5 -  Description: Сообщение об ошибке
.head 5 -  Export Ordinal: 5
.head 5 +  Returns
.head 6 -  String: LPSTR
.head 5 -  Parameters
.head 4 +  Function: wrdSetSaveFormat
.head 5 -  Description: Формат сохранения файлов шаблонов и договоров
Используется процедурой wrdSaveRTFDoc
.head 5 -  Export Ordinal: 6
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  Number: INT
.head 4 +  Function: wrdSetViewMode
.head 5 -  Description: wrdSetViewMode(Mode: Integer): Integer;
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: INT
.head 4 -  ! Функции Excel
.head 4 +  Function: xlsRun
.head 5 -  Description: Запуск Excel
.head 5 -  Export Ordinal: 10
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Показать приложение после запуска
.head 6 -  Boolean: BOOL
.head 4 +  Function: xlsClose
.head 5 -  Description: Закрытие Excel
.head 5 -  Export Ordinal: 11
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsShow
.head 5 -  Description: Показать Excel
.head 5 -  Export Ordinal: 12
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsHide
.head 5 -  Description: Спрятать Excel
.head 5 -  Export Ordinal: 13
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 -  !
.head 4 +  Function: xlsAddBook
.head 5 -  Description: Добавить книгу
.head 5 -  Export Ordinal: 20
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsBooksCount
.head 5 -  Description: Количество книг
.head 5 -  Export Ordinal: 21
.head 5 +  Returns
.head 6 -  ! Количество листов
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsSetActiveBook
.head 5 -  Description: Установить активную книгу
.head 5 -  Export Ordinal: 22
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! № книги
.head 6 -  Number: LONG
.head 4 +  Function: xlsDelActiveBook
.head 5 -  Description: Удалить активную книгу
.head 5 -  Export Ordinal: 23
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsSaveActiveBook
.head 5 -  Description: Сохранить активную книгу
.head 5 -  Export Ordinal: 25
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Имя файла
.head 6 -  String: LPSTR
.head 4 -  !
.head 4 +  Function: xlsAddSheet
.head 5 -  Description: Добавить лист
.head 5 -  Export Ordinal: 30
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsSheetsCount
.head 5 -  Description: Количество листов
.head 5 -  Export Ordinal: 31
.head 5 +  Returns
.head 6 -  ! Количество листов
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: xlsSetActiveSheet
.head 5 -  Description: Установить активный лист
.head 5 -  Export Ordinal: 32
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! № листа
.head 6 -  Number: LONG
.head 4 +  Function: xlsDelActiveSheet
.head 5 -  Description: Удалить активный лист
.head 5 -  Export Ordinal: 33
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 -  !
.head 4 +  Function: xlsSetCell
.head 5 -  Description: Установить значение ячейти [X,Y] на активном листе
.head 5 -  Export Ordinal: 50
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! X
.head 6 -  Number: LONG
.head 6 -  ! Y
.head 6 -  Number: LONG
.head 6 -  ! Значение
.head 6 -  String: LPSTR
.head 6 -  ! Типы
.head 6 -  ! String: LPSTR
.head 4 +  Function: xlsGetCell
.head 5 -  Description: Возвращает значение ячейти [X,Y] на активном листе
.head 5 -  Export Ordinal: 51
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  String: LPSTR
.head 5 +  Parameters
.head 6 -  ! X
.head 6 -  Number: LONG
.head 6 -  ! Y
.head 6 -  Number: LONG
.head 4 +  Function: xlsSetCellRange
.head 5 -  Description: Установка диапазона ячеек
.head 5 -  Export Ordinal: 53
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! X
.head 6 -  Number: LONG
.head 6 -  ! Y
.head 6 -  Number: LONG
.head 6 -  ! Length
.head 6 -  Number: LONG
.head 6 -  ! String
.head 6 -  String: LPSTR
.head 6 -  ! Типы
.head 6 -  ! String: LPSTR
.head 4 +  Function: xlsFormatCellRange
.head 5 -  Description: Форматирование диапазона ячеек
.head 5 -  Export Ordinal: 52
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Диапазон: [X1,Y1]-[X2,Y2]
.head 6 -  Number: LONG
.head 6 -  Number: LONG
.head 6 -  Number: LONG
.head 6 -  Number: LONG
.head 6 -  ! Имя шрифта
.head 6 -  String: LPSTR
.head 6 -  ! Жирный
.head 6 -  Number: LONG
.head 6 -  ! Наклонный
.head 6 -  Number: LONG
.head 6 -  ! Выравнивание (см Константы)
.head 6 -  Number: LONG
.head 6 -  ! Размер
.head 6 -  Number: LONG
.head 4 -  !
.head 4 +  Function: xlsSetBorders
.head 5 -  Description: Устанавливает обрамление группы ячеек
ограниченых квадратом [X1,Y1] - [X2,Y2]
.head 5 -  Export Ordinal: 60
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! X1
.head 6 -  Number: LONG
.head 6 -  ! Y1
.head 6 -  Number: LONG
.head 6 -  ! X2
.head 6 -  Number: LONG
.head 6 -  ! Y2
.head 6 -  Number: LONG
.head 6 -  ! Стиль (стили обрамления см. в константах)
.head 6 -  Number: LONG
.head 4 +  Function: xlsMerge
.head 5 -  Description: Обьединяет группу ячеек
ограниченых пряпоугольником [X1,Y1] - [X2,Y2]
.head 5 -  Export Ordinal: 61
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! X1
.head 6 -  Number: LONG
.head 6 -  ! Y1
.head 6 -  Number: LONG
.head 6 -  ! X2
.head 6 -  Number: LONG
.head 6 -  ! Y2
.head 6 -  Number: LONG
.head 4 +  Function: xlsUnMerge
.head 5 -  Description: Отменяет объединение группы ячеек
ограниченых квадратом [X1,Y1] - [X2,Y2]
.head 5 -  Export Ordinal: 62
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! X1
.head 6 -  Number: LONG
.head 6 -  ! Y1
.head 6 -  Number: LONG
.head 6 -  ! X2
.head 6 -  Number: LONG
.head 6 -  ! Y2
.head 6 -  Number: LONG
.head 4 +  Function: xlsAutoFormat
.head 5 -  Description: Форматирует группу ячеек
ограниченых квадратом [X1,Y1] - [X2,Y2]
.head 5 -  Export Ordinal: 63
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! X1
.head 6 -  Number: LONG
.head 6 -  ! Y1
.head 6 -  Number: LONG
.head 6 -  ! X2
.head 6 -  Number: LONG
.head 6 -  ! Y2
.head 6 -  Number: LONG
.head 4 -  ! Функции Word
.head 4 +  Function: wrdRun
.head 5 -  Description: Запуск Word
.head 5 -  Export Ordinal: 110
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Показывать приложение после запуска
.head 6 -  Boolean: BOOL
.head 4 +  Function: wrdClose
.head 5 -  Description: Закрытие Word
.head 5 -  Export Ordinal: 111
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdShow
.head 5 -  Description: Показать Word
.head 5 -  Export Ordinal: 112
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdHide
.head 5 -  Description: Спрятать Word
.head 5 -  Export Ordinal: 113
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 -  !
.head 4 +  Function: wrdAddDoc
.head 5 -  Description: Добавить документ
.head 5 -  Export Ordinal: 120
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdDocsCount
.head 5 -  Description: Количество документов
.head 5 -  Export Ordinal: 121
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdSetActiveDoc
.head 5 -  Description: Установить активный документ
.head 5 -  Export Ordinal: 122
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! № документа
.head 6 -  Number: LONG
.head 4 +  Function: wrdDelActiveDoc
.head 5 -  Description: Удалить активный документ
.head 5 -  Export Ordinal: 123
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdSaveActiveDoc
.head 5 -  Description: Сохранить активный документ
.head 5 -  Export Ordinal: 125
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Имя файла
.head 6 -  String: LPSTR
.head 4 +  Function: wrdSetPageOrientation
.head 5 -  Description: Установка ориентации страницы
.head 5 -  Export Ordinal: 127
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Ориентация (см Константы)
.head 6 -  Number: LONG
.head 4 -  !
.head 4 +  Function: wrdAddString
.head 5 -  Description: Добавить строку
.head 5 -  Export Ordinal: 150
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Строка, которую нужно вставить
.head 6 -  String: LPSTR
.head 6 -  ! Имя шрифта(См фкунции wrdFontCount, wrdFontNames) ('' - не задавать)
.head 6 -  String: LPSTR
.head 6 -  ! 1 - если жирный шрифт 0 - нет (-1 - не задавать)
.head 6 -  Number: LONG
.head 6 -  ! 1 - если наклонный шрифт 0 - нет (-1 - не задавать)
.head 6 -  Number: LONG
.head 6 -  ! Выравнивание(см. константы)
.head 6 -  Number: LONG
.head 6 -  ! Размер шрифта (0 - не задавать)
.head 6 -  Number: LONG
.head 4 +  Function: wrdFontsCount
.head 5 -  Description: Возвращает количество доступных шрифтов
.head 5 -  Export Ordinal: 160
.head 5 +  Returns
.head 6 -  ! Количество шрифтов
.head 6 -  Number: LONG
.head 5 -  Parameters
.head 4 +  Function: wrdFontNames
.head 5 -  Description: Имена шрифтов по номеру шрифта
.head 5 -  Export Ordinal: 161
.head 5 +  Returns
.head 6 -  ! Имя шрифта
.head 6 -  String: LPSTR
.head 5 +  Parameters
.head 6 -  ! Номер шрифта: с 1 до wrdFontsCount
.head 6 -  Number: LONG
.head 4 +  Function: wrdAddTable
.head 5 -  Description: Добавить таблицу
.head 5 -  Export Ordinal: 151
.head 5 +  Returns
.head 6 -  ! Идентификатор таблицы
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Количество колонок
.head 6 -  Number: LONG
.head 6 -  ! Количество строк
.head 6 -  Number: LONG
.head 4 +  Function: wrdAddTableRow
.head 5 -  Description: Добавить строку в таблицу
.head 5 -  Export Ordinal: 152
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Идентификатор таблицы
.head 6 -  Number: LONG
.head 4 +  Function: wrdSetTableCell
.head 5 -  Description: Установить значение ячейки (, , идентификатор таблицы, значение)
.head 5 -  Export Ordinal: 153
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Идентификатор таблицы
.head 6 -  Number: LONG
.head 6 -  ! Колонка
.head 6 -  Number: LONG
.head 6 -  ! Строка
.head 6 -  Number: LONG
.head 6 -  ! Значение
.head 6 -  String: LPSTR
.head 4 +  Function: wrdAutoFormatTable
.head 5 -  Description: Автоформат таблицы по идентификатору
.head 5 -  Export Ordinal: 154
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Идентификатор таблицы
.head 6 -  Number: LONG
.head 4 +  Function: wrdFormatCell
.head 5 -  Description: Форматирование ячейки таблицы
.head 5 -  Export Ordinal: 155
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Id таблицы
.head 6 -  Number: LONG
.head 6 -  ! X,Y
.head 6 -  Number: LONG
.head 6 -  Number: LONG
.head 6 -  ! Имя шрифта
.head 6 -  String: LPSTR
.head 6 -  ! Жирный
.head 6 -  Number: LONG
.head 6 -  ! Наклонный
.head 6 -  Number: LONG
.head 6 -  ! Выравнивание (см Константы)
.head 6 -  Number: LONG
.head 6 -  ! Размер
.head 6 -  Number: LONG
.head 4 +  Function: wrdCreatePrimaryHeader
.head 5 -  Description: Создает заголовок страницы
.head 5 -  Export Ordinal: 156
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: wrdCreateTable
.head 5 -  Description: Создание таблицы из строки
.head 5 -  Export Ordinal: 157
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  ! String
.head 6 -  String: LPSTR
.head 6 -  ! Column count
.head 6 -  Number: LONG
.head 4 -  ! New for RTF
.head 4 +  Function: wrdLoadRTFDoc
.head 5 -  Description: Загрузить RTF файл
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: wrdSaveRTFDoc
.head 5 -  Description: Сохранить RTF файл
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: wrdInsertString
.head 5 -  Description: Вставить строку в текущую позицию курсора в активном документе
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Строка, которую нужно вставить
.head 6 -  String: LPSTR
.head 6 -  ! Имя шрифта(См фкунции wrdFontCount, wrdFontNames) ('' - не задавать)
.head 6 -  String: LPSTR
.head 6 -  ! 1 - если жирный шрифт 0 - нет (-1 - не задавать)
.head 6 -  Number: LONG
.head 6 -  ! 1 - если наклонный шрифт 0 - нет (-1 - не задавать)
.head 6 -  Number: LONG
.head 6 -  ! Выравнивание(см. константы)
.head 6 -  Number: LONG
.head 6 -  ! Размер шрифта (0 - не задавать)
.head 6 -  Number: LONG
.head 4 +  Function: wrdReplaceText
.head 5 -  Description:
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! Искомая строка
.head 6 -  String: LPSTR
.head 6 -  ! Строка для замены
.head 6 -  String: LPSTR
.head 4 +  Function: wrdFindText
.head 5 -  Description:
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Boolean: BOOL
.head 5 +  Parameters
.head 6 -  ! Искомая строка
.head 6 -  String: LPSTR
.head 4 +  Function: xlsLoadBook
.head 5 -  Description: Загружает существующий лист
.head 5 -  Export Ordinal: 27
.head 5 +  Returns
.head 6 -  ! Код ошибки
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  ! String
.head 6 -  String: LPSTR
.head 3 +  Library name: AutoRTF.dll
.head 4 +  Function: artfRun
.head 5 -  Description: Запустить панель управления Word`ом
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 -  Parameters
.head 4 +  Function: artfKill
.head 5 -  Description: Закрыть панель управления Word`ом
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 -  Parameters
.head 4 +  Function: artfClearList
.head 5 -  Description: Отчистить список тегов
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 -  Parameters
.head 4 +  Function: artfAddTag
.head 5 -  Description: Добавить тэг
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  ! Код тега
.head 6 -  String: LPSTR
.head 6 -  ! Наименование тега
.head 6 -  String: LPSTR
.head 4 +  Function: artfEditRTFFile
.head 5 -  Description: Редактировать RTF файл
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Boolean: BOOL
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 3 +  Library name: explib.dll
.head 4 +  Function: Init
.head 5 -  Description: инициализация (без этого никуда :) )
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  ! OutputFileName - полный путь к файлу экспорта
.head 6 -  String: LPSTR
.head 4 +  Function: SetMetadata
.head 5 -  Description: установка метадаты (запускается один раз перед экспортом)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: SetRow
.head 5 -  Description: установка строки (запускается в цикле для каждой строки грида)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: SetHeaderText
.head 5 -  Description: установка заголовка
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: SetFooterText
.head 5 -  Description: установка футера
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 4 +  Function: Finish
.head 5 -  Description: вызывает диалог экспорта, печатает, освобождает ресурсы
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 -  Parameters
.head 2 +  Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
.head 3 +  System
.head 3 +  User
.head 4 -  ! <Erorrs>
.head 4 -  Number: autLocked=-1
.head 4 -  Number: autNotInstalled=-0100
.head 4 -  Number: autNotSupported=-0101
.head 4 -  Number: autNotStarted=-0110
.head 4 -  Number: autUnknown=-9999
.head 4 -  Number: xlsNoBook=-0115
.head 4 -  Number: xlsNoSheet=-0125
.head 4 -  Number: wrdNoDocument=-0120
.head 4 -  ! <Border Styles for EXCEL>
.head 4 -  Number: xlContinuous = 0X00000001
.head 4 -  Number: xlDash = 0XFFFFEFED
.head 4 -  Number: xlDashDot = 0X00000004
.head 4 -  Number: xlDashDotDot = 0X00000005
.head 4 -  Number: xlDot = 0XFFFFEFEA
.head 4 -  Number: xlDouble = 0XFFFFEFE9
.head 4 -  Number: xlSlantDashDot = 0X0000000D
.head 4 -  Number: xlLineStyleNone = 0XFFFFEFD2
.head 4 -  ! Cell Alignment for Excel
.head 4 -  Number: xlsLeft = 0X1
.head 4 -  Number: xlsRight = 0X3
.head 4 -  Number: xlsCenter = 0X2
.head 4 -  ! Word string alighnment
.head 4 -  Number: wrdNoAlign=-1
.head 4 -  Number: wrdLeft=0
.head 4 -  Number: wrdCenter=1
.head 4 -  Number: wrdRight=2
.head 4 -  Number: wrdWidth=3
.head 4 -  ! Word Page Orientation
.head 4 -  Number: wrdPortrait=0X0
.head 4 -  Number: wrdLandscape=0X1
.head 4 -  ! Тип приложения
.head 4 -  Number: atWord=1
.head 4 -  Number: atExcel=2
.head 4 -  ! Формат файла для функци wrdSetSaveFormat
.head 4 -  Number: fmtRtf  = 1
.head 4 -  Number: fmtHtml = 2
.head 4 -  Number: fmtMht  = 3
.head 4 -  ! Символ разделитель значений колонок #9
.head 4 -  String: strDelimiter = '	'
.head 4 -  !
.head 4 -  Number: G_FIRST_BOTTOM = 0
.head 4 -  Number: G_FIRST_TOP = 1
.head 4 -  Number: G_BOTTOM_TABLE = 0
.head 4 -  Number: G_TOP_TABLE = 1
.head 2 -  Resources
.head 2 +  Variables
.head 3 -  ! Флаг включения невидимых колонок в таблицу при экспорте
.head 3 -  ! Используется при экспорте кат. запросов в Офис
.head 3 -  Boolean: bIncludeAllColumns
.head 2 +  Internal Functions
.head 3 -  ! Конечные функции создания отчетов из таблиц Centura Builder
.head 3 +  Function: xlsExportTable			! __exported
.head 4 -  Description: Запускает Excel (если не запущен) и создает отчет
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! Таблица
.head 5 -  Window Handle: hSource
.head 5 -  ! Заголовок
.head 5 -  String: strCaption
.head 5 -  ! Номера колонок для итогового суммирования начиная с 1, разделенные запятой
.head 5 -  String: strSummary
.head 5 -  ! Columns types
.head 5 -  String: sColTypes[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFile
.head 5 -  : MyRC
.head 6 -  Class: cReportConstructor
.head 5 -  Window Handle: hProgressWin
.head 5 -  Number: nColTypesNum
.head 5 -  String: sColTypesList
.head 5 -  Number: i
.head 4 +  Actions
.head 5 -  Return xlsExportTableFN(hSource, '', strCaption, strSummary, sColTypes)
.head 3 +  Function: xlsExportTableFN			! __exported
.head 4 -  Description: Запускает Excel (если не запущен) и создает отчет
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! Таблица
.head 5 -  Window Handle: hSource
.head 5 -  ! Имя файла для выгрузки - с полным путем
.head 5 -  String: sFileName
.head 5 -  ! Заголовок
.head 5 -  String: strCaption
.head 5 -  ! Номера колонок для итогового суммирования начиная с 1, разделенные запятой
.head 5 -  String: strSummary
.head 5 -  ! Columns types
.head 5 -  String: sColTypes[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFile
.head 5 -  Number: nPrinterType
.head 5 -  : MyRC
.head 6 -  Class: cReportConstructor
.head 5 -  Window Handle: hProgressWin
.head 5 -  Number: nColTypesNum
.head 5 -  String: sColTypesList
.head 5 -  Number: i
.head 5 -  Number: nRes
.head 4 +  Actions
.head 5 -  Call SalUseRegistry(TRUE, 'UnityBars')
.head 5 -  Set nPrinterType = SalGetProfileInt('Print', 'SelectPrinter', 2, 'Bars98')
.head 5 -  ! == старая версия == !
.head 5 +  If nPrinterType = 1
.head 6 -  Call SalWaitCursor( TRUE )
.head 6 -  Set hProgressWin=SalCreateWindow( frm_Progress, hWndMDI )
.head 6 -  Call SalShowWindow( frm_Progress )
.head 6 -  Set MyRC.IncludePageHeader=TRUE
.head 6 -  Set MyRC.IncludeCaption=TRUE
.head 6 -  Set MyRC.tblSource=hSource
.head 6 -  Set MyRC.strCaption=strCaption
.head 6 -  Set MyRC.strSummary=strSummary
.head 6 -  Set MyRC.hTargetWindow=hProgressWin
.head 6 -  ! sColTypesList - список типов колонок через chr(9)
.head 6 -  Set i = 0
.head 6 -  Call SalArrayGetUpperBound(sColTypes, 1, nColTypesNum)
.head 6 +  While i <= nColTypesNum
.head 7 +  If i = 0
.head 8 -  Set sColTypesList = sColTypes[i]
.head 7 +  Else
.head 8 -  Set sColTypesList = sColTypesList || strDelimiter || sColTypes[i]
.head 7 -  Set i = i + 1
.head 6 -  Set MyRC.sColTypesList=sColTypesList
.head 6 -  !
.head 6 -  Call MyRC.CreateReport(atExcel)
.head 6 -  Call SalWaitCursor( FALSE )
.head 6 -  Call SalDestroyWindow( hProgressWin )
.head 6 -  Set nRes = TRUE
.head 5 -  ! == новая  версия == !
.head 5 +  Else
.head 6 +  If sFileName
.head 7 -  Set sFile = sFileName
.head 6 +  Else
.head 7 -  Set sFile = GetPrnDir() || '\\exp'
.head 6 -  Set nRes = ExportTableWithColTypes(hSource, strCaption, sFile, strSummary, sColTypes)
.head 5 -  Return nRes
.head 3 +  Function: wrdExportTable			! __exported
.head 4 -  Description: Запускает Word (если не запущен) и создает отчет
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  ! Экспортируемая таблица Centur`ы
.head 5 -  Window Handle: hSource
.head 5 -  ! Заголовок
.head 5 -  String: strCaption
.head 5 -  ! Номера колонок для итогового
суммирования начиная с 1,
 разделенные запятой
.head 5 -  String: strSummary
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  : MyRC
.head 6 -  Class: cReportConstructor
.head 5 -  Window Handle: hProgressWin
.head 4 +  Actions
.head 5 -  Call wrdExportTableMode(hSource, strCaption, strSummary, 0)
.head 3 +  Function: wrdExportTableMode			! __exported
.head 4 -  Description: Запускает Word (если не запущен) и создает отчет
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! Экспортируемая таблица Centur`ы
.head 5 -  Window Handle: hSource
.head 5 -  ! Заголовок
.head 5 -  String: strCaption
.head 5 -  ! Номера колонок для итогового
суммирования начиная с 1,
 разделенные запятой
.head 5 -  String: strSummary
.head 5 -  ! Режим открытия Word
.head 5 -  Number: nMode	! 1-ReadOnly(NoPrint), 2-Normal
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFile
.head 5 -  : MyRC
.head 6 -  Class: cReportConstructor
.head 5 -  Window Handle: hProgressWin
.head 5 -  Boolean: nRes
.head 4 +  Actions
.head 5 -  ! == старая версия == !
.head 5 +  If GetGlobalOptionEx('PRNTMODE') = 1
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Set hProgressWin = SalCreateWindow(frm_Progress, hWndMDI)
.head 6 -  Call SalShowWindow(frm_Progress)
.head 6 -  Set MyRC.IncludePageHeader = TRUE
.head 6 -  Set MyRC.IncludeCaption = TRUE
.head 6 -  Set MyRC.tblSource = hSource
.head 6 -  Set MyRC.strCaption = strCaption
.head 6 -  Set MyRC.strSummary = strSummary
.head 6 -  Set MyRC.hTargetWindow = hProgressWin
.head 6 -  Call MyRC.CreateReport(atWord)
.head 6 -  Call wrdSetViewMode(nMode)
.head 6 -  Call SalWaitCursor(FALSE)
.head 6 -  Call SalDestroyWindow(hProgressWin)
.head 6 -  Set nRes = TRUE
.head 5 -  ! == новая  версия == !
.head 5 +  Else
.head 6 -  Call wrdSetViewMode(nMode)
.head 6 -  Set sFile = GetPrnDir() || '\\exp'
.head 6 -  Set nRes = ExportTable(hSource, strCaption, sFile, strSummary)
.head 5 -  Return nRes
.head 3 +  Function: msoSetIncludeAllColumns		! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Boolean: fFlag
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Set bIncludeAllColumns=fFlag
.head 3 -  ! Промежуточные функции управления приложениями MS OFFICE(см описание)
.head 3 +  Function: xlsExportTbl
.head 4 -  Description: Экспорт данных из таблицы в Excel
Требования: приложение должно быть стартовано
и добавлена новая книга
.head 4 +  Returns
.head 5 -  Number: nError
.head 4 +  Parameters
.head 5 -  ! Таблица
.head 5 -  Window Handle: hSource
.head 5 -  ! Смещение по X
.head 5 -  Number: xOffset
.head 5 -  ! Смещение по Y
.head 5 -  Number: yOffset
.head 5 -  ! Список итоговых колонок
.head 5 -  String: strSummary
.head 5 -  ! Список типов колонок
.head 5 -  String: sColTypesList
.head 5 -  ! Окно которому в процессе экспорта посылается SAM_User
.head 5 -  ! с lParam = количеству отправленых строк
.head 5 -  Window Handle: hTargetWin
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRowNo		! Строка (с учетом заголовка)
.head 5 -  Number: nRowNoTrg	! Строка в таблице назначения
.head 5 -  Number: nColNo		! Колонка в исходной таблице
.head 5 -  Number: nColNoXLS	! Колонка в таблице назначения
.head 5 -  Number: nColCount		! Полное количество колонок в исходной таблице
.head 5 -  Number: nColCountXLS	! Полное количество колонок в таблице назначения
.head 5 -  Window Handle: hColumn	! Хэндл колонки
.head 5 -  String: strTmp
.head 5 -  Boolean: bNextRowSetted
.head 5 -  String: strDate		! Для преобразования даты
.head 5 -  String: strTime
.head 5 -  String: strCurRow		! Накопитель значений строки
.head 5 -  String: strCaption		! Заголовок таблицы
.head 5 -  Number: nSummary[*]	! Масив хранения Итогов
.head 5 -  Boolean: bCreateSummary[*]	! Массив создания Итогов
.head 5 -  String: tmpArr[*]		! Временный массив
.head 5 -  Number: i			! Индекс
.head 5 -  Number: iend		! Конечное значение i
.head 5 -  Number: t			! Индекс
.head 5 -  Number: tend		! Конечное значение t
.head 5 -  Number: nOutputGroupSize	! Размер группы строк, после экспорта которых выдается событие в hTargetWin
.head 5 -  Boolean: fSplit		! Признак обработки сплита
.head 5 -  Number: nRowsProceed	! Текущее выгруженное количество строк
.head 5 -  Number: nBookCount	! Количество листов
.head 5 -  Number: nColTypesNum
.head 5 -  Number: nFormat
.head 5 -  String: strPicture
.head 5 -  Date/Time: dTmpDat
.head 5 -  String: sDecimal
.head 5 -  Number: nScanDat
.head 5 -  Number: nScanPicture
.head 5 -  String: d1
.head 5 -  String: d2
.head 4 +  Actions
.head 5 -  Set nOutputGroupSize = 50
.head 5 -  Set hColumn = SalGetFirstChild(hSource, TYPE_TableColumn)
.head 5 +  If hColumn != hWndNULL
.head 6 -  Set nColNo    = 0
.head 6 -  Set nColNoXLS = 0
.head 6 -  ! Количесвто колонок
.head 6 +  Loop !Цикл по колонкам
.head 7 -  ! Экспорт только видимых колонок либо по флагу
.head 7 +  If bIncludeAllColumns OR SalIsWindowVisible( hColumn )
.head 8 -  Set nColNoXLS = nColNoXLS + 1
.head 7 -  Set nColNo = nColNo + 1
.head 7 -  Set hColumn = SalGetNextChild( hColumn, TYPE_TableColumn )
.head 7 +  If hColumn = hWndNULL
.head 8 -  Set nColCount    = nColNo
.head 8 -  Set nColCountXLS = nColNoXLS
.head 8 -  Break
.head 6 -  Set strCurRow = ''
.head 6 -  Set nColNo    = 1
.head 6 -  Set nColNoXLS = 0
.head 6 -  ! Заголовок
.head 6 +  Loop !Цикл по колонкам
.head 7 +  If nColNo > nColCount
.head 8 -  Break
.head 7 -  Set hColumn = SalTblGetColumnWindow( hSource, nColNo, COL_GetPos )
.head 7 -  ! Экспорт только видимых колонок либо по флагу
.head 7 +  If bIncludeAllColumns OR SalIsWindowVisible( hColumn )
.head 8 -  Call SalTblGetColumnTitle( hColumn, strTmp, 255 )
.head 8 -  ! Исключение разделителей внутри заголовков колонок
.head 8 -  Set strTmp = VisStrSubstitute( strTmp, strDelimiter, ' ' )
.head 8 -  ! Устранение переносов строк
.head 8 -  Set strTmp = VisStrSubstitute( strTmp, SalNumberToChar(13) || SalNumberToChar(10), ' ' )
.head 8 +  If nColNoXLS = 0
.head 9 -  Set strCurRow = strCurRow || strTmp
.head 8 +  Else
.head 9 -  Set strCurRow = strCurRow || strDelimiter || strTmp
.head 8 -  Set nColNoXLS = nColNoXLS + 1
.head 7 -  Set nColNo = nColNo + 1
.head 6 -  ! Call xlsSetCellRange( xOffset+1, yOffset+1, nColCountXLS, strCurRow, STRING_Null )
.head 6 -  Call xlsSetCellRange( xOffset+1, yOffset+1, nColCountXLS, strCurRow )
.head 6 -  Set strCaption = strCurRow
.head 6 -  ! Инициализация Итогов
.head 6 -  Call SalArraySetUpperBound(nSummary, 1, nColNoXLS-1)
.head 6 -  Call SalArraySetUpperBound(bCreateSummary, 1, nColNoXLS-1)
.head 6 +  If SalStrLength(strSummary) > 0
.head 7 -  Call SalStrTokenize( strSummary, ',', ',', tmpArr )
.head 7 -  Set i = 0
.head 7 -  Call SalArrayGetUpperBound( tmpArr, 1, iend )
.head 7 -  Set tend = nColNoXLS - 1
.head 7 +  Loop
.head 8 +  If i <= iend
.head 9 -  Set t = SalStrToNumber( tmpArr[i] ) - 1
.head 9 +  If t <= tend
.head 10 -  Set bCreateSummary[ SalStrToNumber( tmpArr[i] )-1 ]=TRUE
.head 8 +  Else
.head 9 -  Break
.head 8 -  Set i = i + 1
.head 6 -  ! Данные
.head 6 -  Set fSplit = FALSE
.head 6 -  Set nRowNo = 0
.head 6 -  Set nRowNoTrg = 0
.head 6 -  Set bNextRowSetted = SalTblSetContext(hSource, nRowNo)
.head 6 -  Set nRowsProceed = 0
.head 6 -  Set nBookCount = 0
.head 6 -  Set sDecimal = SalStrMidX(SalNumberToStrX(1.1, 1), 1, 1)
.head 6 +  Loop !Цилк по строкам
.head 7 +  If bNextRowSetted 
.head 8 -  Set nColNo    = 1
.head 8 -  Set nColNoXLS = 0
.head 8 -  Set strCurRow = ''
.head 8 +  Loop !Цикл по колонкам
.head 9 +  If nColNo <= nColCount
.head 10 -  Set hColumn = SalTblGetColumnWindow( hSource, nColNo, COL_GetPos )
.head 10 -  ! Экспорт только видимых колонок либо по флагу
.head 10 +  If bIncludeAllColumns OR SalIsWindowVisible(hColumn)
.head 11 -  Call SalGetWindowText(hColumn, strTmp, 255)
.head 11 -  ! Это заменяется не пробел а хитрый сивол разделитель групп разрядов
.head 11 -  Set strTmp = VisStrSubstitute(strTmp, ' ', '')
.head 11 +  If SalStrLength(strTmp) = 0
.head 12 -  Set strTmp = ' '
.head 11 +  Else
.head 12 -  ! Если число - преобразование и суммирование
.head 12 +  If SalIsValidNumber(hColumn) OR ColValueIsValidNumber(strTmp)
.head 13 -  ! Исключение пробелов внутри значений чисел (при разделении на группы разрядов)
.head 13 -  Set strTmp = SalStrTrimX(VisStrSubstitute(strTmp, ' ', ''))
.head 13 -  ! Суммирование
.head 13 +  If bCreateSummary[nColNo-1]	! Вычисляем ИТОГИ
.head 14 -  Set nSummary[nColNo-1] = nSummary[nColNo-1] + SalStrToNumber(strTmp)
.head 13 -  Set strTmp = VisStrSubstitute(strTmp, sDecimal, '.')
.head 12 -  ! Если дата - устанавливаем единый формат
.head 12 +  Else If SalIsValidDateTime(hColumn)
.head 13 -  ! Формат даты
.head 13 -  Set strPicture = ''
.head 13 +  If SalGetDataType(hColumn) = DT_DateTime
.head 14 -  Set nFormat = SalFmtGetFormat(hColumn)
.head 14 +  If nFormat = 2		! FMT_Format_Date
.head 15 -  Set strPicture = 'dd.MM.yyyy'
.head 14 +  If nFormat = 3		! FMT_Format_DateTime
.head 15 -  Set strPicture = 'dd.MM.yyyy hh:mm:ss'
.head 14 +  If nFormat = 7		! FMT_Format_Time
.head 15 -  Set strPicture = 'hh:mm:ss'
.head 14 +  If nFormat = 0		! FMT_Format_Unformatted
.head 15 -  Set strPicture = 'yyyy.MM.dd hh:mm:ss'
.head 14 +  Else If nFormat = -1	! FMT_Format_Picture
.head 15 -  Call SalFmtGetPicture(hColumn, strPicture)
.head 15 -  Set strPicture = SalStrTrimX(strPicture)
.head 14 +  If SalStrLength(strTmp) != SalStrLength(strPicture)
.head 15 -  Set d1 = strTmp
.head 15 -  Set nScanDat = SalStrScan(strTmp, ' ')
.head 15 -  ! Дата+время
.head 15 +  If nScanDat != -1
.head 16 -  Set nScanPicture = SalStrScan(strPicture, ' ')
.head 16 -  Set d1 = SalStrTrimX(SalStrMidX(strTmp, 0, nScanDat))
.head 16 -  Set d2 = SalStrTrimX(SalStrMidX(strTmp, nScanDat+1, SalStrLength(strTmp)-nScanDat))
.head 16 -  Set d1 = SalStrRightX(SalStrRepeatX('0', nScanPicture) || d1, nScanPicture) || ' ' || 
         SalStrRightX(SalStrRepeatX('0', SalStrLength(strPicture)-nScanPicture-1) || d2, SalStrLength(strPicture)-nScanPicture-1)
.head 15 -  Set strTmp = SalStrRightX(SalStrRepeatX('0', SalStrLength(strPicture)) || d1, SalStrLength(strPicture))
.head 13 +  If strPicture
.head 14 -  Set dTmpDat = FmtStrToDateTime(SalStrTrimX(strTmp), strPicture)
.head 13 +  Else
.head 14 -  Set dTmpDat = SalStrToDate(strTmp)
.head 13 -  !
.head 13 -  Call DateTimeToString(dTmpDat, strDate, strTime)
.head 13 +  If strTime = '00:00:00'
.head 14 -  Set strTmp = strDate
.head 13 +  Else
.head 14 -  Set strTmp = strDate || ' ' || strTime
.head 11 -  ! Исключение разделителей внутри значений колонок
.head 11 -  Set strTmp = VisStrSubstitute(strTmp, strDelimiter, ' ')
.head 11 +  If nColNoXLS = 0
.head 12 -  Set strCurRow = strCurRow || strTmp
.head 11 +  Else
.head 12 -  Set strCurRow = strCurRow || strDelimiter || strTmp
.head 11 -  Set nColNoXLS = nColNoXLS + 1
.head 9 +  Else
.head 10 -  Break
.head 9 -  Set nColNo = nColNo + 1
.head 7 +  Else
.head 8 -  Break
.head 7 -  ! Если превышено максимальное ограничение по кол-ву строк создать новый лист
.head 7 +  If nRowsProceed = 65000
.head 8 -  ! Сколько было создано новых листов
.head 8 -  Set nBookCount = nBookCount + 1
.head 8 -  ! Разметить лист перед открытием нового
.head 8 -  Call xlsAutoFormat( xOffset+1,yOffset+1,xOffset+nColCountXLS,yOffset+nRowNoTrg+1 )
.head 8 -  ! Создать новый лист
.head 8 -  Call xlsAddBook()
.head 8 +  If yOffset > 1 
.head 9 -  ! Call xlsSetCell(1,1,"Продолжение "||SalNumberToStrX(nBookCount,0), STRING_Null)
.head 9 -  Call xlsSetCell(1,1,"Продолжение "||SalNumberToStrX(nBookCount,0))
.head 8 -  ! Заголовок листа
.head 8 -  ! Call xlsSetCellRange( xOffset+1, yOffset+1, nColCountXLS, strCaption, STRING_Null )
.head 8 -  Call xlsSetCellRange( xOffset+1, yOffset+1, nColCountXLS, strCaption )
.head 8 -  ! Обнулить переменные
.head 8 -  Set nRowNoTrg    = 0
.head 8 -  Set nRowsProceed = 0
.head 7 -  ! Call xlsSetCellRange( xOffset+1, yOffset+nRowNoTrg+2, nColCountXLS, strCurRow, sColTypesList )
.head 7 -  Call xlsSetCellRange( xOffset+1, yOffset+nRowNoTrg+2, nColCountXLS, strCurRow )
.head 7 -  ! След. строка
.head 7 +  If NOT fSplit
.head 8 -  Set nRowNo = nRowNo + 1
.head 7 -  Set nRowNoTrg = nRowNoTrg + 1
.head 7 +  If (hTargetWin!=hWndNULL) AND (SalNumberMod( nRowNoTrg, nOutputGroupSize )=0)
.head 8 -  Call SalSendMsg( hTargetWin, SAM_User, 0, nRowNoTrg )
.head 7 +  If fSplit
.head 8 -  Set bNextRowSetted=SalTblFindNextRow( hSource, nRowNo, 0, 0 )
.head 8 -  Set bNextRowSetted=bNextRowSetted AND (nRowNo<0)
.head 8 +  If bNextRowSetted
.head 9 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 7 +  Else
.head 8 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 7 +  If NOT bNextRowSetted AND NOT fSplit
.head 8 -  Set fSplit=TRUE
.head 8 -  Set nRowNo=TBL_MinRow
.head 8 -  Set bNextRowSetted=SalTblFindNextRow( hSource, nRowNo, 0, 0 )
.head 8 -  Set bNextRowSetted=bNextRowSetted AND (nRowNo<0)
.head 8 +  If bNextRowSetted
.head 9 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 7 -  Set nRowsProceed= nRowsProceed + 1
.head 6 -  ! Создание Итогов
.head 6 +  If SalStrLength(strSummary) > 0
.head 7 -  Set t = 0
.head 7 -  Set strCurRow = ''
.head 7 +  Loop
.head 8 +  If t <= tend
.head 9 +  If t = 0
.head 10 +  If bCreateSummary[t]
.head 11 -  Set strCurRow=strCurRow || SalNumberToStrX( nSummary[t], 4 )
.head 10 +  Else
.head 11 -  Set strCurRow=strCurRow || ' '
.head 9 +  Else
.head 10 +  If bCreateSummary[t]
.head 11 -  Set strCurRow=strCurRow || strDelimiter || SalNumberToStrX( nSummary[t], 4 )
.head 10 +  Else
.head 11 -  Set strCurRow=strCurRow || strDelimiter || ' '
.head 8 +  Else
.head 9 -  Break
.head 8 -  Set t = t + 1
.head 7 -  ! Call xlsSetCellRange( xOffset+1, yOffset+nRowNoTrg+2, nColCountXLS, strCurRow, sColTypesList )
.head 7 -  Call xlsSetCellRange( xOffset+1, yOffset+nRowNoTrg+2, nColCountXLS, strCurRow )
.head 7 -  Set nRowNoTrg = nRowNoTrg + 1
.head 6 -  ! Форматирование
.head 6 -  Call xlsAutoFormat( xOffset+1,yOffset+1,xOffset+nColCountXLS,yOffset+nRowNoTrg+1 )
.head 6 -  Return 0
.head 3 +  Function: wrdExportTbl
.head 4 -  Description: Экспорт данных из таблицы в Word
Требования: приложение должно быть стартовано
и добавлен новый документ
.head 4 +  Returns
.head 5 -  Number: nError
.head 4 +  Parameters
.head 5 -  ! Экспортируемая таблица Centur`ы
.head 5 -  Window Handle: hSource
.head 5 -  ! Идентификатор таблицы назначения Word`а
.head 5 -  ! 0 - чтобы вставить в новую таблицу
.head 5 -  Number: nTarget
.head 5 -  ! Список итоговых колонок
.head 5 -  String: strSummary
.head 5 -  ! Окно которому в процессе экспорта посылается SAM_User
.head 5 -  ! с lParam = количеству отправленых строк
.head 5 -  Window Handle: hTargetWin
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRowNo		!Строка в исходной таблице
.head 5 -  Number: nRowNoTrg	!Строка в таблице назначения
.head 5 -  Number: nColNo		!Колонка в исходной таблице
.head 5 -  Number: nColNoTrg		!Колонка в таблице назначения
.head 5 -  Number: nColCount		!Полное количество колонок в исходной таблице
.head 5 -  Number: nWrdColCount	!Полное количество колонок в таблице назначения
.head 5 -  Window Handle: hColumn
.head 5 -  String: strTmp
.head 5 -  Boolean: bNextRowSetted
.head 5 -  String: strDate		! Для преобразования даты
.head 5 -  String: strTime
.head 5 -  String: strTableBuffer	! Накапливает значения целой таблицы для пакетной передачи
.head 5 -  String: strRDelimiter		! Символ разделитель значений колонок #9
.head 5 -  String: strCDelimiter		! Символ разделитель значений колонок #9
.head 5 -  Number: nSummary[*]	! Масив хранения Итогов
.head 5 -  Boolean: bCreateSummary[*]	! Массив создания Итогов
.head 5 -  String: tmpArr[*]		! Временный массив
.head 5 -  Number: i			! Индекс
.head 5 -  Number: iend		! Конечное значение i
.head 5 -  Number: t			! Индекс
.head 5 -  Number: tend		! Конечное значение t
.head 5 -  Number: nBuffSize		! Максимальный размер строкового буфера для передачи данных
.head 5 -  Boolean: fSplit		! Признак обработки сплита
.head 5 -  Number: nFormat
.head 5 -  String: strPicture
.head 5 -  Date/Time: dTmpDat
.head 5 -  Number: nScanDat
.head 5 -  Number: nScanPicture
.head 5 -  String: d1
.head 5 -  String: d2
.head 4 +  Actions
.head 5 -  Set strRDelimiter=SalNumberToChar( 13 ) || SalNumberToChar( 10 )
.head 5 -  Set strCDelimiter=SalNumberToChar( 9 )
.head 5 -  Set hColumn=SalGetFirstChild( hSource, TYPE_TableColumn )
.head 5 -  Set nBuffSize=4096
.head 5 +  If hColumn!= hWndNULL
.head 6 -  Set nColNoTrg=0
.head 6 -  Set nColNo=0
.head 6 -  ! Определяем полное количество колонок
.head 6 +  Loop
.head 7 +  If bIncludeAllColumns OR SalIsWindowVisible( hColumn )	!Счетаю только видимые колоноки либо по флагу
.head 8 -  Set nColNoTrg=nColNoTrg+1
.head 7 -  Set nColNo=nColNo+1
.head 7 -  Set hColumn=SalGetNextChild( hColumn, TYPE_TableColumn )
.head 7 +  If hColumn= hWndNULL
.head 8 -  Set nColCount=nColNo
.head 8 -  Break
.head 6 -  ! Заголовок
.head 6 -  Set nColNo=0
.head 6 -  Set nColNoTrg=0
.head 6 -  Set strTableBuffer=''
.head 6 -  Set hColumn=SalTblGetColumnWindow( hSource, nColNo+1, COL_GetPos )
.head 6 +  Loop
.head 7 +  If nColNo<nColCount
.head 8 +  If bIncludeAllColumns OR SalIsWindowVisible( hColumn )	!Экспорт только видимых колонок либо по флагу
.head 9 -  Set nColNoTrg=nColNoTrg+1
.head 9 -  Call SalTblGetColumnTitle( hColumn, strTmp, 255 )
.head 9 -  Set strTmp=VisStrSubstitute( strTmp, strCDelimiter, ' ' )	! Исключение разделителей внутри заголовков колонок
.head 9 -  Set strTmp=VisStrSubstitute( strTmp, strRDelimiter, ' ' )	! Исключение разделителей внутри заголовков колонок
.head 9 +  If nColNoTrg=1
.head 10 -  Set strTableBuffer=strTableBuffer || strTmp
.head 9 +  Else
.head 10 -  Set strTableBuffer=strTableBuffer || strCDelimiter || strTmp
.head 8 -  Set nColNo=nColNo+1
.head 8 -  Set hColumn=SalTblGetColumnWindow( hSource, nColNo+1, COL_GetPos )
.head 7 +  Else
.head 8 -  Break
.head 6 -  Set nWrdColCount=nColNoTrg
.head 6 -  Set strTableBuffer=strTableBuffer || strRDelimiter
.head 6 -  ! Инициализация Итогов
.head 6 -  Call SalArraySetUpperBound( nSummary, 1, nWrdColCount-1 )
.head 6 -  Call SalArraySetUpperBound( bCreateSummary, 1, nWrdColCount-1 )
.head 6 +  If SalStrLength( strSummary ) > 0
.head 7 -  Call SalStrTokenize( strSummary, ',', ',', tmpArr )
.head 7 -  Set i=0
.head 7 -  Call SalArrayGetUpperBound( tmpArr, 1, iend )
.head 7 -  Set tend= nWrdColCount-1
.head 7 +  Loop
.head 8 +  If i<=iend
.head 9 -  Set t=SalStrToNumber( tmpArr[i] )-1
.head 9 +  If t<=tend
.head 10 -  Set bCreateSummary[ SalStrToNumber( tmpArr[i] )-1 ]=TRUE
.head 8 +  Else
.head 9 -  Break
.head 8 -  Set i=i+1
.head 6 -  ! Данные
.head 6 -  Set fSplit=FALSE
.head 6 -  Set nRowNo=0
.head 6 -  Set nRowNoTrg=2
.head 6 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 6 +  Loop !Цилк по строкам
.head 7 +  If bNextRowSetted
.head 8 -  Set nColNo = 0
.head 8 -  Set nColNoTrg = 1
.head 8 +  Loop !Цикл по колонкам
.head 9 +  If nColNo <= nColCount
.head 10 -  Set hColumn = SalTblGetColumnWindow( hSource, nColNo, COL_GetPos )
.head 10 +  If bIncludeAllColumns OR SalIsWindowVisible( hColumn )	!Экспорт только видимых колонок либо по флагу
.head 11 -  Call SalGetWindowText(hColumn, strTmp, 255)
.head 11 -  ! Если число - преобразуем и суммируем
.head 11 +  If SalIsValidNumber( hColumn )	
.head 12 +  If bCreateSummary[nColNo-1]	! Вычисляем ИТОГИ
.head 13 -  Set nSummary[nColNo-1] = nSummary[nColNo-1] + SalStrToNumber(strTmp)
.head 12 -  Set strTmp = VisStrSubstitute(strTmp, '.', ',')
.head 11 -  ! Если дата - устанавливаем единый формат
.head 11 +  Else If SalIsValidDateTime(hColumn)
.head 12 -  ! Формат даты
.head 12 -  Set strPicture = ''
.head 12 +  If SalGetDataType(hColumn) = DT_DateTime
.head 13 -  Set nFormat = SalFmtGetFormat(hColumn)
.head 13 +  If nFormat = 2		! FMT_Format_Date
.head 14 -  Set strPicture = 'dd.MM.yyyy'
.head 13 +  If nFormat = 3		! FMT_Format_DateTime
.head 14 -  Set strPicture = 'dd.MM.yyyy hh:mm:ss'
.head 13 +  If nFormat = 7		! FMT_Format_Time
.head 14 -  Set strPicture = 'hh:mm:ss'
.head 13 +  If nFormat = 0		! FMT_Format_Unformatted
.head 14 -  Set strPicture = 'yyyy.MM.dd hh:mm:ss'
.head 13 +  Else If nFormat = -1	! FMT_Format_Picture
.head 14 -  Call SalFmtGetPicture(hColumn, strPicture)
.head 14 -  Set strPicture = SalStrTrimX(strPicture)
.head 13 +  If SalStrLength(strTmp) != SalStrLength(strPicture)
.head 14 -  Set d1 = strTmp
.head 14 -  Set nScanDat = SalStrScan(strTmp, ' ')
.head 14 -  ! Дата+время
.head 14 +  If nScanDat != -1
.head 15 -  Set nScanPicture = SalStrScan(strPicture, ' ')
.head 15 -  Set d1 = SalStrTrimX(SalStrMidX(strTmp, 0, nScanDat))
.head 15 -  Set d2 = SalStrTrimX(SalStrMidX(strTmp, nScanDat+1, SalStrLength(strTmp)-nScanDat))
.head 15 -  Set d1 = SalStrRightX(SalStrRepeatX('0', nScanPicture) || d1, nScanPicture) || ' ' || 
         SalStrRightX(SalStrRepeatX('0', SalStrLength(strPicture)-nScanPicture-1) || d2, SalStrLength(strPicture)-nScanPicture-1)
.head 14 -  Set strTmp = SalStrRightX(SalStrRepeatX('0', SalStrLength(strPicture)) || d1, SalStrLength(strPicture))
.head 12 +  If strPicture
.head 13 -  Set dTmpDat = FmtStrToDateTime(SalStrTrimX(strTmp), strPicture)
.head 12 +  Else
.head 13 -  Set dTmpDat = SalStrToDate(strTmp)
.head 12 -  !
.head 12 -  Call DateTimeToString(dTmpDat, strDate, strTime)
.head 12 +  If strTime = '00:00:00'
.head 13 -  Set strTmp = strDate
.head 12 +  Else
.head 13 -  Set strTmp = strDate || ' ' || strTime
.head 11 -  Set strTmp=VisStrSubstitute( strTmp, strCDelimiter, ' ' )	! Исключение разделителей внутри значений колонок
.head 11 -  Set strTmp=VisStrSubstitute( strTmp, strRDelimiter, ' ' )
.head 11 +  If SalStrLength( strTmp )=0
.head 12 -  Set strTmp=' '
.head 11 +  If nColNoTrg=1
.head 12 -  Set strTableBuffer=strTableBuffer || strTmp
.head 11 +  Else
.head 12 -  Set strTableBuffer=strTableBuffer || strCDelimiter || strTmp
.head 11 -  Set nColNoTrg=nColNoTrg+1
.head 10 -  Set nColNo=nColNo+1
.head 9 +  Else
.head 10 -  Break
.head 8 -  Set strTableBuffer=strTableBuffer || strRDelimiter
.head 8 -  ! Посылка сообщений
.head 8 +  If (hTargetWin!=hWndNULL) AND ( SalStrLength( strTableBuffer )>=nBuffSize)
.head 9 -  Call wrdCreateTable( strTableBuffer, nWrdColCount )
.head 9 -  Set strTableBuffer=''
.head 9 -  Call SalSendMsg( hTargetWin, SAM_User, 0, nRowNo )
.head 7 +  Else
.head 8 -  Break
.head 7 -  ! След. строка
.head 7 +  If NOT fSplit
.head 8 -  Set nRowNo=nRowNo+1
.head 7 -  Set nRowNoTrg=nRowNoTrg+1
.head 7 +  If fSplit
.head 8 -  Set bNextRowSetted=SalTblFindNextRow( hSource, nRowNo, 0, 0 )
.head 8 -  Set bNextRowSetted=bNextRowSetted AND (nRowNo<0)
.head 8 +  If bNextRowSetted
.head 9 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 7 +  Else
.head 8 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 7 +  If NOT bNextRowSetted AND NOT fSplit
.head 8 -  Set fSplit=TRUE
.head 8 -  Set nRowNo=TBL_MinRow
.head 8 -  Set bNextRowSetted=SalTblFindNextRow( hSource, nRowNo, 0, 0 )
.head 8 -  Set bNextRowSetted=bNextRowSetted AND (nRowNo<0)
.head 8 +  If bNextRowSetted
.head 9 -  Set bNextRowSetted=SalTblSetContext( hSource, nRowNo )
.head 6 -  ! Создание Итогов
.head 6 +  If SalStrLength( strSummary ) > 0
.head 7 -  Set t=0
.head 7 +  Loop
.head 8 +  If t<=tend
.head 9 +  If t=0
.head 10 +  If bCreateSummary[t]
.head 11 -  Set strTableBuffer=strTableBuffer || SalNumberToStrX( nSummary[t], 4 )
.head 10 +  Else
.head 11 -  Set strTableBuffer=strTableBuffer || ' '
.head 9 +  Else
.head 10 +  If bCreateSummary[t]
.head 11 -  Set strTableBuffer=strTableBuffer || strCDelimiter || SalNumberToStrX( nSummary[t], 4 )
.head 10 +  Else
.head 11 -  Set strTableBuffer=strTableBuffer || strCDelimiter || ' '
.head 8 +  Else
.head 9 -  Break
.head 8 -  Set t=t+1
.head 7 -  ! Set strTableBuffer=strTableBuffer || strRDelimiter
.head 7 -  Set nRowNo=nRowNo+1
.head 6 -  ! Экспорт и форматирование
.head 6 -  Call wrdCreateTable( strTableBuffer, nWrdColCount )
.head 6 -  ! Call wrdAutoFormatTable( nTarget )
.head 6 -  Return 0
.head 3 -  !
.head 3 +  Function: ExportTable				! __exported
.head 4 -  Description: Экспорт данных из таблицы
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! Таблица
.head 5 -  Window Handle: hWndTable
.head 5 -  ! Заголовок
.head 5 -  String: strTableHeader
.head 5 -  ! Имя выходного файла
.head 5 -  String: sOutFileName
.head 5 -  ! Список итоговых колонок
.head 5 -  String: strSumColumn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Columns types
.head 5 -  String: sTmpColTypes[*]
.head 4 +  Actions
.head 5 -  Return ExportTableWithColTypes(hWndTable, strTableHeader, sOutFileName, strSumColumn, sTmpColTypes)
.head 3 +  Function: InitExportToFile
.head 4 -  Description: Инициализируются переменные и выполняются все функции, которые нужны для експорта
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  String: sOutFileName   !Имя выходного файла
.head 5 -  String: sFileHeader    !Заголовок в файле експорта
.head 5 -  String: sMetadata      ! Описание колонок
.head 5 -  File Handle: hF ! Для дебуга
.head 5 -  Boolean: bDebug!Для дебуга
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRet
.head 4 +  Actions
.head 5 -  ! == инициализация (без этого никуда :) )
.head 5 -  Set nRet = Init(sOutFileName)
.head 5 +  If bDebug
.head 6 -  Call SalFilePutStr(hF, 'ExportTable. Init - ' || SalNumberToStrX(nRet, 0))
.head 5 -  ! == установка метадаты (запускается один раз перед экспортом)
.head 5 +  If bDebug
.head 6 -  Call SalFilePutStr(hF, 'ExportTable. sMetadata=>' || sMetadata)
.head 5 -  Set nRet = SetMetadata(sMetadata)
.head 5 +  If bDebug
.head 6 -  Call SalFilePutStr(hF, 'ExportTable. SetMetadata - ' || SalNumberToStrX(nRet, 0))
.head 5 -  ! ! == установка заголовка
.head 5 -  Set nRet = SetHeaderText(sFileHeader)
.head 3 +  Function: ExportTableWithColTypes		! __exported
.head 4 -  Description: Экспорт данных из таблицы
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! Таблица
.head 5 -  Window Handle: hWndTable
.head 5 -  ! Заголовок
.head 5 -  String: strTableHeader
.head 5 -  ! Имя выходного файла
.head 5 -  String: sOutFileName
.head 5 -  ! Список итоговых колонок
.head 5 -  String: strSumColumn
.head 5 -  ! Columns types
.head 5 -  String: sColTypes[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nOutputGroupSize	! Размер группы строк, после экспорта которых выдается событие в hTargetWin
.head 5 -  String: sDecimal		! Десятичный разделитель
.head 5 -  !
.head 5 -  Number: nRow
.head 5 -  ! Кол-во строк в таблице
.head 5 -  Number: nRowCount
.head 5 -  ! Кол-во листов по 65000 строк
.head 5 -  Number: nBookCount
.head 5 -  !
.head 5 -  String: sDrive
.head 5 -  String: sDir
.head 5 -  String: sFile
.head 5 -  String: sExt
.head 5 -  ! оригтнальное имя выходного файла (к нему будет дописываться кол-во листов)
.head 5 -  String: sOriginalOutFileName
.head 5 -  !
.head 5 -  Window Handle: hWndProgress
.head 5 -  !
.head 5 -  : cColList[*]
.head 6 -  Class: cTablePrintMetadata
.head 5 -  Window Handle: hWndObject
.head 5 -  Number: nPos
.head 5 -  Number: nMaxPos
.head 5 -  Number: nColType
.head 5 -  Number: nColFormat
.head 5 -  Number: nColWidth
.head 5 -  Number: nRet
.head 5 -  !
.head 5 -  String: sTblName
.head 5 -  String: sColName
.head 5 -  String: sColSemantic
.head 5 -  String: sColType
.head 5 -  String: sColFormat
.head 5 -  String: sColWidth
.head 5 -  String: sColGroupFlag
.head 5 -  String: sMetadata
.head 5 -  String: sHeader
.head 5 -  Number: i
.head 5 -  String: sStrRow
.head 5 -  !
.head 5 -  String: strTmp
.head 5 -  String: strPicture
.head 5 -  Number: nColTypesNum
.head 5 -  Number: nMaxRowsPerFile  ! максимальное кол-во строк для одного файла
.head 5 -  Number: nSpliterSearch  ! =0  ищем в верхнем окне, -1 ищем в нижинем окне
.head 5 -  File Handle: hF
.head 5 -  Boolean: bDebug
.head 5 -  Boolean: bRowsExist
.head 5 -  Boolean: firstSpliterTable
.head 5 -  Number: nCurrTable
.head 5 -  Number: nHeaderOneLine ! =1 хедер в исходящем XLS отчете печатается в одну лининию (как по-старому), 
                       ! =0 по-умолчанию, как по-новому (все реквизиты хедера печатаем в разные строки)
.head 5 -  String: sHeaderDelim
.head 4 +  Actions
.head 5 -  ! Set bDebug = TRUE
.head 5 -  Set nOutputGroupSize = 50 ! Размер группы строк, после экспорта которых выдается событие в hWndProgress
.head 5 -  Set sDecimal = SalStrMidX(SalNumberToStrX(1.1, 1), 1, 1) ! Десятичный разделитель
.head 5 -  Set nRowCount = 0    ! кол-во строк в таблице
.head 5 -  Set nBookCount = 0   ! Кол-во листов по 65000 строк
.head 5 -  Set nMaxRowsPerFile = 65000
.head 5 -  Set bRowsExist = TRUE
.head 5 -  Set nSpliterSearch = 0
.head 5 -  !
.head 5 -  Set i = 0
.head 5 +  While SalTblFindNextRow(hWndTable, i, 0, 0)
.head 6 -  Set i = i + 1
.head 5 +  If i > nMaxRowsPerFile
.head 6 +  If SalMessageBox(SalNumberToStrX(i, 0) || ' строк для выгрузки!' || SalNumberToChar(13) || SalNumberToChar(10) || 'Экспортировать в несколько файлов?', 'Внимание', MB_IconQuestion | MB_YesNo) = IDNO
.head 7 -  Set nMaxRowsPerFile = -1
.head 5 -  !
.head 5 -  ! Имя выходного файла
.head 5 +  If sOutFileName = STRING_Null
.head 6 -  Set sOutFileName = GetPrnDir() || '\\ld'  !! префикс ld - список документов СЭП
.head 6 -  Set sOutFileName = sOutFileName || SalFmtFormatDateTime(SalDateCurrent() ,'hhhmmss') || 
    '.D' || SalStrRightX('0' || SalNumberToStrX(SalDateDay(SalDateCurrent()), 0), 2)
.head 5 +  If bDebug
.head 6 +  If not SalFileOpen(hF, GetPrnDir()  || '\\msoffice.log', OF_Write | OF_Text)
.head 7 -  Call SalMessageBox('Неможливо відкрити файл ' || GetPrnDir()  || '\\tst.txt', 'Ошибка!', MB_IconStop | MB_Ok)
.head 7 -  Return FALSE
.head 6 -  Call SalFilePutStr(hF, 'sOutFileName=>'   || sOutFileName)
.head 6 -  Call SalFilePutStr(hF, 'strTableHeader=>' || strTableHeader)
.head 5 -  Call VisDosSplitPath(sOutFileName, sDrive, sDir, sFile, sExt)
.head 5 -  Set sOriginalOutFileName = sFile
.head 5 -  !
.head 5 -  Set hWndProgress = SalCreateWindow(frm_Progress, hWndMDI)
.head 5 -  ! == Запуск приложения...
.head 5 -  Call SalSendMsg(hWndProgress, SAM_User, 0, -1)
.head 5 -  !
.head 5 -  ! == table name
.head 5 -  Call SalGetItemName(hWndTable, sTblName)
.head 5 +  If bDebug
.head 6 -  Call SalFilePutStr(hF, 'ExportTable. sTblName=>' || sTblName)
.head 5 -  Set i = 0
.head 5 -  Call SalArrayGetUpperBound(sColTypes, 1, nColTypesNum)
.head 5 -  Set nMaxPos = 0
.head 5 -  Set hWndObject = SalGetFirstChild(hWndTable, TYPE_TableColumn)
.head 5 -  !
.head 5 -  ! Наполнение массива cColList (спосок полей и их свойств)
.head 5 +  While hWndObject != hWndNULL
.head 6 +  If bDebug
.head 7 -  Call SalFilePutStr(hF, 'ExportTable. column')
.head 6 +  If SalIsWindowVisible(hWndObject) or bIncludeAllColumns
.head 7 -  Set nPos = SalTblQueryColumnPos(hWndObject)
.head 7 -  ! == column handle
.head 7 -  Set cColList[nPos-1].hColWnd = hWndObject
.head 7 -  ! == column name
.head 7 -  Call SalGetItemName(hWndObject, sColName)
.head 7 +  If not sColName
.head 8 -  Set sColName = sTblName || '_col' || SalNumberToStrX(nPos-1, 0)
.head 7 -  Set cColList[nPos-1].sColName = sColName
.head 7 -  ! column semantic
.head 7 -  Call SalTblGetColumnTitle(hWndObject, sColSemantic, 100)
.head 7 -  ! Исключение разделителей внутри заголовков колонок
.head 7 -  Set sColSemantic = VisStrSubstitute(sColSemantic, strDelimiter, ' ')
.head 7 -  ! Устранение переносов строк
.head 7 -  Set sColSemantic = VisStrSubstitute(sColSemantic, SalNumberToChar(13) || SalNumberToChar(10), ' ')
.head 7 -  Set cColList[nPos-1].sColSemantic = sColSemantic
.head 7 -  ! == column type, column format
.head 7 -  ! -- если заданы типы колонок, используем их
.head 7 +  If nColTypesNum
.head 8 +  If sColTypes[i] = 'n'
.head 9 -  Set cColList[nPos-1].sColType = 'NU'
.head 9 -  Set cColList[nPos-1].sColFormat = ''
.head 8 +  Else If sColTypes[i] = 'd'
.head 9 -  Set cColList[nPos-1].sColType = 'D'
.head 9 -  Set cColList[nPos-1].sColFormat = 'yyyy-MM-dd'
.head 8 +  Else
.head 9 -  Set cColList[nPos-1].sColType = 'S'
.head 9 -  Set cColList[nPos-1].sColFormat = ''
.head 7 -  ! -- иначе определяем по таблице
.head 7 +  Else
.head 8 -  Set nColType = SalGetDataType(hWndObject)
.head 8 -  Set nColFormat = SalFmtGetFormat(hWndObject)
.head 8 +  If nColType = DT_Boolean or nColType = DT_Number
.head 9 +  If nColFormat = 4		! FMT_Format_Decimal
.head 10 -  Set cColList[nPos-1].sColType = 'N'
.head 10 -  Set cColList[nPos-1].sColFormat = '# ### ### ### ### ##0.00'
.head 10 -  ! Set cColList[nPos-1].sColFormat = ',#0.00'
.head 9 +  Else If nColFormat = 0		! FMT_Format_Unformatted
.head 10 -  Set cColList[nPos-1].sColType = 'NU'
.head 10 -  Set cColList[nPos-1].sColFormat = ''
.head 9 +  Else If nColFormat = -1		! FMT_Format_Picture
.head 10 -  Call SalFmtGetPicture(hWndObject, strPicture)
.head 10 -  ! т.к. SalFmtGetPicture возвращает корявый формат, заменяем все корявые символы на нормальные
.head 10 -  Set strPicture = VisStrSubstitute(strPicture, SalNumberToChar(15), '')
.head 10 -  Set strPicture = VisStrSubstitute(strPicture, SalNumberToChar(16), '')
.head 10 -  Set strPicture = VisStrSubstitute(strPicture, SalNumberToChar(1), ' ')
.head 10 -  Set strPicture = VisStrSubstitute(strPicture, SalNumberToChar(2), '.')
.head 10 -  Set strPicture = VisStrSubstitute(strPicture, sDecimal, '.')
.head 10 +  If strPicture
.head 11 -  ! разделитель разрядов
.head 11 +  If SalStrScan(strPicture, '# #') != -1
.head 12 -  Set cColList[nPos-1].sColFormat = '# ### ### ### ### ##0'
.head 12 -  ! Set cColList[nPos-1].sColFormat = ',#0'
.head 11 +  Else
.head 12 -  Set cColList[nPos-1].sColFormat = '###############0'
.head 11 -  ! десятичный разделитель
.head 11 +  If SalStrScan(strPicture, '.') != -1
.head 12 -  ! Set cColList[nPos-1].sColFormat = cColList[nPos-1].sColFormat || '.00'
.head 12 -  Set cColList[nPos-1].sColFormat = cColList[nPos-1].sColFormat || '.' || SalStrRepeatX('0', SalStrLength(strPicture) - SalStrScan(strPicture, '.') - 1)
.head 11 -  !
.head 11 +  If SalStrScan(strPicture, '.') = -1
.head 12 -  Set cColList[nPos-1].sColType = 'I'
.head 11 +  Else
.head 12 -  Set cColList[nPos-1].sColType = 'N'
.head 10 +  Else
.head 11 -  Set cColList[nPos-1].sColType = 'I'
.head 11 -  Set cColList[nPos-1].sColFormat = ''
.head 9 +  Else
.head 10 -  Set cColList[nPos-1].sColType = 'NU'
.head 10 -  Set cColList[nPos-1].sColFormat = ''
.head 8 +  Else If nColType = DT_DateTime
.head 9 +  If nColFormat = 2		! FMT_Format_Date
.head 10 -  Set cColList[nPos-1].sColType = 'D'
.head 10 -  Set cColList[nPos-1].sColFormat = 'dd/MM/yyyy'
.head 9 +  Else If nColFormat = 3		! FMT_Format_DateTime
.head 10 -  Set cColList[nPos-1].sColType = 'DT'
.head 10 -  Set cColList[nPos-1].sColFormat = 'dd/MM/yyyy hh:mm:ss'
.head 9 +  Else If nColFormat = 7		! FMT_Format_Time
.head 10 -  Set cColList[nPos-1].sColType = 'T'
.head 10 -  Set cColList[nPos-1].sColFormat = 'hh:mm:ss'
.head 9 +  Else If nColFormat = 0		! FMT_Format_Unformatted
.head 10 -  Set cColList[nPos-1].sColType = 'D'
.head 10 -  Set cColList[nPos-1].sColFormat = 'yyyy-MM-dd'
.head 9 +  Else If nColFormat = -1		! FMT_Format_Picture
.head 10 -  Call SalFmtGetPicture(hWndObject, strPicture)
.head 10 -  Set cColList[nPos-1].sColType = ''
.head 10 -  ! Разбираем формат на наличие даты
.head 10 +  If SalStrScan(strPicture, 'd') != -1 or SalStrScan(strPicture, 'YY') != -1
.head 11 -  Set cColList[nPos-1].sColType = 'D'
.head 10 -  ! Разбираем формат на наличие времени
.head 10 +  If SalStrScan(strPicture, 'hh') != -1
.head 11 -  Set cColList[nPos-1].sColType = cColList[nPos-1].sColType || 'T'
.head 10 -  Set cColList[nPos-1].sColFormat = VisStrSubstitute(VisStrSubstitute(SalStrTrimX(strPicture), 'hhhh', 'hh'), 'hhh', 'hh')
.head 9 +  Else
.head 10 -  Set cColList[nPos-1].sColType = 'D'
.head 10 -  Set cColList[nPos-1].sColFormat = 'dd/MM/yyyy'
.head 8 +  Else
.head 9 -  Set cColList[nPos-1].sColType = 'S'
.head 9 -  Set cColList[nPos-1].sColFormat = ''
.head 7 -  ! == column width
.head 7 -  Call SalTblQueryColumnWidth(hWndObject, nColWidth)
.head 7 -  ! Set cColList[nPos-1].sColWidth = SalNumberToStrX(nColWidth, 3)
.head 7 +  ! If SalStrMidX(cColList[nPos-1].sColType,0,1) = 'N'
.head 8 -  Set cColList[nPos-1].sColWidth = SalNumberToStrX(nColWidth*1.1, 3)
.head 7 +  ! Else
.head 8 -  Set cColList[nPos-1].sColWidth = SalNumberToStrX(nColWidth, 3)
.head 7 -  Set nColWidth = SalFormUnitsToPixels(hWndObject, nColWidth, FALSE)
.head 7 -  Set cColList[nPos-1].sColWidth = SalNumberToStrX(nColWidth, 3)
.head 7 -  ! == признак группировки по полю (тоже зарезервировано)
.head 7 -  Set cColList[nPos-1].sColGroupFlag = ''
.head 7 +  If bDebug
.head 8 -  Call SalFilePutStr(hF, 'ExportTable. sColName=>' || cColList[nPos-1].sColName ||
' sColSemantic=>' || cColList[nPos-1].sColSemantic ||
' sColType=>' || cColList[nPos-1].sColType ||
' sColFormat=>' || cColList[nPos-1].sColFormat)
.head 7 +  If nPos > nMaxPos
.head 8 -  Set nMaxPos = nPos
.head 6 -  Set i = i + 1
.head 6 -  Set hWndObject = SalGetNextChild(hWndObject, TYPE_TableColumn)
.head 5 -  !
.head 5 -  !
.head 5 -  ! определение строки метадаты (заголовков полей)
.head 5 -  Set sMetadata = ''
.head 5 -  Set i = 0
.head 5 +  While i < nMaxPos
.head 6 +  If cColList[i].sColName
.head 7 -  Set sMetadata = sMetadata ||
cColList[i].sColName      || '|' ||
cColList[i].sColSemantic  || '|' ||
cColList[i].sColType      || '|' ||
cColList[i].sColFormat    || '|' ||
cColList[i].sColWidth     || '|' ||
cColList[i].sColGroupFlag || '|' || strDelimiter
.head 6 -  Set i = i + 1
.head 5 -  !
.head 5 -  ! Как печатать хедер-информацию, =0 - в одну строку, =1 - в несколько строк
.head 5 -  ! Set nHeaderOneLine =  GetGlobalOptionEx('PRNHDR')
.head 5 -  ! Заголовок для файла
.head 5 +  ! If nHeaderOneLine = 0
.head 6 -  Set sHeaderDelim = strDelimiter
.head 5 +  ! Else
.head 6 -  Set sHeaderDelim = ' '
.head 5 -  !
.head 5 -  Set sHeaderDelim = strDelimiter
.head 5 -  Set sHeader = GetBankName()                
             || sHeaderDelim || ' Пользователь: ' || GetUserRealName() 
             || sHeaderDelim || ' Дата: '|| SalFmtFormatDateTime(SalDateCurrent(), 'dd.MM.yyyy') 
             || sHeaderDelim || ' Время: ' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss') 
             || strDelimiter || strTableHeader
.head 5 -  !
.head 5 -  !
.head 5 -  ! Выполнение ф-ций для инициализации експорта в новый файл
.head 5 -  Call InitExportToFile(sOutFileName, sHeader, sMetadata, hF, bDebug)
.head 5 -  !
.head 5 -  !
.head 5 -  ! Экспорт начат...
.head 5 -  Call SalSendMsg(hWndProgress, SAM_User, 0, 0)
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  ! Установим переменную - как отпечатать данные, если таблица содержит сплиттер
.head 5 -  ! если firstSpliterTable  = 0(G_FIRST_BOTTOM) (печатать нижнюю таблицу сначала - как было по-умолчанию)
.head 5 -  ! если firstSpliterTable  = 1(G_FIRST_TOP) (печатать вернхнюю , а затем нижнюю)
.head 5 -  Set firstSpliterTable =  GetGlobalOptionEx('PRNSPLT')
.head 5 -  !
.head 5 +  If firstSpliterTable  = G_FIRST_BOTTOM
.head 6 -  Set nRow = TBL_MinRow  ! Печатать сначала данные нижнего окна сплиттера
.head 6 -  Set nCurrTable = G_BOTTOM_TABLE
.head 5 +  Else
.head 6 -  Set nRow = -1 ! Печатать сначала данные верхнего окна сплиттера
.head 6 -  Set nCurrTable =  G_TOP_TABLE
.head 5 -  !
.head 5 -  !
.head 5 -  ! Call SalMessageBox('firstSpliterTable='||SalNumberToStrX(firstSpliterTable,0)||' nrow='||SalNumberToStrX(nRow, 0), 'nRow = !',  MB_Ok)
.head 5 -  ! Проход по каждой строке таблицы
.head 5 +  Loop
.head 6 -  Set bRowsExist = SalTblFindNextRow(hWndTable, nRow, 0, 0)
.head 6 -  !
.head 6 -  ! Call SalMessageBox('nRow='||SalNumberToStrX(nRow,0),'', 0)
.head 6 -  ! если уже строк нету
.head 6 +  If NOT bRowsExist
.head 7 -  ! Call SalMessageBox('If NOT bRowsExist','',0)
.head 7 -  ! текущая таблица верняя
.head 7 +  If nCurrTable = G_TOP_TABLE
.head 8 -  ! Call SalMessageBox('nCurrTable = G_TOP_TABLE','',0)
.head 8 -  ! посмотрим на нижнюю часть
.head 8 -  Set nRow = TBL_MinSplitRow
.head 8 -  Set nCurrTable = G_BOTTOM_TABLE
.head 8 -  ! Call SalMessageBox('setting nrow='||SalNumberToStrX(nRow, 0), '!',  MB_Ok)
.head 8 -  Set bRowsExist = SalTblFindNextRow(hWndTable, nRow, 0, 0)
.head 8 -  ! И в нижнем сплитере тоже ничего нету
.head 8 +  If NOT bRowsExist
.head 9 -  Break
.head 7 -  ! текущая таблица нижняя 
.head 7 +  Else
.head 8 -  ! Call SalMessageBox('nCurrTable <> G_TOP_TABLE','',0)
.head 8 -  Break
.head 6 -  !
.head 6 -  !
.head 6 -  ! Строки еще есть, но порядковый номер строки уже положительный(то-есть переход на верхнюю таблицу)
.head 6 -  ! если это так и у нас текущая настройка печатает сначала верхнюю таблицу - выходим
.head 6 +  If nRow >= 0 and nCurrTable = G_BOTTOM_TABLE and firstSpliterTable =  G_TOP_TABLE
.head 7 -  ! Call SalMessageBox('Break','',0)
.head 7 -  Break
.head 6 -  !
.head 6 -  !
.head 6 -  Call SalTblSetContext(hWndTable, nRow)
.head 6 -  Set sStrRow = ''
.head 6 -  Set i = 0
.head 6 -  ! По каждой колоке формируем строку
.head 6 +  While i < nMaxPos
.head 7 +  If cColList[i].sColName
.head 8 -  Call SalGetWindowText(cColList[i].hColWnd, strTmp, 2000)
.head 8 -  ! Это заменяется не пробел а хитрый сивол разделитель групп разрядов
.head 8 -  Set strTmp = VisStrSubstitute(strTmp, ' ', '')
.head 8 +  If SalStrLength(strTmp) = 0
.head 9 -  Set strTmp = ''
.head 8 +  Else
.head 9 -  ! Если число - преобразование и суммирование
.head 9 -  ! or cColList[i].sColType = 'S' and ColValueIsValidNumber(strTmp)
.head 9 +  If cColList[i].sColType = 'N' or cColList[i].sColType = 'I' or cColList[i].sColType = 'NU'
.head 10 -  ! Исключение пробелов внутри значений чисел (при разделении на группы разрядов)
.head 10 -  Set strTmp = SalStrTrimX(VisStrSubstitute(strTmp, ' ', ''))
.head 10 -  ! Суммирование
.head 10 +  ! If bCreateSummary[nColNo-1]	! Вычисляем ИТОГИ
.head 11 -  Set nSummary[nColNo-1] = nSummary[nColNo-1] + SalStrToNumber(strTmp)
.head 8 -  ! Исключение разделителей внутри значений колонок
.head 8 -  Set strTmp = VisStrSubstitute(strTmp, strDelimiter, ' ')
.head 8 -  !
.head 8 -  Set sStrRow = sStrRow || strTmp || strDelimiter
.head 7 -  Set i = i + 1
.head 6 +  If bDebug
.head 7 -  Call SalFilePutStr(hF, 'ExportTable. sStrRow=>' || sStrRow)
.head 6 -  Call SetRow(sStrRow)
.head 6 -  ! Call SalMessageBox(sStrRow,'',0)
.head 6 +  If hWndProgress != hWndNULL AND SalNumberMod(nRow, nOutputGroupSize) = 0
.head 7 -  ! == nRow строк подготовлено для экспорта.
.head 7 -  Call SalSendMsg(hWndProgress, SAM_User, 0, nRow)
.head 6 -  Set nRowCount = nRowCount + 1
.head 6 -  !
.head 6 -  ! Достигли максимального кол-ва строк - инициализируем печать в другой файл
.head 6 +  If nRowCount = nMaxRowsPerFile
.head 7 -  Set nRowCount = 0
.head 7 -  ! == вызывает диалог экспорта, печатает, освобождает ресурсы
.head 7 -  Set nRet = Finish()
.head 7 +  If bDebug
.head 8 -  Call SalFilePutStr(hF, 'ExportTable. Finish - ' || SalNumberToStrX(nRet, 0))
.head 8 -  Call SalFileClose(hF)
.head 7 -  Set nBookCount = nBookCount + 1
.head 7 -  ! -- имя нового файла для єкспорта
.head 7 -  Set sOutFileName = VisDosMakePath(sDrive, sDir, sOriginalOutFileName || SalNumberToStrX(nBookCount,0), sExt)
.head 7 +  If bDebug
.head 8 +  If not SalFileOpen(hF, GetPrnDir()  || '\\msoffice.log', OF_Write | OF_Text)
.head 9 -  Call SalMessageBox('Неможливо відкрити файл ' || GetPrnDir()  || '\\tst.txt', 'Ошибка!', MB_IconStop | MB_Ok)
.head 9 -  Return FALSE
.head 8 -  Call SalFilePutStr(hF, 'sOutFileName=>'   || sOutFileName)
.head 8 -  Call SalFilePutStr(hF, 'strTableHeader=>' || strTableHeader)
.head 7 -  !
.head 7 -  ! Выполнение ф-ций для инициализации експорта в новый файл
.head 7 -  Call InitExportToFile(sOutFileName, sHeader, sMetadata, hF, bDebug)
.head 5 -  !
.head 5 -  !
.head 5 +  If bDebug
.head 6 -  Call SalFilePutStr(hF, 'ExportTable. sStrRow - OK')
.head 5 -  Call SalDestroyWindow(hWndProgress)
.head 5 -  !
.head 5 -  ! == вызывает диалог экспорта, печатает, освобождает ресурсы
.head 5 -  Set nRet = Finish()
.head 5 +  If bDebug
.head 6 -  Call SalFilePutStr(hF, 'ExportTable. Finish - ' || SalNumberToStrX(nRet, 0))
.head 6 -  Call SalFileClose(hF)
.head 5 -  ! == Экспорт завершен!
.head 5 -  Call SalSendMsg(hWndProgress, SAM_User, 0, -2)
.head 5 -  !
.head 5 -  Return TRUE
.head 3 -  !
.head 3 +  Function: DateTimeToString			! __exported
.head 4 -  Description: Разложить дату на строку даты и времени
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Date/Time: dtInDate
.head 5 -  Receive String: strDate
.head 5 -  Receive String: strTime
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strYear
.head 5 -  String: strMonth
.head 5 -  String: strDay
.head 5 -  String: strHours
.head 5 -  String: strMinutes
.head 5 -  String: strSeconds
.head 4 +  Actions
.head 5 -  Set strYear = SalNumberToStrX( SalDateYear( dtInDate ), 0 )
.head 5 +  If SalStrLength( strYear ) < 2
.head 6 -  Set strYear='0' || strYear
.head 5 -  Set strMonth = SalNumberToStrX( SalDateMonth( dtInDate ), 0 )
.head 5 +  If SalStrLength( strMonth ) < 2
.head 6 -  Set strMonth='0' || strMonth
.head 5 -  Set strDay = SalNumberToStrX( SalDateDay( dtInDate ), 0 )
.head 5 +  If SalStrLength( strDay ) < 2
.head 6 -  Set strDay='0' || strDay
.head 5 -  Set strHours = SalNumberToStrX( SalDateHour( dtInDate ), 0 )
.head 5 +  If SalStrLength( strHours ) < 2
.head 6 -  Set strHours='0' || strHours
.head 5 -  Set strMinutes = SalNumberToStrX( SalDateMinute( dtInDate ), 0 )
.head 5 +  If SalStrLength( strMinutes ) < 2
.head 6 -  Set strMinutes='0' || strMinutes
.head 5 -  Set strSeconds = SalNumberToStrX( SalDateSecond( dtInDate ), 0 )
.head 5 +  If SalStrLength( strSeconds ) < 2
.head 6 -  Set strSeconds='0' || strSeconds
.head 5 -  Set strDate = strDay || '.' || strMonth || '.' || strYear
.head 5 -  Set strTime = strHours || ':' || strMinutes || ':' || strSeconds
.head 3 -  ! Для ред. RTF
.head 3 +  Function: artfRunExp				! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call artfRun()
.head 3 +  Function: artfKillExp				! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call artfKill()
.head 3 +  Function: artfClearListExp			! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call artfClearList()
.head 3 +  Function: artfAddTagExp				! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  String: sTag
.head 5 -  String: sName
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call artfAddTag(sTag, sName)
.head 3 +  Function: artfEditRTFFileExp			! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilename
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return artfEditRTFFile(sFilename)
.head 3 -  ! Вспомогательные ф-и 
.head 3 +  Function: ColValueIsValidNumber
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strValue
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrIsValidNumber( SalStrTrimX( VisStrSubstitute( strValue, ' ', '' ) ) )
.head 3 +  Function: FmtStrToDateTime
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 +  Parameters
.head 5 -  String: strDateTime
.head 5 -  String: strMask
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nDay
.head 5 -  Number: nMonth
.head 5 -  Number: nYear
.head 5 -  Number: nHour
.head 5 -  Number: nMinute
.head 5 -  Number: nSecond
.head 5 -  !
.head 5 -  Number: i
.head 5 -  String: strMaskChar
.head 5 -  String: strIntmd
.head 5 -  Number: nVal
.head 5 -  !
.head 5 -  Number: pos1
.head 5 -  Number: posN
.head 4 +  Actions
.head 5 -  Set nDay    = 0
.head 5 -  Set nMonth  = 0
.head 5 -  Set nYear   = 0
.head 5 -  Set nHour   = 0
.head 5 -  Set nMinute = 0
.head 5 -  Set nSecond = 0
.head 5 -  !
.head 5 -  Call SalStrTrim(strDateTime, strDateTime)
.head 5 -  Call SalStrTrim(strMask, strMask)
.head 5 -  !
.head 5 -  Set i = 0
.head 5 +  While i < SalStrLength(strMask)
.head 6 -  Set strMaskChar = SalStrMidX(strMask, i, 1)
.head 6 -  Set strIntmd = strMaskChar
.head 6 -  Set pos1= i
.head 6 +  While strMaskChar = strIntmd AND  i < SalStrLength(strMask)
.head 7 -  Set i = i + 1
.head 7 -  Set strMaskChar = SalStrMidX(strMask, i, 1)
.head 6 -  Set posN = i - 1
.head 6 -  Set nVal = SalStrToNumber(SalStrMidX(strDateTime, pos1, posN - pos1+1))
.head 6 +  If strIntmd = 'd'
.head 7 -  Set nDay = nVal
.head 6 +  Else If strIntmd = 'M'
.head 7 -  Set nMonth = nVal
.head 6 +  Else If strIntmd = 'y'
.head 7 -  Set nYear = nVal
.head 6 +  Else If strIntmd = 'h'
.head 7 -  Set nHour = nVal
.head 6 +  Else If strIntmd = 'm'
.head 7 -  Set nMinute = nVal
.head 6 +  Else If strIntmd = 's'
.head 7 -  Set nSecond = nVal
.head 5 +  If nDay != 0 and nMonth != 0
.head 6 +  If nYear < 50
.head 7 -  Set nYear = 2000 + nYear
.head 6 +  Else If nYear < 100
.head 7 -  Set nYear = 1900 + nYear
.head 5 +  Else
.head 6 -  Set nDay   = 1
.head 6 -  Set nMonth = 1
.head 6 -  Set nYear  = 1899
.head 5 -  Return SalDateConstruct(nYear, nMonth, nDay, nHour, nMinute, nSecond)
.head 2 -  Named Menus
.head 2 +  Class Definitions
.head 3 +  Functional Class: cReportConstructor
.head 4 -  Description: Конктруктор отчетов
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  ! Настройки отчета
.head 5 -  Boolean: IncludePageHeader
.head 5 -  Boolean: IncludeCaption
.head 5 -  Boolean: IncludeParams
.head 5 -  ! Исходные данные
.head 5 -  ! Заголовок
.head 5 -  String: strCaption
.head 5 -  ! Исходная таблица
.head 5 -  Window Handle: tblSource
.head 5 -  ! Тип целевого приложения
.head 5 -  Number: nTargetApp
.head 5 -  ! Номера сумируемых колонок
.head 5 -  String: strSummary
.head 5 -  ! Окно которому в процессе экспорта посылается SAM_User
.head 5 -  ! с lParam = количеству отправленых строк
.head 5 -  Window Handle: hTargetWindow
.head 5 -  ! Список типов колонок
.head 5 -  String: sColTypesList
.head 5 -  ! Внутренние переменные
.head 5 -  Number: nColCount
.head 5 -  Number: nXlsRowNum
.head 4 +  Functions
.head 5 -  ! Ключевой метод
.head 5 +  Function: CreateReport
.head 6 -  Description: Создает отчет (Ключевой метод)
.head 6 +  Returns
.head 7 -  Boolean: bRet
.head 6 +  Parameters
.head 7 -  ! Application type
.head 7 -  Number: nTarget
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  ! Set strSummary='1,2,3'
.head 7 -  Set nTargetApp=nTarget
.head 7 -  Set nXlsRowNum=1
.head 7 -  Call SalSendMsg( hTargetWindow, SAM_User, 0, -1 )
.head 7 +  If NOT OpenApplication()
.head 8 +  If nTargetApp=atWord
.head 9 -  Call SalMessageBox( wrdErrorMessage(), 'Ошибка Word', MB_Ok )
.head 9 -  Return FALSE
.head 8 +  If nTargetApp=atExcel
.head 9 -  Call SalMessageBox( xlsErrorMessage(), 'Ошибка Excel', MB_Ok )
.head 9 -  Return FALSE
.head 7 -  Call SalSendMsg( hTargetWindow, SAM_User, 0, 0 )
.head 7 -  Call SetPageOrientation()
.head 7 +  If IncludePageHeader
.head 8 -  Call CreatePageHeader()
.head 7 +  If IncludeCaption
.head 8 -  Call CreateCaption()
.head 7 +  If IncludeParams
.head 8 -  Call CreateParams()
.head 7 -  Call CreateTable()
.head 7 -  Call SalSendMsg( hTargetWindow, SAM_User, 0, -2 )
.head 7 -  Call ShowApplication(  )
.head 7 -  Return TRUE
.head 5 -  ! Внутренние методы
.head 5 +  Function: OpenApplication
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean: bRet
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Window Handle: hColumn
.head 6 +  Actions
.head 7 +  If nTargetApp=atWord
.head 8 +  If wrdRun( FALSE )!=0
.head 9 -  Return FALSE
.head 8 +  If wrdAddDoc()!=0
.head 9 -  Call wrdClose()
.head 9 -  Return FALSE
.head 7 +  If nTargetApp=atExcel
.head 8 +  If xlsRun( FALSE )!=0
.head 9 -  Return FALSE
.head 8 +  If xlsAddBook()!=0
.head 9 -  Call xlsClose()
.head 9 -  Return FALSE
.head 7 -  Set nColCount=0
.head 7 -  Set hColumn=SalGetFirstChild( tblSource, TYPE_TableColumn )
.head 7 +  If hColumn!= hWndNULL
.head 8 +  Loop
.head 9 +  If bIncludeAllColumns OR SalIsWindowVisible( hColumn )	! Учет только видимых колонок либо по флагу
.head 10 -  Set nColCount=nColCount+1
.head 9 -  Set hColumn=SalGetNextChild( hColumn, TYPE_TableColumn )
.head 9 +  If hColumn= hWndNULL
.head 10 -  Break
.head 7 -  Return TRUE
.head 5 +  Function: SetPageOrientation
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If (nColCount > 3) AND (nTargetApp=atWord)
.head 8 -  Call wrdSetPageOrientation( wrdLandscape )
.head 5 +  Function: CreatePageHeader
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: strDate
.head 7 -  String: strTime
.head 7 -  String: strHeader
.head 6 +  Actions
.head 7 -  Call DateTimeToString(SalDateCurrent (), strDate, strTime )
.head 7 +  If nTargetApp=atWord
.head 8 -  Call wrdCreatePrimaryHeader( GetBankName() || '  Пользователь: ' || GetUserRealName() || ' Дата: ' || strDate || '  Время: ' || strTime )
.head 7 +  If nTargetApp=atExcel
.head 8 -  Set strHeader=GetBankName() || '  Пользователь: ' || GetUserRealName() || ' Дата: ' || strDate || '  Время: ' || strTime
.head 8 -  Call xlsMerge( 1, nXlsRowNum, nColCount, nXlsRowNum )
.head 8 -  ! Call xlsSetCell( 1, nXlsRowNum, strHeader, STRING_Null )
.head 8 -  Call xlsSetCell( 1, nXlsRowNum, strHeader )
.head 8 -  Call xlsFormatCellRange( 1, nXlsRowNum, nColCount, nXlsRowNum, 'Times New Roman', 1,0, xlsCenter,18)
.head 8 -  Set nXlsRowNum=nXlsRowNum+1
.head 5 +  Function: CreateCaption
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp=atWord
.head 8 -  Call wrdAddString(strCaption, 'Times New Roman', 1, 1, wrdCenter, 24 )
.head 8 -  Call wrdAddString(' ', 'Times New Roman', 1, 1, wrdCenter, 24 )
.head 7 +  If nTargetApp=atExcel
.head 8 -  Call xlsMerge( 1, nXlsRowNum, nColCount, nXlsRowNum )
.head 8 -  ! Call xlsSetCell( 1, nXlsRowNum, strCaption, STRING_Null )
.head 8 -  Call xlsSetCell( 1, nXlsRowNum, strCaption )
.head 8 -  Call xlsFormatCellRange(  1, nXlsRowNum, nColCount, nXlsRowNum, 'Times New Roman', 1,0, xlsCenter,18)
.head 8 -  Set nXlsRowNum=nXlsRowNum+1
.head 5 +  Function: CreateParams
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 -  Actions
.head 5 +  Function: CreateTable
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp=atWord
.head 8 -  Call wrdAddString( ' ', 'Times New Roman', 0, 0, 2,8 )
.head 8 -  Call wrdExportTbl( tblSource, 0, strSummary, hTargetWindow )
.head 7 +  If nTargetApp=atExcel
.head 8 -  Call xlsExportTbl( tblSource, 0, nXlsRowNum, strSummary, sColTypesList, hTargetWindow )
.head 5 +  Function: ShowApplication
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp=atWord
.head 8 -  Call wrdShow(  )
.head 7 +  If nTargetApp=atExcel
.head 8 -  Call xlsShow(  )
.head 5 +  Function: LoadDoc
.head 6 -  Description: Загружает существующий документ
.head 6 +  Returns
.head 7 -  Boolean: bRet
.head 6 +  Parameters
.head 7 -  String: sDocPath
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp = atExcel
.head 8 -  Call xlsDelActiveBook()
.head 8 +  If xlsLoadBook(sDocPath) !=0
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Return TRUE
.head 5 +  Function: SetTableCell
.head 6 -  Description: Устанавливает значение ячейки таблицы
.head 6 +  Returns
.head 7 -  Boolean: nRet
.head 6 +  Parameters
.head 7 -  Number: X
.head 7 -  Number: Y
.head 7 -  String: Text
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp = atExcel
.head 8 +  ! If xlsSetCell(X, Y, Text, sColTypesList) != 0
.head 9 -  Return FALSE
.head 8 +  If xlsSetCell(X, Y, Text) != 0
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Return TRUE
.head 5 +  Function: SetTableCellRange
.head 6 -  Description: Заполняет строку таблицы
.head 6 +  Returns
.head 7 -  Boolean: nRet
.head 6 +  Parameters
.head 7 -  Number: X
.head 7 -  Number: Y
.head 7 -  Number: Len
.head 7 -  String: Data
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp = atExcel
.head 8 +  ! If xlsSetCellRange(X, Y, Len, Data, sColTypesList) != 0
.head 9 -  Return FALSE
.head 8 +  If xlsSetCellRange(X, Y, Len, Data) != 0
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Return TRUE
.head 5 +  Function: CloseApplication
.head 6 -  Description: Закрывает приложение
.head 6 +  Returns
.head 7 -  Boolean: bRet
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nTargetApp = atExcel
.head 8 +  If xlsClose() != 0
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Return TRUE
.head 3 +  Functional Class: cTablePrintMetadata
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Window Handle: hColWnd
.head 5 -  String: sColName
.head 5 -  String: sColSemantic
.head 5 -  String: sColType
.head 5 -  String: sColFormat
.head 5 -  String: sColWidth
.head 5 -  String: sColGroupFlag
.head 5 -  ! Boolean: bCreateSummary
.head 4 -  Functions
.head 2 +  Default Classes
.head 3 -  MDI Window: cBaseMDI
.head 3 -  Form Window:
.head 3 -  Dialog Box:
.head 3 -  Table Window:
.head 3 -  Quest Window:
.head 3 -  Data Field:
.head 3 -  Spin Field:
.head 3 -  Multiline Field:
.head 3 -  Pushbutton:
.head 3 -  Radio Button:
.head 3 -  Option Button:
.head 3 -  Check Box:
.head 3 -  Child Table:
.head 3 -  Quest Child Window: cQuickDatabase
.head 3 -  List Box:
.head 3 -  Combo Box:
.head 3 -  Picture:
.head 3 -  Vertical Scroll Bar:
.head 3 -  Horizontal Scroll Bar:
.head 3 -  Column:
.head 3 -  Background Text:
.head 3 -  Group Box:
.head 3 -  Line:
.head 3 -  Frame:
.head 3 -  Custom Control:
.head 2 +  Application Actions
.head 3 +  On SAM_AppStartup
.head 4 -  Call Unlock( 'UnlockDll' )
.head 4 -  Set bIncludeAllColumns=FALSE
.head 1 +  Form Window: Main
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Auto Test
.head 2 -  Icon File:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Automatically Created at Runtime? Yes
.head 3 -  Initial State: Normal
.head 3 -  Maximizable? Yes
.head 3 -  Minimizable? Yes
.head 3 -  System Menu? Yes
.head 3 -  Resizable? Yes
.head 3 -  Window Location and Size
.head 4 -  Left:   3.463"
.head 4 -  Top:    2.615"
.head 4 -  Width:  10.067"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 3.536"
.head 4 -  Height Editable? Yes
.head 3 -  Form Size
.head 4 -  Width:  Default
.head 4 -  Height: Default
.head 4 -  Number of Pages: Dynamic
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description:
.head 2 -  Named Menus
.head 2 -  Menu
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Child Table: tbl1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.083"
.head 6 -  Top:    0.071"
.head 6 -  Width:  7.8"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 2.0"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  View: Table
.head 5 -  Allow Row Sizing? No
.head 5 -  Lines Per Row: Default
.head 4 -  Memory Settings
.head 5 -  Maximum Rows in Memory: 32000
.head 5 -  Discardable? Yes
.head 4 -  Contents
.head 4 -  Functions
.head 4 -  Window Variables
.head 4 -  Message Actions
.head 3 -  Background Text: BARS/
.head 4 -  Resource Id: 21474
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    2.179"
.head 5 -  Width:  0.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Background Text: @
.head 4 -  Resource Id: 21475
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   1.383"
.head 5 -  Top:    2.179"
.head 5 -  Width:  0.233"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: df1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? Yes
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.683"
.head 6 -  Top:    2.155"
.head 6 -  Width:  0.7"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Left
.head 5 -  Format: Invisible
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 +  Data Field: df2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? Yes
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   1.683"
.head 6 -  Top:    2.155"
.head 6 -  Width:  0.933"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Left
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 +  Pushbutton: pb0
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: 1. Connect
.head 4 -  Window Location and Size
.head 5 -  Left:   2.783"
.head 5 -  Top:    2.155"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Set SqlDatabase=df2
.head 6 -  Set SqlUser='bars'
.head 6 -  Set SqlPassword=df1
.head 6 -  Call SqlConnect( hSqlH )
.head 3 +  Pushbutton: pb1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: 2. Fetch
.head 4 -  Window Location and Size
.head 5 -  Left:   4.083"
.head 5 -  Top:    2.155"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalTblPopulate( tbl1, hSqlH, 'select * from customer where rownum<=10', TBL_FillNormal )
.head 6 -  ! Call SalTblInsertRow( tbl1, 0 )
.head 6 -  ! Set tbl1.col4='10-10-1976'
.head 6 -  ! Set tbl1.col3='12345'
.head 6 -  ! Set tbl1.col2='1234567.89'
.head 6 -  ! Set tbl1.col1='This is a string!'
.head 6 -  ! Call SalTblInsertRow( tbl1, 0 )
.head 6 -  ! Set tbl1.col4='10-10-1976'
.head 6 -  ! Set tbl1.col3='12345'
.head 6 -  ! Set tbl1.col2='1234567.89'
.head 6 -  ! Set tbl1.col1='This is a string!'
.head 3 +  Pushbutton: pb2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: 3. Excel
.head 4 -  Window Location and Size
.head 5 -  Left:   5.383"
.head 5 -  Top:    2.155"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call xlsExportTable( tbl1, 'Отчет', '1,5,9', sTmp )
.head 3 +  Pushbutton: pb3
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: 4. Word
.head 4 -  Window Location and Size
.head 5 -  Left:   6.683"
.head 5 -  Top:    2.155"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call wrdExportTable( tbl1, 'Отчет', '' )
.head 3 +  Pushbutton: pb4
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   6.7"
.head 5 -  Top:    2.488"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.333"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Set MyRC.nTargetApp = atExcel
.head 6 +  Call MyRC.OpenApplication()
.head 7 -  Return FALSE
.head 6 -  Call MyRC.LoadDoc('d:\\pattern.xls')
.head 6 -  Call MyRC.ShowApplication()
.head 6 -  Call MyRC.SetTableCell(1,3,'Произвольный текст')
.head 6 -  Call MyRC.SetTableCellRange(1,5,2,'Колонка11' || SalNumberToChar( 9 ) || '1')
.head 6 -  Call MyRC.SetTableCellRange(1,6,2,'Колонка12' || SalNumberToChar( 9 ) || '2')
.head 6 -  Call MyRC.SetTableCellRange(1,7,2,'Колонка13' || SalNumberToChar( 9 ) || '3')
.head 6 -  Call MyRC.SetTableCell(3,10,'=SUM(B5:B7)')
.head 2 -  Functions
.head 2 -  Window Parameters
.head 2 +  Window Variables
.head 3 -  Sql Handle: hSqlH
.head 3 -  : MyRC
.head 4 -  Class: cReportConstructor
.head 3 -  String: sTmp[*]
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Set df2='IGR'
.head 4 -  Set df1='bars'
.head 3 +  On SAM_Destroy
.head 4 -  ! Call SqlDisconnect( hSqlH )
.head 1 +  Form Window: frm_Progress
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Экспорт...
.head 2 -  Icon File:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Automatically Created at Runtime? No
.head 3 -  Initial State: Normal
.head 3 -  Maximizable? No
.head 3 -  Minimizable? No
.head 3 -  System Menu? No
.head 3 -  Resizable? No
.head 3 -  Window Location and Size
.head 4 -  Left:   3.225"
.head 4 -  Top:    1.438"
.head 4 -  Width:  5.0"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 1.119"
.head 4 -  Height Editable? Yes
.head 3 -  Form Size
.head 4 -  Width:  Default
.head 4 -  Height: Default
.head 4 -  Number of Pages: Dynamic
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description:
.head 2 -  Named Menus
.head 2 -  Menu
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Data Field: dfRows
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.2"
.head 6 -  Top:    0.429"
.head 6 -  Width:  4.5"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.167"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? No
.head 5 -  Justify: Center
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Black
.head 5 -  Background Color: 3D Face Color
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 -  Group Box:
.head 4 -  Resource Id: 15572
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.1"
.head 5 -  Top:    0.071"
.head 5 -  Width:  4.7"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.833"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 2 -  Functions
.head 2 -  Window Parameters
.head 2 -  Window Variables
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Set dfRows = 'Запуск приложения...'
.head 4 -  Call SalCenterWindow(hWndForm)
.head 3 +  On SAM_User
.head 4 +  If lParam = -1
.head 5 -  Set dfRows = 'Запуск приложения...'
.head 4 +  Else If lParam = 0
.head 5 -  Set dfRows = 'Экспорт начат...'
.head 4 +  Else If lParam = -2
.head 5 -  Set dfRows = 'Экспорт завершен!'
.head 4 +  Else
.head 5 -  Set dfRows = SalNumberToStrX(lParam, 0) || ' строк подготовлено для экспорта.'
