.head 0 +  Application Description: технологические операции по обработке файлов системы КЛИЕНТ-БАНК (ИКТ)
.head 1 -  Outline Version - 4.0.26
.head 1 +  Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000B20000 002C000000020000 0003000000FFFFFF FFFFFFFFFFFCFFFF
0040: FFE9FFFFFF000000 0000000000DE0100 0041010000010000 0000000000010000
0060: 000F4170706C6963 6174696F6E497465 6D04000000075769 6E646F7773066D65
0080: 6E7531320946756E 6374696F6E73084F 627246696C654D
.enddata
.data DT_MAKERUNDLG
0000: 000000001E5C4241 525339385C524553 4F555243455C4943 4F5C4D6F6E65792E
0020: 69636F185C426172 7339385C42494E5C 6B6C6F705F656C6C 2E657865165C4261
0040: 727339385C42494E 5C6E65776170702E 646C6C165C426172 7339385C42494E5C
0060: 6E65776170702E61 7063000001010115 513A5C43454E5455 52415C6E65776170
0080: 702E72756E15513A 5C43454E54555241 5C6E65776170702E 646C6C15513A5C43
00A0: 454E545552415C6E 65776170702E6170 6300000101011A51 3A5C424152533938
00C0: 5C42494E5C6B6C6F 705F656C6C2E6578 6518513A5C424152 5339385C42494E5C
00E0: 6E65776170702E64 6C6C18513A5C4241 525339385C42494E 5C6E65776170702E
0100: 6170630000010101 15513A5C43454E54 5552415C6E657761 70702E61706C1551
0120: 3A5C43454E545552 415C6E6577617070 2E646C6C15513A5C 43454E545552415C
0140: 6E65776170702E61 70630000010101
.enddata
.head 2 -  Outline Window State: Normal
.head 2 +  Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
.head 3 -  Left:   -0.013"
.head 3 -  Top:    0.0"
.head 3 -  Width:  8.013"
.head 3 -  Height: 4.969"
.head 2 +  Options Box Location
.data VIEWINFO
0000: 1018B80BB80B2500
.enddata
.data VIEWSIZE
0000: 0800
.enddata
.head 3 -  Visible? Yes
.head 3 -  Left:   4.15"
.head 3 -  Top:    1.885"
.head 3 -  Width:  3.8"
.head 3 -  Height: 2.073"
.head 2 +  Class Editor Location
.head 3 -  Visible? No
.head 3 -  Left:   0.575"
.head 3 -  Top:    0.094"
.head 3 -  Width:  5.063"
.head 3 -  Height: 2.719"
.head 2 +  Tool Palette Location
.head 3 -  Visible? No
.head 3 -  Left:   6.388"
.head 3 -  Top:    0.729"
.head 2 -  Fully Qualified External References? Yes
.head 2 -  Reject Multiple Window Instances? No
.head 2 -  Enable Runtime Checks Of External References? Yes
.head 2 -  Use Release 4.0 Scope Rules? No
.head 1 +  Libraries
.head 2 -  Dynalib: Absapi.apd
.head 2 -  Dynalib: Global.apd
.head 2 -  ! Dynalib: Service.apd
.head 2 -  Dynalib: Message.apd
.head 2 -  Dynalib: Ssplashm.apd
.head 2 -  Dynalib: Dblogin1.apd
.head 2 -  Dynalib: License.apd
.head 2 -  Dynalib: dsig.apd
.head 2 -  Dynalib: ROLEAUTH.APD
.head 2 -  File Include: Docfun6.apl
.head 2 -  File Include: Vtdos.apl
.head 2 -  File Include: Vtfile.apl
.head 2 -  File Include: Vtstr.apl
.head 2 -  File Include: Vtcal.apl
.head 2 -  File Include: Vtarray.apl
.head 2 -  File Include: Vttblwin.apl
.head 2 -  File Include: Vtmsgbox.apl
.head 2 -  File Include: Winbars2.apl
.head 2 -  File Include: Constant.apl
.head 2 -  File Include: Watchdog.apc
.head 2 -  File Include: XSALCPT.APL
.head 1 +  Global Declarations
.head 2 +  Window Defaults
.head 3 +  Tool Bar
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Form Window
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Dialog Box
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Top Level Table Window
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Data Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Multiline Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Spin Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Background Text
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Pushbutton
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Radio Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Check Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Option Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Group Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Child Table Window
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  List Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Combo Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Line
.head 4 -  Line Color: Use Parent
.head 3 +  Frame
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: 3D Face Color
.head 3 +  Picture
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 2 +  Formats
.head 3 -  Number: 0'%'
.head 3 -  Number: #0
.head 3 -  Number: ###000
.head 3 -  Number: ###000;'($'###000')'
.head 3 -  Date/Time: hh:mm:ss AMPM
.head 3 -  Date/Time: M/d/yy
.head 3 -  Date/Time: MM-dd-yy
.head 3 -  Date/Time: dd-MMM-yyyy
.head 3 -  Date/Time: MMM d, yyyy
.head 3 -  Date/Time: MMM d, yyyy hh:mm AMPM
.head 3 -  Date/Time: MMMM d, yyyy hh:mm AMPM
.head 2 +  External Functions
.head 3 +  Library name: Lcb_W32b.Dll
.head 4 +  Function: INITKSGN
.head 5 -  Description: инициализация средств ЭЦП
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 4 +  ! Function: _EXITKSGN
.head 5 -   Description: деинициализация средств ЭЦП
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 -   Parameters 
.head 4 +  Function: PUTFSGNB
.head 5 -  Description: выработка ЭЦП операционста
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: HANDLE
.head 4 +  Function: CHKSIGNB
.head 5 -  Description: проверка подписи должностных лиц клиента на информационной строке
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 6 -  Number: WORD
.head 6 -  String: LPSTR
.head 6 -  String: LPCSTR
.head 4 +  Function: ENCRYPTB
.head 5 -  Description: шифрование с архивированием файла для клиента
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: WORD
.head 6 -  Number: WORD
.head 6 -  Number: DWORD
.head 4 +  Function: DECRYPTB
.head 5 -  Description: дешифрование с разархивированием и проверкой подписи файла от клиента
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: WORD
.head 6 -  Number: WORD
.head 6 -  Number: DWORD
.head 4 +  Function: CHKFSGNB
.head 5 -  Description: получение информации о подписи
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: WORD
.head 6 -  String: LPCSTR
.head 4 +  Function: LCBSERVICE
.head 5 -  Description: раскладчик сертификатов
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: DWORD
.head 6 -  Number: DWORD
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 3 +  Library name: IctBob.Dll
.head 4 +  Function: llopen
.head 5 -  Description: открытие файла (C++)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: HANDLE
.head 5 +  Parameters
.head 6 -  ! первый параметр: имя файла,
  второй: тип открытия
.head 6 -  String: LPCSTR
.head 6 -  Number: INT
.head 4 +  Function: llcreat
.head 5 -  Description: создание файла (C++)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: HANDLE
.head 5 +  Parameters
.head 6 -  ! первый параметр: имя файла,
  второй: тип открытия
.head 6 -  String: LPCSTR
.head 6 -  Number: INT
.head 4 +  Function: llclose
.head 5 -  Description: закрытие файла (C++)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: HANDLE
.head 5 +  Parameters
.head 6 -  Number: HANDLE
.head 4 +  Function: llread
.head 5 -  Description: чтение файла (C++)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: UINT
.head 5 +  Parameters
.head 6 -  Number: HANDLE
.head 6 -  String: LPVOID
.head 6 -  Number: UINT
.head 5 -  ! Description: чтение файла (C++)
.head 5 -  ! Export Ordinal: 0
.head 5 +  ! Returns 
.head 6 -   Number: UINT
.head 5 +  ! Parameters 
.head 6 -   Number: HANDLE
.head 6 -   String: LPVOID
.head 6 -   Number: UINT
.head 4 +  Function: llwrite
.head 5 -  Description:
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: UINT
.head 5 +  Parameters
.head 6 -  Number: HANDLE
.head 6 -  String: LPCSTR
.head 6 -  Number: UINT
.head 4 +  Function: lllseek
.head 5 -  Description:
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: LONG
.head 5 +  Parameters
.head 6 -  Number: HANDLE
.head 6 -  Number: LONG
.head 6 -  Number: INT
.head 4 +  Function: llstr2str
.head 5 -  Description: преобразование строки HEXtoBIN
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 6 -  Receive String: LPVOID
.head 6 -  Number: ULONG
.head 3 +  ! Library name: hex2bin.dll
.head 4 +   Function: ConvertBinToHex
.head 5 -   Description: void ConvertBinToHex(char* szSource,	// Исходный сырой BLOB
		     char* szDest,	// буфер для результирующей строки
                                        // hex-цифр
		     long  nSourceLen);	// размер исходного массива
.head 5 -   Export Ordinal: 0
.head 5 -   Returns 
.head 5 +   Parameters 
.head 6 -   String: LPCSTR
.head 6 -   String: LPSTR
.head 6 -   Number: LONG
.head 3 +  ! Library name: DSGBVC4.DLL
.head 4 -  ! DSGBVC4.DLL - экспортируемые функции
.head 4 +   Function: nsignInitGBSign
.head 5 -   Description: int GLOBAL nsignInitGBSign(char *dbDir, char *secKeyDisk, char *pin,
                           char *mfo, int mode)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 +   Parameters 
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   Number: INT
.head 4 +   Function: nsignExitGBSign
.head 5 -   Description: int GLOBAL nsignExitGBSign(void)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 -   Parameters 
.head 4 +   Function: nsignInitOPSign
.head 5 -   Description: int GLOBAL nsignInitOPSign(char *dbDir, char *secKeyDisk, char *pin,
                           char *mfo)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 +   Parameters 
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 4 +   Function: nsignExitOPSign
.head 5 -   Description: int GLOBAL nsignExitOPSign(void)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 -   Parameters 
.head 4 +   Function: nsignMapError2Text
.head 5 -   Description: void GLOBAL nsignMapError2Text(char *buffer, int errorCode)
.head 5 -   Export Ordinal: 0
.head 5 -   Returns 
.head 5 +   Parameters 
.head 6 -   Receive String: LPSTR
.head 6 -   Number: INT
.head 4 +   Function: nsignPutOPSignOnMemory
.head 5 -   Description: int GLOBAL nsignPutOPSignOnMemory(void* data, unsigned short size,
                                  void* signPtr)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 +   Parameters 
.head 6 -   String: LPVOID
.head 6 -   Number: SHORT
.head 6 -   Receive String: LPVOID
.head 3 +  ! Library name: RSAC.DLL
.head 4 -  ! RSAC.DLL - экспортируемые функции
.head 4 +   Function: INIT_ZAH
.head 5 -   Description: int InitSign(char *szPathOpenKey, char *szPathSecKey, char *szIdOper,
             char *szUxDateTme, char *szPasword)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 +   Parameters 
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 6 -   String: LPCSTR
.head 4 +   Function: CLOSE_ZAH
.head 5 -   Description: int CloseRsa(void)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 -   Parameters 
.head 4 +   Function: RSA_ZAH
.head 5 -   Description: int RSA_ZAH(char cMode, int iHandler, dword dwCountPart, dword dwOffset,
            dword dwLength, dword dwOffsetSecond, char *szSign,
            char *szIdOpen)
.head 5 -   Export Ordinal: 0
.head 5 +   Returns 
.head 6 -   Number: INT
.head 5 +   Parameters 
.head 6 -   Number: CHAR
.head 6 -   Number: INT
.head 6 -   Number: DWORD
.head 6 -   String: LPCSTR
.head 6 -   Number: DWORD
.head 6 -   Number: DWORD
.head 6 -   String: LPSTR
.head 6 -   String: LPCSTR
.head 2 +  Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
.head 3 +  System
.head 3 +  User
.head 2 -  Resources
.head 2 +  Variables
.head 3 -  Number: nCount0 ! счетчик к-ва документов в файле А
.head 3 -  Number: nCount1 ! счетчик сумм по дебету  в файле А
.head 3 -  Number: nCount2 ! счетчик сумм по кредиту в файле А
.head 3 -  String: strPinCodeICT
.head 3 -  ! только для отладки
.head 3 -  File Handle: h1
.head 3 -  ! все необходимые для ВСЕХ окон переменные
.head 3 -  String: sDiskKata
.head 3 -  String: sArchPath
.head 3 -  String: sTempPath
.head 3 -  Number: nKLI
.head 3 -  String: sSAB
.head 3 -  String: smSAB[*]
.head 3 -  Number: nRNK
.head 3 -  Number: nmRNK[*]
.head 3 -  String: sNMK
.head 3 -  String: smNMK[*]
.head 3 -  String: sOKPO
.head 3 -  String: smOKPO[*]
.head 3 -  String: sTIMES
.head 3 -  String: smTIMES[*]
.head 3 -  Number: nFetchRes
.head 3 -  ! String: sX
.head 3 -  ! String: sY
.head 3 -  ! Number: nX
.head 3 -  ! Number: nY
.head 3 -  Number: nKw
.head 3 -  !
.head 3 -  String: sMass[*]
.head 3 -  Number: nCount
.head 3 -  Number: nHo
.head 3 -  Number: nHc
.head 3 -  String: sFileTmp
.head 3 -  Number: nSendId
.head 3 -  Boolean: bIni
.head 3 -  String: sPinKod
.head 3 -  Number: nNf
.head 3 -  !
.head 3 -  ! Number: nI
.head 3 -  Number: nII
.head 3 -  Number: nLenArr
.head 3 -  String: sUserid
.head 3 -  ! переменные для файла лицензии
.head 3 -  String: smlKOD[*]
.head 3 -  String: smlSAB[*]
.head 3 -  Number: nmlNOMER[*]
.head 3 -  Date/Time: dmlDALI[*]
.head 3 -  ! переменные для выбора LISTBOX и Calendar
.head 3 -  Number: nArray[*]
.head 3 -  String: sSelectNAIM[*]
.head 3 -  String: sSelectSAB[*]
.head 3 -  Date/Time: dSelect
.head 3 -  String: smWeek[7]
.head 3 -  String: smMonth[12]
.head 3 -  Date/Time: dDada
.head 3 -  String: sDat
.head 3 -  String: sSqlSAB
.head 3 -  Number: nIndex
.head 3 -  !
.head 3 -  String: sMFOA
.head 3 -  String: smMFOA[*]
.head 3 -  String: sNLSA
.head 3 -  String: smNLSA[*]
.head 3 -  String: sNAMA
.head 3 -  String: smNAMA[*]
.head 3 -  String: sMFOB
.head 3 -  String: smMFOB[*]
.head 3 -  String: sNLSB
.head 3 -  String: smNLSB[*]
.head 3 -  String: sNAMB
.head 3 -  String: smNAMB[*]
.head 3 -  String: sOKPOB
.head 3 -  String: smOKPOB[*]
.head 3 -  Number: nDK
.head 3 -  Number: nmDK[*]
.head 3 -  Number: nS
.head 3 -  Number: nmS[*]
.head 3 -  Number: nVOB
.head 3 -  Number: nmVOB[*]
.head 3 -  String: sND
.head 3 -  String: smND[*]
.head 3 -  Number: nISP
.head 3 -  Number: nmISP[*]
.head 3 -  Number: nKV
.head 3 -  Number: nmKV[*]
.head 3 -  Date/Time: dDAOP
.head 3 -  Date/Time: dmDAOP[*]
.head 3 -  Number: nIOST
.head 3 -  Number: nmIOST[*]
.head 3 -  Date/Time: dDAPP
.head 3 -  Date/Time: dmDAPP[*]
.head 3 -  String: sNAZN
.head 3 -  String: smNAZN[*]
.head 3 -  String: sPOND
.head 3 -  String: smPOND[*]
.head 3 -  Number: nSK
.head 3 -  Number: nmSK[*]
.head 3 -  String: sNameFileA
.head 3 -  String: smNameFileA[*]
.head 3 -  Number: nREF
.head 3 -  Number: nmREF[*]
.head 3 -  !
.head 3 -  Boolean: bU
.head 3 -  Number: nIU
.head 3 -  Number: nIL
.head 3 -  Number: nIQ
.head 3 -  Number: nIN
.head 3 -  Number: nIV
.head 3 -  Number: nIO
.head 3 -  Number: nIW
.head 3 -  !
.head 3 -  Number: nKodirowka
.head 3 -  !
.head 3 -  String: sFrag
.head 3 -  Number: nIl1
.head 3 -  ! ! ! ! ! ! !
.head 3 -  Number: nUsers
.head 3 -  Date/Time: dtExpDate
.head 3 -  Date/Time: dBankDate
.head 3 -  Date/Time: dBankDateStart
.head 3 -  !
.head 3 -  String: spWozwr
.head 3 -  Boolean: boDoc
.head 3 -  ! for ObrFileZD
.head 3 -  Number: nSummAll
.head 3 -  Number: nKwoAll
.head 3 -  !
.head 3 -  String: smLiEnd[*]
.head 3 -  String: smLiOkp[*]
.head 3 -  String: smLiSab[*]
.head 3 -  Number: nmLiClr[*]
.head 2 +  Internal Functions
.head 3 -  ! все функции доступны здесь всем окнам
.head 3 +  Function: LenArray
.head 4 -  Description: возвращает длину одномерного массива строк
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: smArr[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nBound
.head 4 +  Actions
.head 5 -  Call SalArrayGetUpperBound(smArr, 1, nBound)
.head 5 -  Return nBound
.head 3 +  Function: DaySymbol
.head 4 -  Description: преобразовывает день в символ
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDa
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nDa
.head 5 -  String: sDay
.head 4 +  Actions
.head 5 -  Set nDa = SalDateDay(dDa)
.head 5 +  If nDa < 10
.head 6 -  Set sDay = Str(nDa)
.head 5 +  Else
.head 6 -  Set sDay = Chr(nDa+55)
.head 5 -  Return sDay
.head 3 +  Function: MonthSymbol
.head 4 -  Description: преобразовывает месяц в символ
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDa
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nMo
.head 5 -  String: sMonth
.head 4 +  Actions
.head 5 -  Set nMo = SalDateMonth(dDa)
.head 5 +  If nMo<10
.head 6 -  Set sMonth = Str(nMo)
.head 5 +  Else
.head 6 -  Set sMonth = Chr(nMo+55)
.head 5 -  Return sMonth
.head 3 +  Function: YearSymbol
.head 4 -  Description: преобразовывает год в символ
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDa
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nY
.head 5 -  ! String: sYear
.head 4 +  Actions
.head 5 -  Set nY = Max(SalDateYear(dDa)-1998, 0)
.head 5 +  ! If nY < 10
.head 6 -   Set sYear = Str(nY)
.head 5 +  ! Else
.head 6 -   Set sYear = Chr(nY+55)
.head 5 -  ! Set sYear = IifS(nY<10, Str(nY), Chr(nY+55))
.head 5 -  ! Return sYear
.head 5 -  Return IifS(nY<10, Str(nY), Chr(nY+55))
.head 3 +  Function: YearSymbolZ
.head 4 -  Description: преобразовывает год в символ
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDa
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nY
.head 5 -  ! String: sYear
.head 4 +  Actions
.head 5 -  Set nY = Max(SalDateYear(dDa)-1995, 0)
.head 5 +  ! If nY < 10
.head 6 -   Set sYear = Str(nY)
.head 5 +  ! Else
.head 6 -   Set sYear = Chr(nY+55)
.head 5 -  ! Set sYear = IifS(nY<10, Str(nY), Chr(nY+55))
.head 5 -  ! Return sYear
.head 5 -  Return IifS(nY<10, Str(nY), Chr(nY+55))
.head 3 +  Function: GetBankDateMom
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sBDate
.head 4 +  Actions
.head 5 -  Set sBDate = GetValueStr("
    SELECT val
    FROM params
    WHERE par='BANKDATE'")
.head 5 -  Return SalDateConstruct(Val(Subs(sBDate, 7, 4)), Val(Left(sBDate, 2)), Val(
       Subs(sBDate, 4, 2)), 0, 0, 0)
.head 3 +  Function: MomFileCopy
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSourcePath
.head 5 -  String: sDestPath
.head 5 -  Boolean: bOverWrite
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If SalFileCopy(sSourcePath, sDestPath, bOverWrite) != FILE_CopyOK
.head 6 -  ! Call MessageNoWait('Ошибка при копировании:' || PutCrLf() || '   ' || sSourcePath || PutCrLf() || '   -->' ||
     PutCrLf() || '   ' || sDestPath, 'Аварийное сообщение !!!', 137, 1)
.head 6 -  Call MessageNoWait('Ошибка при копировании:' || PutCrLf() || '   ' || sSourcePath || PutCrLf() || '   -->' ||
     PutCrLf() || '   ' || sDestPath, 'Аварийное сообщение !!!', menu12.nECWT, 1)
.head 6 -  Return FALSE
.head 5 +  Else
.head 6 -  Return TRUE
.head 3 +  Function: GetSqlError
.head 4 -  Description: вернуть SQL-ошибку
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nwParam
.head 5 -  Number: nlParam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Sql Handle: hSqlErrorHandle
.head 5 -  Number: nErrorNum
.head 5 -  Number: nErrorPos
.head 4 +  Actions
.head 5 -  Call SqlExtractArgs(nwParam, nlParam, hSqlErrorHandle, nErrorNum, nErrorPos)
.head 5 -  Return SqlGetErrorTextX(nErrorNum)
.head 3 +  Function: GetServerDate
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dServerDateLocal
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Call SqlPrepareAndExecute(hSql(), "
     SELECT SYSDATE
     INTO :dServerDateLocal
     FROM dual")
.head 5 +  Else
.head 6 -  Call SqlPrepareAndExecute(hSql(), "
     SELECT TODAY
     INTO :dServerDateLocal
     FROM params")
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  Return dServerDateLocal
.head 2 -  Named Menus
.head 2 +  Class Definitions
.head 2 +  Default Classes
.head 3 -  MDI Window: cBaseMDI
.head 3 -  Form Window:
.head 3 -  Dialog Box:
.head 3 -  Table Window:
.head 3 -  Quest Window:
.head 3 -  Data Field:
.head 3 -  Spin Field:
.head 3 -  Multiline Field:
.head 3 -  Pushbutton:
.head 3 -  Radio Button:
.head 3 -  Option Button:
.head 3 -  Check Box:
.head 3 -  Child Table:
.head 3 -  Quest Child Window: cQuickDatabase
.head 3 -  List Box:
.head 3 -  Combo Box:
.head 3 -  Picture:
.head 3 -  Vertical Scroll Bar:
.head 3 -  Horizontal Scroll Bar:
.head 3 -  Column:
.head 3 -  Background Text:
.head 3 -  Group Box:
.head 3 -  Line:
.head 3 -  Frame:
.head 3 -  Custom Control:
.head 2 +  Application Actions
.head 3 +  On SAM_AppStartup
.head 4 -  Call SplashOpenWindow()
.head 4 -  ! Инициализация начальных  параметров
.head 4 -  ! Call SplashSetStatusText("Инициализация параметров...")
.head 4 -  Call GetConfigSettings()
.head 4 -  !
.head 4 -  ! Call SplashSetStatusText("Инициализация аудита...")
.head 4 -  Call DBSpy_Init(GetDbs())
.head 4 -  !
.head 4 -  ! Call SplashSetStatusText("Инициализация интерфейса...")
.head 4 -  Call SplashCloseWindow()
.head 4 +  If DatabaseLogin()
.head 5 -  Set nUsers = GetGlobalOptionEx('USRLIMIT')
.head 5 -  Set dtExpDate = SalFmtFormatStrDateTime(GetGlobalOption('EXPDATE'), 'dd/MM/yyyy')
.head 5 +  If dtExpDate < SalDateCurrent()
.head 6 -  Call SalMessageBeep(MB_IconStop)
.head 6 -  Call SalMessageBox('Истек срок действия лицензии!', 'Bars: Лицензирование!', MB_Ok)
.head 6 -  Call SalQuit()
.head 5 +  Else
.head 6 +  If IsLicenseValid(GetBankMfo(), GetBankName(), nUsers, dtExpDate, FALSE)
.head 7 +  If dtExpDate - SalDateCurrent() < 31
.head 8 -  Call SalMessageBeep(MB_IconStop)
.head 8 -  Call SalMessageBox('Срок действия лицензии истекает через ' ||
     Str(dtExpDate-SalDateCurrent()) || ' дней!', 'Bars: Лицензирование!', MB_Ok)
.head 7 -  Set dBankDateStart = GetParamBankDate()
.head 7 -  ! Call Debug('dBankDateStart = ' ||
     SalFmtFormatDateTime(dBankDateStart, 'dd-MM-yyyy'))
.head 7 -  Call SetWorkBankDate(dBankDateStart)
.head 7 -  Call Pl_dat(dBankDateStart)
.head 7 -  ! Call Debug('dBankDateStart = ' ||
     SalFmtFormatDateTime(GetBankDate(), 'dd-MM-yyyy'))
.head 7 -  Call SalCreateWindow(menu12, hWndNULL)
.head 7 -  ! Call SalModalDialog(menu11, hWndForm)
.head 6 +  Else
.head 7 -  Call SalMessageBeep(MB_IconStop)
.head 7 -  Call SalMessageBox('Лицензия неверна или истек срок ее действия!',
     'Bars: Лицензирование!', MB_Ok)
.head 7 -  Call SalQuit()
.head 4 +  Else
.head 5 -  Call SalQuit()
.head 3 +  On SAM_SqlError
.head 4 +  If boDoc
.head 5 -  Set spWozwr = GetSqlError(wParam, lParam)
.head 5 -  Set boDoc = FALSE
.head 4 -  Call ShowSqlError(wParam, lParam)
.head 4 -  Return FALSE
.head 3 +  On SAM_AppExit
.head 4 -  Call SaveInfoToLog(MSG_DisconnectDbs() || GetDbs())
.head 4 +  If hSqlAux3()
.head 5 -  Call SqlDisconnect(hSqlAux3())
.head 4 +  If hSqlAux2()
.head 5 -  Call SqlDisconnect(hSqlAux2())
.head 4 +  If hSqlAux()
.head 5 -  Call SqlDisconnect(hSqlAux())
.head 4 +  If hSql()
.head 5 -  Call SqlDisconnect(hSql())
.head 4 -  Call DBSpy_Disconnect()
.head 4 -  Call SalQuit()
.head 1 +  Dialog Box: dlg_InputPinCodeICT
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Ввод PIN-кода ИКТ
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? No
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   1.588"
.head 4 -  Top:    1.646"
.head 4 -  Width:  4.357"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 1.792"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: MS Sans Serif
.head 3 -  Font Size: 8
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Blue
.head 3 -  Background Color: Default
.head 2 -  Description: Ввод PIN-кода пользователя
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? No
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 -  Background Text: PIN-Код:
.head 4 -  Resource Id: 52809
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.586"
.head 5 -  Top:    0.375"
.head 5 -  Width:  1.214"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Right
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: dfPinCode
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 16
.head 5 -  Data Type: String
.head 5 -  Editable? Yes
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   1.829"
.head 6 -  Top:    0.333"
.head 6 -  Width:  1.586"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Left
.head 5 -  Format: Invisible
.head 5 -  Country: Default
.head 5 -  Font Name: Arial
.head 5 -  Font Size: 12
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 +  Message Actions
.head 5 +  On SAM_AnyEdit
.head 6 -  Call SalEnableWindow(pbOk)
.head 3 +  Pushbutton: pbOk
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Ввести
.head 4 -  Window Location and Size
.head 5 -  Left:   0.5"
.head 5 -  Top:    1.021"
.head 5 -  Width:  1.429"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.286"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Set strPinCodeICT = dfPinCode
.head 6 -  Call SalEndDialog(hWndForm, TRUE)
.head 3 +  Pushbutton: pbExit
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выход
.head 4 -  Window Location and Size
.head 5 -  Left:   2.343"
.head 5 -  Top:    1.021"
.head 5 -  Width:  1.429"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.286"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Set strPinCodeICT = ''
.head 6 -  Call SalEndDialog(hWndForm, FALSE)
.head 3 -  Frame
.head 4 -  Resource Id: 52810
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.057"
.head 5 -  Top:    0.031"
.head 5 -  Width:  4.171"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.854"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Corners: Square
.head 4 -  Border Style: Drop-Shadow
.head 4 -  Border Thickness: 1
.head 4 -  Border Color: Default
.head 4 -  Background Color: 3D Face Color
.head 3 -  Frame
.head 4 -  Resource Id: 52811
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.057"
.head 5 -  Top:    0.917"
.head 5 -  Width:  4.171"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.521"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Corners: Square
.head 4 -  Border Style: Drop-Shadow
.head 4 -  Border Thickness: 1
.head 4 -  Border Color: Default
.head 4 -  Background Color: 3D Face Color
.head 2 -  Functions
.head 2 -  Window Parameters
.head 2 -  Window Variables
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call PrepareWindow(hWndForm)
.head 4 -  Call SalDisableWindow(pbOk)
.head 4 -  Call SalSetFocus(dfPinCode)
.head 3 +  On SAM_CreateComplete
.head 4 -  Call WaitCursorOff()
.head 3 +  On SAM_Destroy
.head 4 -  Call WaitCursorOff()
.head 1 +  Form Window: frm_BOR
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Выписки по лицевым счетам
.head 2 -  Icon File:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? No
.head 3 -  Automatically Created at Runtime? No
.head 3 -  Initial State: Normal
.head 3 -  Maximizable? Yes
.head 3 -  Minimizable? Yes
.head 3 -  System Menu? Yes
.head 3 -  Resizable? Yes
.head 3 -  Window Location and Size
.head 4 -  Left:   0.838"
.head 4 -  Top:    0.688"
.head 4 -  Width:  7.125"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 3.563"
.head 4 -  Height Editable? Yes
.head 3 -  Form Size
.head 4 -  Width:  Default
.head 4 -  Height: Default
.head 4 -  Number of Pages: Dynamic
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description:
.head 2 -  Named Menus
.head 2 -  Menu
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 -  Contents
.head 2 +  Functions
.head 3 +  Function: DK
.head 4 -  Description: Вернуть ДЕБЕТ КРЕДИТ
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: S
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return IifS(S<0, ' ДЕБЕТ:', 'КРЕДИТ:')
.head 2 +  Window Parameters
.head 3 -  String: FA
.head 3 -  String: FAO
.head 3 -  String: sDeviceDef_
.head 3 -  String: sDriverDef_
.head 3 -  String: sPortDef_
.head 2 +  Window Variables
.head 3 -  Number: nInd
.head 3 -  Number: NPP
.head 3 -  File Handle: hFile
.head 3 -  String: rab ! рабочая
.head 3 -  String: strDir ! для имени шаблона
.head 3 -  String: strFileName ! для имени выходного файла
.head 3 -  String: AQH ! наш банк
.head 3 -  Number: kol ! общ количество строк
.head 3 -  Number: kol1 ! счетчик цикла по количеству строк
.head 3 -  Number: PZ ! признак закл выписки ???
.head 3 -  Number: S ! сумма документа со знаком для накопления
          ! DOS, KOS, S2
.head 3 -  Number: DOS
.head 3 -  Number: KOS
.head 3 -  Number: S2 ! исходящее сальдо
.head 3 -  String: FIO ! исполнитель
.head 3 -  ! Входяшие в отчет
.head 3 -  String: KV
.head 3 -  String: NLS
.head 3 -  String: NAM
.head 3 -  String: MFO
.head 3 -  String: NLSK
.head 3 -  String: NAMK
.head 3 -  String: OKPOK
.head 3 -  String: SK
.head 3 -  String: ND
.head 3 -  String: MFOK
.head 3 -  String: FDAT
.head 3 -  String: PDAT
.head 3 -  String: NAZN
.head 3 -  String: ISP
.head 3 -  String: VOB
.head 3 -  Number: S1 ! вход сальдо
.head 3 -  String: SD ! выравненная сумма док для передачи в отчет
.head 3 -  String: BPEM
.head 3 -  Number: nRet
.head 3 -  !
.head 3 -  String: sTempMFO
.head 3 -  String: sTempNLS
.head 3 -  String: sTempNAM
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Set strDir = GetTemplateDir() || "\\BOR.QRP"
.head 4 -  Set strFileName = '_' || Right(FA, 11)
.head 4 -  ! Set AQH = StrWinToDosX(GetBankName())
.head 4 -  Set AQH = GetBankName()
.head 4 -  Set rab = 'KV,NLS,NAM,MFO,NLSK,NAMK,OKPOK,SK,ND,MFOK,FDAT,PDAT,NAZN,VOB,S1,SD'
.head 4 -  Set nInd = RPT_NoToolbar
.head 4 -  Call SalReportPrintToFile(hWndForm, strDir, GetPrnDir() || '\\' || strFileName, rab, rab, 1, RPT_PrintAll, 1, 1, FALSE,
     nInd)
.head 4 -  Call zarez12(GetPrnDir() || '\\' || strFileName, 0, '')
.head 4 -  ! Call SalLoadAppAndWait('Looka.Bat ' || GetPrnDir() || '\\' || strFileName, Window_Maximized, nRet)
.head 4 -  Call SalLoadAppAndWait('Dview.Exe ' || GetPrnDir() || '\\' || strFileName, Window_Maximized, nRet)
.head 4 -  Call SalDestroyWindow(hWndForm)
.head 3 +  On SAM_ReportStart
.head 4 -  Return TRUE
.head 3 +  On SAM_ReportFetchInit
.head 4 +  If not SalFileOpen(hFile, FA, 0)
.head 5 -  Return FALSE
.head 4 -  Call SalFileRead(hFile, rab, 65)
.head 4 -  Set BPEM = SalStrMidX(rab, 20, 2) || ':' || SalStrMidX(rab, 22, 2) || ':' || SalStrMidX(rab, 24, 2)
.head 4 -  Set kol = Val(SalStrMidX(rab, 26, 4))
.head 4 -  Set PZ = Val(SalStrMidX(rab, 62, 1))
.head 4 -  Set NPP = 0
.head 4 +  If kol > 0
.head 5 -  Set kol1 = 0
.head 5 -  Return TRUE
.head 4 +  Else
.head 5 -  Return FALSE
.head 3 +  On SAM_ReportFetchNext
.head 4 +  If kol1 = kol
.head 5 -  Return FALSE
.head 4 -  Call SalFileRead(hFile, rab, 404)
.head 4 -  Set kol1 = kol1 + 1
.head 4 -  Set MFO = SalStrTrimX(SalStrMidX(rab, 0, 9))
.head 4 -  Set NLS = SalStrTrimX(SalStrMidX(rab, 9, 14))
.head 4 -  Set NAM = StrDosToWinX(SalStrMidX(rab, 23, 38))
.head 4 -  Set MFOK = SalStrTrimX(SalStrMidX(rab, 61, 9))
.head 4 -  Set NLSK = SalStrTrimX(SalStrMidX(rab, 70, 14))
.head 4 -  Set NAMK = StrDosToWinX(SalStrMidX(rab, 84, 38))
.head 4 -  Set OKPOK = SalStrMidX(rab, 122, 14)
.head 4 -  Set OKPOK = IifS(Val(OKPOK)=0, '', OKPOK)
.head 4 -  Set SD = IifS(Val(SalStrMidX(rab, 137, 14))=0, Spac(13) || '0', SalStrMidX(rab, 137, 14)) || "," || Right('00' ||
    SalStrTrimX(SalStrMidX(rab, 151, 2)), 2)
.head 4 -  Set S = Val(SalStrMidX(rab, 137, 16)) / 100
.head 4 +  If SalStrMidX(rab, 136, 1) = '0'
.head 5 -  Set S = - S
.head 5 -  Set SD = SD || Spac(6)
.head 4 +  Else
.head 5 -  Set sTempNAM = NAM
.head 5 -  Set NAM = NAMK
.head 5 -  Set NAMK = sTempNAM
.head 4 -  Set VOB = SalStrMidX(rab, 153, 2)
.head 4 -  Set ND = StrDosToWinX(SalStrMidX(rab, 155, 10))
.head 4 -  Set ISP = SalStrTrimX(SalStrMidX(rab, 165, 8))
.head 4 -  Set KV = SalStrMidX(rab, 173, 3)
.head 4 -  Set FDAT = SalStrMidX(rab, 182, 2) || '/' || SalStrMidX(rab, 180, 2) || '/' || SalStrMidX(rab, 176, 4)
.head 4 -  Set S1 = Val(SalStrMidX(rab, 184, 24)) / 100
.head 4 -  Set PDAT = SalStrMidX(rab, 214, 2) || '/' || SalStrMidX(rab, 212, 2) || '/' || SalStrMidX(rab, 208, 4)
.head 4 -  Set NAZN = StrDosToWinX(SalStrMidX(rab, 216, 160))
.head 4 -  Set SK = SalStrMidX(rab, 384, 2)
.head 4 -  Set SK = IifS(SK=' 0', '', SK)
.head 4 -  Return TRUE
.head 3 +  On SAM_ReportNotify
.head 4 +  If lParam = RPT_BeforeBreakHeader2
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'DT_PRINT', 'Надруковано: ' || SalFmtFormatDateTime(
     SalDateCurrent(), "dd/MM/yyyy hhh:mm:ss"))
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'PAX', "Рахунок")
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'ZAKL', IifS(PZ=1, 'Поточна', 'Заключна'))
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'SHAP',
     "Nпп Документ   ВО    МФО    Кореспондент   СКП         Сума: ДЕБ КРЕД")
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'BPEM', BPEM)
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'AQH', AQH)
.head 5 -  Set DOS = 0
.head 5 -  Set NPP = 0
.head 5 -  Set KOS = 0
.head 5 -  Set S2 = S1
.head 5 -  Set FIO = 'Вик.' || ISP
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'VSA', ' Вхідне сальдо ' || DK(S1))
.head 4 +  If lParam = RPT_BeforeDetail
.head 5 +  If S < 0
.head 6 -  Set DOS = DOS - S
.head 5 +  Else
.head 6 -  Set KOS = KOS + S
.head 5 -  Set NPP = NPP + 1
.head 5 -  Set S2 = S2 + S
.head 5 -  Call SalReportSetNumberVar(SalNumberToWindowHandle(wParam), 'NPP', NPP)
.head 4 +  If lParam = RPT_BeforeBreakFooter2
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'ISA', 'Вихідне сальдо ' || DK(S2))
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'OBO', 'Всього оборотів ')
.head 5 -  Call SalReportSetStringVar(SalNumberToWindowHandle(wParam), 'FIO', FIO)
.head 5 -  Call SalReportSetNumberVar(SalNumberToWindowHandle(wParam), 'S2', S2)
.head 5 -  Call SalReportSetNumberVar(SalNumberToWindowHandle(wParam), 'DOS', DOS)
.head 5 -  Call SalReportSetNumberVar(SalNumberToWindowHandle(wParam), 'KOS', KOS)
.head 3 +  On SAM_Destroy
.head 4 -  Call SalFileClose(hFile)
.head 4 +  If FAO != FA
.head 5 -  Call VisFileDelete(FA)
.head 4 -  Call SalPrtSetDefault(sDeviceDef_, sDriverDef_, sPortDef_)
.head 1 +  Dialog Box: Find
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Введите фрагмент наименования клиента
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   5.4"
.head 4 -  Top:    4.229"
.head 4 -  Width:  4.243"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 0.667"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Arial Cyr
.head 3 -  Font Size: 10
.head 3 -  Font Enhancement: Bold-Italic
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: ввод фрагмента наименования клиента
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: 0.262"
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Arial Cyr
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Data Field: dfFind
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? Yes
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.086"
.head 6 -  Top:    0.073"
.head 6 -  Width:  3.5"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Left
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 +  Message Actions
.head 5 +  On WM_Char
.head 6 +  If wParam = 10 or wParam = 13
.head 7 -  ! Set sFrag = dfFind
.head 7 -  ! Call SalEndDialog(Find, 0)
.head 7 -  Call SalSendMsg(pbOk, SAM_Click, 0, 0)
.head 6 +  If wParam = 27
.head 7 -  Call SalEndDialog(Find, 1)
.head 3 +  Pushbutton: pbOk
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Ok
.head 4 -  Window Location and Size
.head 5 -  Left:   3.686"
.head 5 -  Top:    0.073"
.head 5 -  Width:  0.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: Default
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Set sFrag = dfFind
.head 6 -  Call SalEndDialog(Find, 0)
.head 2 -  Functions
.head 2 -  Window Parameters
.head 2 +  Window Variables
.head 3 -  String: sX
.head 3 -  String: sY
.head 3 -  Number: nX
.head 3 -  Number: nY
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Set dfFind = sFrag
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 -  Call SalGetProfileString('FindKlient', 'X-CoordinateFind', 'None', sX, 'Bars98')
.head 4 -  Call SalGetProfileString('FindKlient', 'Y-CoordinateFind', 'None', sY, 'Bars98')
.head 4 +  If sX != 'None' and sY != 'None'
.head 5 -  Call SalSetWindowLoc(Find, Val(sX), Val(sY))
.head 4 +  Else
.head 5 -  Call SalCenterWindow(Find)
.head 3 +  On SAM_Destroy
.head 4 -  Call SalGetWindowLoc(Find, nX, nY)
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 +  If nX != Val(sX)
.head 5 -  Call SalSetProfileString('FindKlient', 'X-CoordinateFind', SalNumberToStrX(nX, 3), 'Bars98')
.head 4 +  If nY != Val(sY)
.head 5 -  Call SalSetProfileString('FindKlient', 'Y-CoordinateFind', SalNumberToStrX(nY, 3), 'Bars98')
.head 1 +  Form Window: F10
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Работа с архивами КЛИЕНТ-БАНК
.head 2 -  Icon File:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Automatically Created at Runtime? No
.head 3 -  Initial State: Normal
.head 3 -  Maximizable? Yes
.head 3 -  Minimizable? Yes
.head 3 -  System Menu? Yes
.head 3 -  Resizable? Yes
.head 3 -  Window Location and Size
.head 4 -  Left:   0.963"
.head 4 -  Top:    0.646"
.head 4 -  Width:  13.367"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 7.119"
.head 4 -  Height Editable? Yes
.head 3 -  Form Size
.head 4 -  Width:  Default
.head 4 -  Height: Default
.head 4 -  Number of Pages: Dynamic
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: работа с архивом
.head 2 -  Named Menus
.head 2 -  Menu
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Radio Button: rbPD
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Пакеты документов
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    0.0"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbPD
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ADR'
.head 7 -  Set sPRE = 'A'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0 , 0)
.head 3 +  Radio Button: rbOT
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Запросы на отзыв документов
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    0.227"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbOT
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ADR'
.head 7 -  Set sPRE = 'E'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0 , 0)
.head 3 +  ! Radio Button: rbRP
.winattr
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Реестры пакетов
.head 4 -  Window Location and Size
.head 5 -  Left:   -0.017"
.head 5 -  Top:    0.238"
.head 5 -  Width:  3.083"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.end
.head 4 +   Message Actions
.head 5 +   On SAM_Click
.head 6 +   If rbRP
.head 7 -   Set sPOD = 'REE'
.head 7 -   Set sPRE = 'R'
.head 7 -   Call SalSendMsg(pbSAB, SAM_Click, 0 , 0)
.head 3 +  Radio Button: rbZay
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Заявки (пок./прод./конв.вал.)
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    0.454"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbZay
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ADR'
.head 7 -  Set sPRE = 'D'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0 , 0)
.head 3 +  Radio Button: rbVD
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Пакеты вал. документов
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    0.681"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbVD
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ADR'
.head 7 -  Set sPRE = 'M'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0 , 0)
.head 3 +  Radio Button: rbKW
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квитанции на пакеты
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    0.908"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbKW
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'KWI'
.head 7 -  Set sPRE = 'T'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbZD
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квитанции на зачисления
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    1.135"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbZD
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'KWI'
.head 7 -  Set sPRE = 'ZK'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbZW
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Запросы на выписки
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    1.362"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbZW
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ADR'
.head 7 -  Set sPRE = 'Q'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbLS
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выписки
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    1.589"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbLS
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ARH'
.head 7 -  Set sPRE = 'V'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbDW
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Возвращенные документы
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    1.816"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbDW
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ARH'
.head 7 -  Set sPRE = 'W'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbDO
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Документы, принятые к оплате
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    2.043"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbDO
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ARH'
.head 7 -  Set sPRE = 'O'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbNvaldok
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квитанции на валютные док-ты
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    2.27"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbNvaldok
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ARH'
.head 7 -  Set sPRE = 'N'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbKV
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Курсы валют
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    2.497"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbKV
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ARH'
.head 7 -  Set sPRE = '$'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Radio Button: rbIU
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Изменения участников СЭП
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    2.724"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbIU
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set sPOD = 'ARH'
.head 7 -  Set sPRE = 'U'
.head 7 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  ! Radio Button: rbZE
.winattr
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    1.738"
.head 5 -  Width:  3.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? No
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.end
.head 4 +   Message Actions 
.head 5 +   On SAM_Click
.head 6 +   If rbIU
.head 7 -   Call SalTblDestroyColumns(t9)
.head 7 -   Set sPOD = 'ARH'
.head 7 -   Set sPRE = 'U'
.head 7 -   Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Pushbutton: pbExit
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выход
.head 4 -  Window Location and Size
.head 5 -  Left:   12.1"
.head 5 -  Top:    2.976"
.head 5 -  Width:  0.75"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.476"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name: \Bars98\RESOURCE\BMP\Stop2.bmp
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  ! Call SalEndDialog(F10, 0)
.head 6 -  Call SalDestroyWindow(F10)
.head 3 +  List Box: lbAR
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    -0.012"
.head 5 -  Width:  7.5"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 3.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? No
.head 4 -  Sorted? Yes
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Horizontal Scroll? No
.head 4 -  List Initialization
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  ! Call SalSendMsg(pbSAB, SAM_Click, 0, 0)
.head 6 -  Set nIndex = SalListQuerySelection(lbAR)
.head 6 -  Call SalListClear(lbDAT)
.head 6 +  If SalListQueryCount(lbAR) > 0 and nIndex >= 0
.head 7 -  Set sSAB = Left(SalListQueryTextX(lbAR, nIndex), 4)
.head 7 -  ! Set nNumFiles = Max(VisDosEnumFiles(sArchPath || sPOD || '\\%' || sPRE || sSAB || '??.???', FA_Standard, smFiles),
    0)
.head 7 -  Set nNumFiles = Max(VisDosEnumFiles(sArchPath || sPOD || '\\' || IifS(Len(sPRE)=1, '%', '') || sPRE || sSAB ||
    '??.???', FA_Standard, smFiles), 0)
.head 7 +  If cb2
.head 8 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     INTO :nNumFilesArch
     FROM klp_files f, klp_arch a
     WHERE a.tip=:sPOD and a.fn=f.fn and (substr(f.fn,2,1)=:sPRE or substr(f.fn,1,2)=:sPRE) and
           substr(f.fn,3,4)=:sSAB"))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set nIa = nNumFiles
.head 8 -  Set nNumFiles = nNumFiles + nNumFilesArch
.head 8 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT f.fn
     INTO :sFileArch
     FROM klp_files f, klp_arch a
     WHERE a.tip=:sPOD and a.fn=f.fn and (substr(f.fn,2,1)=:sPRE or substr(f.fn,1,2)=:sPRE) and
           substr(f.fn,3,4)=:sSAB"))
.head 8 +  While SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set smFiles[nIa] = sFileArch
.head 9 -  Set nIa = nIa + 1
.head 7 +  If nNumFiles > 0
.head 8 -  Set nI = 0
.head 8 +  While nI < nNumFiles
.head 9 +  If Len(sPRE) = 1
.head 10 -  Set sYear = SalStrMidX(smFiles[nI], 9, 1)
.head 10 -  ! Set sYear = Str(SalStrLop(sYear) + IifN(SalStrLop(sYear)>57, 1943, 1950))
.head 10 -  Set sYear = Str(Asc(sYear) + IifN(SalStrLop(sYear)>57, 1943, 1950))
.head 10 -  Set sDay = SalStrMidX(smFiles[nI], 6, 1)
.head 10 -  Set sDayL = sDay
.head 10 -  Set sDay = Right(Str(SalStrLop(sDayL) + IifN(SalStrLop(sDay)>57, 45, 52)), 2)
.head 10 -  Set sMonth = SalStrMidX(smFiles[nI], 7, 1)
.head 10 -  Set sMonthL = sMonth
.head 10 -  Set sMonth = Right(Str(SalStrLop(sMonthL) + IifN(SalStrLop(sMonth)>57, 45, 52)), 2)
.head 9 +  Else ! Len(sPRE) = 2
.head 10 -  Set sYear = Subs(smFiles[nI], 7, 1)
.head 10 -  Set sYear = Str(SalStrLop(sYear) + IifN(SalStrLop(sYear)>57, 1933, 1940))
.head 10 -  Set sDay = Subs(smFiles[nI], 10, 1)
.head 10 -  Set sDayL = sDay
.head 10 -  Set sDay = Right(Str(SalStrLop(sDayL) + IifN(SalStrLop(sDay)>57, 45, 52)), 2)
.head 10 -  Set sMonth = Subs(smFiles[nI], 8, 1)
.head 10 -  Set sMonthL = sMonth
.head 10 -  Set sMonth = Right(Str(SalStrLop(sMonthL) + IifN(SalStrLop(sMonth)>57, 45, 52)), 2)
.head 9 -  Set smFiles[nI] = sYear || sMonth || sDay || Right(smFiles[nI], 2)
.head 9 -  Set nI = nI + 1
.head 8 -  Call VisArraySort(smFiles, SORT_Descending, DT_String)
.head 8 -  Set nI = 0
.head 8 +  While nI < nNumFiles
.head 9 -  Call SalListAdd(lbDAT, ' ' || SalStrMidX(smFiles[nI], 6, 2) || '/' || SalStrMidX(smFiles[nI], 4, 2) || '/' ||
     Left(smFiles[nI], 4) || ' (' || Right(smFiles[nI] , 2) || ') ')
.head 9 -  Set nI = nI + 1
.head 8 -  Call SalListSetSelect(lbDAT, 0)
.head 6 +  If rbIU or rbLS
.head 7 -  Call SalTblDestroyColumns(t9)
.head 7 -  Set dfFileName = ''
.head 6 +  Else
.head 7 -  Call SalSendMsg(lbDAT, SAM_Click, 0, 0)
.head 5 +  On SAM_Create
.head 6 -  Call SalListSetSelect(lbAR, 0)
.head 6 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 3 +  Pushbutton: pbFind10
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Поиск
.head 4 -  Window Location and Size
.head 5 -  Left:   1.183"
.head 5 -  Top:    3.143"
.head 5 -  Width:  0.9"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If SalModalDialog(Find, hWndForm) = 0
.head 7 -  Set nI10 = 0
.head 7 +  While nI10 < SalListQueryCount(lbAR)
.head 8 +  If SalStrScan(SalStrUpperX(SalListQueryTextX(lbAR, nI10)), SalStrUpperX(sFrag)) > 0
.head 9 -  Call SalListSetSelect(lbAR, nI10)
.head 9 -  Call SalSetFocus(lbAR)
.head 9 -  Call SalSendMsg(lbAR, SAM_Click, 0, 0)
.head 9 -  Break
.head 8 -  Set nI10 = nI10 + 1
.head 3 +  ! Pushbutton: pbSAB
.winattr
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выбрать
.head 4 -  Window Location and Size
.head 5 -  Left:   6.683"
.head 5 -  Top:    2.321"
.head 5 -  Width:  0.9"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.end
.head 4 +   Message Actions
.head 5 -   On SAM_Click
.head 3 +  List Box: lbDAT
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   7.583"
.head 5 -  Top:    -0.012"
.head 5 -  Width:  2.1"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 3.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? No
.head 4 -  Sorted? No
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Horizontal Scroll? No
.head 4 -  List Initialization
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalTblDestroyColumns(t9)
.head 6 -  Set dfFileName = ''
.head 6 -  Set nIndex = SalListQuerySelection(lbDAT)
.head 6 +  If SalListQueryCount(lbDAT) > 0 and nIndex >= 0
.head 7 -  Set sDMY = SalListQueryTextX(lbDAT, nIndex)
.head 7 -  Set dDMY = SalDateConstruct(Val(SalStrMidX(sDMY, 7, 4)), Val(SalStrMidX(sDMY, 4, 2)), Val(SalStrMidX(sDMY, 1, 2)),
    0, 0, 0)
.head 7 +  If Len(sPRE) = 1
.head 8 -  Set sNamFil = sArchPath || sPOD || '\\%' || sPRE || sSAB || DaySymbol(dDMY) || MonthSymbol(dDMY) || '.' ||
    YearSymbol(dDMY) || SalStrMidX(sDMY, 13, 2)
.head 7 +  Else ! Len(sPRE) = 2
.head 8 -  Set sNamFil = sArchPath || sPOD || '\\' || sPRE || sSAB || YearSymbolZ(dDMY) || MonthSymbol(dDMY) || '.' ||
    DaySymbol(dDMY) || SalStrMidX(sDMY, 13, 2)
.head 7 -  ! Set dfFileName = Right(sNamFil ,12)
.head 7 -  Set dfFileName = sPOD || '\\' || Right(sNamFil ,12)
.head 7 +  If rbPD
.head 8 -  Call SalTblCreateColumn(t9, 1, .7, 9, 'МФО-А')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.5, 14, 'Счет-А')
.head 8 -  Call SalTblCreateColumn(t9, 3, 1.1, 14, 'ОКПО-А')
.head 8 -  Call SalTblCreateColumn(t9, 4, .7, 9, 'МФО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 5, 1.5, 14, 'Счет-Б')
.head 8 -  Call SalTblCreateColumn(t9, 6, 1.1, 14, 'ОКПО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.8, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 8, 1.1, 10, 'Ном.док.')
.head 8 -  Call SalTblCreateColumn(t9, 9, .8, 3, 'Код вал.')
.head 8 -  Call SalTblCreateColumn(t9, 10, 1.1, 8, 'Дата')
.head 8 -  Call SalTblCreateColumn(t9, 11, 3.914, 38, 'Плательщик')
.head 8 -  Call SalTblCreateColumn(t9, 12, 3.914, 38, 'Получатель')
.head 8 -  Call SalTblCreateColumn(t9, 13, 10.6, 160, 'Назначение платежа')
.head 8 -  Call SalTblCreateColumn(t9, 14, 2, 19, 'Дата, время приема пакета')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileGetDateTime(sNamFil, dtDateTimeNNN)
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  ! Call SalFileRead(hFile, sBuffer, 64)
.head 8 -  Call SalFileGetStr(hFile, sBuffer, 100)
.head 8 -  Set sVerLook = Right(sBuffer, Len(sBuffer)-62)
.head 8 -  Call SalFileSeek(hFile, Len(sBuffer)+2, FILE_SeekBegin)
.head 8 +  While SalFileRead(hFile, sBuffer, IifN(Val(sVerLook)<10000, 773, 781)) =
      IifN(Val(sVerLook)<10000, 773, 781) ! SalFileRead(hFile, sBuffer, 773) = 773
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, SalStrTrimX(Left(sBuffer, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(SalStrMidX(sBuffer, 9, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 3, SalStrTrimX(SalStrMidX(sBuffer, 23, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 4, SalStrTrimX(SalStrMidX(sBuffer, 37, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 5, SalStrTrimX(SalStrMidX(sBuffer, 46, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 6, SalStrTrimX(SalStrMidX(sBuffer, 60, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 7, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 75, 16)))/100, 2)), 17))
.head 9 -  Call SalTblSetColumnText(t9, 8, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 93, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 9, PadL(Right(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 103, 3)))+1000), 3), 5))
.head 9 -  Call SalTblSetColumnText(t9, 10, SalStrMidX(sBuffer, 112, 2) || '/' ||
     SalStrMidX(sBuffer, 110, 2) || '/' || SalStrMidX(sBuffer, 106, 4))
.head 9 -  Call SalTblSetColumnText(t9, 11, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 114, 38))))
.head 9 -  Call SalTblSetColumnText(t9, 12, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 152, 38))))
.head 9 -  Call SalTblSetColumnText(t9, 13, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 190, 160))))
.head 9 -  Call SalTblSetColumnText(t9, 14, SalFmtFormatDateTime(dtDateTimeNNN, 'dd-MM-yyyy hhhh:mm:ss'))
.head 9 -  Set nDDR = Val(SalStrTrimX(SalStrMidX(sBuffer, 358, 5)))
.head 9 +  If nDDR > 0
.head 10 -  Call SalFileRead(hFile, sBuffer, nDDR+2)
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbOT
.head 8 -  Call SalTblCreateColumn(t9, 1, .7, 9, 'МФО-А')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.5, 14, 'Счет-А')
.head 8 -  Call SalTblCreateColumn(t9, 3, .7, 9, 'МФО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.5, 14, 'Счет-Б')
.head 8 -  Call SalTblCreateColumn(t9, 5, 1.8, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 6, 1.1, 10, 'Ном.док.')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.1, 8, 'Дата док.')
.head 8 -  Call SalTblCreateColumn(t9, 8, 1.314, 12, 'Имя файла %A')
.head 8 -  Call SalTblCreateColumn(t9, 9, 2, 19, 'Дата, время приема пакета')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileGetDateTime(sNamFil, dtDateTimeNNN)
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 72)
.head 8 +  While SalFileRead(hFile, sBuffer, 303) = 303
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, SalStrTrimX(Left(sBuffer, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(SalStrMidX(sBuffer, 9, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 3, SalStrTrimX(SalStrMidX(sBuffer, 23, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 4, SalStrTrimX(SalStrMidX(sBuffer, 32, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 5, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 46, 16)))/100, 2)), 17))
.head 9 -  Call SalTblSetColumnText(t9, 6, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 70, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 7, SalStrMidX(sBuffer, 68, 2) || '/' ||  SalStrMidX(sBuffer, 66, 2) || '/' ||
     SalStrMidX(sBuffer, 62, 4))
.head 9 -  Call SalTblSetColumnText(t9, 8, SalStrMidX(sBuffer, 88, 12))
.head 9 -  Call SalTblSetColumnText(t9, 9, SalFmtFormatDateTime(dtDateTimeNNN, 'dd-MM-yyyy hhhh:mm:ss'))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbZay
.head 8 -  Call SalTblCreateColumn(t9, 1, 1.1, 10, 'Ном.док.')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.5, 14, 'Счет-А')
.head 8 -  Call SalTblCreateColumn(t9, 3, .7, 9, 'МФО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.5, 14, 'Счет-Б')
.head 8 -  Call SalTblCreateColumn(t9, 5, 1.1, 14, 'ОКПО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 6, 1.8, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.8, 16, 'Сумма' || PutCrLf() || 'комиссии')
.head 8 -  Call SalTblCreateColumn(t9, 8, .8, 3, 'Код' || PutCrLf() || 'вал')
.head 8 -  Call SalTblCreateColumn(t9, 9, 1.1, 9, 'Курс')
.head 8 -  Call SalTblCreateColumn(t9, 10, 1.1, 8, 'Дата' || PutCrLf() || 'действия')
.head 8 -  Call SalTblCreateColumn(t9, 11, 1.1, 8, 'Дата' || PutCrLf() || 'подачи')
.head 8 -  Call SalTblCreateColumn(t9, 12, 0.5, 2, 'Тип' || PutCrLf() || 'заявки')
.head 8 -  Call SalTblCreateColumn(t9, 13, 1.1, 10, 'Ном.' || PutCrLf() || 'кред.согл.')
.head 8 -  Call SalTblCreateColumn(t9, 14, 1.1, 8, 'Дата' || PutCrLf() || 'кред.согл.')
.head 8 -  Call SalTblCreateColumn(t9, 15, .8, 3, 'Код вал.' || PutCrLf() || 'конверсии')
.head 8 -  Call SalTblCreateColumn(t9, 16, 2.2, 16, 'Идентификатор' || PutCrLf() || 'документа')
.head 8 -  Call SalTblCreateColumn(t9, 17, 2, 19, 'Дата, время' || PutCrLf() || 'приема пакета')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileGetDateTime(sNamFil, dtDateTimeNNN)
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 72)
.head 8 -  Set nVers = Val(Subs(sBuffer, 63, 8))
.head 8 -  Set nSmes = IifN(nVers>10000, 16, 0)
.head 8 -  ! Call SalFileGetStr(hFile, sBuffer, 72)
.head 8 +  While SalFileRead(hFile, sBuffer, 818+nSmes) = 818+nSmes
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, StrDosToWinX(SalStrTrimX(Left(sBuffer, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(Subs(sBuffer, 20, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 3, SalStrTrimX(Subs(sBuffer, 34, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 4, SalStrTrimX(Subs(sBuffer, 43, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 5, SalStrTrimX(Subs(sBuffer, 57, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 6, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     Subs(sBuffer, 71, 16)))/100, 2)), 17))
.head 9 -  Call SalTblSetColumnText(t9, 7, IifS(nSmes=16, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     Subs(sBuffer, 87, 16)))/100, 2)), 17), Spac(17)))
.head 9 -  Call SalTblSetColumnText(t9, 8, Right('000' || SalStrTrimX(
     Subs(sBuffer, 87+nSmes, 3)), 3))
.head 9 -  Call SalTblSetColumnText(t9, 9, PadL(SalNumberToStrX(Val(Subs(sBuffer, 90+nSmes, 12))/10000, 4), 9))
.head 9 -  Call SalTblSetColumnText(t9, 10, IifS(Val(SalStrTrimX(Subs(sBuffer, 102+nSmes, 8)))=0, '',
     Subs(sBuffer, 108+nSmes, 2) || '/' || Subs(sBuffer, 106+nSmes, 2) || '/' || Subs(sBuffer, 102+nSmes, 4)))
.head 9 -  Call SalTblSetColumnText(t9, 11, IifS(Val(SalStrTrimX(Subs(sBuffer, 110+nSmes, 8)))=0, '',
     Subs(sBuffer, 116+nSmes, 2) || '/' || Subs(sBuffer, 114+nSmes, 2) || '/' || Subs(sBuffer, 110+nSmes, 4)))
.head 9 -  Call SalTblSetColumnText(t9, 12, Subs(sBuffer, 378+nSmes, 1) || '-' || IifS(
     Subs(sBuffer, 378+nSmes, 1)='1', 'пок', IifS(Subs(sBuffer, 378+nSmes, 1)='2', 'покп', IifS(
     Subs(sBuffer, 378+nSmes, 1)='3', 'конв', IifS(Subs(sBuffer, 378+nSmes, 1)='4', 'прод', 'проб')))))
.head 9 -  Call SalTblSetColumnText(t9, 13, StrDosToWinX(SalStrTrimX(Subs(sBuffer, 379+nSmes, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 14, IifS(Val(SalStrTrimX(Subs(sBuffer, 389+nSmes, 8)))=0, '',
     Subs(sBuffer, 395+nSmes, 2) || '/' || Subs(sBuffer, 393+nSmes, 2) || '/' || Subs(sBuffer, 389+nSmes, 4)))
.head 9 -  Call SalTblSetColumnText(t9, 15, IifS(Val(Subs(sBuffer, 397+nSmes, 3))=0, '', '   ' || Right('000' ||
     SalStrTrimX(Subs(sBuffer, 397+nSmes, 3)), 3)))
.head 9 -  Call SalTblSetColumnText(t9, 16, SalStrTrimX(Subs(sBuffer, 400+nSmes, 16)))
.head 9 -  Call SalTblSetColumnText(t9, 17, SalFmtFormatDateTime(dtDateTimeNNN, 'dd-MM-yyyy hhhh:mm:ss'))
.head 9 -  Set nDDR = Val(SalStrTrimX(Subs(sBuffer, 416+nSmes, 5)))
.head 9 +  If nDDR > 0
.head 10 -  Call SalFileRead(hFile, sBuffer, nDDR+2)
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbVD
.head 8 -  Call SalTblCreateColumn(t9, 1, 1.5, 14, 'Счет-А')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.1, 14, 'ОКПО-А')
.head 8 -  Call SalTblCreateColumn(t9, 3, 1.1, 10, 'Номер док.')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.1, 8, 'Дата док.')
.head 8 -  Call SalTblCreateColumn(t9, 5, 1.8, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 6, .8, 3, 'Код' || PutCrLf() || 'вал')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.5, 14, 'Счет' || PutCrLf() || 'погашения')
.head 8 -  Call SalTblCreateColumn(t9, 8, 1.1, 10, 'Номер' || PutCrLf() || 'кред.дог.')
.head 8 -  Call SalTblCreateColumn(t9, 9, 1.1, 8, 'Дата' || PutCrLf() || 'кред.дог.')
.head 8 -  Call SalTblCreateColumn(t9, 10, .8, 3, 'Код вал.' || PutCrLf() || 'комисии')
.head 8 -  Call SalTblCreateColumn(t9, 11, .8, 3, 'Код' || PutCrLf() || 'страны')
.head 8 -  Call SalTblCreateColumn(t9, 12, .8, 3, 'Код' || PutCrLf() || 'операции')
.head 8 -  Call SalTblCreateColumn(t9, 13, .8, 3, 'Затраты' || PutCrLf() || 'на перевод')
.head 8 -  Call SalTblCreateColumn(t9, 14, 2.2, 16, 'Идентификатор' || PutCrLf() || 'документа')
.head 8 -  Call SalTblCreateColumn(t9, 15, 2, 19, 'Дата, время' || PutCrLf() || 'приема пакета')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileGetDateTime(sNamFil, dtDateTimeNNN)
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 72)
.head 8 -  ! Call SalFileGetStr(hFile, sBuffer, 100)
.head 8 -  ! Set sVerLook = Right(sBuffer, Len(sBuffer)-62)
.head 8 -  ! Call SalFileSeek(hFile, Len(sBuffer)+2, FILE_SeekBegin)
.head 8 +  While SalFileRead(hFile, sBuffer, 1724) = 1724
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, SalStrTrimX(Left(sBuffer, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(Subs(sBuffer, 15, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 3, StrDosToWinX(SalStrTrimX(Subs(sBuffer, 29, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 4, IifS(Val(SalStrTrimX(Subs(sBuffer, 39, 8)))=0, '', Subs(sBuffer, 45, 2) || '/'
     || Subs(sBuffer, 43, 2) || '/' || Subs(sBuffer, 39, 4)))
.head 9 -  Call SalTblSetColumnText(t9, 5, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     Subs(sBuffer, 47, 16)))/100, 2)), 17))
.head 9 -  Call SalTblSetColumnText(t9, 6, Right('000' || SalStrTrimX(Subs(sBuffer, 63, 3)), 3))
.head 9 -  Call SalTblSetColumnText(t9, 7, SalStrTrimX(Subs(sBuffer, 66, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 8, StrDosToWinX(SalStrTrimX(Subs(sBuffer, 80, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 9, IifS(Val(SalStrTrimX(Subs(sBuffer, 90, 8)))=0, '', Subs(sBuffer, 96, 2) || '/'
     || Subs(sBuffer, 94, 2) || '/' || Subs(sBuffer, 90, 4)))
.head 9 -  Call SalTblSetColumnText(t9, 10, IifS(Val(Subs(sBuffer, 98, 3))=0, '', '  ' || Right('000' || SalStrTrimX(
     Subs(sBuffer, 98, 3)), 3)))
.head 9 -  Call SalTblSetColumnText(t9, 11, IifS(Val(Subs(sBuffer, 1292, 3))=0, '', ' ' || Right('000' || SalStrTrimX(
     Subs(sBuffer, 1292, 3)), 3)))
.head 9 -  ! Call SalTblSetColumnText(t9, 12, IifS(Val(Subs(sBuffer, 1295, 7))=0, '', '  ' || Right('0000000' ||
     SalStrTrimX(Subs(sBuffer, 1295, 7)), 7)))
.head 9 -  Call SalTblSetColumnText(t9, 12, IifS(Val(Subs(sBuffer, 1295, 7))=0, '', ' ' || SalStrTrimX(
     Subs(sBuffer, 1295, 7))))
.head 9 -  Call SalTblSetColumnText(t9, 13, IifS(Val(Subs(sBuffer, 1302, 1))>2 or Val(Subs(sBuffer, 66, 14))>0, '', '  ' ||
     Subs(sBuffer, 1302, 1) || '-' || IifS(Subs(sBuffer, 1302, 1)='0', 'OUR', IifS(
     Subs(sBuffer, 1302, 1)='1', 'BEN', 'SHA'))))
.head 9 -  Call SalTblSetColumnText(t9, 14, SalStrTrimX(Subs(sBuffer, 1311, 16)))
.head 9 -  Call SalTblSetColumnText(t9, 15, SalFmtFormatDateTime(dtDateTimeNNN, 'dd-MM-yyyy hhhh:mm:ss'))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  ! If rbRP
.head 8 -   Call SalTblCreateColumn((9, 1, 1, 9, 'МФО-А')
.head 8 -   Call SalTblCreateColumn((9, 2, 2, 14, 'Счет-А')
.head 8 -   Call SalTblCreateColumn((9, 3, 2, 14, 'ОКПО-А')
.head 8 -   Call SalTblCreateColumn((9, 4, 1, 9, 'МФО-Б')
.head 8 -   Call SalTblCreateColumn((9, 5, 2, 14, 'Счет-Б')
.head 8 -   Call SalTblCreateColumn((9, 6, 2, 14, 'ОКПО-Б')
.head 8 -   Call SalTblCreateColumn((9, 7, 2, 16, 'Сумма')
.head 8 -   Call SalTblCreateColumn((9, 8, 1, 10, 'Номер док.')
.head 8 -   Call SalTblCreateColumn((9, 9, 1, 3, 'Код валюты')
.head 8 -   Call SalTblCreateColumn((9, 10, 1, 8, 'Дата')
.head 8 -   Call SalTblCreateColumn((9, 11, 4, 38, 'Плательщик')
.head 8 -   Call SalTblCreateColumn((9, 12, 4, 38, 'Получатель')
.head 8 -   Call SalTblCreateColumn((9, 13, 4, 38, 'Назначение платежа')
.head 7 +  If rbKW
.head 8 -  Call SalTblCreateColumn(t9, 1, 1.314, 12, 'Имя файла')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.357, 2, 'Код возврата')
.head 8 -  Call SalTblCreateColumn(t9, 3, .957, 4, 'К-во док.')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.829, 24, 'Сумма документов')
.head 8 -  Call SalTblCreateColumn(t9, 5, 2, 19, 'Дата, время квитанции')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileGetDateTime(sNamFil, dtDateTimeNNN)
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 56)
.head 8 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 8 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 8 -  Call SalTblSetColumnText(t9, 1, Left(sBuffer, 12))
.head 8 -  Call SalTblSetColumnText(t9, 2, PadL(SalStrTrimX(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 26, 2))))), 5))
.head 8 -  Call SalTblSetColumnText(t9, 3, PadL(SalStrTrimX(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 28, 4))))), 6))
.head 8 -  Call SalTblSetColumnText(t9, 4, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 32, 24)))/100, 2)), 17))
.head 8 -  Call SalTblSetColumnText(t9, 5, SalFmtFormatDateTime(dtDateTimeNNN, 'dd-MM-yyyy hhhh:mm:ss'))
.head 8 +  If Val(SalStrMidX(sBuffer, 26, 2)) > 0
.head 9 -  Call VisTblSetRowColor(t9, nNewRow, COLOR_Red)
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbZD
.head 8 -  Call SalTblCreateColumn(t9, 1, 1.314, 12, 'Имя файла')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.357, 2, 'Код возврата')
.head 8 -  Call SalTblCreateColumn(t9, 3, .957, 4, 'К-во док.')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.829, 24, 'Сумма документов')
.head 8 -  Call SalTblCreateColumn(t9, 5, 2, 19, 'Дата, время квитанции')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileGetDateTime(sNamFil, dtDateTimeNNN)
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 56)
.head 8 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 8 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 8 -  Call SalTblSetColumnText(t9, 1, Left(sBuffer, 12))
.head 8 -  Call SalTblSetColumnText(t9, 2, PadL(SalStrTrimX(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 26, 2))))), 5))
.head 8 -  Call SalTblSetColumnText(t9, 3, PadL(SalStrTrimX(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 28, 4))))), 6))
.head 8 -  Call SalTblSetColumnText(t9, 4, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 32, 24)))/100, 2)), 17))
.head 8 -  Call SalTblSetColumnText(t9, 5, SalFmtFormatDateTime(dtDateTimeNNN, 'dd-MM-yyyy hhhh:mm:ss'))
.head 8 +  If Val(SalStrMidX(sBuffer, 26, 2)) > 0
.head 9 -  Call VisTblSetRowColor(t9, nNewRow, COLOR_Red)
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbZW
.head 8 -  Call SalTblCreateColumn(t9, 1, 1.5, 14, 'Счет клиента')
.head 8 -  Call SalTblCreateColumn(t9, 2, .857, 3, 'Код вал.')
.head 8 -  Call SalTblCreateColumn(t9, 3, 2.687, 3, 'Дата запрашиваемой выписки')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 32)
.head 8 +  While SalFileRead(hFile, sBuffer, 31) = 31
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, SalStrTrimX(Left(sBuffer, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 2, PadL(Right(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 14, 3)))+1000), 3), 5))
.head 9 -  Call SalTblSetColumnText(t9, 3, PadL(SalStrMidX(sBuffer, 23 ,2) || '-' || SalStrMidX(sBuffer, 21, 2) || '-' ||
     SalStrMidX(sBuffer, 17, 4), 18))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbLS
.head 8 -  ! Call SalTblCreateColumn(t9, 1, 1, 9, 'МФО-А')
.head 8 -  ! Call SalTblCreateColumn(t9, 2, 2, 14, 'Счет-А')
.head 8 -  ! Call SalTblCreateColumn(t9, 3, 3, 38, 'Плательщик')
.head 8 -  ! Call SalTblCreateColumn(t9, 4, 1, 9, 'МФО-Б')
.head 8 -  ! Call SalTblCreateColumn(t9, 5, 2, 14, 'Счет-Б')
.head 8 -  ! Call SalTblCreateColumn(t9, 6, 3, 38, 'Получатель')
.head 8 -  ! Call SalTblCreateColumn(t9, 7, 2, 14, 'ОКПО -Б')
.head 8 -  ! Call SalTblCreateColumn(t9, 8, 2, 16, 'Сумма')
.head 8 -  ! Call SalTblCreateColumn(t9, 9, 1, 10, 'Номер док.')
.head 8 -  ! Call SalTblCreateColumn(t9, 10, 1, 3, 'Код валюты')
.head 8 -  ! Call SalTblCreateColumn(t9, 11, 1, 8, 'Дата оплаты')
.head 8 -  ! Call SalTblCreateColumn(t9, 12, 1, 8, 'Дата предыдущего движения')
.head 8 -  ! Call SalTblCreateColumn(t9, 13, 4, 160, 'Назначение платежа')
.head 8 -  ! Call SalTblCreateColumn(t9, 14, 1, 2, 'Символ кассплана')
.head 8 -  ! Call SalTblCreateColumn(t9, 15, 2, 12, 'Имя файла A')
.head 8 -  Call SalPrtGetDefault(sDeviceDef, sDriverDef, sPortDef)
.head 8 -  Call SalPrtSetDefault('Generic / Text Only', 'WINSPOOL', 'FILE:')
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalCreateWindow(frm_BOR, hWndForm, sNamFil, sOldNamFil, sDeviceDef, sDriverDef, sPortDef)
.head 7 +  If rbDW
.head 8 -  Call SalTblCreateColumn(t9, 1, .717, 9, 'МФО-А')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.517, 14, 'Счет-А')
.head 8 -  Call SalTblCreateColumn(t9, 3, .717, 9, 'МФО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.517, 14, 'Счет-Б')
.head 8 -  Call SalTblCreateColumn(t9, 5, 3.914, 14, 'Наименование клиента Б')
.head 8 -  Call SalTblCreateColumn(t9, 6, 1.814, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.129, 10, 'Номер док.')
.head 8 -  Call SalTblCreateColumn(t9, 8, 4.114, 40, 'Причина возврата')
.head 8 -  Call SalTblCreateColumn(t9, 9, 1.314, 12, 'Имя файла A')
.head 8 -  Call SalTblCreateColumn(t9, 10, 10.6, 160, 'Назначение платежа')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 32)
.head 8 +  While SalFileRead(hFile, sBuffer, 336) = 336
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, SalStrTrimX(Left(sBuffer, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(SalStrMidX(sBuffer, 9, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 3, SalStrTrimX(SalStrMidX(sBuffer, 23, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 4, SalStrTrimX(SalStrMidX(sBuffer, 32, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 5, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 46, 38))))
.head 9 -  Call SalTblSetColumnText(t9, 6, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 84, 16)))/100, 2)), 17))
.head 9 -  Call SalTblSetColumnText(t9, 7, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 100, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 8, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 278, 40))))
.head 9 -  Call SalTblSetColumnText(t9, 9, SalStrMidX(sBuffer, 318, 12))
.head 9 -  Call SalTblSetColumnText(t9, 10, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 110, 160))))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbDO
.head 8 -  Call SalTblCreateColumn(t9, 1, .717, 9, 'МФО-А')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.517, 14, 'Счет-А')
.head 8 -  Call SalTblCreateColumn(t9, 3, .717, 9, 'МФО-Б')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.517, 14, 'Счет-Б')
.head 8 -  Call SalTblCreateColumn(t9, 5, 3.914, 14, 'Наименование клиента Б')
.head 8 -  Call SalTblCreateColumn(t9, 6, 1.814, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.129, 10, 'Номер док.')
.head 8 -  Call SalTblCreateColumn(t9, 8, 1.314, 12, 'Имя файла A')
.head 8 -  Call SalTblCreateColumn(t9, 9, 10.6, 160, 'Назначение платежа')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 32)
.head 8 +  While SalFileRead(hFile, sBuffer, 296) = 296
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, SalStrTrimX(Left(sBuffer, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(SalStrMidX(sBuffer, 9, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 3, SalStrTrimX(SalStrMidX(sBuffer, 23, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 4, SalStrTrimX(SalStrMidX(sBuffer, 32, 14)))
.head 9 -  Call SalTblSetColumnText(t9, 5, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 46, 38))))
.head 9 -  Call SalTblSetColumnText(t9, 6, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 84, 16)))/100, 2)), 17))
.head 9 -  Call SalTblSetColumnText(t9, 7, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 100, 10))))
.head 9 -  Call SalTblSetColumnText(t9, 8, SalStrMidX(sBuffer, 278, 12))
.head 9 -  Call SalTblSetColumnText(t9, 9, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 110, 160))))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbNvaldok
.head 8 -  Call SalTblCreateColumn(t9, 1, .717, 9, 'Тип' || PutCrLf() || 'квитанции')
.head 8 -  Call SalTblCreateColumn(t9, 2, 1.1, 10, 'Ном.док.')
.head 8 -  Call SalTblCreateColumn(t9, 3, 1.8, 16, 'Сумма')
.head 8 -  Call SalTblCreateColumn(t9, 4, .6, 3, 'Код' || PutCrLf() || 'вал')
.head 8 -  Call SalTblCreateColumn(t9, 5, .717, 9, 'Идентификатор' || PutCrLf() || 'документа')
.head 8 -  Call SalTblCreateColumn(t9, 6, 1.314, 12, 'Имя файла')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.517, 14, 'Код' || PutCrLf() || 'возврата')
.head 8 -  Call SalTblCreateColumn(t9, 8, 1.517, 14, 'Текст' || PutCrLf() || 'возврата')
.head 8 -  Call SalTblCreateColumn(t9, 9, 2, 19, 'Дата и время' || PutCrLf() || 'квитанции')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 32)
.head 8 +  While SalFileGetStr(hFile, sBuffer, 256)
!     SalFileRead(hFile, sBuffer, 198) = 198
.head 9 +  If Val(Left(sBuffer, 2)) <= 0
.head 10 -  Break
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, '    ' || SalStrTrimX(Left(sBuffer, 2)))
.head 9 +  If Len(sBuffer) > 198
.head 10 -  Call SalTblSetColumnText(t9, 2, StrDosToWinX(SalStrTrimX(Subs(sBuffer, 197, 10))))
.head 10 +  If Val(Subs(sBuffer, 207, 16)) > 0
.head 11 -  Call SalTblSetColumnText(t9, 3, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     Subs(sBuffer, 207, 16)))/100, 2)), 17))
.head 10 +  If Val(Subs(sBuffer, 223, 3)) > 0
.head 11 -  Call SalTblSetColumnText(t9, 4, Right(Str(Val(SalStrTrimX(Subs(sBuffer, 223, 3)))+1000), 3))
.head 9 -  Call SalTblSetColumnText(t9, 5, SalStrTrimX(Subs(sBuffer, 5, 16)))
.head 9 -  Call SalTblSetColumnText(t9, 6, SalStrTrimX(Subs(sBuffer, 181, 12)))
.head 9 -  Call SalTblSetColumnText(t9, 7, '   ' || Right(' ' || SalStrTrimX(Subs(sBuffer, 3, 2)), 2))
.head 9 -  Call SalTblSetColumnText(t9, 8, StrDosToWinX(SalStrTrimX(Subs(sBuffer, 21, 160))))
.head 9 +  If Len(sBuffer) > 198
.head 10 -  Call SalTblSetColumnText(t9, 9, Subs(sBuffer, 232, 2) || '-' || Subs(sBuffer, 230, 2) || '-' ||
     Subs(sBuffer, 226, 4) || ' ' || Subs(sBuffer, 234, 2) || ':' || Subs(sBuffer, 236, 2) || ':' ||
     Subs(sBuffer, 238, 2))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbKV
.head 8 -  Call SalTblCreateColumn(t9, 1, .9, 3, 'Код вал')
.head 8 -  Call SalTblCreateColumn(t9, 2, .429, 3, 'Сим')
.head 8 -  Call SalTblCreateColumn(t9, 3, 1.614, 15, 'Наименование')
.head 8 -  Call SalTblCreateColumn(t9, 4, 1.1, 6, 'Этал.сумма')
.head 8 -  Call SalTblCreateColumn(t9, 5, 1.114, 8, 'Дата курса')
.head 8 -  Call SalTblCreateColumn(t9, 6, .929, 12, 'Офф.курс')
.head 8 -  Call SalTblCreateColumn(t9, 7, 1.271, 12, 'Курс покупки')
.head 8 -  Call SalTblCreateColumn(t9, 8, 1.271, 12, 'Курс продажи')
.head 8 -  Call SalTblCreateColumn(t9, 9, 1.586, 8, 'Дата пред.курса')
.head 8 -  Call SalTblCreateColumn(t9, 10, 1.4, 12, 'Пред.офф.курс')
.head 8 -  Call SalTblCreateColumn(t9, 11, 1.386, 12, 'Пред.курс пок')
.head 8 -  Call SalTblCreateColumn(t9, 12, 1.486, 12, 'Пред.курс прод')
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 32)
.head 8 +  While SalFileRead(hFile, sBuffer, 117) = 117
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, PadL(Right(Str(Val(SalStrTrimX(Left(sBuffer, 3)))+1000), 3), 5))
.head 9 -  Call SalTblSetColumnText(t9, 2, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 3, 3))))
.head 9 -  Call SalTblSetColumnText(t9, 3, StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 6, 15))))
.head 9 -  Call SalTblSetColumnText(t9, 4, PadL(SalStrTrimX(Str(Val(SalStrTrimX(SalStrMidX(sBuffer, 21, 6))))), 7))
.head 9 -  Call SalTblSetColumnText(t9, 5, SalStrMidX(sBuffer, 33, 2) || '/' || SalStrMidX(sBuffer, 31, 2) || '/' ||
     SalStrMidX(sBuffer, 27, 4))
.head 9 -  Call SalTblSetColumnText(t9, 6, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 43, 12))), 4)), 8))
.head 9 -  Call SalTblSetColumnText(t9, 7, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 67, 12))), 4)), 10))
.head 9 -  Call SalTblSetColumnText(t9, 8, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 79, 12))), 4)), 10))
.head 9 -  Call SalTblSetColumnText(t9, 9, PadL(SalStrMidX(sBuffer, 41, 2) || '/' || SalStrMidX(sBuffer, 39, 2) || '/' ||
     SalStrMidX(sBuffer, 35, 4), 12))
.head 9 -  Call SalTblSetColumnText(t9, 10, PadL(SalStrTrimX(SalNumberToStrX(Val(SalStrTrimX(
     SalStrMidX(sBuffer, 55, 12))), 4)), 10))
.head 9 -  Call SalTblSetColumnText(t9, 11, PadL(SalStrTrimX(SalNumberToStrX(Val(
     SalStrTrimX(SalStrMidX(sBuffer, 91, 12))), 4)), 10))
.head 9 -  Call SalTblSetColumnText(t9, 12, PadL(SalStrTrimX(SalNumberToStrX(Val(
     SalStrTrimX(SalStrMidX(sBuffer, 103, 12))), 4)), 11))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 +  If rbIU
.head 8 -  Call SalTblCreateColumn(t9, 1, 3.914, 38, "Наименование банка")
.head 8 -  Call SalTblCreateColumn(t9, 2, .729, 9, "МФО")
.head 8 -  Call SalTblCreateColumn(t9, 3, .514, 4, "Код")
.head 8 -  Call SalTblCreateColumn(t9, 4, 4.371, 1,
     "Операция(D,I,U-удаление,вставка,обновление)")
.head 8 -  ! чтение файла
.head 8 -  Set sOldNamFil = sNamFil
.head 8 -  Set sNamFil = ArchName(sNamFil, sPOD, Right(sNamFil, 12))
.head 8 -  Call SalFileOpen(hFile, sNamFil, OF_Read)
.head 8 -  Call SalFileRead(hFile, sBuffer, 32)
.head 8 -  Set n1 = Val(SalStrMidX(sBuffer, 26, 4))
.head 8 -  Set n11 = 0
.head 8 +  While SalFileRead(hFile, sBuffer, 54) = 54 and  n11 < n1
.head 9 -  Set nNewRow = SalTblInsertRow(t9, TBL_MaxRow)
.head 9 -  Set n11 = n11 + 1
.head 9 -  Call SalTblSetFocusRow(t9, nNewRow)
.head 9 -  Call SalTblSetColumnText(t9, 1, StrDosToWinX(SalStrTrimX(Left(sBuffer, 38))))
.head 9 -  Call SalTblSetColumnText(t9, 2, SalStrTrimX(SalStrMidX(sBuffer, 38, 9)))
.head 9 -  Call SalTblSetColumnText(t9, 3, SalStrMidX(sBuffer, 47, 4))
.head 9 -  Set sTemp = SalStrMidX(sBuffer, 51, 1)
.head 9 -  Call SalTblSetColumnText(t9, 4, PadL(sTemp, IifN(sTemp='U', 14, IifN(sTemp='I', 12, 10))))
.head 8 -  Call SalFileClose(hFile)
.head 8 +  If sOldNamFil != sNamFil
.head 9 -  Call VisFileDelete(sNamFil)
.head 7 -  ! добавочка 
.head 7 -  Set nColPos = 1
.head 7 +  Loop
.head 8 -  Set hWndCol = SalTblGetColumnWindow(t9, nColPos, COL_GetPos)
.head 8 +  If hWndCol = hWndNULL
.head 9 -  Break
.head 8 -  Call SalTblSetColumnFlags(hWndCol, COL_Editable, FALSE)
.head 8 -  Set nColPos = nColPos + 1
.head 7 -  Call SalTblSetFlagsAnyRows(t9, ROW_New, FALSE, 0, 0)
.head 7 -  !
.head 7 -  Call SalTblSetFocusRow(t9, 0)
.head 7 -  Call VisTblAutoSizeColumn(t9, hWndNULL)
.head 7 -  Call SalTblKillFocus(t9)
.head 7 -  Call SalSetFocus(lbDAT)
.head 5 +  On SAM_Create
.head 6 -  Call SalListSetSelect(lbDAT, 0)
.head 6 -  Call SalSendMsg(lbDAT, SAM_Click, 0, 0)
.head 3 +  ! Pushbutton: pbDAT
.winattr
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выбрать
.head 4 -  Window Location and Size
.head 5 -  Left:   8.783"
.head 5 -  Top:    2.321"
.head 5 -  Width:  0.9"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.end
.head 4 -   Message Actions
.head 3 +  Child Table: t9
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.1"
.head 6 -  Top:    3.44"
.head 6 -  Width:  12.8"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 3.143"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Courier
.head 5 -  Font Size: 9
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  View: Table
.head 5 -  Allow Row Sizing? No
.head 5 -  Lines Per Row: Default
.head 4 -  Memory Settings
.head 5 -  Maximum Rows in Memory: Default
.head 5 -  Discardable? No
.head 4 -  Contents
.head 4 -  Functions
.head 4 -  Window Variables
.head 4 -  Message Actions
.head 3 -  Background Text: клиенты
.head 4 -  Resource Id: 52813
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.183"
.head 5 -  Top:    3.167"
.head 5 -  Width:  0.9"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: Underline
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Background Text: даты
.head 4 -  Resource Id: 52814
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   7.683"
.head 5 -  Top:    3.167"
.head 5 -  Width:  0.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Underline
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Check Box: cb2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Включать АРХИВЫ
.head 4 -  Window Location and Size
.head 5 -  Left:   9.783"
.head 5 -  Top:    3.0"
.head 5 -  Width:  2.1"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Chartreuse
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If rbPD
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbPD, SAM_Click, 0, 0)
.head 6 +  Else If rbOT
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbOT, SAM_Click, 0, 0)
.head 6 +  Else If rbZay
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbZay, SAM_Click, 0, 0)
.head 6 +  Else If rbVD
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbVD, SAM_Click, 0, 0)
.head 6 +  Else If rbKW
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbKW, SAM_Click, 0, 0)
.head 6 +  Else If rbZW
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbZW, SAM_Click, 0, 0)
.head 6 +  Else If rbLS
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbLS, SAM_Click, 0, 0)
.head 6 +  Else If rbDW
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbDW, SAM_Click, 0, 0)
.head 6 +  Else If rbDO
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbDO, SAM_Click, 0, 0)
.head 6 +  Else If rbNvaldok
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbNvaldok, SAM_Click, 0, 0)
.head 6 +  Else If rbKV
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbKV, SAM_Click, 0, 0)
.head 6 +  Else If rbIU
.head 7 -  ! Call SalSendMsg(rbZE, SAM_Click, 0, 0)
.head 7 -  Call SalSendMsg(rbIU, SAM_Click, 0, 0)
.head 3 -  Background Text: по датам
.head 4 -  Resource Id: 52815
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   10.083"
.head 5 -  Top:    3.214"
.head 5 -  Width:  1.683"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Chartreuse
.head 4 -  Background Color: Default
.head 3 +  Data Field: dfFileName
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   3.483"
.head 6 -  Top:    3.262"
.head 6 -  Width:  2.6"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.167"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? No
.head 5 -  Justify: Right
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Royal Blue
.head 5 -  Background Color: 3D Face Color
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 2 +  Functions
.head 3 +  Function: ArchName
.head 4 -  Description: получить полное имя временного файла с путем, если информация находится в АРХИВЕ БД
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sFiNa
.head 5 -  String: sPPP
.head 5 -  String: sShort
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: sLong
.head 5 -  Long String: s65534
.head 5 -  Boolean: bFL
.head 5 -  File Handle: fH
.head 5 -  Date/Time: dFileDate
.head 4 +  Actions
.head 5 +  If File(sFiNa)
.head 6 -  Return sFiNa
.head 5 +  Else
.head 6 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT f.body,a.filedate
     INTO :sLong,:dFileDate
     FROM klp_files f, klp_arch a
     WHERE f.fn=a.fn and f.fn=:sShort and a.tip=:sPPP"))
.head 6 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 6 -  ! Call SalStrUncompress(sLong) ! не работает, как надо
.head 6 -  Call VisFileOpen(fH, sTempPath || sShort, OF_Create)
.head 6 -  Set bFL = TRUE
.head 6 +  While bFL
.head 7 +  If Len(sLong) > 65534
.head 8 -  Set s65534 = Left(sLong, 65534)
.head 8 -  Set sLong = Subs(sLong, 65535, Len(sLong)-65534)
.head 8 -  Call VisFileWrite(fH, s65534, Len(s65534))
.head 7 +  Else
.head 8 +  If Len(sLong) = 0
.head 9 -  Break
.head 8 +  Else
.head 9 -  Set s65534 = sLong
.head 9 -  Set bFL = FALSE
.head 8 -  Call VisFileWrite(fH, s65534, Len(s65534))
.head 6 -  Call VisFileClose(fH)
.head 6 -  Call SalFileSetDateTime(sTempPath || sShort, dFileDate)
.head 6 -  Return sTempPath || sShort
.head 2 +  Window Parameters
.head 3 -  Window Handle: hPb
.head 2 +  Window Variables
.head 3 -  Number: nNumFiles
.head 3 -  Number: nNumFilesArch
.head 3 -  String: smFiles[*]
.head 3 -  String: sDay
.head 3 -  String: sDayL
.head 3 -  String: sMonth
.head 3 -  String: sMonthL
.head 3 -  String: sYear
.head 3 -  String: sPOD
.head 3 -  String: sPRE
.head 3 -  String: sDMY
.head 3 -  Date/Time: dDMY
.head 3 -  String: sNamFil
.head 3 -  String: sOldNamFil
.head 3 -  String: sBuffer
.head 3 -  Number: nDDR
.head 3 -  File Handle: hFile
.head 3 -  Number: nNewRow
.head 3 -  String: sTemp
.head 3 -  Number: n1
.head 3 -  Number: n11
.head 3 -  String: sDeviceDef
.head 3 -  String: sDriverDef
.head 3 -  String: sPortDef
.head 3 -  Number: nI10
.head 3 -  Number: nIa
.head 3 -  Number: nI
.head 3 -  String: sFileArch
.head 3 -  Date/Time: dtDateTimeNNN
.head 3 -  !
.head 3 -  String: sVerLook
.head 3 -  !
.head 3 -  Number: nVers
.head 3 -  Number: nSmes
.head 3 -  !
.head 3 -  Number: nColPos
.head 3 -  Window Handle: hWndCol
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  ! Call SetWindowFullSize(hWndForm)
.head 4 -  Set sPOD = 'ADR'
.head 4 -  Set sPRE = 'A'
.head 4 -  Set nI = 0
.head 4 -  Set nLenArr = LenArray(smSAB)
.head 4 -  Call SalListClear(lbAR)
.head 4 +  While nI <= nLenArr
.head 5 -  Call SalListAdd(lbAR, smSAB[nI] || ' ' || smNMK[nI])
.head 5 -  Set nI = nI + 1
.head 3 +  On SAM_Destroy
.head 4 -  Call SalEnableWindow(hPb)
.head 4 -  Call menu12.Message('Выход из работы с архивом.', FALSE)
.head 1 +  Form Window: F8
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Просмотр почтовых ящмков клиентов
.head 2 -  Icon File:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Automatically Created at Runtime? No
.head 3 -  Initial State: Normal
.head 3 -  Maximizable? Yes
.head 3 -  Minimizable? Yes
.head 3 -  System Menu? Yes
.head 3 -  Resizable? Yes
.head 3 -  Window Location and Size
.head 4 -  Left:   -1.138"
.head 4 -  Top:    0.177"
.head 4 -  Width:  13.283"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 6.714"
.head 4 -  Height Editable? Yes
.head 3 -  Form Size
.head 4 -  Width:  Default
.head 4 -  Height: Default
.head 4 -  Number of Pages: Dynamic
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: просмотр почтовых ящиков клиентов
.head 2 -  Named Menus
.head 2 -  Menu
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  List Box: lbSABj
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   -0.017"
.head 5 -  Top:    0.155"
.head 5 -  Width:  5.1"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 5.786"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? No
.head 4 -  Sorted? Yes
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Courier
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Horizontal Scroll? No
.head 4 -  List Initialization
.head 4 +  Message Actions
.head 5 +  On SAM_Create
.head 6 -  Call SalListSetSelect(lbSABj, 0)
.head 6 -  Call SalSendMsg(lbSABj, SAM_Click, 0, 0)
.head 5 +  On SAM_Click
.head 6 -  Set nIndex = SalListQuerySelection(lbSABj)
.head 6 +  If SalListQueryCount(lbSABj) > 0 and nIndex >= 0
.head 7 -  Set sSAB8 = Left(SalListQueryTextX(lbSABj, nIndex), 4)
.head 7 -  Set nIN = VisDosEnumFileInfo(sDiskKata || sSAB8 || '\\IN\\*.*', FA_Standard, sFilesI, nSizesI, dtDateTimesI,
    nAttributesI)
.head 7 -  Call SalListClear(lbIN)
.head 7 -  Set nOUT = VisDosEnumFileInfo(sDiskKata || sSAB8 || '\\OUT\\*.*', FA_Standard, sFilesO, nSizesO, dtDateTimesO,
    nAttributesO)
.head 7 -  Call SalListClear(lbOUT)
.head 7 +  If nIN > 0
.head 8 -  Set nI = 0
.head 8 +  While nI < nIN
.head 9 -  Call SalListAdd(lbIN, '    ' || PadR(sFilesI[nI], 12) || PadL(Str(nSizesI[nI]), 8) || '    ' ||
     SalFmtFormatDateTime(dtDateTimesI[nI], 'dd/MM/yyyy    hhhh:mm:ss'))
.head 9 -  Set nI = nI + 1
.head 7 +  If nOUT > 0
.head 8 -  Set nI = 0
.head 8 +  While nI < nOUT
.head 9 -  Call SalListAdd(lbOUT, '    ' || PadR(sFilesO[nI], 12) || PadL(Str(nSizesO[nI]), 8) || '    ' ||
     SalFmtFormatDateTime(dtDateTimesO[nI], 'dd/MM/yyyy    hhhh:mm:ss'))
.head 9 -  Set nI = nI + 1
.head 6 +  Else
.head 7 -  ! Call SalEndDialog(F8, 1)
.head 7 -  Call SalDestroyWindow(F8)
.head 3 +  Pushbutton: pbFind2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Поиск
.head 4 -  Window Location and Size
.head 5 -  Left:   0.183"
.head 5 -  Top:    5.988"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F7
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If SalModalDialog(Find, hWndForm) = 0
.head 7 -  Set nISABj = 0
.head 7 +  While nISABj < SalListQueryCount(lbSABj)
.head 8 +  If SalStrScan(SalStrUpperX(SalListQueryTextX(lbSABj, nISABj)),
   SalStrUpperX(sFrag)) > 0
.head 9 -  Call SalListSetSelect(lbSABj, nISABj)
.head 9 -  ! Call SalListSetMultiSelect(lbSABj, nISABj, TRUE)
.head 9 -  Call SalSetFocus(lbSABj)
.head 9 -  Call SalSendMsg(lbSABj, SAM_Click, 0, 0)
.head 9 -  Break
.head 8 -  Set nISABj = nISABj + 1
.head 3 -  Background Text: Клиенты
.head 4 -  Resource Id: 52816
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    0.012"
.head 5 -  Width:  5.1"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: None
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Pushbutton: pbKon
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выход
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    5.988"
.head 5 -  Width:  1.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  ! Call SalEndDialog(F8, 0)
.head 6 -  Call SalDestroyWindow(F8)
.head 3 +  List Box: lbIN
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   5.083"
.head 5 -  Top:    0.155"
.head 5 -  Width:  7.7"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 2.738"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? No
.head 4 -  Sorted? Yes
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Courier
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Light Green
.head 4 -  Horizontal Scroll? No
.head 4 -  List Initialization
.head 4 -  Message Actions
.head 3 +  List Box: lbOUT
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   5.083"
.head 5 -  Top:    3.155"
.head 5 -  Width:  7.7"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 2.738"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? No
.head 4 -  Sorted? Yes
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Courier
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Maize
.head 4 -  Horizontal Scroll? No
.head 4 -  List Initialization
.head 4 -  Message Actions
.head 3 -  Background Text: IN (от клиента)
.head 4 -  Resource Id: 52817
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   5.183"
.head 5 -  Top:    0.012"
.head 5 -  Width:  7.1"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Background Text: OUT (клиенту)
.head 4 -  Resource Id: 52818
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   5.183"
.head 5 -  Top:    3.012"
.head 5 -  Width:  7.1"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  Window Handle: hPb
.head 2 +  Window Variables
.head 3 -  String: sFilesI[*]
.head 3 -  Number: nSizesI[*]
.head 3 -  Date/Time: dtDateTimesI[*]
.head 3 -  Number: nAttributesI[*]
.head 3 -  String: sFilesO[*]
.head 3 -  Number: nSizesO[*]
.head 3 -  Date/Time: dtDateTimesO[*]
.head 3 -  Number: nAttributesO[*]
.head 3 -  Number: nIN
.head 3 -  Number: nOUT
.head 3 -  String: sSAB8
.head 3 -  Number: nI
.head 3 -  Number: nISABj
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  ! Call SetWindowFullSize(hWndForm)
.head 4 -  Set nI = 0
.head 4 -  Set nLenArr = LenArray(smSAB)
.head 4 +  While nI <= nLenArr
.head 5 +  If VisDosEnumFiles(sDiskKata || smSAB[nI] || '\\IN\\*.*', FA_Standard, sFilesI) +
   VisDosEnumFiles(sDiskKata || smSAB[nI] || '\\OUT\\*.*', FA_Standard, sFilesI)
.head 6 -  Call SalListAdd(lbSABj, smSAB[nI] || ' ' || smNMK[nI])
.head 5 -  Set nI = nI + 1
.head 3 +  On SAM_Destroy
.head 4 -  Call SalEnableWindow(hPb)
.head 4 -  Call menu12.Message('Выход из просмотра п/я клиентов.', FALSE)
.head 1 +  Dialog Box: DuplicateFileName
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Файл поступил повторно
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   1.85"
.head 4 -  Top:    1.031"
.head 4 -  Width:  4.967"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 2.536"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description:
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Multiline Field: ml1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? No
.head 5 -  Window Location and Size
.head 6 -  Left:   0.183"
.head 6 -  Top:    0.071"
.head 6 -  Width:  4.5"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.833"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: 12
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Yellow
.head 5 -  Background Color: Red
.head 4 +  Message Actions
.head 5 +  On SAM_SetFocus
.head 6 -  Call SalSetFocus(pb1)
.head 3 +  Pushbutton: pb0
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Принять файл в обработку
.head 4 -  Window Location and Size
.head 5 -  Left:   0.183"
.head 5 -  Top:    0.988"
.head 5 -  Width:  4.5"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, 0)
.head 3 +  Pushbutton: pb1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Отложить обработку файла
.head 4 -  Window Location and Size
.head 5 -  Left:   0.183"
.head 5 -  Top:    1.405"
.head 5 -  Width:  4.5"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, 1)
.head 3 +  Pushbutton: pb2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Переместить файл в NOT
.head 4 -  Window Location and Size
.head 5 -  Left:   0.183"
.head 5 -  Top:    1.821"
.head 5 -  Width:  4.5"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, 2)
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  String: sFile
.head 2 +  Window Variables
.head 3 -  String: sTimeWaitDupl
.head 3 -  Number: nTimeMiliseconds
.head 3 -  Number: n1
.head 3 -  String: sFileWaitDupl
.head 3 -  Boolean: bFileDuplicate
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  Call SalWaitCursor(FALSE)
.head 4 -  Call SalUseRegistry(FALSE, '')
.head 4 -  Call SalGetProfileString("ElektroKlients", "WaitDuplicate", '7', sTimeWaitDupl, GetIniFileName())
.head 4 -  Set nTimeMiliseconds = Min(Max(1, Val(sTimeWaitDupl)), 65)*1000
.head 4 -  Call SalGetProfileString("ElektroKlients", "FileDuplicate", 'NO', sFileWaitDupl, GetIniFileName())
.head 4 -  Set bFileDuplicate = SalStrUpperX(sFileWaitDupl)='YES'
.head 4 -  Call SalTimerSet(hWndForm, 1, nTimeMiliseconds)
.head 4 +  While n1 <= nTimeMiliseconds/100
.head 5 -  Call SalMessageBeep(-1)
.head 5 -  Set n1 = n1 + 1
.head 4 -  Set ml1 = 'ВНИМАНИЕ ! Файл ' || sFile || ' поступил повторно. Что делать ?'
.head 3 +  On SAM_Timer
.head 4 -  Call SalEndDialog(hWndForm, IifN(bFileDuplicate, 0, 1))
.head 3 +  On SAM_Destroy
.head 4 -  Call SalTimerKill(hWndForm, 1)
.head 4 -  Call SalWaitCursor(FALSE)
.head 1 +  Form Window: menu12
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Работа с "электронными" клиентами (технолог)
.head 2 -  Icon File:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Automatically Created at Runtime? No
.head 3 -  Initial State: Normal
.head 3 -  Maximizable? Yes
.head 3 -  Minimizable? Yes
.head 3 -  System Menu? Yes
.head 3 -  Resizable? Yes
.head 3 -  Window Location and Size
.head 4 -  Left:   0.388"
.head 4 -  Top:    0.25"
.head 4 -  Width:  16.217"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 7.155"
.head 4 -  Height Editable? Yes
.head 3 -  Form Size
.head 4 -  Width:  Default
.head 4 -  Height: Default
.head 4 -  Number of Pages: Dynamic
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description:
.head 2 -  Named Menus
.head 2 -  Menu
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Pushbutton: pb1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F1. АВТОМАТ-"вертушка" (F3+F4)
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    -0.012"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.239"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F1
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalDisableWindow(pb1)
.head 6 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 7 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 7 +  If ShowInputPinCodeICT()
.head 8 -  Set nKw = InitICT()
.head 8 +  If nKw != 0
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 9 -  ! Break 
.head 8 +  Else 
.head 9 -  Set bIni = TRUE
.head 7 +  Else 
.head 8 -  Call MessageNoWait('PIN-код ИКТ не введен.', 'Предупреждение!', 3, 1)
.head 8 -  ! Break 
.head 6 +  If sProcInfo = '1'
.head 7 -  Call CopyArch()
.head 6 +  While TRUE
.head 7 -  Call Blok(1)
.head 7 -  Call Message('Ожидание обработки файлов КЛИЕНТ-БАНК', FALSE)
.head 7 +  If MessageNoWait('Ожидание обработки файлов КЛИЕНТ-БАНК. Выход - ESC', 'ВЕРТУШКА КЛИЕНТ-БАНК', GetWaitPeriod(), 0)
.head 8 -  Break
.head 6 -  Call SalEnableWindow(pb1)
.head 6 -  Call SalSetFocus(pb1)
.head 3 +  Pushbutton: pb2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F2.  Весь цикл один раз   (F3+F4)
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    0.226"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F2
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalDisableWindow(pb2)
.head 6 -  Call Blok(2)
.head 6 -  Call Message('', FALSE)
.head 6 -  Call SalEnableWindow(pb2)
.head 6 -  Call SalSetFocus(pb2)
.head 3 +  Pushbutton: pb3
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F3. Обработка информации
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    0.464"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F3
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Blue
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalDisableWindow(pb3)
.head 6 -  Call Blok(3)
.head 6 -  Call SalEnableWindow(pb3)
.head 6 -  Call SalSetFocus(pb3)
.head 3 +  Pushbutton: pb4
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F4. Отбор выписок
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    0.702"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F4
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Blue
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 -  Call SalDisableWindow(pb4)
.head 6 -  Call OtborLS()
.head 6 -  ! Call OtborKV()
.head 6 -  Call Message('', FALSE)
.head 6 -  Call SalEnableWindow(pb4)
.head 6 -  Call SalSetFocus(pb4)
.head 3 +  Pushbutton: pb6
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F6. Отбор выписок по выбору
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    0.94"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F6
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Dark Green
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Set nTipV = 6 ! (грн)
.head 6 -  Call SetBankDate()
.head 6 -  Call SalDisableWindow(pb6)
.head 6 -  Call SalDisableWindow(pb7)
.head 6 -  Set nI = 0
.head 6 -  Set nLenArr = LenArray(smSAB)
.head 6 -  Call SalShowWindow(l1)
.head 6 -  Call SalShowWindow(pbLB)
.head 6 -  Call SalShowWindow(pbAll)
.head 6 -  Call SalShowWindow(pbFind)
.head 6 -  Call SalShowWindow(pbOtkaz)
.head 6 -  Call SalListClear(l1)
.head 6 +  While nI <= nLenArr
.head 7 -  Call SalListAdd(l1, smSAB[nI] || ' ' || smNMK[nI])
.head 7 -  Set nI = nI + 1
.head 6 -  Call SalSetFocus(l1)
.head 6 -  ! Call SalEnableWindow(pb6)
.head 6 -  ! Call SalEnableWindow(pb7)
.head 3 +  Pushbutton: pb7
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F7. Отбор вал. выписок по выбору
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    1.179"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F7
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Purple
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  ! On SAM_Click
.head 6 -   Call SetBankDate()
.head 6 -   Call SalDisableWindow(pb7)
.head 6 -   Call OtborOPER()
.head 6 -   Call Message('', FALSE)
.head 6 -   Call SalEnableWindow(pb7)
.head 6 -   Call SalSetFocus(pb7)
.head 5 +  On SAM_Click
.head 6 -  Set nTipV = 7 ! (вал)
.head 6 -  Call SetBankDate()
.head 6 -  Call SalDisableWindow(pb6)
.head 6 -  Call SalDisableWindow(pb7)
.head 6 -  Set nI = 0
.head 6 -  Set nLenArr = LenArray(smSAB)
.head 6 -  Call SalShowWindow(l1)
.head 6 -  Call SalShowWindow(pbLB)
.head 6 -  Call SalShowWindow(pbAll)
.head 6 -  Call SalShowWindow(pbFind)
.head 6 -  Call SalShowWindow(pbOtkaz)
.head 6 -  Call SalListClear(l1)
.head 6 +  While nI <= nLenArr
.head 7 -  Call SalListAdd(l1, smSAB[nI] || ' ' || smNMK[nI])
.head 7 -  Set nI = nI + 1
.head 6 -  Call SalSetFocus(l1)
.head 6 -  ! Call SalEnableWindow(pb6)
.head 6 -  ! Call SalEnableWindow(pb7)
.head 3 +  Pushbutton: pb8
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F8. Просмотр п/я клиентов
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    1.417"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F8
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Burgundy
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 -  Call SalDisableWindow(pb8)
.head 6 -  Call SalCreateWindow(F8, hWndForm, pb8)
.head 3 +  Pushbutton: pb9
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F9. Удаление инф. из АРХ. таблиц
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    1.655"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F9
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Magenta
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalUseRegistry(FALSE, '')
.head 6 -  Call SalGetProfileString('ElektroKlients', 'DelArchiv', '61', sDelArchiv, GetIniFileName())
.head 6 -  Call SalGetProfileString('ElektroKlients', 'DelOldDok', '91', sDelOldDok, GetIniFileName())
.head 6 -  Call SetBankDate()
.head 6 -  Call SalDisableWindow(pb9)
.head 6 -  Call VisMessageSetBkgdColor(COLOR_Salmon)
.head 6 -  Set hBtns[0] = hBtnYes | MBF_DefButton
.head 6 -  Set hBtns[1] = hBtnNo
.head 6 -  ! Set dDateDel = GetBankDateMom() - 61
.head 6 -  Set dDateDel = GetBankDateMom() - Val(sDelArchiv)
.head 6 +  If VisMessageBox('Удалить информацию из АРХИВНЫХ таблиц, имеющую дату меньше ' ||
   SalFmtFormatDateTime(dDateDel, 'dd-MM-yyyy') || ' ?', 'ЗАПРОС', MBF_IconQuestion, hBtns, 2) = 1 ! ID_Yes
.head 7 -  Call SalWaitCursor(TRUE)
.head 7 +  If SqlPrepareAndExecute(hSql(), T("
   DELETE
   FROM klp_files
   WHERE fn IN (SELECT fn
                FROM klp_arch
                WHERE filedate<:dDateDel)"))
.head 8 -  Call SqlCommit(hSql())
.head 8 -  Call SalWaitCursor(FALSE)
.head 8 -  Call MessageNoWait('Удалена информация из АРХИВНЫХ таблиц, имеющая дату меньше ' ||
     SalFmtFormatDateTime(dDateDel, 'dd-MM-yyyy') || '.', 'СООБЩЕНИЕ', 17, 0)
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SalWaitCursor(FALSE)
.head 8 -  Call MessageNoWait('Ошибка при удалении информации.', 'ВНИМАНИЕ', 17, 1)
.head 6 -  !
.head 6 -  Set dDateDel = GetBankDateMom() - Val(sDelOldDok)
.head 6 +  If VisMessageBox('Удалить документы из таблицы документов, принятых по системе КЛИЕНТ-БАНК, имеющих дату меньше ' ||
   SalFmtFormatDateTime(dDateDel, 'dd-MM-yyyy') || ' ?', 'ЗАПРОС', MBF_IconQuestion, hBtns, 2) = 1 ! ID_Yes
.head 7 -  Call SalWaitCursor(TRUE)
.head 7 +  If SqlPrepareAndExecute(hSql(), T("
   DELETE
   FROM klp
   WHERE fl>5 and datedokkb is not null and datedokkb<:dDateDel"))
.head 8 +  If SqlPrepareAndExecute(hSql(), T("
   DELETE
   FROM klpond
   WHERE ref not in (SELECT ref
                     FROM klp)"))
.head 9 -  Call SqlCommit(hSql())
.head 9 -  Call SalWaitCursor(FALSE)
.head 9 -  Call MessageNoWait(
     'Удалены документы из таблицы документов, принятых по системе КЛИЕНТ-БАНК, имеющих дату меньше ' ||
     SalFmtFormatDateTime(dDateDel, 'dd-MM-yyyy') || '.', 'СООБЩЕНИЕ', 17, 0)
.head 8 +  Else
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SalWaitCursor(FALSE)
.head 9 -  Call MessageNoWait('Ошибка при удалении документов.', 'ВНИМАНИЕ', 17, 1)
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SalWaitCursor(FALSE)
.head 8 -  Call MessageNoWait('Ошибка при удалении документов.', 'ВНИМАНИЕ', 17, 1)
.head 6 -  Call SalEnableWindow(pb9)
.head 6 -  Call SalSetFocus(pb9)
.head 3 +  Pushbutton: pb10
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: F10. Работа с АРХИВОМ
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    1.893"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F10
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Burgundy
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 -  Call SalDisableWindow(pb10)
.head 6 -  Call SalCreateWindow(F10, hWndForm, pb10)
.head 3 +  Pushbutton: pbEsc
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: ESC. ВЫХОД
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    2.131"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.238"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Yellow
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalMessageBeep(-1)
.head 6 +  If SalMessageBox("Вы намерены выйти из программы ? ", "Внимание !", MB_YesNo) = IDYES
.head 7 -  Call SalQuit()
.head 6 +  Else
.head 7 -  Return FALSE
.head 3 +  Multiline Field: ml1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 258
.head 5 -  String Type: Long String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? No
.head 5 -  Window Location and Size
.head 6 -  Left:   3.8"
.head 6 -  Top:    3.667"
.head 6 -  Width:  2.717"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.631"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Black
.head 5 -  Background Color: Sky
.head 4 +  Message Actions
.head 5 +  On SAM_SetFocus
.head 6 -  Call SalSetFocus(pb1)
.head 3 +  List Box: l1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.083"
.head 5 -  Top:    2.381"
.head 5 -  Width:  3.6"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 3.69"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? Yes
.head 4 -  Sorted? Yes
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Horizontal Scroll? No
.head 4 -  List Initialization
.head 4 -  Message Actions
.head 3 +  Pushbutton: pbOtkaz
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Отказ
.head 4 -  Window Location and Size
.head 5 -  Left:   0.067"
.head 5 -  Top:    6.25"
.head 5 -  Width:  0.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalHideWindow(l1)
.head 6 -  Call SalHideWindow(pbLB)
.head 6 -  Call SalHideWindow(pbAll)
.head 6 -  Call SalHideWindow(pbFind)
.head 6 -  Call SalHideWindow(pbOtkaz)
.head 6 -  Call SalHideWindow(cc1)
.head 6 -  Call SalHideWindow(pbNoDate)
.head 6 -  Call SalHideWindow(pbRun)
.head 6 -  Call Message('', FALSE)
.head 6 +  If nTipV = 6
.head 7 -  Call SalSetFocus(pb6)
.head 6 +  If nTipV = 7
.head 7 -  Call SalSetFocus(pb7)
.head 6 -  Call SalEnableWindow(pb6)
.head 6 -  Call SalEnableWindow(pb7)
.head 3 +  Pushbutton: pbAll
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Все
.head 4 -  Window Location and Size
.head 5 -  Left:   0.967"
.head 5 -  Top:    6.25"
.head 5 -  Width:  0.617"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 -  Set nI = 0
.head 6 +  While nI <= LenArray(smSAB)
.head 7 -  Call SalListSetMultiSelect(l1, nI, TRUE)
.head 7 -  Set nI = nI +1
.head 6 -  Call SalSetFocus(pbLB)
.head 3 +  Pushbutton: pbFind
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Поиск
.head 4 -  Window Location and Size
.head 5 -  Left:   1.667"
.head 5 -  Top:    6.25"
.head 5 -  Width:  0.9"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 +  If SalModalDialog(Find, hWndForm) = 0
.head 7 -  Set nIl1 = 0
.head 7 +  While nIl1 < SalListQueryCount(l1)
.head 8 +  If SalStrScan(SalStrUpperX(SalListQueryTextX(l1, nIl1)), SalStrUpperX(sFrag)) > 0
.head 9 -  ! Call SalListSetSelect(l1, nIl1)
.head 9 -  Call SalListSetMultiSelect(l1, nIl1, TRUE)
.head 9 -  Call SalSetFocus(l1)
.head 9 -  Break
.head 8 -  Set nIl1 = nIl1 + 1
.head 3 +  Pushbutton: pbLB
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выбор
.head 4 -  Window Location and Size
.head 5 -  Left:   2.667"
.head 5 -  Top:    6.25"
.head 5 -  Width:  1.0"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 +  If SalListQueryMultiCount(l1) > 0
.head 7 -  Call SalWaitCursor(TRUE)
.head 7 -  Call Message('Определение дат возможного выбора информации ...', FALSE)
.head 7 -  Call cc1.ClearSpecials()
.head 7 -  Call SalListGetMultiSelect(l1, nArray)
.head 7 -  Set nI = 0
.head 7 -  Set nII = 0
.head 7 -  Call SalArraySetUpperBound(sSelectSAB, 1, -1)
.head 7 -  Call SalArraySetUpperBound(sSelectNAIM, 1, -1)
.head 7 +  While nI <= LenArrayN(nArray)
.head 8 -  Set sSelectSAB[nII] = SalStrUpperX(Left(SalListQueryTextX(l1, nArray[nI]), 4))
.head 8 -  Set sSelectNAIM[nII] = SalStrMidX(SalListQueryTextX(l1, nArray[nI]), 5, 38)
.head 8 -  Set nI = nI + 1
.head 8 -  Set nII = nII + 1
.head 7 -  Set sSqlSAB = '('
.head 7 -  Set nI = 0
.head 7 +  While nI <= LenArray(sSelectSAB)
.head 8 -  Set sSqlSAB = sSqlSAB || "c.sab='" || sSelectSAB[nI] || IifS(nI=LenArray(sSelectSAB), "')", "' or ")
.head 8 -  Set nI = nI + 1
.head 7 -  Call SalShowWindow(pbNoDate)
.head 7 -  Call SalShowWindow(pbRun)
.head 7 -  Call SalShowWindow(cc1)
.head 7 -  Call SalSetFocus(cc1)
.head 7 -  Call GetMonthArray(smMonth)
.head 7 -  Call GetWeekDayArray(smWeek)
.head 7 -  Call cc1.SetMonthText(smMonth)
.head 7 -  Call cc1.SetWeekDayText(smWeek)
.head 7 -  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT DISTINCT o.fdat
   INTO :dSelect
   FROM opldok O, accounts A, customer C, cust_acc B
   WHERE o.acc=a.acc and a.acc=b.acc and b.rnk=c.rnk and " || sSqlSAB || " and c.stmt=5 and o.sos=5"))
.head 7 -  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT DISTINCT a.fdat
   INTO :dSelect
   FROM saldoa A, customer C, cust_acc B
   WHERE a.acc=b.acc and b.rnk=c.rnk and " || sSqlSAB || " and c.stmt=5 and (a.dos<>0 or a.kos<>0)"))
.head 7 +  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT DISTINCT a.fdat
   INTO :dSelect
   FROM saldo" || IifS(nTipV=6, 'a', 'b') || " A, customer C, cust_acc B
   WHERE a.acc=b.acc and b.rnk=c.rnk and " || sSqlSAB || " and c.stmt=5 and (a.dos<>0 or a.kos<>0)"))
.head 8 -  Set nI = 0
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Sunday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Monday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Tuesday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Wednesday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Thursday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Friday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Saturday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 +  While SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Call cc1.SpecialDate(SPECIAL_OneTime, dSelect, DAY_Unset, SEQ_Unset, COLOR_Blue, COLOR_Cyan, TRUE)
.head 9 -  Set nI = nI + 1
.head 8 +  If nI = 0
.head 9 -  Call Message('Нет информации по выбранным клиентам для отбора выписок.', TRUE)
.head 9 -  Call SalHideWindow(cc1)
.head 9 -  Call SalHideWindow(pbNoDate)
.head 9 -  Call SalHideWindow(pbRun)
.head 9 -  Call SalSetFocus(l1)
.head 8 +  Else 
.head 9 -  Call Message('Для отбора выписок по выбранной дате (на ЖЕЛТОМ фоне) нажмите кнопку ОТБОР.', FALSE)
.head 9 -  Call cc1.SetFocusDate(dBankDate)
.head 7 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT DISTINCT a.fdat
   INTO :dSelect
   FROM saldo" || IifS(nTipV=6, 'a', 'b') || " A, customer C, cust_acc B
   WHERE a.acc=b.acc and b.rnk=c.rnk and " || sSqlSAB || " and c.stmt=6 and (a.dos<>0 or a.kos<>0)"))
.head 8 -  Set nI = 0
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Sunday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Monday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Tuesday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Wednesday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Thursday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Friday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 -  Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Saturday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
.head 8 +  While SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Call cc1.SpecialDate(SPECIAL_OneTime, dSelect, DAY_Unset, SEQ_Unset, COLOR_Blue, COLOR_Cyan, TRUE)
.head 9 -  Set nI = nI + 1
.head 8 +  If nI = 0
.head 9 -  Call Message('Нет информации по выбранным клиентам для отбора выписок.', TRUE)
.head 9 -  Call SalHideWindow(cc1)
.head 9 -  Call SalHideWindow(pbNoDate)
.head 9 -  Call SalHideWindow(pbRun)
.head 9 -  Call SalSetFocus(l1)
.head 8 +  Else
.head 9 -  Call Message('Для отбора выписок по выбранной дате (на ЖЕЛТОМ фоне) нажмите кнопку ОТБОР.', FALSE)
.head 9 -  Call cc1.SetFocusDate(dBankDate)
.head 7 +  Else
.head 8 -  Call Message('Нет информации по выбранным клиентам для отбора выписок.', TRUE)
.head 8 -  Call SalHideWindow(cc1)
.head 8 -  Call SalHideWindow(pbNoDate)
.head 8 -  Call SalHideWindow(pbRun)
.head 8 -  Call SalSetFocus(l1)
.head 7 -  Call SalWaitCursor(FALSE)
.head 3 +  Custom Control: cc1
.data CLASSPROPSSIZE
0000: 2C00
.enddata
.data CLASSPROPS
0000: 56543A43616C656E 646172001B000100 0000000100010000 0200000001000001
0020: 0101000000000000 00000000
.enddata
.data INHERITPROPS
0000: 0100
.enddata
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cCalendar
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Display Settings
.head 5 -  DLL Name:
.head 5 -  MS Windows Class Name:
.head 5 -  Style:  Class Default
.head 5 -  ExStyle:  Class Default
.head 5 -  Title:
.head 5 -  Window Location and Size
.head 6 -  Left:   3.783"
.head 6 -  Top:    4.333"
.head 6 -  Width:  2.717"
.head 6 -  Width Editable? Class Default
.head 6 -  Height: 1.869"
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Etched Border? No
.head 5 -  Hollow? Class Default
.head 5 -  Vertical Scroll? Class Default
.head 5 -  Horizontal Scroll? Class Default
.head 5 -  Tab Stop? Class Default
.head 5 -  Tile To Parent? Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: 8
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Black
.head 5 -  DLL Settings
.head 4 +  Message Actions
.head 5 +  On SAM_Create
.head 6 -  Call cc1.WeekStartSet(2)
.head 5 +  On SAM_CustControlCmd
.head 6 -  Call cc1.GetFocusDate(dDada)
.head 6 +  If cc1.IsSpecialDate(SPECIAL_OneTime, dDada, DAY_Unset, SEQ_Unset)
.head 7 -  Call cc1.SpecialDate(SPECIAL_OneTime, dYes, DAY_Unset, SEQ_Unset, COLOR_Blue, COLOR_Cyan, TRUE)
.head 7 -  Set dYes = dDada
.head 7 -  Call cc1.SpecialDate(SPECIAL_OneTime, dYes, DAY_Unset, SEQ_Unset, COLOR_Blue, COLOR_Yellow, TRUE)
.head 3 +  Pushbutton: pbRun
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: ОТБОР
.head 4 -  Window Location and Size
.head 5 -  Left:   3.8"
.head 5 -  Top:    6.25"
.head 5 -  Width:  1.183"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: F5
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Black
.head 4 -  Background Color: Maize
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SetBankDate()
.head 6 -  ! выполнить обработку для выбранной (ЖЕЛТОЙ) даты по всем клиентам (ЦИКЛ)
.head 6 -  Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
.head 6 -  Set nI = 0
.head 6 +  While nI <= LenArray(sSelectSAB)
.head 7 -  Set sSAB = sSelectSAB[nI]
.head 7 -  Set sNMK = sSelectNAIM[nI]
.head 7 -  Set nUid = GetUserId()
.head 7 +  If nTipV = 6
.head 8 -  ! гривна с валютой
.head 8 -  Set nVal = NUMBER_Null
.head 8 -  ! Set nVal = GetBaseVal()
.head 8 +  If bKORP
.head 9 +  ! If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT count(*)
   INTO :nDiti
   FROM customer
   WHERE sab=:sSAB and stmt=5"))
.head 10 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 11 -  Set nDiti = 0
.head 9 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT count(*)
   INTO :nDiti
   FROM customer
   WHERE sab=:sSAB and stmt=6"))
.head 10 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 11 -  Set nDiti = 0
.head 9 +  Else
.head 10 -  Set nDiti = 0
.head 9 -  Set bKORP1 = nDiti>0
.head 8 +  Else
.head 9 -  Set bKORP1 = FALSE
.head 8 +  If SqlPLSQLCommand(hSql(), "p_lici" || IifS(bKORP1, "u" ,"") || "(nUid,dDada,sSAB,nVal,'%')")
.head 9 -  Call SqlCommit(hSql())
.head 9 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tmp_lici
     INTO :nKwo
     WHERE id=:nUid"))
.head 9 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set bOk = nKwo>0
.head 8 +  Else
.head 9 -  Set bOk = FALSE
.head 8 +  If bOk and SqlPrepareAndExecute(hSql(), T("
   SELECT nlsa,nama,mfob,nlsb,namb,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dapp,nazn,pond,sk,namefilea,Kodirowka,
          nazns,bis,naznk,d_rec,fn_a,ref
   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:dDAPP,:sNAZN,
        :sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nREF
   FROM tmp_lici
   WHERE id=:nUid
   ORDER BY nlsa,kv,dk,s"))
.head 9 -  Set sMFOA = GetBankMfo()
.head 9 -  Set nIndex = 0
.head 9 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smNAMA, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smOKPOB, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmDK, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmVOB, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmISP, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmKV, 1, -1)
.head 9 -  Call SalArraySetUpperBound(dmDAOP, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmIOST, 1, -1)
.head 9 -  Call SalArraySetUpperBound(dmDAPP, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmSK, 1, -1)
.head 9 -  Call SalArraySetUpperBound(smNameFileA, 1, -1)
.head 9 -  Call SalArraySetUpperBound(nmREF, 1, -1)
.head 9 +  While SqlFetchNext(hSql(), nFetchRes)
.head 10 -  Set smMFOA[nIndex] = sMFOA
.head 10 -  Set smNLSA[nIndex] = sNLSA
.head 10 -  Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
.head 10 -  Set smMFOB[nIndex] = sMFOB
.head 10 -  Set smNLSB[nIndex] = sNLSB
.head 10 -  Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
.head 10 -  Set smOKPOB[nIndex] = sOKPOB
.head 10 -  Set nmDK[nIndex] = nDK
.head 10 -  Set nmS[nIndex] = nS
.head 10 -  Set nmVOB[nIndex] = nVOB
.head 10 -  Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
.head 10 -  Set nmISP[nIndex] = nISP
.head 10 -  Set nmKV[nIndex] = nKV
.head 10 -  Set dmDAOP[nIndex] = dDAOP
.head 10 -  Set nmIOST[nIndex] = nIOST
.head 10 -  Set dmDAPP[nIndex] = dDAPP
.head 10 -  Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
.head 10 +  If sNazns = '00'
.head 11 -  Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
    SELECT n_np
    FROM s_np
    WHERE k_np='" || sNaznk || "'"))
.head 10 +  Else If sNazns = '01' or sNazns = '11' or sNazns = '41'
.head 11 -  Set smNAZN[nIndex] = IifS(sNazns='01', SalStrTrimX(GetValueStr("
    SELECT n_np
    FROM s_np
    WHERE k_np='" || sNaznk || "'")), smNAZN[nIndex])
.head 11 +  If SalStrScan(sD_rec, '#B') >= 0 !! есть БИСы
.head 12 -  Call SqlPrepareAndExecute(hSqlAux3(), "
     SELECT substr(decode(:nSEP,2,convert(nazn,'RU8PC866','CL8MSWIN1251'),nazn),1,200),
            substr(decode(:nSEP,2,convert(d_rec,'RU8PC866','CL8MSWIN1251'),d_rec),1,200)
     INTO :sNaznBis,:sD_recBis
     FROM arc_rrp
     WHERE fn_a=:sFn_a and nd=:sND and ref is null and bis>1 and s=0 and dk=3 and nazns=33
     ORDER BY bis")
.head 12 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 13 -  Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || StrDosToWinX(Left(Right(sNaznBis,
    Len(sNaznBis)-2), Len(Right(sNaznBis, Len(sNaznBis)-2))-1)) || ' ' || StrDosToWinX(Left(
    Right(sD_recBis, Len(sD_recBis)-2), Len(Right(sD_recBis, Len(sD_recBis)-2))-1)))
.head 10 +  Else If sNazns = '21' or sNazns = '20'
.head 11 -  Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
    SELECT n_np
    FROM s_np
    WHERE k_np='" || sNaznk || "'") || ' ' || smNAZN[nIndex])
.head 11 +  If sNazns = '21' and SalStrScan(sD_rec, '#B') >= 0 ! есть БИСы
.head 12 -  Call SqlPrepareAndExecute(hSqlAux3(), "
     SELECT substr(decode(:nSEP,2,convert(nazn,'RU8PC866','CL8MSWIN1251'),nazn),1,200),
            substr(decode(:nSEP,2,convert(d_rec,'RU8PC866','CL8MSWIN1251'),d_rec),1,200)
     INTO :sNaznBis,:sD_recBis
     FROM arc_rrp
     WHERE fn_a=:sFn_a and nd=:sND and ref is null and bis>1 and s=0 and dk=3 and nazns=33
     ORDER BY bis")
.head 12 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 13 -  Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || StrDosToWinX(Left(Right(sNaznBis,
    Len(sNaznBis)-2), Len(Right(sNaznBis, Len(sNaznBis)-2))-1)) || ' ' || StrDosToWinX(Left(
    Right(sD_recBis, Len(sD_recBis)-2), Len(Right(sD_recBis, Len(sD_recBis)-2))-1)))
.head 10 -  Set smPOND[nIndex] = sPOND
.head 10 -  Set nmSK[nIndex] = nSK
.head 10 -  Set smNameFileA[nIndex] = sNameFileA
.head 10 -  Set nmREF[nIndex] = nREF
.head 10 -  Set nIndex = nIndex + 1
.head 9 +  If nIndex > 0
.head 10 -  Call Message('Отбор выписки за ' || Str(SalDateDay(dDada)) || ' ' || GetMonthName(SalDateMonth(dDada), TRUE)
     || ' ' || Str(SalDateYear(dDada)) || ' г. для ' || sSAB || ' ' || sSelectNAIM[nI], TRUE)
.head 10 -  Call FormFileV(IifS(SalFmtFormatDateTime(dDada, 'yyyyMMdd') = SalFmtFormatDateTime(dBankDate, 'yyyyMMdd'),
     sOpenDay, '0'), sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOB, nmDK, nmS, nmVOB, smND,
     nmISP, nmKV, dmDAOP, nmIOST, dmDAPP, smNAZN, smPOND, nmSK, smNameFileA, nmREF, '')
.head 7 +  Else If nTipV = 7
.head 8 -  ! валюта (специфика)
.head 8 +  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT k.rnk
   INTO :nRNKtemp
   FROM klpv_v k, customer c
   WHERE c.rnk=k.rnk and c.sab=:sSAB and c.stmt=5"))
.head 9 +  If SqlFetchNext(hSql(), nFetchRes)
.head 10 -  ! Call DebugN(nRNKtemp)
.head 10 -  ! Call Debug(SalFmtFormatDateTime(dDada, 'dd-MM-yyyy'))
.head 10 +  If SqlPLSQLCommand(hSql(), "val_v(nUid,dDada,sSAB)")
.head 11 -  Call SqlCommit(hSql())
.head 11 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tmp_vv
     INTO :nKwo
     WHERE id=:nUid"))
.head 11 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Set bOk = nKwo>0
.head 10 +  Else 
.head 11 -  Set bOk = FALSE
.head 10 +  If bOk and SqlPrepareAndExecute(hSql(), T("
   SELECT fnamekb,identkb,tipkb,nlsa,kva,nlsb,kvb,s,ref
   INTO :sFNAMEKB,:sIDENTKB,:sTIPKB,:sNLSA,:nKVA,:sNLSB,:nKVB,:nS,:nREF
   FROM tmp_vv
   WHERE id=:nUid
   ORDER BY 1,2"))
.head 11 -  Set sMFOA = GetBankMfo()
.head 11 -  Set nIndex = 0
.head 11 -  Call SalArraySetUpperBound(smFNAMEKB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smIDENTKB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smTIPKB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmKVA, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmKVB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmREF, 1, -1)
.head 11 +  While SqlFetchNext(hSql(), nFetchRes)
.head 12 -  Set smFNAMEKB[nIndex] = sFNAMEKB
.head 12 -  Set smIDENTKB[nIndex] = sIDENTKB
.head 12 -  Set smTIPKB[nIndex] = sTIPKB
.head 12 -  Set smNLSA[nIndex] = sNLSA
.head 12 -  Set nmKVA[nIndex] = nKVA
.head 12 -  Set smNLSB[nIndex] = sNLSB
.head 12 -  Set nmKVB[nIndex] = nKVB
.head 12 -  Set nmS[nIndex] = nS
.head 12 -  Set nmREF[nIndex] = nREF
.head 12 -  Set nIndex = nIndex + 1
.head 11 +  If nIndex > 0
.head 12 -  Call Message(' Отбор вал.выписки для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
.head 12 -  Call FormFileY(dDada, sSAB, smFNAMEKB, smIDENTKB, smTIPKB, smNLSA, nmKVA, smNLSB, nmKVB, nmS, nmREF,
     sTIMES)
.head 8 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT k.rnk
   INTO :nRNKtemp
   FROM klpv_v k, customer c
   WHERE c.rnk=k.rnk and c.sab=:sSAB and c.stmt=6"))
.head 9 +  If SqlFetchNext(hSql(), nFetchRes)
.head 10 -  ! Call DebugN(nRNKtemp)
.head 10 -  ! Call Debug(SalFmtFormatDateTime(dDada, 'dd-MM-yyyy'))
.head 10 +  If SqlPLSQLCommand(hSql(), "val_v(nUid,dDada,sSAB)")
.head 11 -  Call SqlCommit(hSql())
.head 11 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tmp_vv
     INTO :nKwo
     WHERE id=:nUid"))
.head 11 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Set bOk = nKwo>0
.head 10 +  Else
.head 11 -  Set bOk = FALSE
.head 10 +  If bOk and SqlPrepareAndExecute(hSql(), T("
   SELECT fnamekb,identkb,tipkb,nlsa,kva,nlsb,kvb,s,ref
   INTO :sFNAMEKB,:sIDENTKB,:sTIPKB,:sNLSA,:nKVA,:sNLSB,:nKVB,:nS,:nREF
   FROM tmp_vv
   WHERE id=:nUid
   ORDER BY 1,2"))
.head 11 -  Set sMFOA = GetBankMfo()
.head 11 -  Set nIndex = 0
.head 11 -  Call SalArraySetUpperBound(smFNAMEKB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smIDENTKB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smTIPKB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmKVA, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmKVB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmREF, 1, -1)
.head 11 +  While SqlFetchNext(hSql(), nFetchRes)
.head 12 -  Set smFNAMEKB[nIndex] = sFNAMEKB
.head 12 -  Set smIDENTKB[nIndex] = sIDENTKB
.head 12 -  Set smTIPKB[nIndex] = sTIPKB
.head 12 -  Set smNLSA[nIndex] = sNLSA
.head 12 -  Set nmKVA[nIndex] = nKVA
.head 12 -  Set smNLSB[nIndex] = sNLSB
.head 12 -  Set nmKVB[nIndex] = nKVB
.head 12 -  Set nmS[nIndex] = nS
.head 12 -  Set nmREF[nIndex] = nREF
.head 12 -  Set nIndex = nIndex + 1
.head 11 +  If nIndex > 0
.head 12 -  Call Message(' Отбор вал.выписки для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
.head 12 -  Call FormFileY(dDada, sSAB, smFNAMEKB, smIDENTKB, smTIPKB, smNLSA, nmKVA, smNLSB, nmKVB, nmS, nmREF,
     sTIMES)
.head 8 +  Else
.head 9 -  Call Message('Клиент: ' || sSAB || ' (' || sNMK || ') не работает с ВАЛЮТОЙ по системе КЛИЕНТ-БАНК', TRUE)
.head 7 -  Set nI = nI + 1
.head 6 -  Call Message('Для отбора выписок по выбранной дате (на ЖЕЛТОМ фоне) нажмите кнопку ОТБОР.', FALSE)
.head 3 +  Pushbutton: pbNoDate
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Отказ
.head 4 -  Window Location and Size
.head 5 -  Left:   5.233"
.head 5 -  Top:    6.25"
.head 5 -  Width:  1.25"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: (none)
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Light Gray
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalHideWindow(pbNoDate)
.head 6 -  Call SalHideWindow(pbRun)
.head 6 -  Call SalHideWindow(cc1)
.head 6 -  Call SalSetFocus(l1)
.head 6 -  Call Message('', FALSE)
.head 3 -  Background Text: ТЕКУЩЕЕ СООБЩЕНИЕ
.head 4 -  Resource Id: 36610
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   3.8"
.head 5 -  Top:    3.524"
.head 5 -  Width:  2.7"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.167"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Right
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Dark Gray
.head 4 -  Background Color: Default
.head 3 +  Check Box: cbIN
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Обр. входящей инф.
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    0.071"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbKV
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Курсы валют
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    1.071"
.head 5 -  Width:  2.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbKvAll
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   6.283"
.head 5 -  Top:    1.071"
.head 5 -  Width:  0.3"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbContracts
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Список Контрактов
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    1.321"
.head 5 -  Width:  2.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbContracts2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   6.283"
.head 5 -  Top:    1.321"
.head 5 -  Width:  0.3"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbCountry
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Список стран
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    1.571"
.head 5 -  Width:  2.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbCountry2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   6.283"
.head 5 -  Top:    1.571"
.head 5 -  Width:  0.3"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbLS
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Выписки
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    0.321"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbU
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Участники СЭП
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    0.571"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbB
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Список загранбанков
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    0.821"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbOO
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квит. док-ты к ОПЛАТЕ
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    2.071"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbWO
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квит.(О) возвр. док-ты
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    2.321"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbWT
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квит.(T) возвр. док-ты
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    2.571"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Check Box: cbNN
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Квитанции (N) вал.док.
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    2.821"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Child Table: tblMessage
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   6.583"
.head 6 -  Top:    0.071"
.head 6 -  Width:  9.1"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 6.5"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Arial Cyr
.head 5 -  Font Size: 8
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: Charcoal
.head 5 -  Background Color: Light Gray
.head 5 -  View: Table
.head 5 -  Allow Row Sizing? No
.head 5 -  Lines Per Row: Default
.head 4 -  Memory Settings
.head 5 -  Maximum Rows in Memory: 99999
.head 5 -  Discardable? No
.head 4 +  Contents
.head 5 +  Column: colTime
.head 6 -  Class Child Ref Key: 0
.head 6 -  Class ChildKey: 0
.head 6 -  Class:
.head 6 -  Property Template:
.head 6 -  Class DLL Name:
.head 6 -  Title: Время
.head 6 -  Visible? Yes
.head 6 -  Editable? No
.head 6 -  Maximum Data Length: Default
.head 6 -  Data Type: String
.head 6 -  Justify: Right
.head 6 -  Width:  0.85"
.head 6 -  Width Editable? Yes
.head 6 -  Format: Unformatted
.head 6 -  Country: Default
.head 6 -  Input Mask: Unformatted
.head 6 -  Cell Options
.head 7 -  Cell Type? Standard
.head 7 -  Multiline Cell? No
.head 7 -  Cell DropDownList
.head 8 -  Sorted? Yes
.head 8 -  Vertical Scroll? Yes
.head 8 -  Auto Drop Down? No
.head 8 -  Allow Text Editing? Yes
.head 7 -  Cell CheckBox
.head 8 -  Check Value:
.head 8 -  Uncheck Value:
.head 8 -  Ignore Case? Yes
.head 6 -  List Values
.head 6 -  Message Actions
.head 5 +  Column: colText
.head 6 -  Class Child Ref Key: 0
.head 6 -  Class ChildKey: 0
.head 6 -  Class:
.head 6 -  Property Template:
.head 6 -  Class DLL Name:
.head 6 -  Title: Текст сообщения
.head 6 -  Visible? Yes
.head 6 -  Editable? No
.head 6 -  Maximum Data Length: 512
.head 6 -  Data Type: String
.head 6 -  Justify: Left
.head 6 -  Width:  7.55"
.head 6 -  Width Editable? Yes
.head 6 -  Format: Unformatted
.head 6 -  Country: Default
.head 6 -  Input Mask: Unformatted
.head 6 -  Cell Options
.head 7 -  Cell Type? Standard
.head 7 -  Multiline Cell? No
.head 7 -  Cell DropDownList
.head 8 -  Sorted? Yes
.head 8 -  Vertical Scroll? Yes
.head 8 -  Auto Drop Down? No
.head 8 -  Allow Text Editing? Yes
.head 7 -  Cell CheckBox
.head 8 -  Check Value:
.head 8 -  Uncheck Value:
.head 8 -  Ignore Case? Yes
.head 6 -  List Values
.head 6 -  Message Actions
.head 4 -  Functions
.head 4 -  Window Variables
.head 4 +  Message Actions
.head 5 +  On SAM_DoubleClick
.head 6 -  Set nRowT = SalTblQueryContext(tblMessage)
.head 6 -  Call SalModalDialog(dlg_edit_mess, hWndForm, nRowT)
.head 3 +  Data Field: dfKorp
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   3.783"
.head 6 -  Top:    3.298"
.head 6 -  Width:  2.767"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.238"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Center
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: None
.head 5 -  Text Color: Jade
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 +  Check Box: cbOper
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Список операций
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    1.821"
.head 5 -  Width:  2.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If cbOper
.head 7 -  Set cbOper = FALSE
.head 3 +  Check Box: cbOper2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   6.283"
.head 5 -  Top:    1.821"
.head 5 -  Width:  0.3"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If cbOper2
.head 7 -  Set cbOper2 = FALSE
.head 3 +  Check Box: cbPAY
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Обработка документов
.head 4 -  Window Location and Size
.head 5 -  Left:   3.783"
.head 5 -  Top:    3.071"
.head 5 -  Width:  2.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Message Actions
.head 2 +  Functions
.head 3 +  Function: Blok
.head 4 -  Description: обработка входной информации КЛИЕНТ-БАНК (блок)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nPar
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SetBankDate()
.head 5 -  !
.head 5 -  Call ObrCrk(0)
.head 5 -  !
.head 5 -  Call ObrInfoA()
.head 5 -  Call ObrInfoE()
.head 5 -  Call ObrInfoQ()
.head 5 -  Call ObrInfoD()
.head 5 -  Call ObrInfoM()
.head 5 -  Call ObrInfoZD()
.head 5 -  Call ObrInfoMM()
.head 5 -  Call OtborU()
.head 5 -  Call OtborB()
.head 5 -  Call OtborKV()
.head 5 -  Call OtborOO()
.head 5 -  Call OtborWW()
.head 5 -  Call OtborWWt()
.head 5 -  Call OtborNN()
.head 5 +  If nPar < 3
.head 6 -  Call OtborLS()
.head 5 -  Call OtborCC()
.head 5 -  Call OtborSS()
.head 5 -  !
.head 5 -  Call ObrCrk(1)
.head 5 -  !
.head 5 +  If bAUTO
.head 6 -  Call PayAllDok()
.head 6 -  Call BackAllDok()
.head 5 -  Return TRUE
.head 3 +  Function: ObrCrk
.head 4 -  Description: обработка сертификатов
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nPar
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Number: nI
.head 4 +  Actions
.head 5 -  Set nI = 0
.head 5 +  While nI <= nKLI
.head 6 -  Call LCBSERVICE(nPar, nmlNOMER[nI], sDiskKata || smSAB[nI] || '\\IN\\', sDiskKata || smSAB[nI] || '\\OUT\\')
.head 6 -  Set nI = nI + 1
.head 3 +  Function: ObrInfoA
.head 4 -  Description: обработка входной информации КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Number: nI
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\%A' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0 ! Обработка входных файлов
.head 8 -  Call Message('Обработка входных файлов %A', TRUE)
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 11 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 11 +  If ShowInputPinCodeICT()
.head 12 -  Set nKw = InitICT()
.head 12 +  If nKw != 0
.head 13 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 13 -  Break 
.head 12 +  Else 
.head 13 -  Set bIni = TRUE
.head 11 +  Else 
.head 12 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 12 -  Break 
.head 10 -  Set nDubl = DuplicateFile(sMass[nNf])
.head 10 +  If nDubl = 0 ! нет или принять
.head 11 -  Call fLnFilesA(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  Else If nDubl = 2 ! переместить в NOT
.head 11 -  Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE)
.head 11 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sArchPath || 'NOT\\' || sMass[nNf], TRUE)
.head 12 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1, '')
.head 7 -  Set nI = nI + 1
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: ObrInfoE
.head 4 -  Description: обработка входной информации КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Number: nI
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\%E' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0 ! Обработка входных файлов
.head 8 -  Call Message('Обработка входных файлов %E', TRUE)
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 11 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 11 +  If ShowInputPinCodeICT()
.head 12 -  Set nKw = InitICT()
.head 12 +  If nKw != 0
.head 13 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 13 -  Break 
.head 12 +  Else 
.head 13 -  Set bIni = TRUE
.head 11 +  Else 
.head 12 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 12 -  Break 
.head 10 -  Set nDubl = DuplicateFile(sMass[nNf])
.head 10 +  If nDubl = 0 ! нет или принять
.head 11 -  Call fLnFilesE(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  Else If nDubl = 2 ! переместить в NOT
.head 11 -  Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE)
.head 11 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sArchPath || 'NOT\\' || sMass[nNf], TRUE)
.head 12 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1, '')
.head 7 -  Set nI = nI + 1
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: ObrInfoQ
.head 4 -  Description: обработка входной информации КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\%Q' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0 ! Обработка входных файлов %Q
.head 8 -  Call Message('Обработка входных файлов %Q', TRUE)
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 11 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 11 +  If ShowInputPinCodeICT()
.head 12 -  Set nKw = InitICT()
.head 12 +  If nKw ! = 0
.head 13 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 13 -  Break 
.head 12 +  Else 
.head 13 -  Set bIni = TRUE
.head 11 +  Else 
.head 12 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 12 -  Break 
.head 10 -  Set nDubl = DuplicateFile(sMass[nNf])
.head 10 +  If nDubl = 0 ! нет или принять
.head 11 -  Call fLnFilesQ(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  Else If nDubl = 2 ! переместить в NOT
.head 11 -  Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE)
.head 11 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sArchPath || 'NOT\\' || sMass[nNf], TRUE)
.head 12 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1,'')
.head 7 -  Set nI = nI + 1
.head 5 -  Return TRUE
.head 3 +  Function: ObrInfoD
.head 4 -  Description: обработка входной информации (заявки не покупку/продажу/конверсию валюты)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\%D' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0 ! Обработка входных файлов %D
.head 8 -  Call Message('Обработка входных файлов %D', TRUE)
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 11 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 11 +  If ShowInputPinCodeICT()
.head 12 -  Set nKw = InitICT()
.head 12 +  If nKw ! = 0
.head 13 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 13 -  Break 
.head 12 +  Else 
.head 13 -  Set bIni = TRUE
.head 11 +  Else 
.head 12 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 12 -  Break 
.head 10 -  Set nDubl = DuplicateFile(sMass[nNf])
.head 10 +  If nDubl = 0 ! нет или принять
.head 11 -  Call fLnFilesD(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  Else If nDubl = 2 ! переместить в NOT
.head 11 -  Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE)
.head 11 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sArchPath || 'NOT\\' || sMass[nNf], TRUE)
.head 12 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1,'')
.head 7 -  Set nI = nI + 1
.head 5 -  Return TRUE
.head 3 +  Function: ObrInfoZD
.head 4 -  Description: обработка входной информации (ZD)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\ZD' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0 ! Обработка входных файлов ZD
.head 8 -  Call Message('Обработка входных файлов ZD', TRUE)
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 11 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 11 +  If ShowInputPinCodeICT()
.head 12 -  Set nKw = InitICT()
.head 12 +  If nKw ! = 0
.head 13 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 13 -  Break 
.head 12 +  Else 
.head 13 -  Set bIni = TRUE
.head 11 +  Else 
.head 12 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 12 -  Break 
.head 10 -  Set nDubl = DuplicateFile(sMass[nNf])
.head 10 +  If nDubl = 0 ! нет или принять
.head 11 -  Call fLnFilesZD(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  Else If nDubl = 2 ! переместить в NOT
.head 11 -  Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE)
.head 11 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sArchPath || 'NOT\\' || sMass[nNf], TRUE)
.head 12 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1,'')
.head 7 -  Set nI = nI + 1
.head 5 -  Return TRUE
.head 3 +  Function: ObrInfoMM
.head 4 -  Description: обработка входной информации (M) - издание/закрытие/переиздание карточек
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Call Message('Обработка входных файлов M?', TRUE)
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\M?' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sPathMfiles || sMass[nNf], TRUE)
.head 11 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 11 -  Call Message('Принят файл ' || sMass[nNf] || ' от ' || sSAB || '(' || sNMK || ')', TRUE)
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1,'')
.head 7 -  Set nI = nI + 1
.head 5 -  Return TRUE
.head 3 +  Function: ObrInfoM
.head 4 -  Description: обработка входной информации (платёжные поручения в инвалюте)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If cbIN
.head 6 -  Set nI = 0
.head 6 +  While nI <= nKLI
.head 7 -  Set sSAB = smSAB[nI]
.head 7 -  Set nRNK = nmRNK[nI]
.head 7 -  Set sNMK = smNMK[nI]
.head 7 -  Set sOKPO = smOKPO[nI]
.head 7 -  Set sTIMES = smTIMES[nI]
.head 7 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 7 -  Set nCount = VisDosEnumFiles(sDiskKata || sSAB || '\\IN\\%M' || sSAB || '*.*', FA_Standard, sMass)
.head 7 +  If nCount > 0 ! Обработка входных файлов %M
.head 8 -  Call Message('Обработка входных файлов %M', TRUE)
.head 8 -  Set nNf = 0
.head 8 +  While nNf < nCount
.head 9 +  If VisDosExist(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 11 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 11 +  If ShowInputPinCodeICT()
.head 12 -  Set nKw = InitICT()
.head 12 +  If nKw ! = 0
.head 13 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 13 -  Break 
.head 12 +  Else 
.head 13 -  Set bIni = TRUE
.head 11 +  Else 
.head 12 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 12 -  Break 
.head 10 -  Set nDubl = DuplicateFile(sMass[nNf])
.head 10 +  If nDubl = 0 ! нет или принять
.head 11 -  Call fLnFilesM(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 10 +  Else If nDubl = 2 ! переместить в NOT
.head 11 -  Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE)
.head 11 +  If MomFileCopy(sDiskKata || sSAB || '\\IN\\' || sMass[nNf], sArchPath || 'NOT\\' || sMass[nNf], TRUE)
.head 12 -  Call VisFileDelete(sDiskKata || sSAB || '\\IN\\' || sMass[nNf])
.head 9 -  Set nNf = nNf + 1
.head 8 -  Call SalSetWindowText(ml1,'')
.head 7 -  Set nI = nI + 1
.head 5 -  Return TRUE
.head 3 +  Function: DuplicateFile
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFile
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRet
.head 4 +  Actions
.head 5 +  If not File(sArchPath || 'ADR\\' || sFile)
.head 6 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT fn
     FROM klp_arch
     WHERE fn=:sFile and tip='ADR'"))
.head 6 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Return 0
.head 5 -  Return SalModalDialog(DuplicateFileName, hWndForm, sFile)
.head 3 +  Function: fLnFilesA
.head 4 -  Description: Обработка входных файлов %A КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilNam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call MomFileCopy(sFilNam, sArchPath || 'INA\\' || Right(sFilNam, 12), TRUE)
.head 5 -  Set nHo = llopen(sFilNam, OF_ReadWrite)
.head 5 +  If nHo > 0
.head 6 -  Set sFileTmp = VisFileCreateTemp('FiA')
.head 6 -  Set nHc = llopen(sFileTmp, OF_ReadWrite)
.head 6 +  If nHc > 0
.head 7 -  Call Message('Проверка лицензионных прав клиента ' || sSAB, TRUE)
.head 7 -  Set nI = 0
.head 7 -  Set nSendId = 0
.head 7 -  Set nLenArr = LenArray(smlSAB)
.head 7 -  ! Call DebugN(nLenArr)
.head 7 +  While nI <= nLenArr
.head 8 +  If SalStrUpperX(sSAB) = smlSAB[nI]
.head 9 -  Set nSendId = nmlNOMER[nI]
.head 9 -  Break
.head 8 -  Set nI = nI + 1
.head 7 +  If nSendId = 0 ! не нашло (дать квитанцию о нарушении лицензии)
.head 8 -  Call Wozwrat(7, sFilNam, 0, 0)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call Message('Копирование файла ' || Right(sFilNam, 12) || ' в NOT', TRUE)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call Message(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || Right(sFilNam, 12)), TRUE)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || sFilNam),
     'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Call Message('Расшифрование файла ' || Right(sFilNam, 12), TRUE)
.head 7 -  Set nKw = DECRYPTB(nHo, nHc, nSendId)
!   Расшифрование с разархивированием и проверкой подписи
.head 7 -  ! Set nKw = 0 ! для отладки (верх расскомментировать)
.head 7 +  If nKw = 0 ! Нормальный ход
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE)
.head 8 -  Set nKw = ObrFileA(sFilNam, sFileTmp) ! параметр - имя файла
.head 8 +  If nKw = 0
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = 0', TRUE)
.head 9 -  Call Wozwrat(0, sFilNam, nCount0, nCount1+nCount2)
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'ADR\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return TRUE
.head 8 +  Else If nKw = -1
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = ' || Str(nKw), TRUE)
.head 9 -  Call Wozwrat(nKw, sFilNam, nCount0, nCount1+nCount2)
.head 9 +  If MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 10 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 7 +  Else ! дать квитанцию о плохой подписи файла
.head 8 -  Call Wozwrat(8, sFilNam, 0, 0)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call Message(ErrMsgIct(nKw, 'Ошибка подписи файла ' || Right(sFilNam, 12)), TRUE)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка подписи файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else ! дать квитанцию с кодом 9
.head 6 -  Call Wozwrat(9, sFilNam, 0, 0)
.head 6 -  Call llclose(nHc)
.head 6 -  Call llclose(nHo)
.head 6 -  Call VisFileDelete(sFileTmp)
.head 6 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 7 -  Call VisFileDelete(sFilNam)
.head 6 -  Call Message(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || Right(sFilNam, 12)), TRUE)
.head 6 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: fLnFilesE
.head 4 -  Description: Обработка входных файлов %E КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilNam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call MomFileCopy(sFilNam, sArchPath || 'INE\\' || Right(sFilNam, 12), TRUE)
.head 5 -  Set nHo = llopen(sFilNam, OF_ReadWrite)
.head 5 +  If nHo > 0
.head 6 -  Set sFileTmp = VisFileCreateTemp('FiE')
.head 6 -  Set nHc = llopen(sFileTmp, OF_ReadWrite)
.head 6 +  If nHc > 0
.head 7 -  Call Message('Проверка лицензионных прав клиента ' || sSAB, TRUE)
.head 7 -  Set nI = 0
.head 7 -  Set nSendId = 0
.head 7 -  Set nLenArr = LenArray(smlSAB)
.head 7 +  While nI <= nLenArr
.head 8 +  If SalStrUpperX(sSAB) = smlSAB[nI]
.head 9 -  Set nSendId = nmlNOMER[nI]
.head 9 -  Break
.head 8 -  Set nI = nI + 1
.head 7 +  If nSendId = 0 ! не нашло
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call Message('Копирование файла ' || Right(sFilNam, 12) || ' в NOT', TRUE)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || sFilNam),
     'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set nKw = DECRYPTB(nHo, nHc, nSendId)
!   Расшифрование с разархивированием и проверкой подписи
.head 7 -  ! Set nKw = 0 ! для отладки (верх расскомментировать)
.head 7 +  If nKw = 0 ! Нормальный ход
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE)
.head 8 -  Set nKw = ObrFileE(sFilNam, sFileTmp) ! параметр - имя файла
.head 8 -  ! Call DebugN(nKw)
.head 8 +  If nKw = 0
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'ADR\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return TRUE
.head 8 +  Else If nKw = -1
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 10 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка подписи файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call llclose(nHc)
.head 6 -  Call llclose(nHo)
.head 6 -  Call VisFileDelete(sFileTmp)
.head 6 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 7 -  Call VisFileDelete(sFilNam)
.head 6 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: fLnFilesQ
.head 4 -  Description: Обработка входных файлов %Q КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilNam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call MomFileCopy(sFilNam, sArchPath || 'INQ\\' || Right(sFilNam, 12), TRUE)
.head 5 -  Set nHo = llopen(sFilNam, OF_ReadWrite)
.head 5 +  If nHo>0
.head 6 -  Set sFileTmp = VisFileCreateTemp('FiQ')
.head 6 -  Set nHc = llopen(sFileTmp, OF_ReadWrite)
.head 6 +  If nHc > 0
.head 7 -  ! Set nSendId = 9999 ! Поменять потом на необходимое (ниже уже поменяно)
.head 7 -  Set nI = 0
.head 7 -  Set nSendId = 0
.head 7 -  Set nLenArr = LenArray(smlSAB)
.head 7 +  While nI <= nLenArr
.head 8 +  If SalStrUpperX(sSAB) = smlSAB[nI]
.head 9 -  Set nSendId = nmlNOMER[nI]
.head 9 -  Break
.head 8 -  Set nI = nI + 1
.head 7 -  Call Message('Проверка лицензионных прав клиента ' || sSAB, TRUE)
.head 7 +  If nSendId = 0 ! не нашло (дать квитанцию о нарушении лицензии)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call Message('Копирование файла ' || Right(sFilNam, 12) || ' в NOT', TRUE)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || sFilNam),
     'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set nKw = DECRYPTB(nHo,nHc,nSendId)
!   Расшифрование с разархивированием и проверкой подписи
.head 7 -  ! Set nKw = 0 ! для отладки (верх расскомментировать)
.head 7 +  If nKw = 0 ! Нормальный ход
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE)
.head 8 -  Set nKw = ObrFileQ(sFilNam, sFileTmp) ! параметр - имя файла
.head 8 +  If nKw = 0
.head 9 -  Call VisFileDelete(sFilNam)
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'ADR\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return TRUE
.head 8 +  Else
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 +  If MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка подписи файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call llclose(nHc)
.head 6 -  Call llclose(nHo)
.head 6 -  Call VisFileDelete(sFileTmp)
.head 6 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 7 -  Call VisFileDelete(sFilNam)
.head 6 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: fLnFilesD
.head 4 -  Description: Обработка входных файлов %D КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilNam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call MomFileCopy(sFilNam, sArchPath || 'IND\\' || Right(sFilNam, 12), TRUE)
.head 5 -  Set nHo = llopen(sFilNam, OF_ReadWrite)
.head 5 +  If nHo > 0
.head 6 -  Set sFileTmp = VisFileCreateTemp('FiD')
.head 6 -  Set nHc = llopen(sFileTmp, OF_ReadWrite)
.head 6 +  If nHc > 0
.head 7 -  ! Set nSendId = 9999 ! Поменять потом на необходимое (ниже уже поменяно)
.head 7 -  Set nI = 0
.head 7 -  Set nSendId = 0
.head 7 -  Set nLenArr = LenArray(smlSAB)
.head 7 +  While nI <= nLenArr
.head 8 +  If SalStrUpperX(sSAB) = smlSAB[nI]
.head 9 -  Set nSendId = nmlNOMER[nI]
.head 9 -  Break
.head 8 -  Set nI = nI + 1
.head 7 -  Call Message('Проверка лицензионных прав клиента ' || sSAB, TRUE)
.head 7 +  If nSendId = 0 ! не нашло (дать квитанцию о нарушении лицензии)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call Message('Копирование файла ' || Right(sFilNam, 12) || ' в NOT', TRUE)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || sFilNam),
     'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set nKw = DECRYPTB(nHo, nHc, nSendId)
!   Расшифрование с разархивированием и проверкой подписи
.head 7 -  ! Set nKw = 0 ! для отладки (верх расскомментировать)
.head 7 +  If nKw = 0 ! Нормальный ход
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE)
.head 8 -  Set nKw = ObrFileD(sFilNam, sFileTmp) ! параметр - имя файла
.head 8 +  If nKw = 0
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = 0', TRUE)
.head 9 -  Call Wozwrat(0, sFilNam, nCount0, nCount1+nCount2)
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'ADR\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return TRUE
.head 8 +  Else If nKw = -1
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = ' || Str(nKw), TRUE)
.head 9 -  Call Wozwrat(nKw, sFilNam, nCount0, nCount1+nCount2)
.head 9 +  If MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 10 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 7 +  Else ! дать квитанцию о плохой подписи файла
.head 8 -  Call Wozwrat(8, sFilNam, 0, 0)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call Message(ErrMsgIct(nKw, 'Ошибка подписи файла ' || Right(sFilNam, 12)) || '. Код возврата = ' || Str(nKw),
     TRUE)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка подписи файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call llclose(nHc)
.head 6 -  Call llclose(nHo)
.head 6 -  Call VisFileDelete(sFileTmp)
.head 6 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 7 -  Call VisFileDelete(sFilNam)
.head 6 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: fLnFilesZD
.head 4 -  Description: Обработка входных файлов ZD КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilNam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call MomFileCopy(sFilNam, sArchPath || 'INZD\\' || Right(sFilNam, 12), TRUE)
.head 5 -  Set nHo = llopen(sFilNam, OF_ReadWrite)
.head 5 +  If nHo > 0
.head 6 -  Set sFileTmp = VisFileCreateTemp('FiZD')
.head 6 -  Set nHc = llopen(sFileTmp, OF_ReadWrite)
.head 6 +  If nHc > 0
.head 7 -  Set nI = 0
.head 7 -  Set nSendId = 0
.head 7 -  Set nLenArr = LenArray(smlSAB)
.head 7 +  While nI <= nLenArr
.head 8 +  If SalStrUpperX(sSAB) = smlSAB[nI]
.head 9 -  Set nSendId = nmlNOMER[nI]
.head 9 -  Break
.head 8 -  Set nI = nI + 1
.head 7 -  Call Message('Проверка лицензионных прав клиента ' || sSAB, TRUE)
.head 7 +  If nSendId = 0 ! не нашло (дать квитанцию о нарушении лицензии)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call Message('Копирование файла ' || Right(sFilNam, 12) || ' в NOT', TRUE)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || sFilNam),
     'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  ! Расшифрование с разархивированием и проверкой подписи
.head 7 -  Set nKw = DECRYPTB(nHo, nHc, nSendId)
.head 7 -  ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.head 7 -  ! Call llclose(nHc)
.head 7 -  ! Call llclose(nHo)
.head 7 -  ! Call SalFileCopy(sFilNam, sFileTmp, TRUE)
.head 7 -  ! Set nKw = 0 ! для отладки (верх расскомментировать)
.head 7 -  ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.head 7 +  If nKw = 0 ! Нормальный ход
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE)
.head 8 -  Set nKw = ObrFileZD(sFilNam, sFileTmp) ! параметр - имя файла
.head 8 +  If nKw = 0
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = 0', TRUE)
.head 9 -  Call WozwratZ(0, sFilNam, nKwoAll, nSummAll)
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'ADR\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return TRUE
.head 8 +  Else If nKw = -1
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = ' || Str(nKw), TRUE)
.head 9 -  Call WozwratZ(nKw, sFilNam, 0, 0)
.head 9 +  If MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 10 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 7 +  Else ! дать квитанцию о плохой подписи файла
.head 8 -  Call Wozwrat(8, sFilNam, 0, 0)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call Message(ErrMsgIct(nKw, 'Ошибка подписи файла ' || Right(sFilNam, 12)) || '. Код возврата = ' || Str(nKw),
     TRUE)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка подписи файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call llclose(nHc)
.head 6 -  Call llclose(nHo)
.head 6 -  Call VisFileDelete(sFileTmp)
.head 6 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 7 -  Call VisFileDelete(sFilNam)
.head 6 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: fLnFilesM
.head 4 -  Description: Обработка входных файлов %M КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFilNam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call MomFileCopy(sFilNam, sArchPath || 'INM\\' || Right(sFilNam, 12), TRUE)
.head 5 -  Set nHo = llopen(sFilNam, OF_ReadWrite)
.head 5 +  If nHo > 0
.head 6 -  Set sFileTmp = VisFileCreateTemp('FiM')
.head 6 -  Set nHc = llopen(sFileTmp, OF_ReadWrite)
.head 6 +  If nHc > 0
.head 7 -  ! Set nSendId = 9999 ! Поменять потом на необходимое (ниже уже поменяно)
.head 7 -  Set nI = 0
.head 7 -  Set nSendId = 0
.head 7 -  Set nLenArr = LenArray(smlSAB)
.head 7 +  While nI <= nLenArr
.head 8 +  If SalStrUpperX(sSAB) = smlSAB[nI]
.head 9 -  Set nSendId = nmlNOMER[nI]
.head 9 -  Break
.head 8 -  Set nI = nI + 1
.head 7 -  Call Message('Проверка лицензионных прав клиента ' || sSAB, TRUE)
.head 7 +  If nSendId = 0 ! не нашло (дать квитанцию о нарушении лицензии)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 -  Call Message('Копирование файла ' || Right(sFilNam, 12) || ' в NOT', TRUE)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Нарушение лицензионных прав при обработке файла' || sFilNam),
     'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set nKw = DECRYPTB(nHo, nHc, nSendId)
!   Расшифрование с разархивированием и проверкой подписи
.head 7 -  ! Set nKw = 0 ! для отладки (верх расскомментировать)
.head 7 +  If nKw = 0 ! Нормальный ход
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE)
.head 8 -  Set nKw = ObrFileM(sFilNam, sFileTmp) ! параметр - имя файла
.head 8 +  If nKw = 0
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = 0', TRUE)
.head 9 -  Call Wozwrat(0, sFilNam, nCount0, nCount1+nCount2)
.head 9 -  Call MomFileCopy(sFileTmp, sArchPath || 'ADR\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return TRUE
.head 8 +  Else If nKw = -1
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Call Message('Формирование квитанции на файл ' || Right(sFilNam, 12) || '. Код возврата = ' || Str(nKw), TRUE)
.head 9 -  Call Wozwrat(nKw, sFilNam, nCount0, nCount1+nCount2)
.head 9 +  If MomFileCopy(sFileTmp, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 10 -  Call VisFileDelete(sFilNam)
.head 9 -  Call VisFileDelete(sFileTmp)
.head 9 -  Return FALSE
.head 7 +  Else ! дать квитанцию о плохой подписи файла
.head 8 -  Call Wozwrat(8, sFilNam, 0, 0)
.head 8 -  Call llclose(nHc)
.head 8 -  Call llclose(nHo)
.head 8 -  Call VisFileDelete(sFileTmp)
.head 8 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 9 -  Call VisFileDelete(sFilNam)
.head 8 -  Call Message(ErrMsgIct(nKw, 'Ошибка подписи файла ' || Right(sFilNam, 12)) || '. Код возврата = ' || Str(nKw),
     TRUE)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка подписи файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call llclose(nHc)
.head 6 -  Call llclose(nHo)
.head 6 -  Call VisFileDelete(sFileTmp)
.head 6 +  If MomFileCopy(sFilNam, sArchPath || 'NOT\\' || Right(sFilNam, 12), TRUE)
.head 7 -  Call VisFileDelete(sFilNam)
.head 6 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка открытия при обработке файла ' || sFilNam), 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: Wozwrat
.head 4 -  Description: формирование квитанций на %A и %D
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nKodo
.head 5 -  String: sFN
.head 5 -  Number: nKilk
.head 5 -  Number: nSum
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTmp
.head 5 -  String: sTmp2
.head 5 -  String: sFileTmp2
.head 5 -  Number: nHc2
.head 5 -  Number: nHc
.head 5 -  File Handle: hT
.head 5 -  File Handle: hHc
.head 5 -  Number: nTT
.head 5 -  String: sKdSd
.head 4 +  Actions
.head 5 -  ! ! Дать квитанция с кодом nKodo на файл sFN
.head 5 -  Set sTmp = Right(sFN, 12)
.head 5 -  Set sTmp2 = sTempPath || '%T' || Subs(sTmp, 3, 10)
.head 5 -  ! Set nHc = llcreat(sTmp2 , OF_ReadWrite)
.head 5 +  If SalFileOpen(hHc, sTmp2, OF_Create | OF_ReadWrite)
!  nHc > 0
.head 6 +  If SalFileWrite(hHc, sTmp || SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
   SalDateCurrent(), 'hhhhmmss'), 6) || PadL(Str(nKodo), 2) || PadL(Str(nKilk), 4) || PadL(Str(nSum), 24), 56) = 56
.head 7 -  Call SalFileClose(hHc)
.head 7 -  Set nHc = llopen(sTmp2, OF_ReadWrite)
.head 7 -  Set nTT = PUTFSGNB(nHc)
.head 7 +  If nTT = 0
.head 8 -  Call SaveInfoToLog('Подпись ' || Right(sTmp2, 12) || ' Ok')
.head 8 -  Set sFileTmp2 = VisFileCreateTemp('~kl')
.head 8 -  Set nHc2 = llopen(sFileTmp2, OF_ReadWrite)
.head 8 +  If nHc2 > 0
.head 9 -  ! Set nSendId = 1 ! потом убрать
.head 9 -  Set nTT = ENCRYPTB(nHc, nHc2, nSendId)
.head 9 +  If nTT = 0
.head 10 -  Call SaveInfoToLog('Шифрование ' || Right(sTmp2, 12) || ' Ok')
.head 10 -  Call llclose(nHc)
.head 10 -  Call llclose(nHc2)
.head 10 -  Call MomFileCopy(sFileTmp2, sDiskKata || sSAB || '\\OUT\\' || Right(sTmp2, 12), TRUE)
.head 10 -  Call MomFileCopy(sTmp2, sArchPath || 'KWI\\' || Right(sTmp2, 12), TRUE)
.head 10 -  Call VisFileDelete(sTmp2)
.head 10 -  Call VisFileDelete(sFN)
.head 10 -  Call VisFileDelete(sFileTmp2)
.head 9 +  Else
.head 10 -  Call MessageNoWait(ErrMsgIct(nTT, 'Ошибка при шифровании с архивированием файла ' || Right(sTmp2, 12)),
     'ОШИБКА', 3, 1)
.head 10 -  Call llclose(nHc)
.head 10 -  Call llclose(nHc2)
.head 8 +  Else
.head 9 -  Call MessageNoWait('Невозможно создать (3) временный файл для формирования квитанции на поступивший файл ' ||
     sTmp, 'ОШИБКА', 3, 1)
.head 9 -  Call llclose(nHc)
.head 7 +  Else
.head 8 -  Call MessageNoWait(ErrMsgIct(nTT, 'Ошибка при подписывании файла ' || Right(sTmp2, 12)), 'ОШИБКА', 3, 1)
.head 8 -  Call llclose(nHc)
.head 6 +  Else
.head 7 -  Call MessageNoWait('Невозможно создать (2) временный файл для формирования квитанции на поступивший файл ' || sTmp,
     'ОШИБКА', 3, 1)
.head 7 -  Call llclose(nHc)
.head 5 +  Else
.head 6 -  Call MessageNoWait('Невозможно создать (1) временный файл для формирования квитанции на поступивший файл ' || sTmp,
     'ОШИБКА', 3, 1)
.head 6 -  Call llclose(nHc)
.head 5 -  Set sKdSd = 'Сформирована квитанция ' || Right(sTmp2, 12) || ' на пакет ' || Right(sFN, 12) || '. Код возврата ' ||
    Str(nKodo)
.head 5 +  If nKodo = 0
.head 6 -  Set sKdSd = sKdSd || ', количество документов ' || Str(nKilk) || ', на сумму ' || SalNumberToStrX(nSum/100, 2)
.head 5 -  Call Message(sKdSd, TRUE)
.head 5 -  Return TRUE
.head 3 +  Function: WozwratZ
.head 4 -  Description: формирование квитанций на ZD
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nKodo
.head 5 -  String: sFN
.head 5 -  Number: nKilk
.head 5 -  Number: nSum
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTmp
.head 5 -  String: sTmp2
.head 5 -  String: sFileTmp2
.head 5 -  Number: nHc2
.head 5 -  Number: nHc
.head 5 -  File Handle: hT
.head 5 -  File Handle: hHc
.head 5 -  Number: nTT
.head 5 -  String: sKdSd
.head 4 +  Actions
.head 5 -  ! ! Дать квитанция с кодом nKodo на файл sFN
.head 5 -  Set sTmp = Right(sFN, 12)
.head 5 -  Set sTmp2 = sTempPath || 'ZK' || Subs(sTmp, 3, 10)
.head 5 -  ! Set nHc = llcreat(sTmp2 , OF_ReadWrite)
.head 5 +  If SalFileOpen(hHc, sTmp2, OF_Create | OF_ReadWrite)
!  nHc > 0
.head 6 +  If SalFileWrite(hHc, sTmp || SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
   SalDateCurrent(), 'hhhhmmss'), 6) || PadL(Str(nKodo), 2) || PadL(Str(nKilk), 4) || PadL(Str(nSum), 24), 56) = 56
.head 7 -  Call SalFileClose(hHc)
.head 7 -  Set nHc = llopen(sTmp2, OF_ReadWrite)
.head 7 -  Set nTT = PUTFSGNB(nHc)
.head 7 +  If nTT = 0
.head 8 -  Call SaveInfoToLog('Подпись ' || Right(sTmp2, 12) || ' Ok')
.head 8 -  Set sFileTmp2 = VisFileCreateTemp('~kl')
.head 8 -  Set nHc2 = llopen(sFileTmp2, OF_ReadWrite)
.head 8 +  If nHc2 > 0
.head 9 -  ! Set nSendId = 1 ! потом убрать
.head 9 -  Set nTT = ENCRYPTB(nHc, nHc2, nSendId)
.head 9 +  If nTT = 0
.head 10 -  Call SaveInfoToLog('Шифрование ' || Right(sTmp2, 12) || ' Ok')
.head 10 -  Call llclose(nHc)
.head 10 -  Call llclose(nHc2)
.head 10 -  Call MomFileCopy(sFileTmp2,  sDiskKata || sSAB || '\\OUT\\' || Right(sTmp2, 12), TRUE)
.head 10 -  Call MomFileCopy(sTmp2, sArchPath || 'KWI\\' || Right(sTmp2, 12), TRUE)
.head 10 -  Call VisFileDelete(sTmp2)
.head 10 -  Call VisFileDelete(sFN)
.head 10 -  Call VisFileDelete(sFileTmp2)
.head 9 +  Else
.head 10 -  Call MessageNoWait(ErrMsgIct(nTT, 'Ошибка при шифровании с архивированием файла ' || Right(sTmp2, 12)),
     'ОШИБКА', 3, 1)
.head 10 -  Call llclose(nHc)
.head 10 -  Call llclose(nHc2)
.head 8 +  Else
.head 9 -  Call MessageNoWait('Невозможно создать (3) временный файл для формирования квитанции на поступивший файл ' ||
     sTmp, 'ОШИБКА', 3, 1)
.head 9 -  Call llclose(nHc)
.head 7 +  Else
.head 8 -  Call MessageNoWait(ErrMsgIct(nTT, 'Ошибка при подписывании файла ' || Right(sTmp2, 12)), 'ОШИБКА', 3, 1)
.head 8 -  Call llclose(nHc)
.head 6 +  Else
.head 7 -  Call MessageNoWait('Невозможно создать (2) временный файл для формирования квитанции на поступивший файл ' || sTmp,
     'ОШИБКА', 3, 1)
.head 7 -  Call llclose(nHc)
.head 5 +  Else
.head 6 -  Call MessageNoWait('Невозможно создать (1) временный файл для формирования квитанции на поступивший файл ' || sTmp,
     'ОШИБКА', 3, 1)
.head 6 -  Call llclose(nHc)
.head 5 -  Set sKdSd = 'Сформирована квитанция ' || Right(sTmp2, 12) || ' на пакет ' || Right(sFN, 12) || '. Код возврата ' ||
    Str(nKodo)
.head 5 +  If nKodo = 0
.head 6 -  Set sKdSd = sKdSd || ', количество документов ' || Str(nKilk) || ', на сумму ' || SalNumberToStrX(nSum/100, 2)
.head 5 -  Call Message(sKdSd, TRUE)
.head 5 -  Return TRUE
.head 3 +  Function: FormFileW
.head 4 -  Description: формирование файла %W технологической машиной (sos) и от операционистов тоже
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  String: smMFOA[*]
.head 5 -  String: smNLSA[*]
.head 5 -  String: smMFOB[*]
.head 5 -  String: smNLSB[*]
.head 5 -  String: smNAMB[*]
.head 5 -  Number: nmS[*]
.head 5 -  String: smND[*]
.head 5 -  String: smNAZN[*]
.head 5 -  String: smPOND[*]
.head 5 -  String: smPRWO[*]
.head 5 -  String: smNameFileA[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sW
.head 5 -  File Handle: hW
.head 5 -  String: sDaTi
.head 5 -  Number: nSdeb
.head 5 -  Number: nSkre
.head 5 -  Number: nKw
.head 5 -  Number: nhW
.head 5 -  Number: nhWc
.head 5 -  String: sWc
.head 5 -  Long String: s336
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smMFOA, nKd)
.head 5 -  Call SalArrayGetUpperBound(smMFOA, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла W
.head 7 -  Set sW = sTempPath || '%W' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'W')
.head 7 +  If not SalFileOpen(hW, sW, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hW, Right(sW, 12) || sDaTi || PadL(Str(nLA+1), 4) || PutCrLf(), 32) != 32
.head 8 -  Call SalFileClose(hW)
.head 8 -  Call VisFileDelete(sW)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s336 = PadL(VisStrLeftTrim(smMFOA[nKd]), 9) || PadL(VisStrLeftTrim(smNLSA[nKd]), 14) || PadL(
    VisStrLeftTrim(smMFOB[nKd]), 9) || PadL(VisStrLeftTrim(smNLSB[nKd]), 14) || PadR(StrWinToDosX(
    VisStrLeftTrim(smNAMB[nKd])), 38) || PadL(Str(nmS[nKd]), 16) || PadR(StrWinToDosX(VisStrLeftTrim(smND[nKd])), 10)
.head 6 -  Set s336 = s336 || PadR(StrWinToDosX(VisStrLeftTrim(smNAZN[nKd])), 160) || PadR(VisStrLeftTrim(smPOND[nKd]), 8) ||
    PadR(StrWinToDosX(VisStrLeftTrim(smPRWO[nKd])), 40) || PadR(VisStrLeftTrim(smNameFileA[nKd]), 12) || PadL(
    Str(nKd+1), 4) || PutCrLf()
.head 6 +  If SalFileWrite(hW, s336, 336) != 336
.head 7 -  Call SalFileClose(hW)
.head 7 -  Call VisFileDelete(sW)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hW)
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sW)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sW)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhW = llopen(sW, OF_ReadWrite)
.head 5 +  If nhW > 0
.head 6 -  Set nKw = PUTFSGNB(nhW)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhW)
.head 7 -  Call VisFileDelete(sW)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sW), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sWc = VisFileCreateTemp('~W~')
.head 7 -  Call VisFileDelete(sWc)
.head 7 -  Set nhWc = llcreat(sWc, OF_ReadWrite)
.head 7 +  If nhWc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhW, nhWc, nSendId)
.head 8 -  Call llclose(nhW)
.head 8 -  Call llclose(nhWc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sW)
.head 9 -  Call VisFileDelete(sWc)
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sW), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sWc, sDiskKata || sSab || '\\OUT\\' || Right(sW, 12), TRUE)
.head 10 -  Call MomFileCopy(sW, sArchPath || 'ARH\\' || Right(sW, 12), TRUE)
.head 10 -  Call VisFileDelete(sWc)
.head 10 -  Call VisFileDelete(sW)
.head 10 -  Call SqlCommit(hSql())
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sWc)
.head 10 -  Call VisFileDelete(sW)
.head 10 -  Call SqlRollback(hSql())
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhW)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sW)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sWc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sW)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sW, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileU
.head 4 -  Description: формирование файла %U
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  String: smNBW[*]
.head 5 -  String: smMFO[*]
.head 5 -  String: smSEP[*]
.head 5 -  String: smOP[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sU
.head 5 -  File Handle: hU
.head 5 -  String: sDaTi
.head 5 -  Number: nKw
.head 5 -  Number: nhU
.head 5 -  Number: nhUc
.head 5 -  String: sUc
.head 5 -  Long String: s54
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smMFO, nKd)
.head 5 -  Call SalArrayGetUpperBound(smMFO, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла U
.head 7 -  Set sU = sTempPath || '%U' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'U')
.head 7 +  If not SalFileOpen(hU, sU, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании файла ' || sU, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hU, Right(sU, 12) || sDaTi || PadL(Str(nLA+1), 4) || PutCrLf(), 32) != 32
.head 8 -  Call SalFileClose(hU)
.head 8 -  Call VisFileDelete(sU)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при записи в файл ' || sU, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s54 = PadR(StrWinToDosX(smNBW[nKd]), 38) || PadL(smMFO[nKd], 9) || PadR(smSEP[nKd], 4) || smOP[nKd] || PutCrLf()
.head 6 +  If SalFileWrite(hU, s54, 54) != 54
.head 7 -  Call SalFileClose(hU)
.head 7 -  Call VisFileDelete(sU)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('Ошибка при записи в файл ' || sU, 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hU)
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sU)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call VisFileDelete(sU)
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhU = llopen(sU, OF_ReadWrite)
.head 5 +  If nhU > 0
.head 6 -  Set nKw = PUTFSGNB(nhU)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhU)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call VisFileDelete(sU)
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sU), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sUc = VisFileCreateTemp('~U~')
.head 7 -  Call VisFileDelete(sUc)
.head 7 -  Set nhUc = llcreat(sUc, OF_ReadWrite)
.head 7 +  If nhUc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhU, nhUc, nSendId)
.head 8 -  Call llclose(nhU)
.head 8 -  Call llclose(nhUc)
.head 8 +  If nKw != 0
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call VisFileDelete(sU)
.head 9 -  Call VisFileDelete(sUc)
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sU), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sUc, sDiskKata || sSab || '\\OUT\\' || Right(sU, 12), TRUE)
.head 10 -  Call MomFileCopy(sU, sArchPath || 'ARH\\' || Right(sU, 12), TRUE)
.head 10 -  Call VisFileDelete(sUc)
.head 10 -  Call VisFileDelete(sU)
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sUc)
.head 10 -  Call VisFileDelete(sU)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhU)
.head 8 -  Call VisFileDelete(sU)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sUc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call VisFileDelete(sU)
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sU, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileB
.head 4 -  Description: формирование файла %B
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  String: smBIC[*]
.head 5 -  String: smNZB[*]
.head 5 -  String: smCITY[*]
.head 5 -  String: smCOUNTRY[*]
.head 5 -  String: smAction[*]
.head 5 -  Date/Time: dmDadaupd[*]
.head 5 -  Date/Time: dPodklu
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sB
.head 5 -  File Handle: hB
.head 5 -  String: sDaTi
.head 5 -  Number: nKw
.head 5 -  Number: nhB
.head 5 -  Number: nhBc
.head 5 -  String: sBc
.head 5 -  String: s280
.head 5 -  Long String: s308
.head 5 -  Number: nLenArr
.head 5 -  !
.head 5 -  String: s68
.head 5 -  String: s1
.head 5 -  String: s2
.head 5 -  String: s3
.head 5 -  String: s4
.head 5 -  String: sBufout
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smBIC, nKd)
.head 5 -  Call SalArrayGetUpperBound(smBIC, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set bZag = TRUE
.head 5 -  Set sBufout = ''
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла B
.head 7 -  Set sB = sTempPath || '%B' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'B')
.head 7 +  If not SalFileOpen(hB, sB, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании файла ' || sB, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hB, Right(sB, 12) || sDaTi || PadL(Str(nLA+1), 6) || PutCrLf(), 34) != 34
.head 8 -  Call SalFileClose(hB)
.head 8 -  Call VisFileDelete(sB)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при записи в файл ' || sB, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s280 = Spac(280)
.head 6 -  Set s68 = StrWinToDosX(Left(smNZB[nKd] || Spac(68), 68))
.head 6 -  Set s1 = SalStrTrimX(Left(s68, 34)) || Chr(13)
.head 6 -  Set s2 = SalStrTrimX(Right(s68, 34)) || Chr(13)
.head 6 -  Set s3 = SalStrTrimX(StrWinToDosX(Left(smCITY[nKd] || ',' || smCOUNTRY[nKd] || Spac(34), 34))) || Chr(13)
.head 6 -  Set s4 = StrWinToDosX(smBIC[nKd]) || Chr(13)
.head 6 -  Call ConvertBinToHex(s1 || s2 || s3 || s4, s280, Len(s1) + Len(s2) + Len(s3) + Len(s4))
.head 6 -  Set s280 = SalStrTrimX(s280) || Repl('0', (140 - Len(s1) - Len(s2) - Len(s3) - Len(s4))*2)
.head 6 -  ! Call Debug('PadR(Left(smNZB[nKd], 140), 140) = ' || PadR(Left(smNZB[nKd], 140), 140) || PutCrLf() || 's280 = ' ||
     s280)
.head 6 +  ! If dmDadaupd[nKd] > dPodklu
.head 7 -   Set s308 = PadR(StrWinToDosX(smBIC[nKd]), 11) || s280 || smAction[nKd] ||
    SalFmtFormatDateTime(dmDadaupd[nKd], 'yyyyMMdd') || Right('0' ||
    SalFmtFormatDateTime(dmDadaupd[nKd], 'hhhhmmss'), 6) || PutCrLf()
.head 6 +  ! Else
.head 7 -   Set s308 = ''
.head 6 -  Set s308 = IifS(dmDadaupd[nKd]>dPodklu, PadR(StrWinToDosX(smBIC[nKd]), 11) || s280 || smAction[nKd] ||
    SalFmtFormatDateTime(dmDadaupd[nKd], 'yyyyMMdd') || Right('0' ||
    SalFmtFormatDateTime(dmDadaupd[nKd], 'hhhhmmss'), 6) || PutCrLf(), '')
.head 6 -  Set sBufout = sBufout || s308
.head 6 +  If Len(sBufout) > 8192
.head 7 +  If SalFileWrite(hB, sBufout, Len(sBufout)) != Len(sBufout)
.head 8 -  Call SalFileClose(hB)
.head 8 -  Call VisFileDelete(sB)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при записи в файл ' || sB, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else
.head 8 -  Set sBufout = ''
.head 6 -  Set nKd = nKd + 1
.head 5 +  If Len(sBufout) > 0
.head 6 +  If SalFileWrite(hB, sBufout, Len(sBufout)) != Len(sBufout)
.head 7 -  Call SalFileClose(hB)
.head 7 -  Call VisFileDelete(sB)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('Ошибка при записи в файл ' || sB, 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sBufout = ''
.head 5 -  Call SalFileClose(hB)
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sB)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call VisFileDelete(sB)
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhB = llopen(sB, OF_ReadWrite)
.head 5 +  If nhB > 0
.head 6 -  Set nKw = PUTFSGNB(nhB)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhB)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call VisFileDelete(sB)
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sB), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sBc = VisFileCreateTemp('~B~')
.head 7 -  Call VisFileDelete(sBc)
.head 7 -  Set nhBc = llcreat(sBc, OF_ReadWrite)
.head 7 +  If nhBc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhB, nhBc, nSendId)
.head 8 -  Call llclose(nhB)
.head 8 -  Call llclose(nhBc)
.head 8 +  If nKw != 0
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call VisFileDelete(sB)
.head 9 -  Call VisFileDelete(sBc)
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sB), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sBc, sDiskKata || sSab || '\\OUT\\' || Right(sB, 12), TRUE)
.head 10 -  Call MomFileCopy(sB, sArchPath || 'ARH\\' || Right(sB, 12), TRUE)
.head 10 -  Call VisFileDelete(sBc)
.head 10 -  Call VisFileDelete(sB)
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sBc)
.head 10 -  Call VisFileDelete(sB)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhB)
.head 8 -  Call VisFileDelete(sB)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sBc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call VisFileDelete(sB)
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sB, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileD
.head 4 -  Description: формирование файла %$
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  Number: nmKV[*]
.head 5 -  String: smSKV[*]
.head 5 -  String: smNAME[*]
.head 5 -  Number: nmBSUM[*]
.head 5 -  Date/Time: dmVDATE[*]
.head 5 -  Date/Time: dmVDATEP[*]
.head 5 -  Number: nmRATE_O[*]
.head 5 -  Number: nmRATE_OP[*]
.head 5 -  Number: nmRATE_B[*]
.head 5 -  Number: nmRATE_S[*]
.head 5 -  Number: nmRATE_BP[*]
.head 5 -  Number: nmRATE_SP[*]
.head 5 -  Boolean: bBezUsl
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sD
.head 5 -  File Handle: hD
.head 5 -  String: sDaTi
.head 5 -  String: sDaTiP
.head 5 -  Number: nKw
.head 5 -  Number: nhD
.head 5 -  Number: nhDc
.head 5 -  String: sDc
.head 5 -  Long String: s117
.head 5 -  !
.head 5 -  Number: nDcrc
.head 5 -  Date/Time: dDFI
.head 5 -  Number: nCRC
.head 5 -  !
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(nmKV, nKd)
.head 5 -  Call SalArrayGetUpperBound(nmKV, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set nDcrc = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла $
.head 7 -  Set sD = sTempPath || '%$' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, '$')
.head 7 +  If not SalFileOpen(hD, sD, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hD, Right(sD, 12) || sDaTi || PadL(Str(nLA+1), 4) || PutCrLf(), 32) != 32
.head 8 -  Call SalFileClose(hD)
.head 8 -  Call VisFileDelete(sD)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set sDaTi = SalFmtFormatDateTime(dmVDATE[nKd], 'yyyyMMdd')
.head 6 -  Set sDaTiP = SalFmtFormatDateTime(dmVDATEP[nKd], 'yyyyMMdd')
.head 6 -  Set s117 = PadL(Str(nmKV[nKd]), 3) || PadR(VisStrLeftTrim(smSKV[nKd]), 3) || PadR(VisStrLeftTrim(
    StrWinToDosX(smNAME[nKd])), 15) || PadL(Str(nmBSUM[nKd]), 6) || sDaTi || sDaTiP || PadL(
    SalNumberToStrX(nmRATE_O[nKd], 4), 12) || PadL(SalNumberToStrX(nmRATE_OP[nKd], 4), 12) || PadL(
    SalNumberToStrX(nmRATE_B[nKd]*nmBSUM[nKd], 4), 12) || PadL(SalNumberToStrX(nmRATE_S[nKd]*nmBSUM[nKd], 4), 12) ||
    PadL(SalNumberToStrX(nmRATE_BP[nKd], 4), 12) || PadL(SalNumberToStrX(nmRATE_SP[nKd], 4), 12) || PutCrLf()
.head 6 -  Set nDcrc = nDcrc + CRCstring(s117)
.head 6 +  If SalFileWrite(hD, s117, 117) != 117
.head 7 -  Call SalFileClose(hD)
.head 7 -  Call VisFileDelete(sD)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hD)
.head 5 +  If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT dfi,crc
   FROM klpcrc
   INTO :dDFI,:nCRC
   WHERE sab=:sSab and tip='$'"))
.head 6 +  If SqlFetchNext(hSqlAux2(),nFetchRes)
.head 7 -  ! If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') and
   nCRC = nDcrc and not bBezUsl
.head 7 +  If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(GetServerDate(), 'yyyyMMdd') and nCRC = nDcrc and
   not bBezUsl
.head 8 -  Call VisFileDelete(sD)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call Message('Cправочник курсов валют (' || Str(nCRC) || ') для ' || sSab || ' сегодня уже формировался', TRUE)
.head 8 -  Return FALSE
.head 7 +  Else
.head 8 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     UPDATE klpcrc
     SET dfi= TODAY ,crc=:nDcrc
     WHERE sab=:sSab and tip='$'"))
.head 6 +  Else
.head 7 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     INSERT
     INTO klpcrc (sab,tip,dfi,crc)
     VALUES (:sSab,'$', TODAY ,:nDcrc)"))
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sD)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sD)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhD = llopen(sD, OF_ReadWrite)
.head 5 +  If nhD > 0
.head 6 -  Set nKw = PUTFSGNB(nhD)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhD)
.head 7 -  Call VisFileDelete(sD)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sD), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sDc = VisFileCreateTemp('~$~')
.head 7 -  Call VisFileDelete(sDc)
.head 7 -  Set nhDc = llcreat(sDc, OF_ReadWrite)
.head 7 +  If nhDc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhD, nhDc, nSendId)
.head 8 -  Call llclose(nhD)
.head 8 -  Call llclose(nhDc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sD)
.head 9 -  Call VisFileDelete(sDc)
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sD), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sDc, sDiskKata || sSab || '\\OUT\\' || Right(sD, 12), TRUE)
.head 10 -  Call MomFileCopy(sD, sArchPath || 'ARH\\' || Right(sD, 12), TRUE)
.head 10 -  Call VisFileDelete(sDc)
.head 10 -  Call VisFileDelete(sD)
.head 10 -  Call SqlCommit(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sDc)
.head 10 -  Call VisFileDelete(sD)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return TRUE
.head 7 +  Else
.head 8 -  Call llclose(nhD)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sD)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sDc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sD)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sD, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileS
.head 4 -  Description: формирование файла %S
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  Number: nmCountry[*]
.head 5 -  String: smName[*]
.head 5 -  Boolean: bBezUsl
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sS
.head 5 -  File Handle: hS
.head 5 -  Number: nhS
.head 5 -  Number: nhSc
.head 5 -  String: sSc
.head 5 -  Long String: s55
.head 5 -  !
.head 5 -  Number: nDcrc
.head 5 -  Date/Time: dDFI
.head 5 -  Number: nCRC
.head 5 -  String: sDaTi
.head 5 -  !
.head 5 -  Number: nI
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(nmCountry, nKd)
.head 5 -  Call SalArrayGetUpperBound(nmCountry, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set nDcrc = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла S
.head 7 -  Set sS = sTempPath || '%S' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'S')
.head 7 +  If not SalFileOpen(hS, sS, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hS, Right(sS, 12) || sDaTi || PadL(Str(nLA+1), 4) || PutCrLf(), 32) != 32
.head 8 -  Call SalFileClose(hS)
.head 8 -  Call VisFileDelete(sS)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s55 = PadL(Str(nmCountry[nKd]), 3) || PadR(VisStrLeftTrim(StrWinToDosX(smName[nKd])), 50) || PutCrLf()
.head 6 -  Set nDcrc = nDcrc + CRCstring(s55)
.head 6 +  If SalFileWrite(hS, s55, 55) != 55
.head 7 -  Call SalFileClose(hS)
.head 7 -  Call VisFileDelete(sS)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hS)
.head 5 +  If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT dfi,crc
   FROM klpcrc
   INTO :dDFI,:nCRC
   WHERE sab=:sSab and tip='S'"))
.head 6 +  If SqlFetchNext(hSqlAux2(),nFetchRes)
.head 7 -  ! If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') and
   nCRC = nDcrc and not bBezUsl
.head 7 +  If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(GetServerDate(), 'yyyyMMdd') and nCRC = nDcrc and
   not bBezUsl
.head 8 -  Call VisFileDelete(sS)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call Message('Cписок стран (' || Str(nCRC) || ') для ' || sSab || ' сегодня уже формировался', TRUE)
.head 8 -  Return FALSE
.head 7 +  Else
.head 8 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     UPDATE klpcrc
     SET dfi= TODAY ,crc=:nDcrc
     WHERE sab=:sSab and tip='S'"))
.head 6 +  Else
.head 7 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     INSERT
     INTO klpcrc (sab,tip,dfi,crc)
     VALUES (:sSab,'S', TODAY ,:nDcrc)"))
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sS)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sS)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhS = llopen(sS, OF_ReadWrite)
.head 5 +  If nhS > 0
.head 6 -  Set nKw = PUTFSGNB(nhS)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhS)
.head 7 -  Call VisFileDelete(sS)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sS), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sSc = VisFileCreateTemp('~S~')
.head 7 -  Call VisFileDelete(sSc)
.head 7 -  Set nhSc = llcreat(sSc, OF_ReadWrite)
.head 7 +  If nhSc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhS, nhSc, nSendId)
.head 8 -  Call llclose(nhS)
.head 8 -  Call llclose(nhSc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sS)
.head 9 -  Call VisFileDelete(sSc)
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sS), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sSc, sDiskKata || sSab || '\\OUT\\' || Right(sS, 12), TRUE)
.head 10 -  Call MomFileCopy(sS, sArchPath || 'ARH\\' || Right(sS, 12), TRUE)
.head 10 -  Call VisFileDelete(sSc)
.head 10 -  Call VisFileDelete(sS)
.head 10 -  Call SqlCommit(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sSc)
.head 10 -  Call VisFileDelete(sS)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhS)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sS)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sSc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sS)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sS, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileO
.head 4 -  Description: формирование файла %O
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  String: smMFOA[*]
.head 5 -  String: smNLSA[*]
.head 5 -  String: smMFOB[*]
.head 5 -  String: smNLSB[*]
.head 5 -  String: smNAMB[*]
.head 5 -  Number: nmS[*]
.head 5 -  String: smND[*]
.head 5 -  String: smNAZN[*]
.head 5 -  String: smPOND[*]
.head 5 -  String: smNameFileA[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sO
.head 5 -  File Handle: hO
.head 5 -  String: sDaTi
.head 5 -  Number: nSdeb
.head 5 -  Number: nSkre
.head 5 -  Number: nKw
.head 5 -  Number: nhO
.head 5 -  Number: nhOc
.head 5 -  String: sOc
.head 5 -  Long String: s296
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smMFOA, nKd)
.head 5 -  Call SalArrayGetUpperBound(smMFOA, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла O
.head 7 -  Set sO = sTempPath || '%O' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'O')
.head 7 +  If not SalFileOpen(hO, sO, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hO, Right(sO, 12) || sDaTi || PadL(Str(nLA+1), 4) || PutCrLf(), 32) != 32
.head 8 -  Call SalFileClose(hO)
.head 8 -  Call VisFileDelete(sO)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s296 = PadL(VisStrLeftTrim(smMFOA[nKd]), 9) || PadL(VisStrLeftTrim(smNLSA[nKd]), 14) || PadL(
    VisStrLeftTrim(smMFOB[nKd]), 9) || PadL(VisStrLeftTrim(smNLSB[nKd]), 14) || PadR(StrWinToDosX(
    VisStrLeftTrim(smNAMB[nKd])), 38) || PadL(Str(nmS[nKd]), 16) || PadR(StrWinToDosX(VisStrLeftTrim(smND[nKd])), 10)
    || PadR(StrWinToDosX(VisStrLeftTrim(smNAZN[nKd])), 160) || PadR(VisStrLeftTrim(smPOND[nKd]), 8) || PadR(
    VisStrLeftTrim(smNameFileA[nKd]), 12) || PadL(Str(nKd+1), 4) || PutCrLf()
.head 6 +  If SalFileWrite(hO, s296, 296) != 296
.head 7 -  Call SalFileClose(hO)
.head 7 -  Call VisFileDelete(sO)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hO)
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sO)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sO)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhO = llopen(sO, OF_ReadWrite)
.head 5 +  If nhO > 0
.head 6 -  Set nKw = PUTFSGNB(nhO)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhO)
.head 7 -  Call VisFileDelete(sO)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sO), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sOc = VisFileCreateTemp('~O~')
.head 7 -  Call VisFileDelete(sOc)
.head 7 -  Set nhOc = llcreat(sOc, OF_ReadWrite)
.head 7 +  If nhOc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhO, nhOc, nSendId)
.head 8 -  Call llclose(nhO)
.head 8 -  Call llclose(nhOc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sO)
.head 9 -  Call VisFileDelete(sOc)
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sO), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sOc, sDiskKata || sSab || '\\OUT\\' || Right(sO, 12), TRUE)
.head 10 -  Call MomFileCopy(sO, sArchPath || 'ARH\\' || Right(sO, 12), TRUE)
.head 10 -  Call VisFileDelete(sOc)
.head 10 -  Call VisFileDelete(sO)
.head 10 -  Call SqlCommit(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sOc)
.head 10 -  Call VisFileDelete(sO)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhO)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sO)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sOc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sO)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sO, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: Rus2Lat
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sIn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sOut
.head 5 -  String: sRab
.head 5 -  String: sRU
.head 5 -  String: sLA
.head 5 -  String: smRU[*]
.head 5 -  String: smLA[*]
.head 5 -  Number: nI
.head 5 -  Number: nT
.head 4 +  Actions
.head 5 +  If SqlPrepareAndExecute(hSql(), "
   SELECT ru_char,sw_char
   INTO :sRU,:sLA
   FROM sw_volap
   WHERE chrset='TRANS'")
.head 6 -  Set nI = 0
.head 6 -  Call SalArraySetUpperBound(smRU, 1, -1)
.head 6 -  Call SalArraySetUpperBound(smLA, 1, -1)
.head 6 +  While SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Set smRU[nI] = sRU
.head 7 -  Set smLA[nI] = sLA
.head 7 -  Set nI = nI + 1
.head 6 -  Set sOut = ''
.head 6 -  Set sRab = sIn
.head 6 +  While Len(sRab) > 0
.head 7 -  Set nT = VisArrayFindString(smRU, Chr(SalStrLop(sRab)))
.head 7 -  ! Call DebugN(nT)
.head 7 +  If nT >= 0
.head 8 -  Set sOut = sOut || smLA[nT]
.head 7 -  ! Set sOut = sOut || IifS(nT>=0, smLA[nT], '')
.head 5 +  Else
.head 6 -  Set sOut = sIn
.head 5 -  Return sOut
.head 3 +  Function: FormFileC
.head 4 -  Description: формирование файла %C
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  Number: nRnk
.head 5 -  String: sNmk
.head 5 -  String: sOkpo
.head 5 -  Number: nmPid[*]
.head 5 -  String: smNomerK[*]
.head 5 -  Number: nmTipOp[*]
.head 5 -  Number: nmS[*]
.head 5 -  Number: nmKv[*]
.head 5 -  Date/Time: dmBeg[*]
.head 5 -  Date/Time: dmEnd[*]
.head 5 -  Number: nmTipK[*]
.head 5 -  String: smNameK[*]
.head 5 -  String: smCountryKodBenef[*]
.head 5 -  String: smBenefBank[*]
.head 5 -  String: smBenefAcc[*]
.head 5 -  String: smContinuedLic[*]
.head 5 -  String: smCondK[*]
.head 5 -  String: smAimK[*]
.head 5 -  String: smDetailsK[*]
.head 5 -  String: smCountryKodBank[*]
.head 5 -  Boolean: bBezUsl
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sC
.head 5 -  File Handle: hC
.head 5 -  String: sDaTi
.head 5 -  Number: nSdeb
.head 5 -  Number: nSkre
.head 5 -  Number: nKw
.head 5 -  Number: nhC
.head 5 -  Number: nhCc
.head 5 -  String: sCc
.head 5 -  Long String: s700
.head 5 -  Number: nLenArr
.head 5 -  !
.head 5 -  Date/Time: dDFI
.head 5 -  Number: nCRC
.head 5 -  Number: nDcrc
.head 5 -  !
.head 5 -  String: sNmkv
.head 5 -  String: sAdr
.head 5 -  String: sTelr
.head 5 -  String: sRuk
.head 5 -  String: sBuh
.head 5 -  String: sOkpop
.head 5 -  String: sNlsp
.head 5 -  String: sMfop
.head 5 -  String: sNlsRas
.head 5 -  String: sNlsVal
.head 5 -  Number: nBaseVal
.head 5 -  !
.head 5 -  Number: nRowCount
.head 5 -  String: sNls26
.head 5 -  String: sMfo26
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smNomerK, nKd)
.head 5 -  Call SalArrayGetUpperBound(smNomerK, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set nDcrc = 0
.head 5 -  Set bZag = TRUE
.head 5 -  Set nBaseVal = GetBaseVal()
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла C
.head 7 -  Set sC = sTempPath || '%C' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'C')
.head 7 +  If not SalFileOpen(hC, sC, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 -  Set sNmkv = ''
.head 7 -  Set sAdr = ''
.head 7 -  Set sTelr = ''
.head 7 -  Set sRuk = ''
.head 7 -  Set sBuh = ''
.head 7 -  Set sOkpop = ''
.head 7 -  Set sNlsp = ''
.head 7 -  Set sMfop = ''
.head 7 -  Set sNlsRas = ''
.head 7 -  Set sNlsVal = ''
.head 7 -  Set sNls26 = ''
.head 7 -  Set sMfo26 = ''
.head 7 -  ! Call SqlPrepareAndExecute(hSql(), "
     SELECT substr(replace(swift.StrToSwift(c.nmkv),'''',''),1,70),c.adr,co.telr,co.ruk,co.buh,cz.okpop,cz.nlsp,
            cz.mfop
     INTO :sNmkv,:sAdr,:sTelr,:sRuk,:sBuh,:sOkpop,:sNlsp,:sMfop
     FROM customer c, corps co, cust_zay cz
     WHERE c.rnk=:nRnk and co.rnk(+)=c.rnk and cz.rnk(+)=c.rnk")
.head 7 +  If SqlPrepareAndExecute(hSql(), "
   SELECT c.nmkv,c.adr,co.telr,co.ruk,co.buh,cz.okpop,cz.nlsp,cz.mfop,cz.nls26,cz.mfo26
   INTO :sNmkv,:sAdr,:sTelr,:sRuk,:sBuh,:sOkpop,:sNlsp,:sMfop,:sNls26,:sMfo26
   FROM customer c, corps co, cust_zay cz
   WHERE c.rnk=:nRnk and co.rnk(+)=c.rnk and cz.rnk(+)=c.rnk")
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 7 -  ! преобразовать sNmkv в ЛАТЫНЬ
.head 7 -  Set sNmkv = Rus2Lat(sNmkv)
.head 7 -  ! Call Debug(sNmkv)
.head 7 -  Call SqlSetResultSet(hSql(), TRUE)
.head 7 +  If SqlPrepareAndExecute(hSql(), "
   SELECT a.nls
   INTO :sNlsRas
   FROM accounts a, customer c, cust_acc cu
   WHERE c.rnk=:nRnk and cu.rnk=c.rnk and a.acc=cu.acc and a.nbs='2600' and a.kv=:nBaseVal and a.dazs is null")
.head 8 -  Call SqlGetResultSetCount(hSql(), nRowCount)
.head 8 -  ! Call DebugN(nRowCount)
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If nRowCount>1 and Len(sNls26)>0 and (Len(sMfo26)=0 or sMfo26=GetBankMfo())
.head 9 -  Set sNlsRas = sNls26 
.head 7 +  If SqlPrepareAndExecute(hSql(), "
   SELECT a.nls
   INTO :sNlsVal
   FROM accounts a, customer c, cust_acc cu
   WHERE c.rnk=:nRnk and cu.rnk=c.rnk and a.acc=cu.acc and a.nbs='2600' and a.kv<>:nBaseVal and a.dazs is null")
.head 8 -  Call SqlGetResultSetCount(hSql(), nRowCount)
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  ! Call DebugN(nRowCount)
.head 8 +  If nRowCount>1 and Len(sNls26)>0 and (Len(sMfo26)=0 or sMfo26=GetBankMfo())
.head 9 -  Set sNlsVal = sNls26 
.head 7 -  ! Call SqlSetResultSet(hSql(), FALSE)
.head 7 +  If SalFileWrite(hC, Right(sC, 12) || sDaTi || StrWinToDosX(PadR(SalStrTrimX(sNmk), 70) || PadR(
   SalStrTrimX(sNmkv), 70) || PadR(SalStrTrimX(sAdr), 70) || PadR(SalStrTrimX(sTelr), 20) || PadR(
   SalStrTrimX(sRuk), 70) || PadR(SalStrTrimX(sBuh), 70) || PadR(SalStrTrimX(sOkpo), 14) || PadL(
   SalStrTrimX(sNlsRas), 14) || PadL(SalStrTrimX(sNlsVal), 14) || PadR(SalStrTrimX(sOkpop), 14) || PadL(
   SalStrTrimX(sMfop), 9) || PadL(SalStrTrimX(sNlsp), 14)) || PadL(Str(nLA+1), 4) || '00020000' || PutCrLf(), 489)
   != 489
.head 8 -  Call SalFileClose(hC)
.head 8 -  Call VisFileDelete(sC)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s700 = StrWinToDosX(PadL(Str(nmPid[nKd]), 8) || Left(PadR(VisStrLeftTrim(smNameK[nKd]), 50), 10) || Right(
    Str(nmTipOp[nKd]), 1) || PadL(Str(nmS[nKd]), 16) || PadL(Str(nmKv[nKd]), 3) || PadR(
    SalFmtFormatDateTime(dmBeg[nKd], 'yyyyMMdd'), 8) || PadR(SalFmtFormatDateTime(dmEnd[nKd], 'yyyyMMdd'), 8) ||
    Right(Str(nmTipOp[nKd]), 1) || PadR(VisStrLeftTrim(smNameK[nKd]), 50) || PadR(
    VisStrLeftTrim(smCountryKodBenef[nKd]), 3) || PadR(VisStrLeftTrim(smBenefBank[nKd]), 50) || PadR(
    VisStrLeftTrim(smBenefAcc[nKd]), 50) || PadR(VisStrLeftTrim(smContinuedLic[nKd]), 80) || PadR(
    VisStrLeftTrim(smCondK[nKd]), 80) || PadR(VisStrLeftTrim(smAimK[nKd]), 80) || PadR(
    VisStrLeftTrim(smDetailsK[nKd]), 250)) || PadL(smCountryKodBank[nKd], 3) || PutCrLf()
.head 6 -  Set nDcrc = nDcrc + CRCstring(s700)
.head 6 -  ! Call DebugN(Len(s700))
.head 6 +  If SalFileWrite(hC, s700, 703) != 703
.head 7 -  Call SalFileClose(hC)
.head 7 -  Call VisFileDelete(sC)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hC)
.head 5 +  If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT dfi,crc
   FROM klpcrc
   INTO :dDFI,:nCRC
   WHERE sab=:sSab and tip='C'"))
.head 6 +  If SqlFetchNext(hSqlAux2(), nFetchRes)
.head 7 -  ! If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(
   SalDateCurrent(), 'yyyyMMdd') and nCRC = nDcrc and not bBezUsl
.head 7 +  If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') =
   SalFmtFormatDateTime(GetServerDate(), 'yyyyMMdd') and nCRC = nDcrc and
   not bBezUsl
.head 8 -  Call VisFileDelete(sC)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call Message('Cписок контрактов (' || Str(nCRC) || ') для ' || sSab || ' сегодня уже формировался', TRUE)
.head 8 -  Return FALSE
.head 7 +  Else
.head 8 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     UPDATE klpcrc
     SET dfi= TODAY ,crc=:nDcrc
     WHERE sab=:sSab and tip='C'"))
.head 6 +  Else
.head 7 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     INSERT
     INTO klpcrc (sab,tip,dfi,crc)
     VALUES (:sSab,'C', TODAY ,:nDcrc)"))
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sC)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sC)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhC = llopen(sC, OF_ReadWrite)
.head 5 +  If nhC > 0
.head 6 -  Set nKw = PUTFSGNB(nhC)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhC)
.head 7 -  Call VisFileDelete(sC)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sC), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sCc = VisFileCreateTemp('~O~')
.head 7 -  Call VisFileDelete(sCc)
.head 7 -  Set nhCc = llcreat(sCc, OF_ReadWrite)
.head 7 +  If nhCc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhC, nhCc, nSendId)
.head 8 -  Call llclose(nhC)
.head 8 -  Call llclose(nhCc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sC)
.head 9 -  Call VisFileDelete(sCc)
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sC), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sCc, sDiskKata || sSab || '\\OUT\\' || Right(sC, 12), TRUE)
.head 10 -  Call MomFileCopy(sC, sArchPath || 'ARH\\' || Right(sC, 12), TRUE)
.head 10 -  Call VisFileDelete(sCc)
.head 10 -  Call VisFileDelete(sC)
.head 10 -  Call SqlCommit(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sCc)
.head 10 -  Call VisFileDelete(sC)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhC)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sC)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sCc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sC)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sC, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileN
.head 4 -  Description: формирование файла %N
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: smWZ[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sN
.head 5 -  String: sSab
.head 5 -  File Handle: hN
.head 5 -  String: sDaTi
.head 5 -  Long String: s198
.head 5 -  Number: nKw
.head 5 -  Number: nhN
.head 5 -  Number: nhNc
.head 5 -  String: sNc
.head 5 -  Number: nLenArr
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smWZ, nKd)
.head 5 -  Call SalArrayGetUpperBound(smWZ, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set bZag = TRUE
.head 5 -  Set sSab = Subs(smWZ[0], 183, 4)
.head 5 -  ! Call Debug('smWZ[0] = ' || smWZ[0])
.head 5 -  ! Call Debug('sSab = ' || sSab)
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла N
.head 7 -  Set sN = sTempPath || '%N' || sSab || DaySymbol(SalDateCurrent()) || MonthSymbol(SalDateCurrent()) || '.' ||
    YearSymbol(SalDateCurrent()) || Suffix(sSab, 'N')
.head 7 +  If not SalFileOpen(hN, sN, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании файла ' || sN, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(
    SalDateCurrent(), 'hhhhmmss'), 6)
.head 7 +  If SalFileWrite(hN, Right(sN, 12) || sDaTi || PadL(Str(nLA+1), 4) || PutCrLf(), 32) != 32
.head 8 -  Call SalFileClose(hN)
.head 8 -  Call VisFileDelete(sN)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при записи в файл ' || sN, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  ! Call Debug(smWZ[nKd])
.head 6 -  Set s198 = StrWinToDosX(smWZ[nKd]) || PutCrLf()
.head 6 +  If SalFileWrite(hN, s198, 241) != 241
!  SalFileWrite(hN, s198, 198) != 198
.head 7 -  Call SalFileClose(hN)
.head 7 -  Call VisFileDelete(sN)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('Ошибка при записи в файл ' || sN, 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hN)
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sN)
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call VisFileDelete(sN)
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhN = llopen(sN, OF_ReadWrite)
.head 5 +  If nhN > 0
.head 6 -  Set nKw = PUTFSGNB(nhN)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhN)
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call VisFileDelete(sN)
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sN), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sNc = VisFileCreateTemp('~N~')
.head 7 -  Call VisFileDelete(sNc)
.head 7 -  Set nhNc = llcreat(sNc, OF_ReadWrite)
.head 7 +  If nhNc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nI = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nI <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nI]
.head 10 -  Set nSendId = nmlNOMER[nI]
.head 10 -  Break
.head 9 -  Set nI = nI + 1
.head 8 -  Set nKw = ENCRYPTB(nhN, nhNc, nSendId)
.head 8 -  Call llclose(nhN)
.head 8 -  Call llclose(nhNc)
.head 8 +  If nKw != 0
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call VisFileDelete(sN)
.head 9 -  Call VisFileDelete(sNc)
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sN), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sNc, sDiskKata || sSab || '\\OUT\\' || Right(sN, 12), TRUE)
.head 10 -  Call MomFileCopy(sN, sArchPath || 'ARH\\' || Right(sN, 12), TRUE)
.head 10 -  Call VisFileDelete(sNc)
.head 10 -  Call VisFileDelete(sN)
.head 10 -  Call Message('Сформирована квитанция ' || Right(sN, 12) || ' (' || Str(nLA+1) || ') по валютным документам для '
     || sSab, TRUE)
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sNc)
.head 10 -  Call VisFileDelete(sN)
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhN)
.head 8 -  Call VisFileDelete(sN)
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sNc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call VisFileDelete(sN)
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sN, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: ObrFileA
.head 4 -  Description: обработка файла %A
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFileOrig
.head 5 -  String: sFileInput
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sNameFile
.head 5 -  Number: nDokCount
.head 5 -  Number: nDebSum
.head 5 -  Number: nKreSum
.head 5 -  !
.head 5 -  String: sMFOA
.head 5 -  String: sNLSA
.head 5 -  String: sOKPOA
.head 5 -  String: sMFOB
.head 5 -  String: sNLSB
.head 5 -  String: sOKPOB
.head 5 -  String: sOKPOO
.head 5 -  Number: nDebKre
.head 5 -  Number: nSumma
.head 5 -  Number: nVOB
.head 5 -  String: sND
.head 5 -  Number: nVAL
.head 5 -  Date/Time: dDATdok
.head 5 -  String: sNAMA
.head 5 -  String: sNAMB
.head 5 -  String: sNAZN
.head 5 -  String: sPOND
.head 5 -  Long String: sPDP1
.head 5 -  Long String: sPDP2
.head 5 -  String: sNameFileA
.head 5 -  Number: nPND
.head 5 -  Number: nLenDopRek
.head 5 -  Long String: sDopRek
.head 5 -  !
.head 5 -  Long String: sBuffer
.head 5 -  Number: nBytes
.head 5 -  String: sData
.head 5 -  String: sData2
.head 5 -  Long String: s1723
.head 5 -  Number: nAcc
.head 5 -  String: sKKKK
.head 5 -  Number: nFl
.head 5 -  String: sInfo1
.head 5 -  String: sInfo2
.head 5 -  Number: nMdop
.head 5 -  Long String: sPDPinternal
.head 5 -  String: sKodK
.head 5 -  Date/Time: dDalic
.head 5 -  !
.head 5 -  String: sPrwo
.head 5 -  Number: nIsp
.head 5 -  String: sIsp
.head 5 -  Number: nEOM
.head 5 -  ! Number: nRazniza
.head 5 -  !
.head 5 -  String: sPARAMETR
.head 5 -  File Handle: hHan
.head 5 -  String: sPDP198
.head 5 -  String: sPDP298
.head 5 -  String: sN
.head 5 -  String: sNs
.head 5 -  Number: nLenArr
.head 5 -  Number: nI
.head 5 -  Date/Time: dDokD
.head 5 -  !
.head 5 -  String: sOKPObars
.head 5 -  !
.head 5 -  String: sVer
.head 5 -  !
.head 5 -  String: sDataValut
.head 5 -  Date/Time: dDATval
.head 5 -  !
.head 5 -  Number: nBaseVal
.head 5 -  Number: nmRefi[*]
.head 5 -  Number: nRI
.head 5 -  Number: nLA
.head 5 -  ! Boolean: bB
.head 5 -  Boolean: bGood
.head 5 -  !
.head 5 -  Number: nMinus
.head 4 +  Actions
.head 5 -  Set nBaseVal = GetBaseVal()
.head 5 +  If not SalFileOpen(hHan, sFileInput, OF_ReadWrite)
.head 6 -  Call Message('Error 6 - невозможно открыть файл ' || sFileOrig, TRUE)
.head 6 -  Return 6
.head 5 -  ! Call SalStrSetBufferLength(sBuffer, 64)
.head 5 +  ! If SalFileRead(hHan, sBuffer, 64) != 64
!! llread(nHan, sBuffer, 64) != 64
.head 6 -   Call SalFileClose(hHan)
.head 6 -   Return 6
.head 5 +  If not SalFileGetStr(hHan, sBuffer, 100)
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Call Message('Error 6 - невозможно прочитать заглавную строку, файл ' || sFileOrig, TRUE)
.head 6 -  Return 6
.head 5 +  If Len(sBuffer) < 62
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Call Message('Error 6 - длина заглавной строки неверна, файл ' || sFileOrig, TRUE)
.head 6 -  Return 6
.head 5 -  Set sVer = Right(sBuffer, Len(sBuffer)-62)
.head 5 -  ! Call Debug('versia=' || sVer || ' val(sver)=' || Str(Val(sVer)))
.head 5 -  Set sNameFile = Left(sBuffer, 12)
.head 5 -  Set nDokCount = Val(SalStrMidX(sBuffer, 26, 4))
.head 5 -  Set nDebSum = Val(SalStrMidX(sBuffer, 30, 16))
.head 5 -  Set nKreSum = Val(SalStrMidX(sBuffer, 46, 16))
.head 5 -  Set sKKKK = SalStrUpperX(SalStrMidX(sBuffer, 2, 4))
.head 5 +  If sNameFile != Right(sFileOrig, 12)
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Call Message('Error 5 - ошибка в реквизитах заглавной строки (имя), файл ' || sFileOrig, TRUE)
.head 6 -  Return 5
.head 5 -  Set nI = 0
.head 5 -  Set nLenArr = LenArray(smlSAB)
.head 5 -  Set sKodK = ''
.head 5 +  While nI <= nLenArr
.head 6 +  If SalStrUpperX(sKKKK) = smlSAB[nI]
.head 7 -  Set sKodK = smlKOD[nI]
.head 7 -  Set dDalic = dmlDALI[nI]
.head 7 -  Break
.head 6 -  Set nI = nI + 1
.head 5 +  If Len(sKodK) = 0
.head 6 -  Call MessageNoWait('Нарушены лицензионные права для клиента ' || sKKKK, 'ВНИМАНИЕ !!!', 3, 1)
.head 5 +  Else
.head 6 +  If dDalic < dBankDate
.head 7 -  Call MessageNoWait('Истек срок действия лицензии для клиента с кодом: ' || VisStrTrim(sKodK) || ' (' || sKKKK ||
     ')', 'ВНИМАНИЕ !!!', 3, 1)
.head 7 -  Return 7
.head 6 +  Else If dDalic - dBankDate < 8
.head 7 -  ! Set nRazniza = dDalic - dBankDate
.head 7 -  Call MessageNoWait('До окончания срока действия лицензии клиента ' || sKKKK || ' (код ОКПО - ' || VisStrTrim(sKodK)
     || ') осталось ' || Str(dDalic-dBankDate) || ' дн.', 'ВНИМАНИЕ !!!', 3, 1)
.head 5 -  Call SalFileSeek(hHan, Len(sBuffer)+2, FILE_SeekBegin)
.head 5 -  Set nCount0 = 0
.head 5 -  Set nCount1 = 0
.head 5 -  Set nCount2 = 0
.head 5 -  Call SalArraySetUpperBound(nmRefi, 1, -1)
.head 5 -  Set nRI = 0
.head 5 -  Set bGood = TRUE
.head 5 -  Set nMinus = 0
.head 5 +  While TRUE
.head 6 -  Set nBytes = SalFileRead(hHan, sBuffer, IifN(Val(sVer)<10000, 363, 371))
!!           llread(nHan, sBuffer, IifN(Val(sVer)<10000, 363, 371))
.head 6 -  ! Call Debug(sBuffer || ' Len(sBuffer)=' || Str(Len(sBuffer)))
.head 6 +  If nBytes != IifN(Val(sVer)<10000, 363, 371)
.head 7 -  ! Call DebugN(nBytes)
.head 7 +  If nBytes = 0
.head 8 -  ! Проверка трех элементов сумм на достигнутом конце входного файла
.head 8 +  If nCount0 != nDokCount
.head 9 -  Call SqlRollbackEx(hSql(),'Пакет: ' || sNameFile ||
     ' Не совпадает количество документов с указанным в заголовке')
.head 9 -  Call SalFileClose(hHan)
.head 9 -  Call Message('Error 4 - количество информационных строк не совпадает с указанным в заглавной строке, файл ' ||
     sFileOrig, TRUE)
.head 9 -  Return 4
.head 8 +  If nCount1 != nDebSum
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SalFileClose(hHan)
.head 9 -  Call Message('Error 3 - неверна сумма по кредиту, файл ' || sFileOrig, TRUE)
.head 9 -  Return 3
.head 8 +  If nCount2 != nKreSum
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SalFileClose(hHan)
.head 9 -  Call Message('Error 2 - неверна сумма по дебету, файл ' || sFileOrig, TRUE)
.head 9 -  Return 2
.head 8 +  If bGood
.head 9 -  Call SqlCommitEx(hSql(), 'Документы из пакета ' || sNameFile || ' приняты (' || Str(nCount0) || ',' ||
     Str(nCount1+nCount2) || ')')
.head 9 -  Call SalFileClose(hHan)
.head 9 +  If bAUTO
.head 10 -  Call SalArrayGetUpperBound(nmRefi, 1, nLA)
.head 10 -  ! Call DebugN(nLA)
.head 10 -  Set nRI = 0
.head 10 -  ! Set bB = FALSE
.head 10 +  While nRI <= nLA
.head 11 -  ! проверить "бизнес-правила" и если удовлетворяются поставить
  NOAUTO=('1'-not null)
.head 11 -  ! Set bP = FALSE
.head 11 -  Set nI = 0
.head 11 -  Set nRefNext = nmRefi[nRI]
.head 11 +  While nI <= LenArray(smUSL)
.head 12 -  ! Call Debug('nRefNext=' || Str(nRefNext))
.head 12 -  Set sCOMM = smCOMM[nI]
.head 12 -  Set sUSL = smUSL[nI]
.head 12 -  Set nKVBP = nmKVBP[nI]
.head 12 +  If nKVBP = nBaseVal
.head 13 +  If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 14 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klp
   SET noauto='1'
   WHERE ref=:nRefNext")
.head 15 -  Call SqlCommit(hSql())
.head 15 -  ! Set bB = TRUE
.head 12 -  Set nI = nI + 1
.head 12 +  ! If bB
.head 13 -   Break 
.head 11 -  Set nRI = nRI + 1
.head 9 -  Return 0
.head 8 +  Else
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SalFileClose(hHan)
.head 9 -  Call Message('Error 10 - дубль имени файла и порядкового номера документа, файл ' || sFileOrig, TRUE)
.head 9 -  Return IifN(nMinus=0, 10, -1)
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SalFileClose(hHan)
.head 8 -  Call DebugN(nBytes)
.head 8 -  Call Message('Error 6 - неверна структура (1), файл ' || sFileOrig, TRUE)
.head 8 -  Return 6
.head 6 +  If SalFileRead(hHan, sPDP1, 196) != 196
!! llread(nHan, sPDP1, 196) != 196
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Call Message('Error 6 - неверна структура (2), файл ' || sFileOrig, TRUE)
.head 7 -  Return 6
.head 6 +  If SalFileRead(hHan, sPDP2, 196) != 196
!! llread(nHan, sPDP2, 196) != 196
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Call Message('Error 6 - неверна структура (3), файл ' || sFileOrig, TRUE)
.head 7 -  Return 6
.head 6 -  ! Проверки всех реквизитов из sBuffer
.head 6 -  Set sMFOA = SalStrTrimX(Left(sBuffer, 9))
.head 6 -  Set sNLSA = SalStrTrimX(SalStrMidX(sBuffer, 9, 14))
.head 6 -  Set sOKPOA = SalStrTrimX(SalStrMidX(sBuffer, 23, 14))
.head 6 +  If (Len(sOKPOA) < 8 and Len(sOKPOA) > 3) or Len(sOKPOA) < 3
.head 7 -  Set sOKPOA = Right('00000000' || sOKPOA, 8)
.head 6 -  Set sOKPOO = ''
.head 6 -  Set sMFOB = SalStrTrimX(SalStrMidX(sBuffer, 37, 9))
.head 6 -  Set sNLSB = SalStrTrimX(SalStrMidX(sBuffer, 46, 14))
.head 6 -  Set sOKPOB = SalStrTrimX(SalStrMidX(sBuffer, 60, 14))
.head 6 +  If (Len(sOKPOB) < 8 and Len(sOKPOB) > 3) or Len(sOKPOB) < 3
.head 7 -  Set sOKPOB = Right('00000000' || sOKPOB, 8)
.head 6 -  Set nDebKre = Val(SalStrMidX(sBuffer, 74, 1))
.head 6 -  Set nSumma = Val(SalStrMidX(sBuffer, 75, 16))
.head 6 -  Set nVOB = Val(SalStrMidX(sBuffer, 91, 2))
.head 6 -  ! по умолчанию при 0 - 1 (поручение)
.head 6 -  Set nVOB = IifN(nVOB=0, 1, nVOB)
.head 6 -  Set sND = StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 93, 10)))
.head 6 -  Set nVAL = Val(SalStrMidX(sBuffer, 103, 3))
.head 6 +  If nVAL = 0
.head 7 -  Set nVAL = GetBaseVal() ! 980 - базовая валюта
.head 6 -  Set sData = SalStrMidX(sBuffer, 106, 8)
.head 6 -  Set dDATdok = SalDateConstruct(Val(Left(sData, 4)), Val(SalStrMidX(sData, 4, 2)), Val(
    SalStrMidX(sData, 6, 2)), 0, 0, 0)
.head 6 -  Set sNAMA = StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 114, 38)))
.head 6 -  Set sNAMB = StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 152, 38)))
.head 6 -  Set sNAZN = StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 190, 160)))
.head 6 -  Set sPOND = SalStrTrimX(SalStrMidX(sBuffer, 350, 8))
.head 6 -  Set nLenDopRek = Val(SalStrMidX(sBuffer, 358, 5))
.head 6 +  If Val(sVer) >= 10000
.head 7 -  ! новая версия КЛИЕНТСКОЙ части (с датой валютирования)
.head 7 -  Set sDataValut = SalStrMidX(sBuffer, 363, 8)
.head 7 +  If Val(sDataValut) = 0
.head 8 -  Set sDataValut = ''
.head 7 +  Else
.head 8 -  Set dDATval = SalDateConstruct(Val(Left(sDataValut, 4)), Val(SalStrMidX(sDataValut, 4, 2)), Val(
    SalStrMidX(sDataValut, 6, 2)), 0, 0, 0)
.head 8 +  If dDATval = dDATdok
.head 9 -  Set sDataValut = ''
.head 8 +  Else
.head 9 -  Set dDATval = IifD(dDATval<dBankDate, dBankDate, dDATval)
.head 6 +  Else
.head 7 -  Set sDataValut = ''
.head 6 -  Set s1723 = sBuffer
.head 6 +  If sOKPOA != sKodK
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Call MessageNoWait('Нарушены лицензионные права для клиента: ' || sNAMA || ' (' || sKKKK || ')', 'ВНИМАНИЕ !!!', 3,
     1)
.head 7 -  Return 7
.head 6 +  If SalFileRead(hHan, sBuffer, 16) != 16
!! llread(nHan, sBuffer, 16) != 16
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Call Message('Error 6 - неверна структура (4), файл ' || sFileOrig, TRUE)
.head 7 -  Return 6
.head 6 -  Set sNameFileA = Left(sBuffer, 12)
.head 6 -  Set nPND = Val(SalStrMidX(sBuffer, 12, 4))
.head 6 +  If nLenDopRek > 0
.head 7 +  If SalFileRead(hHan, sDopRek, nLenDopRek) != nLenDopRek
!! llread(nHan, sDopRek, nLenDopRek) != nLenDopRek
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SalFileClose(hHan)
.head 8 -  Call Message('Error 6 - неверна структура (5), файл ' || sFileOrig, TRUE)
.head 8 -  Return 6
.head 6 +  Else
.head 7 -  Set sDopRek = ''
.head 6 -  Set s1723 = s1723 || sDopRek
.head 6 +  If SalFileRead(hHan, sBuffer, 2) != 2
!! llread(nHan, sBuffer, 2) != 2
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Call Message('Error 6 - неверна структура (6), файл ' || sFileOrig, TRUE)
.head 7 -  Return 6
.head 6 -  ! Проверка всех реквизитов документа на допустимость
.head 6 -  Set sPrwo = ''
.head 6 +  If bAUTO
.head 7 +  If dDATdok > GetBankDateMom() or dDATdok+10 < GetBankDateMom()
.head 8 -  Set sPrwo = 'Ошибка даты документа'
.head 6 +  If sMFOA != GetBankMfo()
.head 7 -  Set sPrwo = '*Ошибочно МФО банка А'
.head 6 -  ! Проверка на наличие счёта в SALDO
.head 6 -  Set nAcc = -1
.head 6 +  If GetDBMS() = 'oracle'
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSA, nVAL, nAcc)")
.head 7 +  If nAcc < 0
.head 8 -  Set sPrwo = '*Ошибочeн cчет А'
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(), "informix.verify_acc", "", ":sNLSA, :nVAL, :nAcc")
.head 8 -  Set sPrwo = '*Ошибочeн cчет А'
.head 7 +  If not SqlExecute(hSql())
.head 8 -  Set sPrwo = '*Ошибочeн cчет А'
.head 7 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set sPrwo = '*Ошибочeн cчет А'
.head 7 +  If nAcc < 0
.head 8 -  Set sPrwo = '*Ошибочeн cчет А'
.head 6 -  ! проверка на платёж с "чужого" счёта
.head 6 -  Set nFl = 0
.head 6 +  If GetDBMS() = 'oracle'
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_alien(nAcc, sKKKK, nFl)")
.head 7 +  If nFl = 0
.head 8 -  Set sPrwo = '*Ошибочeн cчет А (чужой)'
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(), "informix.verify_alien", "", ":nAcc, :sKKKK, :nFl")
.head 8 -  Set sPrwo = '*Ошибочeн cчет А (чужой)'
.head 7 +  If not SqlExecute(hSql())
.head 8 -  Set sPrwo = '*Ошибочeн cчет А (чужой)'
.head 7 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set sPrwo = '*Ошибочeн cчет А (чужой)'
.head 7 +  If nFl = 0
.head 8 -  Set sPrwo = '*Ошибочeн cчет А (чужой)'
.head 6 +  If not DopustMfo(sMFOB)
.head 7 -  Set sPrwo = '*Ошибочно МФО банка Б'
.head 6 +  If Vkrz2(sMFOB, sNLSB) != sNLSB
.head 7 -  Set sPrwo = '*Ошибочен счёт Б'
.head 6 +  If nSumma = 0 or nSumma >= SalNumberPower(10, 14)
.head 7 -  Set sPrwo = '*Ошибочна сумма документа'
.head 6 +  If Len(sNAMB) < 3
.head 7 -  Set sPrwo = '*Ошибочно наименование корреспондента'
.head 6 +  If Len(sNAZN) < 3
.head 7 -  Set sPrwo = '*Ошибочно назначение платежа'
.head 6 +  If sOKPOB != V_Okpo(sOKPOB)
.head 7 -  Set sPrwo = '*Ошибочен код ОКРО Б'
.head 6 -  Set nCount0 = nCount0 + 1
.head 6 +  If nDebKre = 0 ! дебет
.head 7 -  Set nCount1 = nCount1 + nSumma
.head 6 +  Else ! кредит
.head 7 -  Set nCount2 = nCount2 + nSumma
.head 6 +  If nCount0 != nPND
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Call Message('Error 1 - неверен порядковый номер информационной строки, файл ' || sFileOrig, TRUE)
.head 7 -  Return 1
.head 6 -  ! Проверить подписи
.head 6 -  Set sPDP198 = Spac(98)
.head 6 -  Call llstr2str(SalStrUpperX(sPDP1), sPDP198, 196)
.head 6 -  ! Set nKw = CHKSIGNB(s1723, IifN(Val(sVer)<10000, 363, 371)+nLenDopRek, sPDP198,
    sInfo1)
.head 6 -  Set nKw = CHKSIGNB(s1723, IifN(Val(sVer)<10000, 363, 371), sPDP198, sInfo1)
.head 6 +  If nKw != 0
.head 7 -  Set sPrwo = '*Ошибка подписи 1 (' || Str(nKw) || ')'
.head 6 +  Else
.head 7 -  Set sPDP298 = Spac(98)
.head 7 -  Call llstr2str(SalStrUpperX(sPDP2), sPDP298, 196)
.head 7 -  Set nKw = CHKSIGNB(s1723, IifN(Val(sVer)<10000, 363, 371)+nLenDopRek, sPDP298, sInfo2)
.head 7 +  If nKw != 0
.head 8 -  Set sPrwo = '*Ошибка подписи 2 (' || Str(nKw) || ')'
.head 6 -  ! Подписать основные реквизиты подписью НБУ при включенном флаге подписи (внутренняя
! подпись) НЕ НАДО
.head 6 -  Set sPDPinternal = 'none' !!!
.head 6 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT MAX(dop)
     INTO :nMdop
     FROM klp_mt"))
.head 6 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 6 +  If nMdop = NUMBER_Null
.head 7 -  Set nMdop = 0
.head 7 -  Call SqlPrepareAndExecute(hSql(), T("
     INSERT
     INTO klp_mt (dop)
     VALUES (0)"))
.head 6 +  If nLenDopRek > 0
.head 7 -  Set nMdop = nMdop + 1
.head 7 -  Call SqlPrepareAndExecute(hSql(), T("
     INSERT
     INTO klp_mt (dop,value)
     VALUES (:nMdop,:sDopRek)"))
.head 6 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT isp
     INTO :nIsp
     FROM accounts
     WHERE acc=:nAcc"))
.head 6 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Call SalUseRegistry(FALSE, '')
.head 7 -  Call SalGetProfileString("ElektroKlients", "OperForAccNotFound", '0', sIsp, GetIniFileName())
.head 7 -  Set nIsp = Max(1, SalNumberRound(Val(sIsp)))
.head 6 -  Set nEOM = nIsp
.head 6 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT neom
     INTO :nEOM
     FROM klpacc
     WHERE acc=:nAcc"))
.head 6 +  If SqlFetchNext(hSql(), nFetchRes)
.head 7 +  If nEOM = 0 or nEOM = NUMBER_Null
.head 8 -  Set nEOM = Max(nIsp, 1)
.head 6 -  Set nFl = IifN(sPrwo='', 0, 1)
.head 6 -  ! Call SqlPrepareAndExecute(hSql(), T("
     SELECT datad
     INTO :dDokD
     FROM klp
     WHERE vob=:nVOB and nd=:sND and nls=:sNLSA and mfo=:sMFOB and nlsp=:sNLSB and s=:nSumma and text1=:sNAZN and
           fl<9"))
.head 6 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT datad
     INTO :dDokD
     FROM klp
     WHERE vob=:nVOB and nd=:sND and nls=:sNLSA and mfo=:sMFOB and nlsp=:sNLSB and s=:nSumma and text1=:sNAZN and
           fl<9 and datad+10>=:dDATdok"))
.head 6 +  If SqlFetchNext(hSql(), nFetchRes) and nFl = 0
.head 7 -  Set nFl = 1
.head 7 -  Set sPrwo = '*Дубль с док. от ' || SalFmtFormatDateTime(dDokD, 'dd-MM-yyyy')
.head 6 -  ! получить следующий Ref в системе
.head 6 -  Set nRefNext = 0
.head 6 -  Set nI = 0
.head 6 +  While nRefNext = 0
.head 7 -  Call Ref(nRefNext)
.head 7 -  Set nI = nI + 1
.head 7 +  If nI > 7
.head 8 -  Set bGood = FALSE
.head 8 -  Set nMinus = -1
.head 8 -  Break
.head 6 +  If bGood
.head 7 +  If Val(sVer) >= 10000 and Val(sDataValut) > 0
.head 8 -  Call SqlPrepare(hSql(), T("
     INSERT
     INTO klp (ref,dop,eom,naex,vob,nd,datad,nls,mfo,naimp,nlsp,s,text1,isp,kokb,koka,koko,prwo,pdp1,fl,pond,kv,
               daval,naimo)
     VALUES (:nRefNext,:nMdop,:nEOM,:sNameFile,:nVOB,:sND,:dDATdok,:sNLSA,:sMFOB,:sNAMB,:sNLSB,:nSumma,:sNAZN,:nIsp,
             :sOKPOB,:sOKPOA,:sOKPOO,:sPrwo,:sPDPinternal,:nFl,:sPOND,:nVAL,:dDATval,:sNAMA)"))
.head 7 +  Else
.head 8 -  Call SqlPrepare(hSql(), T("
     INSERT
     INTO klp (ref,dop,eom,naex,vob,nd,datad,nls,mfo,naimp,nlsp,s,text1,isp,kokb,koka,koko,prwo,pdp1,fl,pond,kv,
               naimo)
     VALUES (:nRefNext,:nMdop,:nEOM,:sNameFile,:nVOB,:sND,:dDATdok,:sNLSA,:sMFOB,:sNAMB,:sNLSB,:nSumma,:sNAZN,
             :nIsp,:sOKPOB,:sOKPOA,:sOKPOO,:sPrwo,:sPDPinternal,:nFl,:sPOND,:nVAL,:sNAMA)"))
.head 7 -  Call SqlSetLongBindDatatype(19, BLOB_BYTE)
.head 7 +  If not SqlExecute(hSql())
.head 8 -  Set bGood = FALSE
.head 6 -  Set nmRefi[nRI] = nRefNext
.head 6 -  ! Call DebugN(nRI)
.head 6 -  ! Call DebugN(nRefNext)
.head 6 -  Set nRI = nRI + 1
.head 3 +  Function: ObrFileE
.head 4 -  Description: обработка файла %E
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFileOrig
.head 5 -  String: sFileInput
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sNameFile
.head 5 -  Number: nDokCount
.head 5 -  Number: nDebSum
.head 5 -  Number: nKreSum
.head 5 -  !
.head 5 -  String: AMFO
.head 5 -  String: sMFOA
.head 5 -  String: sNLSA
.head 5 -  String: sMFOB
.head 5 -  String: sNLSB
.head 5 -  Number: nSumma
.head 5 -  String: sND
.head 5 -  Date/Time: dDATdok
.head 5 -  String: sPONDa
.head 5 -  Long String: sPDP1
.head 5 -  String: sNameFileA
.head 5 -  Number: nPND
.head 5 -  !
.head 5 -  Long String: sBuffer
.head 5 -  Number: nBytes
.head 5 -  String: sData
.head 5 -  String: sKKKK
.head 5 -  Number: nFL
.head 5 -  String: sInfo
.head 5 -  String: sKodK
.head 5 -  !
.head 5 -  Number: nEom
.head 5 -  !
.head 5 -  File Handle: hHan
.head 5 -  String: sPDP198
.head 5 -  Number: nBaseVal
.head 5 -  !
.head 5 -  String: sTIP
.head 5 -  String: s101
.head 5 -  ! Number: nCount0
.head 5 -  Number: nKw
.head 5 -  Number: nRef
.head 5 -  String: sErrTxt
.head 5 -  String: sSab0
.head 5 -  String: sOper
.head 5 -  String: sNaimp
.head 5 -  String: sText1
.head 5 -  Number: nTmp1
.head 5 -  Number: nTmp2
.head 5 -  !
.head 5 -  Date/Time: dDATP
.head 5 -  Number: nSOS
.head 4 +  Actions
.head 5 -  Set nBaseVal = GetBaseVal()
.head 5 -  Set AMFO = GetBankMfo()
.head 5 +  If not SalFileOpen(hHan, sFileInput, OF_ReadWrite)
.head 6 -  Return 6
.head 5 +  If not SalFileGetStr(hHan, sBuffer, 100)
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 6
.head 5 +  If Len(sBuffer) < 70
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 6
.head 5 -  Set sNameFile = Left(sBuffer, 12)
.head 5 -  Set nDokCount = Val(SalStrMidX(sBuffer, 26, 4))
.head 5 -  Set nDebSum = Val(SalStrMidX(sBuffer, 30, 16))
.head 5 -  Set nKreSum = Val(SalStrMidX(sBuffer, 46, 16))
.head 5 -  Set sKKKK = SalStrUpperX(SalStrMidX(sBuffer, 2, 4))
.head 5 +  If sNameFile != Right(sFileOrig, 12)
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 5
.head 5 -  Call SalFileSeek(hHan, Len(sBuffer)+2, FILE_SeekBegin)
.head 5 -  Set nCount0 = 0
.head 5 +  While TRUE
.head 6 -  Set nBytes = SalFileRead(hHan, sBuffer, 101)
.head 6 +  If nBytes != 101
.head 7 +  If nBytes = 0
.head 8 -  ! Проверка трех элементов сумм на достигнутом конце входного файла
.head 8 +  If nCount0 != nDokCount
.head 9 -  ! Call SqlRollbackEx(hSql(),'Пакет: ' || sNameFile ||
     ' Не совпадает количество документов с указанным в заголовке')
.head 9 -  Call SalFileClose(hHan)
.head 9 -  Return 4
.head 8 -  ! Call SqlCommitEx(hSql(), 'Документы из пакета ' || sNameFile || ' приняты (' || Str(nCount0) || ',' ||
     Str(nCount1+nCount2) || ')')
.head 8 -  Call SalFileClose(hHan)
.head 8 -  Return 0
.head 7 +  Else
.head 8 -  ! Call SqlRollback(hSql())
.head 8 -  Call SalFileClose(hHan)
.head 8 -  Return 6
.head 6 +  If SalFileRead(hHan, sPDP1, 196) != 196
.head 7 -  ! Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 6
.head 6 -  ! Проверки всех реквизитов из sBuffer
.head 6 -  Set sMFOA = SalStrTrimX(Left(sBuffer, 9))
.head 6 -  Set sNLSA = SalStrTrimX(SalStrMidX(sBuffer, 9, 14))
.head 6 -  Set sMFOB = SalStrTrimX(SalStrMidX(sBuffer, 23, 9))
.head 6 -  Set sNLSB = SalStrTrimX(SalStrMidX(sBuffer, 32, 14))
.head 6 -  Set nSumma = Val(SalStrMidX(sBuffer, 46, 16))
.head 6 -  Set sND = StrDosToWinX(SalStrTrimX(SalStrMidX(sBuffer, 70, 10)))
.head 6 -  Set sData = SalStrMidX(sBuffer, 62, 8)
.head 6 -  Set dDATdok = SalDateConstruct(Val(Left(sData, 4)), Val(SalStrMidX(sData, 4, 2)), Val(
    SalStrMidX(sData, 6, 2)), 0, 0, 0)
.head 6 -  Set sPONDa = SalStrTrimX(SalStrMidX(sBuffer, 80, 8))
.head 6 -  Set sNameFileA = SalStrMidX(sBuffer, 88, 12)
.head 6 -  Set sTIP = SalStrMidX(sBuffer, 100, 1)
.head 6 -  Set s101 = sBuffer
.head 6 -  ! Call Debug('s101=' || s101)
.head 6 +  If SalFileRead(hHan, sBuffer, 4) != 4
.head 7 -  ! Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 6
.head 6 -  Set nPND = Val(sBuffer)
.head 6 +  If SalFileRead(hHan, sBuffer, 2) != 2
.head 7 -  ! Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 6
.head 6 -  Set nCount0 = nCount0 + 1
.head 6 +  If nCount0 != nPND
.head 7 -  ! Call SqlRollback(hSql())
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 1
.head 6 -  ! Проверить подпись
.head 6 -  Set sPDP198 = Spac(98)
.head 6 -  Call llstr2str(SalStrUpperX(sPDP1), sPDP198, 196)
.head 6 -  Set nKw = CHKSIGNB(s101, 101, sPDP198, sInfo)
.head 6 +  If nKw != 0
.head 7 -  Call Message('*Ошибка подписи ' || sTIP || ' (' || Str(nKw) || ')', TRUE)
.head 7 -  ! Return 100+Val(sTIP)
.head 6 +  Else
.head 7 -  Set sSab0 = Subs(sNameFileA, 3, 4)
.head 7 -  ! обработать запрос на возврат
.head 7 -  ! 1) найти документ
.head 7 -  ! 2) сделать INSERT into KLPOOW ('W') + UPDATE KLP ('9')
.head 7 -  ! Call Debug('1')
.head 7 +  If SqlPrepareAndExecute(hSql(), '
   SELECT ref,fl,eom,naimp,text1
   INTO :nRef,:nFL,:nEom,:sNaimp,:sText1
   FROM KLP
   WHERE nls=:sNLSA and mfo=:sMFOB and nlsp=:sNLSB and s=:nSumma and datad=:dDATdok and nd=:sND and
         naex=:sNameFileA and pond=:sPONDa') and SqlFetchNext(hSql(), nFetchRes)
.head 8 -  ! Call DebugN(nFL)
.head 8 -  Set sOper = Right(Str(10000+nEom), 4)
.head 8 +  If nFL < 3
.head 9 -  ! просто возвратить (KLPOOW -> 'W', KLP -> FL=9)
.head 9 -  Set sErrTxt = 'Отзыв документа клиентом'
.head 9 -  ! Call Debug('2')
.head 9 +  If SqlPrepareAndExecute(hSql(), "
   INSERT
   INTO klpoow (sab,oper,mfoa,nlsa,mfob,nlsb,namb,s,nd,nazn,pond,prwo,nfia,tip)
   VALUES (:sSab0,:sOper,:AMFO,:sNLSA,:sMFOB,:sNLSB,:sNaimp,:nSumma,:sND,:sText1,:sPONDa,:sErrTxt,:sNameFileA,
           'W')")
.head 10 -  ! Call Debug('3')
.head 10 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klp
   SET fl=9
   WHERE ref=:nRef")
.head 11 -  Call SqlCommit(hSql())
.head 10 +  Else
.head 11 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA || ') от клиента '
     || sSab0 || ' невозможен (нельзя установить флаг возврата - 0)', TRUE)
.head 11 -  Call SqlRollback(hSql())
.head 9 +  Else
.head 10 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA || ') от клиента ' ||
     sSab0 || ' невозможен (нельзя подготовить квитанцию возврата - 0)', TRUE)
.head 10 -  Call SqlRollback(hSql())
.head 8 +  Else If nFL = 8
.head 9 -  ! попробовать сделать p_back_dok
.head 9 -  ! Call Debug('4')
.head 9 +  If SqlPrepareAndExecute(hSql(), "
   SELECT datp,sos
   INTO :dDATP,:nSOS
   FROM oper
   WHERE ref=:nRef") and SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If dDATP = GetBankDateMom()
.head 11 +  If nSOS < 5
.head 12 +  If SqlPLSQLCommand(hSql(), "p_back_dok(nRef,nTmp1,1,nTmp2,sErrTxt)")
.head 13 -  Set sErrTxt = 'Отзыв документа клиентом'
.head 13 -  ! Call Debug('5')
.head 13 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE operw
   SET value=:sErrTxt
   WHERE ref=:nRef and tag='BACKR'")
.head 14 -  ! Call Debug('6')
.head 14 +  If SqlPrepareAndExecute(hSql(), "
   INSERT
   INTO klpoow (sab,oper,mfoa,nlsa,mfob,nlsb,namb,s,nd,nazn,pond,prwo,nfia,tip)
   VALUES (:sSab0,:sOper,:AMFO,:sNLSA,:sMFOB,:sNLSB,:sNaimp,:nSumma,:sND,:sText1,:sPONDa,:sErrTxt,
           :sNameFileA,'W')")
.head 15 -  ! Call Debug('7')
.head 15 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klp
   SET fl=9
   WHERE ref=:nRef")
.head 16 -  Call SqlCommit(hSql())
.head 15 +  Else
.head 16 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA ||
     ') от клиента ' || sSab0 || ' невозможен (нельзя установить флаг возврата - 8)', TRUE)
.head 16 -  Call SqlRollback(hSql())
.head 14 +  Else
.head 15 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA ||
     ') от клиента ' || sSab0 || ' невозможен (нельзя подготовить квитанцию возврата - 8)', TRUE)
.head 15 -  Call SqlRollback(hSql())
.head 13 +  Else
.head 14 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA ||
     ') от клиента ' || sSab0 || ' невозможен (нельзя установить причину возврата)', TRUE)
.head 14 -  Call SqlRollback(hSql())
.head 12 +  Else
.head 13 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA ||
     ') от клиента ' || sSab0 || ' невозможен (нельзя выполнить обратную проводку в АБС)', TRUE)
.head 13 -  Call SqlRollback(hSql())
.head 11 +  Else
.head 12 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA ||
     ') от клиента ' || sSab0 || ' невозможен (документ УЖЕ оплачен по факту)', TRUE)
.head 10 +  Else
.head 11 -  Call Message('Отзыв документа (ref=' || Str(nRef) || ') № ' || sND || ' (' || sNameFileA || ') от клиента '
     || sSab0 || ' невозможен (за прошедший банковский день)', TRUE)
.head 9 +  Else
.head 10 -  Call Message('Отзыв документа № ' || sND || ' (' || sNameFileA || ') от клиента ' || sSab0 ||
     ' невозможен (ошибка поиска)', TRUE)
.head 7 +  Else
.head 8 -  Call Message('Отзыв документа № ' || sND || ' (' || sNameFileA || ') от клиента ' || sSab0 ||
     ' невозможен (документ отсутствует)', TRUE)
.head 3 +  Function: ObrFileQ
.head 4 -  Description: обработка файла %Q
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFileOrig
.head 5 -  String: sFileInput
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sMFOA
.head 5 -  String: smMFOA[*]
.head 5 -  String: sNLSA
.head 5 -  String: smNLSA[*]
.head 5 -  String: sNAMA
.head 5 -  String: smNAMA[*]
.head 5 -  String: sMFOB
.head 5 -  String: smMFOB[*]
.head 5 -  String: sNLSB
.head 5 -  String: smNLSB[*]
.head 5 -  String: sNAMB
.head 5 -  String: smNAMB[*]
.head 5 -  String: sOKPOB
.head 5 -  String: smOKPOB[*]
.head 5 -  Number: nDK
.head 5 -  Number: nmDK[*]
.head 5 -  Number: nS
.head 5 -  Number: nmS[*]
.head 5 -  Number: nVOB
.head 5 -  Number: nmVOB[*]
.head 5 -  String: sND
.head 5 -  String: smND[*]
.head 5 -  Number: nISP
.head 5 -  Number: nmISP[*]
.head 5 -  Number: nKV
.head 5 -  Number: nmKV[*]
.head 5 -  Date/Time: dDAOP
.head 5 -  Date/Time: dmDAOP[*]
.head 5 -  Number: nIOST
.head 5 -  Number: nmIOST[*]
.head 5 -  Date/Time: dDAPP
.head 5 -  Date/Time: dmDAPP[*]
.head 5 -  String: sNAZN
.head 5 -  String: smNAZN[*]
.head 5 -  String: sPOND
.head 5 -  String: smPOND[*]
.head 5 -  Number: nSK
.head 5 -  Number: nmSK[*]
.head 5 -  String: sNameFileA
.head 5 -  String: smNameFileA[*]
.head 5 -  Number: nREF
.head 5 -  Number: nmREF[*]
.head 5 -  !
.head 5 -  String: sNameFile
.head 5 -  Long String: sBuffer
.head 5 -  !
.head 5 -  Number: nKVzapros
.head 5 -  String: sSab
.head 5 -  File Handle: hHan
.head 5 -  String: sLSzapros
.head 5 -  Boolean: bZagol
.head 5 -  String: sFileNameV
.head 5 -  Date/Time: dBaDa
.head 5 -  String: sDatdBaDa
.head 5 -  Number: nIsq
.head 5 -  !
.head 5 -  String: sOpenDay
.head 4 +  Actions
.head 5 +  If not SalFileOpen(hHan, sFileInput, OF_Read)
.head 6 +  If SalFileCopy(sFileInput, sArchPath || 'NOT\\' || Right(sFileInput, 12), TRUE) = FILE_CopyOK
.head 7 -  Call VisFileDelete(sFileInput)
.head 6 -  Return 6
.head 5 +  If SalFileRead(hHan, sBuffer, 32) != 32
!  llread(nHan, sBuffer, 32) != 32
.head 6 -  Call SalFileClose(hHan)
.head 6 +  If SalFileCopy(sFileInput, sArchPath || 'NOT\\' || Right(sFileInput, 12), TRUE) = FILE_CopyOK
.head 7 -  Call VisFileDelete(sFileInput)
.head 6 -  Return 6
.head 5 -  Set sNameFile = Left(sBuffer, 12)
.head 5 -  Set sSab = SalStrUpperX(SalStrMidX(sBuffer, 2, 4))
.head 5 -  Set nIsq = Val(SalStrTrimX(SalStrMidX(sBuffer, 26, 4)))
.head 5 +  If sNameFile != Right(sFileOrig, 12)
.head 6 -  Call SalFileClose(hHan)
.head 6 +  If SalFileCopy(sFileInput, sArchPath || 'NOT\\' || Right(sFileInput, 12), TRUE) = FILE_CopyOK
.head 7 -  Call VisFileDelete(sFileInput)
.head 6 -  Return 5
.head 5 -  Set nIQ = 0
.head 5 +  While nIQ < nIsq
.head 6 +  If SalFileRead(hHan, sBuffer, 31) != 31
.head 7 -  Call SalFileClose(hHan)
.head 7 +  If SalFileCopy(sFileInput, sArchPath || 'NOT\\' || Right(sFileInput, 12), TRUE) = FILE_CopyOK
.head 8 -  Call VisFileDelete(sFileInput)
.head 7 -  Return 5
.head 6 +  If Val(SalStrTrimX(SalStrMidX(sBuffer, 25, 4))) != nIQ+1
.head 7 -  Call SalFileClose(hHan)
.head 7 +  If SalFileCopy(sFileInput, sArchPath || 'NOT\\' || Right(sFileInput, 12), TRUE) = FILE_CopyOK
.head 8 -  Call VisFileDelete(sFileInput)
.head 7 -  Return 1
.head 6 -  Set sLSzapros = SalStrTrimX(Left(sBuffer, 14))
.head 6 -  Set nKVzapros = Val(SalStrMidX(sBuffer, 14, 3))
.head 6 -  Set nKVzapros = IifN(nKVzapros=0, GetBaseVal(), nKVzapros)
.head 6 -  Set sDatdBaDa = SalStrMidX(sBuffer, 21, 2) || '-' || SalStrMidX(sBuffer, 23, 2) || '-' || SalStrMidX(sBuffer, 17, 4)
.head 6 -  Set dBaDa = SalDateConstruct(Val(SalStrMidX(sBuffer, 17, 4)), Val(SalStrMidX(sBuffer, 21, 2)), Val(
    SalStrMidX(sBuffer, 23, 2)), 0, 0, 0)
.head 6 -  Set sOpenDay = IifS(dBankDate=dBaDa, GetGlobalOption(CFG_BANKDAY()), '0')
.head 6 -  Set nUid = GetUserId()
.head 6 +  If bKORP
.head 7 +  ! If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT count(*)
   INTO :nDiti
   FROM customer
   WHERE sab=:sSab and stmt=5"))
.head 8 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set nDiti = 0
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT count(*)
   INTO :nDiti
   FROM customer
   WHERE sab=:sSab and stmt=6"))
.head 8 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set nDiti = 0
.head 7 +  Else
.head 8 -  Set nDiti = 0
.head 7 -  Set bKORP1 = nDiti>0
.head 6 +  Else
.head 7 -  Set bKORP1 = FALSE
.head 6 +  If SqlPLSQLCommand(hSql(), "p_lici" || IifS(bKORP1, "u", "") || "(nUid,dBaDa,sSab,nKVzapros,sLSzapros)")
.head 7 -  Call SqlCommit(hSql())
.head 7 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tmp_lici
     INTO :nKwo
     WHERE id=:nUid"))
.head 7 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Set bOk = nKwo>0
.head 6 +  Else
.head 7 -  Set bOk = FALSE
.head 6 +  If bOk and SqlPrepareAndExecute(hSql(), T("
   SELECT nlsa,nama,mfob,nlsb,namb,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dapp,nazn,pond,sk,namefilea,Kodirowka,nazns,
          bis,naznk,d_rec,fn_a,ref
   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:dDAPP,:sNAZN,:sPOND,
        :nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nREF
   FROM tmp_lici
   WHERE id=:nUid
   ORDER BY nlsa,kv,dk,s"))
.head 7 -  Set sMFOA = GetBankMfo()
.head 7 -  Set nIndex = 0
.head 7 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smNAMA, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smOKPOB, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmDK, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmVOB, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmISP, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmKV, 1, -1)
.head 7 -  Call SalArraySetUpperBound(dmDAOP, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmIOST, 1, -1)
.head 7 -  Call SalArraySetUpperBound(dmDAPP, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmSK, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smNameFileA, 1, -1)
.head 7 -  Call SalArraySetUpperBound(nmREF, 1, -1)
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set smMFOA[nIndex] = sMFOA
.head 8 -  Set smNLSA[nIndex] = sNLSA
.head 8 -  Set smNAMA[nIndex] = sNAMA
.head 8 -  Set smMFOB[nIndex] = sMFOB
.head 8 -  Set smNLSB[nIndex] = sNLSB
.head 8 -  Set smNAMB[nIndex] = sNAMB
.head 8 -  Set smOKPOB[nIndex] = sOKPOB
.head 8 -  Set nmDK[nIndex] = nDK
.head 8 -  Set nmS[nIndex] = nS
.head 8 -  Set nmVOB[nIndex] = nVOB
.head 8 -  Set smND[nIndex] = sND
.head 8 -  Set nmISP[nIndex] = nISP
.head 8 -  Set nmKV[nIndex] = nKV
.head 8 -  Set dmDAOP[nIndex] = dDAOP
.head 8 -  Set nmIOST[nIndex] = nIOST
.head 8 -  Set dmDAPP[nIndex] = dDAPP
.head 8 -  Set smNAZN[nIndex] = sNAZN
.head 8 -  Set smPOND[nIndex] = sPOND
.head 8 -  Set nmSK[nIndex] = nSK
.head 8 -  Set smNameFileA[nIndex] = sNameFileA
.head 8 -  Set nmREF[nIndex] = nREF
.head 8 -  Set nIndex = nIndex + 1
.head 7 +  If nIndex = 0
.head 8 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT p.nam_a,a.isp,s.ostf,s.pdat,s.fdat
     INTO :sNAMA,:nISP,:nIOST,:dDAPP,:dDAOP
     FROM accounts A, customer C, cust_acc B, saldoa S, oper P, opldok O
     WHERE o.ref=p.ref and o.acc=a.acc and a.acc=s.acc and a.acc=b.acc and b.rnk=c.rnk and c.sab=:sSab and
           a.kv=:nKVzapros and a.nls=:sLSzapros and DATE(s.fdat)<=:sDatdBaDa
     ORDER BY 5 DESC"))
.head 8 -  Set smMFOA[0] = GetBankMfo()
.head 8 -  Set smNLSA[0] = sLSzapros
.head 8 -  Set smMFOB[0] = ''
.head 8 -  Set smNLSB[0] = ''
.head 8 -  Set smNAMB[0] = ''
.head 8 -  Set smOKPOB[0] = ''
.head 8 -  Set nmDK[0] = 9
.head 8 -  Set nmS[0] = 0
.head 8 -  Set nmVOB[0] = 0
.head 8 -  Set smND[0] = ''
.head 8 -  Set nmKV[0] = nKVzapros
.head 8 -  Set dmDAOP[0] = dBaDa
.head 8 -  Set smNAZN[0] = ''
.head 8 -  Set smPOND[0] = ''
.head 8 -  Set nmSK[0] = 0
.head 8 -  Set smNameFileA[0] = ''
.head 8 +  If SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set smNAMA[0] = sNAMA
.head 9 -  Set nmISP[0] = nISP
.head 9 -  Set nmIOST[0] = nIOST
.head 9 -  Set dmDAPP[0] = dDAPP
.head 8 +  Else
.head 9 -  Set smNAMA[0] = ''
.head 9 -  Set nmISP[0] = 0
.head 9 -  Set nmIOST[0] = 0
.head 9 -  Set dmDAPP[0] = dBankDate
.head 7 -  Call FormFileV(Str(Val(sOpenDay)+2), sSab, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOB, nmDK, nmS,
     nmVOB, smND, nmISP, nmKV, dmDAOP, nmIOST, dmDAPP, smNAZN, smPOND, nmSK, smNameFileA, nmREF, '')
.head 6 -  Set nIQ = nIQ + 1
.head 5 -  Call SalFileClose(hHan)
.head 5 -  Return 0
.head 3 +  Function: ObrFileD
.head 4 -  Description: обработка файла %D
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFileOrig
.head 5 -  String: sFileInput
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sND
.head 5 -  !
.head 5 -  String: sNameFile
.head 5 -  Long String: sBuffer
.head 5 -  !
.head 5 -  String: sSab
.head 5 -  File Handle: hHan
.head 5 -  Number: nIsd
.head 5 -  Number: nID
.head 5 -  Number: nW
.head 5 -  Number: nKurs
.head 5 -  Date/Time: dDejstv
.head 5 -  Date/Time: dPodach
.head 5 -  Number: nIdentC
.head 5 -  Number: nCel
.head 5 -  Date/Time: dVMD
.head 5 -  String: sDadiPredVMD
.head 5 -  Number: nLenDopRekv
.head 5 -  Number: nPokuProd
.head 5 -  Number: nDodatok
.head 5 -  String: sPDP1
.head 5 -  String: sPDP2
.head 5 -  Number: nNomerStr
.head 5 -  String: sKorrProvodka
.head 5 -  String: sPrwo
.head 5 -  Number: nPrwo
.head 5 -  String: sSabC
.head 5 -  String: sNLS29
.head 5 -  String: sNLS26
.head 5 -  String: sMFOPF
.head 5 -  String: sNLSPF
.head 5 -  Number: nKOM
.head 5 -  String: sMFO26
.head 5 -  String: sOKPOF
.head 5 -  String: sOKPO26
.head 5 -  String: sRNK_PF
.head 5 -  Number: nFL_PF
.head 5 -  Number: nFl
.head 5 -  Number: nAccB
.head 5 -  String: smWZ[*]
.head 5 -  Number: nAcc0
.head 5 -  Number: nAcc1
.head 5 -  String: sOKPOPF
.head 5 -  Number: nAcc
.head 5 -  Boolean: bOk
.head 5 -  Number: nKw
.head 5 -  String: sInfo1
.head 5 -  String: sInfo2
.head 5 -  String: sPDP198
.head 5 -  String: sPDP298
.head 5 -  ! String: sCONTRACT
.head 5 -  String: sKKKK
.head 5 -  String: sSAB
.head 5 -  String: sNomKS
.head 5 -  Date/Time: dDatKS
.head 5 -  Date/Time: dDTdokkb
.head 5 -  String: sFile12
.head 5 -  Number: nCountryBenef
.head 5 -  Number: nCountryBank
.head 5 -  Number: nKVB
.head 5 -  Number: nKVA
.head 5 -  !
.head 5 -  String: s34
.head 5 -  Number: nKVkomiss
.head 5 -  Number: nIsp
.head 5 -  String: sIsp
.head 5 -  Number: nEOM
.head 5 -  Number: nId
.head 5 -  !
.head 5 -  String: sNDw
.head 5 -  String: sNLSw
.head 5 -  Number: nKVw
.head 5 -  Number: nSw
.head 5 -  Date/Time: dDATDw
.head 5 -  !
.head 5 -  Number: nmRefi[*]
.head 5 -  Number: nRI
.head 5 -  Number: nLA
.head 5 -  ! Boolean: bB
.head 5 -  Number: nBaseVal
.head 5 -  !
.head 5 -  Number: nVers
.head 5 -  Number: nSmes
.head 5 -  Number: nSkom
.head 5 -  !
.head 5 -  Number: nI
.head 5 -  Number: nMinus
.head 5 -  !
.head 5 -  String: sBankCode
.head 5 -  String: sBankName
.head 4 +  Actions
.head 5 +  If not SalFileOpen(hHan, sFileInput, OF_Read)
.head 6 -  Return 6
.head 5 +  If SalFileRead(hHan, sBuffer, 72) != 72
!  llread(nHan, sBuffer, 72) != 72
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 6
.head 5 -  Set sNameFile = Left(sBuffer, 12)
.head 5 -  Set sSab = SalStrUpperX(Subs(sBuffer, 3, 4))
.head 5 -  Set nIsd = Val(SalStrTrimX(Subs(sBuffer, 27, 4)))
.head 5 -  Set nVers = Val(Subs(sBuffer, 63, 8))
.head 5 -  Set nSmes = IifN(nVers>10000, 16, 0)
.head 5 +  If sNameFile != Right(sFileOrig, 12)
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 5
.head 5 -  Set nID = 0
.head 5 -  Set nW = 0
.head 5 -  Call SalArraySetUpperBound(smWZ, 1, -1)
.head 5 -  Set nCount0 = 0
.head 5 -  Set nCount1 = 0
.head 5 -  Set nCount2 = 0
.head 5 -  Set sSAB = Subs(Right(sFileOrig, 12), 3, 4)
.head 5 -  Set bOk = TRUE
.head 5 -  Call SalArraySetUpperBound(nmRefi, 1, -1)
.head 5 -  Set nRI = 0
.head 5 -  Set nBaseVal = GetBaseVal()
.head 5 -  Set nMinus = 0
.head 5 +  While nID < nIsd
.head 6 +  If SalFileRead(hHan, sBuffer, 818+nSmes) != 818+nSmes
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 5
.head 6 -  Set nNomerStr = Val(Subs(sBuffer, 813+nSmes, 4))
.head 6 +  If nNomerStr != nID+1
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 1
.head 6 -  Set sND = StrDosToWinX(SalStrTrimX(Left(sBuffer, 10)))
.head 6 -  Set sMFOA = SalStrTrimX(Subs(sBuffer, 11, 9))
.head 6 +  If Len(sMFOA) = 0
.head 7 -  Set sMFOA = GetBankMfo()
.head 6 -  Set sNLSA = SalStrTrimX(Subs(sBuffer, 20, 14))
.head 6 -  Set sMFOB = SalStrTrimX(Subs(sBuffer, 34, 9))
.head 6 -  Set sNLSB = SalStrTrimX(Subs(sBuffer, 43, 14))
.head 6 -  Set sOKPOB = SalStrTrimX(Subs(sBuffer, 57, 14))
.head 6 -  Set nS = Val(Subs(sBuffer, 71, 16))
.head 6 -  Set nSkom = NUMBER_Null
.head 6 +  If nSmes > 0
.head 7 -  Set nSkom = Val(Subs(sBuffer, 87, 16))
.head 6 -  Set nKV = Val(Subs(sBuffer, 87+nSmes, 3))
.head 6 -  Set nKV = IifN(nKV=0, nBaseVal, nKV)
.head 6 -  ! Call Debug('КУРС = ' || Subs(sBuffer, 90, 12))
.head 6 -  Set nKurs = Val(Subs(sBuffer, 90+nSmes, 12)) / 10000
.head 6 -  Set dDejstv = IifD(SalStrTrimX(Subs(sBuffer, 102+nSmes, 8))='', DATETIME_Null, SalDateConstruct(Val(
    Subs(sBuffer, 102+nSmes, 4)), Val(Subs(sBuffer, 106+nSmes, 2)), Val(Subs(sBuffer, 108+nSmes, 2)), 0, 0, 0))
.head 6 -  Set dPodach = SalDateConstruct(Val(Subs(sBuffer, 110+nSmes, 4)), Val(Subs(sBuffer, 114+nSmes, 2)), Val(
    Subs(sBuffer, 116+nSmes, 2)), 0, 0, 0)
.head 6 -  Set nIdentC = Val(Subs(sBuffer, 118+nSmes, 8))
.head 6 -  Set nCel = Val(SalStrTrimX(Subs(sBuffer, 126+nSmes, 4)))
.head 6 -  Set dVMD = IifD(SalStrTrimX(Subs(sBuffer, 130+nSmes, 8))='', DATETIME_Null, SalDateConstruct(Val(
    Subs(sBuffer, 130+nSmes, 4)), Val(Subs(sBuffer, 134+nSmes, 2)), Val(Subs(sBuffer, 136+nSmes, 2)), 0, 0, 0))
.head 6 -  Set sDadiPredVMD = SalStrTrimX(Subs(sBuffer, 138+nSmes, 240))
.head 6 -  Set nDodatok = Val(Subs(sBuffer, 378+nSmes, 1))
.head 6 -  Set nPokuProd = IifN(nDodatok<3, 1, 2)
.head 6 -  Set sNomKS = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 379+nSmes, 10)))
.head 6 -  Set dDatKS = SalDateConstruct(Val(Subs(sBuffer, 389+nSmes, 4)), Val(Subs(sBuffer, 393+nSmes, 2)), Val(
    Subs(sBuffer, 395+nSmes, 2)), 0, 0, 0)
.head 6 -  Set nKVkomiss = Val(Subs(sBuffer, 397+nSmes, 3))
.head 6 -  Set sPOND = SalStrTrimX(Subs(sBuffer, 400+nSmes, 16))
.head 6 -  Set nLenDopRekv = Val(Subs(sBuffer, 416+nSmes, 5))
.head 6 -  Set sPDP1 = Subs(sBuffer, 421+nSmes, 196)
.head 6 -  Set sPDP2 = Subs(sBuffer, 617+nSmes, 196)
.head 6 -  Set sKorrProvodka = ''
.head 6 -  Set nKVB = IifN(nPokuProd=1, nBaseVal, nKV)
.head 6 +  If nLenDopRekv > 0
.head 7 +  If SalFileRead(hHan, sBuffer, nLenDopRekv+2) != nLenDopRekv+2
.head 8 -  Call SalFileClose(hHan)
.head 8 -  Return 5
.head 7 -  Set sKorrProvodka = Left(sBuffer, nLenDopRekv)
.head 6 -  !
.head 6 -  ! Здесь обработать строку ЗАЯВКИ
.head 6 -  ! контролировать 1. принадлежность счёта клиенту
		 2. наличие контракта
		 3. дата подачи (>= текущей банковской)
		 4. дата действия (> текущей банковской)
		 5. дата ВМД (<= текущей банковской)
		 6. МФО Б и счёт Б корреспондента (для продажи)
		 7. МФО А должно быть всегда СВОЕ
		 8. МФО Б и счёт Б должны быть всегда СВОИ (для покупки)
.head 6 -  ! Проверка всех реквизитов документа на допустимость
.head 6 -  Set sPrwo = ''
.head 6 -  Set nPrwo = 0
.head 6 -  Set sSabC = ''
.head 6 -  Set nRNK = NUMBER_Null
.head 6 -  Set nCountryBenef = NUMBER_Null
.head 6 -  Set nCountryBank = NUMBER_Null
.head 6 -  Set sBankCode = ''
.head 6 -  Set sBankName = ''
.head 6 -  Set sFile12 = Right(sFileOrig, 12)
.head 6 +  If nDodatok = 1
.head 7 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT c.sab,c.rnk,t.benefcountry,t.bankcountry,t.bank_code,r.name
   INTO :sSabC,:nRNK,:nCountryBenef,:nCountryBank,:sBankCode,:sBankName
   FROM top_contracts t, customer c, rc_bnk r
   WHERE t.pid=:nIdentC and t.rnk=c.rnk and t.bank_code=r.b010(+)")) and SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If sSabC != sSAB
.head 9 -  Set sPrwo = '*Отсутствует контракт'
.head 9 -  Set nPrwo = 1
.head 8 +  Else !! залазим в CUST_ZAY
.head 9 -  Set sNLS29 = STRING_Null
.head 9 -  Set sNLS26 = STRING_Null
.head 9 -  Set sMFOPF = STRING_Null
.head 9 -  Set sNLSPF = STRING_Null
.head 9 -  Set nKOM = NUMBER_Null
.head 9 -  Set sMFO26 = STRING_Null
.head 9 -  Set sOKPOPF = STRING_Null
.head 9 -  Set sOKPO26 = STRING_Null
.head 9 -  Set sRNK_PF = STRING_Null
.head 9 -  Set nFL_PF = NUMBER_Null
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT nls29,nls26,mfop,nlsp,mfo26,okpop,okpo26,rnk_pf,fl_pf
   INTO :sNLS29,:sNLS26,:sMFOPF,:sNLSPF,:sMFO26,:sOKPOPF,:sOKPO26,:sRNK_PF,:nFL_PF
   FROM cust_zay
   WHERE rnk=:nRNK")) and SqlFetchNext(hSql(), nFetchRes)
.head 10 -  If SqlPrepareAndExecute(hSql(), "
   SELECT f_zaycomis(:nPokuProd,'R',:nRNK,:nKV,:dBankDate,:nS)
   INTO :nKOM
   FROM dual") and SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If nKOM = NUMBER_Null
.head 11 -  Set sPrwo = 'Не установлен % комиссии в параметрах клиента для заявок на покупку-продажу валюты'
.head 11 -  Set nPrwo = 17
.head 9 +  Else
.head 10 -  Set sPrwo = '*Отсутствуют параметры клиента для заявок на покупку-продажу валюты'
.head 10 -  Set nPrwo = 13
.head 7 +  Else
.head 8 -  Set sPrwo = '*Отсутствует контракт'
.head 8 -  Set nPrwo = 1
.head 7 +  If nPrwo = 0 and nDodatok = 1 and dPodach < GetBankDateMom()
.head 8 -  Set sPrwo = '*Дата подачи заявки неверна'
.head 8 -  Set nPrwo = 2
.head 7 +  If nPrwo = 0 and nDodatok = 1 and dDejstv != DATETIME_Null and
   dDejstv < GetBankDateMom()
.head 8 -  Set sPrwo = '*Дата действия истекла'
.head 8 -  Set nPrwo = 3
.head 6 +  If nDodatok = 2 or nDodatok = 4
.head 7 -  Set s34 = Subs(sFile12, 3, 4)
.head 7 +  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT sab,rnk
   INTO :sSabC,:nRNK
   FROM customer c
   WHERE sab=:s34 and stmt=5")) and SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set sNLS26 = STRING_Null
.head 8 -  Set sMFO26 = STRING_Null
.head 8 -  Set sOKPO26 = STRING_Null
.head 8 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT nls26,mfo26,okpo26
   INTO :sNLS26,:sMFO26,:sOKPO26
   FROM cust_zay
   WHERE rnk=:nRNK")) and SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set sNLS29 = STRING_Null
.head 9 -  Set sNLS26 = STRING_Null
.head 9 -  Set sMFOPF = STRING_Null
.head 9 -  Set sNLSPF = STRING_Null
.head 9 -  Set nKOM = NUMBER_Null
.head 9 -  Set sMFO26 = STRING_Null
.head 9 -  Set sOKPOPF = STRING_Null
.head 9 -  Set sOKPO26 = STRING_Null
.head 9 -  Set sRNK_PF = STRING_Null
.head 9 -  Set nFL_PF = NUMBER_Null
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT nls29,nls26,mfop,nlsp,mfo26,okpop,okpo26,rnk_pf,fl_pf
   INTO :sNLS29,:sNLS26,:sMFOPF,:sNLSPF,:sMFO26,:sOKPOPF,:sOKPO26,:sRNK_PF,:nFL_PF
   FROM cust_zay
   WHERE rnk=:nRNK")) and SqlFetchNext(hSql(), nFetchRes)
.head 10 -  If SqlPrepareAndExecute(hSql(), "
   SELECT f_zaycomis(:nPokuProd,'R',:nRNK,:nKV,:dBankDate,:nS)
   INTO :nKOM
   FROM dual") and SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If nKOM = NUMBER_Null
.head 11 -  Set sPrwo = 'Не установлен % комиссии в параметрах клиента для заявок на покупку-продажу валюты'
.head 11 -  Set nPrwo = 17
.head 9 +  Else 
.head 10 -  Set sPrwo = '*Отсутствуют параметры клиента для заявок на покупку-продажу валюты'
.head 10 -  Set nPrwo = 13
.head 8 +  Else 
.head 9 -  Set sPrwo = '*Отсутствуют параметры клиента для заявок на покупку-продажу валюты'
.head 9 -  Set nPrwo = 13
.head 7 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT sab,rnk
   INTO :sSabC,:nRNK
   FROM customer c
   WHERE sab=:s34 and stmt=6")) and SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set sNLS26 = STRING_Null
.head 8 -  Set sMFO26 = STRING_Null
.head 8 -  Set sOKPO26 = STRING_Null
.head 8 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT nls26,mfo26,okpo26
   INTO :sNLS26,:sMFO26,:sOKPO26
   FROM cust_zay
   WHERE rnk=:nRNK")) and SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set sNLS29 = STRING_Null
.head 9 -  Set sNLS26 = STRING_Null
.head 9 -  Set sMFOPF = STRING_Null
.head 9 -  Set sNLSPF = STRING_Null
.head 9 -  Set nKOM = NUMBER_Null
.head 9 -  Set sMFO26 = STRING_Null
.head 9 -  Set sOKPOPF = STRING_Null
.head 9 -  Set sOKPO26 = STRING_Null
.head 9 -  Set sRNK_PF = STRING_Null
.head 9 -  Set nFL_PF = NUMBER_Null
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT nls29,nls26,mfop,nlsp,mfo26,okpop,okpo26,rnk_pf,fl_pf
   INTO :sNLS29,:sNLS26,:sMFOPF,:sNLSPF,:sMFO26,:sOKPOPF,:sOKPO26,:sRNK_PF,:nFL_PF
   FROM cust_zay
   WHERE rnk=:nRNK")) and SqlFetchNext(hSql(), nFetchRes)
.head 10 -  If SqlPrepareAndExecute(hSql(), "
   SELECT f_zaycomis(:nPokuProd,'R',:nRNK,:nKV,:dBankDate,:nS)
   INTO :nKOM
   FROM dual") and SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If nKOM = NUMBER_Null
.head 11 -  Set sPrwo = 'Не установлен % комиссии в параметрах клиента для заявок на покупку-продажу валюты'
.head 11 -  Set nPrwo = 17
.head 9 +  Else
.head 10 -  Set sPrwo = '*Отсутствуют параметры клиента для заявок на покупку-продажу валюты'
.head 10 -  Set nPrwo = 13
.head 8 +  Else
.head 9 -  Set sPrwo = '*Отсутствуют параметры клиента для заявок на покупку-продажу валюты'
.head 9 -  Set nPrwo = 13
.head 7 +  Else
.head 8 -  Set sPrwo = '*Ошибочен эл.код клиента'
.head 8 -  Set nPrwo = 51
.head 6 +  ! If nDodatok = 5
.head 7 -  Set s34 = Subs(sFile12, 3, 4)
.head 7 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT sab,rnk
   INTO :sSabC,:nRNK
   FROM customer c
   WHERE sab=:s34 and stmt=5")) and SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set sNLS26 = sNLSB
.head 8 -  Set sMFO26 = sMFOB
.head 8 -  Set sOKPO26 = sOKPOB
.head 7 +  Else 
.head 8 -  Set sPrwo = '*Ошибочен эл.код клиента'
.head 8 -  Set nPrwo = 51
.head 6 +  If nPrwo = 0 and nDodatok = 5
.head 7 -  Set sPrwo = '*Заявки на обязательную продажу запрещены'
.head 7 -  Set nPrwo = 4
.head 6 +  If nPrwo = 0 and (nDodatok = 1 or nDodatok = 2 or nDodatok = 4) and sMFOA != GetBankMfo()
.head 7 -  Set sPrwo = '*Ошибочно МФО банка А'
.head 7 -  Set nPrwo = 5
.head 6 -  ! Проверка на наличие счёта в SALDO
.head 6 -  Set nAcc = -1
.head 6 +  If nPrwo = 0 and nDodatok < 5
.head 7 -  Set nKVA = IifN(nPokuProd=1, nBaseVal, nKV)
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSA, nKVA, nAcc)")
.head 7 +  If nAcc < 0
.head 8 -  Set sPrwo = '*Ошибочен счёт А'
.head 8 -  Set nPrwo = 6
.head 6 -  !
.head 6 -  ! КОММЕНТАРЮ ДО ПРИЕЗДА БОРИ
.head 6 -  !
.head 6 -  ! Проверка на наличие счёта зачисления валюты (для покупки валюты) в SALDO
.head 6 +  ! If nPrwo = 0 and nDodatok = 1
.head 7 -   Set nAcc = -1
.head 7 -   Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSA, nKV, nAcc)")
.head 7 +   If nAcc < 0
.head 8 -   Set sPrwo = '*Отсутствует счёт для зачисления валюты'
.head 8 -   Set nPrwo = 11
.head 6 -  ! проверка на платёж с "чужого" счёта
.head 6 +  If nPrwo = 0 and nDodatok < 5
.head 7 -  Set nFl = 0
.head 7 -  ! Call Debug('nAcc = ' || Str(nAcc) || ', sSAB = ' || sSAB)
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_alien(nAcc, sSAB, nFl)")
.head 7 +  If nFl = 0
.head 8 -  Set sPrwo = '*Ошибочен счёт А (чужой)'
.head 8 -  Set nPrwo = 7
.head 6 +  If nPrwo = 0 and not DopustMfo(sMFOB) and nDodatok != 3
.head 7 -  Set sPrwo = '*Недопустимо МФО банка Б'
.head 7 -  Set nPrwo = 8
.head 6 +  If nPrwo = 0 and Vkrz2(sMFOB, sNLSB) != sNLSB and nDodatok != 3
.head 7 -  Set sPrwo = '*Ошибочен счёт Б'
.head 7 -  Set nPrwo = 9
.head 6 +  If nPrwo = 0 and (nS = 0 or nS >= SalNumberPower(10, 14))
.head 7 -  Set sPrwo = '*Ошибочна сумма в заявке'
.head 7 -  Set nPrwo = 10
.head 6 +  If nPrwo = 0 and nPokuProd = 1 and nDodatok != 3
.head 7 +  If sMFOB != GetBankMfo()
.head 8 -  Set sPrwo = '*Ошибочно МФО банка Б'
.head 8 -  Set nPrwo = 18
.head 7 +  Else
.head 8 -  Set nAccB = -1
.head 8 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSB, nKVB, nAccB)")
.head 8 +  If nAccB < 0
.head 9 -  Set sPrwo = '*Ошибочен счёт Б'
.head 9 -  Set nPrwo = 9
.head 8 +  Else
.head 9 -  Set nFl = 0
.head 9 -  Call SqlPLSQLCommand(hSql(), "verify_alien(nAccB, sSAB, nFl)")
.head 9 +  If nFl = 0
.head 10 -  Set sPrwo = '*Ошибочен счёт Б (чужой)'
.head 10 -  Set nPrwo = 19
.head 6 +  If nPrwo = 0 and nDodatok > 3 ! (4 или 5)
.head 7 -  Set nKVB = nBaseVal
.head 7 +  If sMFOB = GetBankMfo()
.head 8 -  Set nAccB = -1
.head 8 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSB, nKVB, nAccB)")
.head 8 -  ! Call DebugN(nAccB)
.head 8 +  If nAccB < 0
.head 9 -  Set sPrwo = '*Ошибочен счёт Б'
.head 9 -  Set nPrwo = 9
.head 8 +  Else
.head 9 -  Set nFl = 0
.head 9 -  Call SqlPLSQLCommand(hSql(), "verify_alien(nAccB, sSAB, nFl)")
.head 9 +  If nFl = 0
.head 10 -  Set sPrwo = '*Ошибочен счёт Б (чужой)'
.head 10 -  Set nPrwo = 19
.head 7 +  Else
.head 8 -  Set nAccB = NUMBER_Null
.head 6 +  If nPrwo = 0 and (nDodatok = 1 or nDodatok = 2 or nDodatok = 4)
.head 7 -  ! If Left(sNLSA, 4) != '2600' and Left(sNLSA, 4) != '2603' and
   Left(sNLSA, 4) != '2900' and Left(sNLSA, 4) != '3901' and
   Left(sNLSA, 4) != '2650' and Left(sNLSA, 4) != '2620'
.head 7 +  If VisArrayFindString(smZAY_BAL, Left(sNLSA, 4)) < 0
.head 8 -  Set sPrwo = '*Недопустимый балансовый счёт А'
.head 8 -  Set nPrwo = 38
.head 7 -  ! If sMFOA = sMFOB and Left(sNLSB, 4) != '2600' and Left(sNLSB, 4) != '2603' and
   Left(sNLSB, 4) != '2900' and Left(sNLSB, 4) != '3901' and
   Left(sNLSB, 4) != '2650' and Left(sNLSB, 4) != '2620'
.head 7 +  If sMFOA = sMFOB and VisArrayFindString(smZAY_BAL, Left(sNLSB, 4)) < 0
.head 8 -  Set sPrwo = '*Недопустимый балансовый счёт Б'
.head 8 -  Set nPrwo = 39
.head 6 +  ! If nPrwo = 0 and nDodatok = 5
.head 7 -  ! If sMFOA = sMFOB and Left(sNLSB, 4) != '2600' and Left(sNLSB, 4) != '2603' and
   Left(sNLSB, 4) != '2900' and Left(sNLSB, 4) != '3901' and
   Left(sNLSB, 4) != '2650' and Left(sNLSB, 4) != '2620'
.head 7 +  If sMFOA = sMFOB and VisArrayFindString(smZAY_BAL, Left(sNLSB, 4)) < 0
.head 8 -  Set sPrwo = '*Недопустимый балансовый счёт Б'
.head 8 -  Set nPrwo = 39
.head 6 -  ! сделать проверку подписей
.head 6 -  ! Проверить подписи
.head 6 -  ! Call Debug('sPDP1 = ' || sPDP1 || PutCrLf() || 'sPDP2 = ' || sPDP2)
.head 6 +  If nPrwo = 0
.head 7 -  Set sPDP198 = Spac(98)
.head 7 -  Call llstr2str(SalStrUpperX(sPDP1), sPDP198, 196)
.head 7 -  Set nKw = CHKSIGNB(Left(sBuffer, 420+nSmes), 420+nSmes, sPDP198, sInfo1)
.head 7 +  If nKw != 0
.head 8 -  Set sPrwo = '*Ошибка подписи 1 (' || Str(nKw) || ')'
.head 8 -  Set nPrwo = 12
.head 7 +  Else
.head 8 -  Set sPDP298 = Spac(98)
.head 8 -  Call llstr2str(SalStrUpperX(sPDP2), sPDP298, 196)
.head 8 -  Set nKw = CHKSIGNB(Left(sBuffer, 420+nSmes), 420+nSmes, sPDP298, sInfo2)
.head 8 +  If nKw != 0
.head 9 -  Set sPrwo = '*Ошибка подписи 2 (' || Str(nKw) || ')'
.head 9 -  Set nPrwo = 12
.head 6 +  If nPrwo = 0
.head 7 +  If nDodatok = 3 ! конверсия
.head 8 -  ! лазим по KLPV
.head 8 +  If SqlPrepareAndExecute(hSql(), '
   SELECT nd,nls,kv,datd,s/100
   INTO :sNDw,:sNLSw,:nKVw,:dDATDw,:nSw
   FROM klpv
   WHERE fl=8 and identkb=:sPOND') and SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set sPrwo = '*Дубль с док.N ' || SalStrTrimX(sNDw) || ' от ' || SalFmtFormatDateTime(dDATDw, 'dd/MM/yyyy') ||
    ' со счёта ' || SalStrTrimX(sNLSw) || '(' || Str(nKVw) || ') на сумму ' || Str(nSw)
.head 9 -  Set nPrwo = 52
.head 7 +  Else ! заявки
.head 8 -  ! лазим по ZAYAVKA
.head 8 +  If SqlPrepareAndExecute(hSql(), '
   SELECT kv2,fdat,s2/100
   INTO :nKVw,:dDATDw,:nSw
   FROM zayavka
   WHERE sos=2 and ref is not null and identkb=:sPOND') and SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set sPrwo = '*Дубль с заявкой от ' || SalFmtFormatDateTime(dDATDw, 'dd/MM/yyyy') || ', валюта ' || Str(nKVw) ||
    ', на сумму ' || Str(nSw)
.head 9 -  Set nPrwo = 53
.head 6 +  If nPrwo = 0 and nDodatok != 3 ! заявки
.head 7 -  Set nAcc0 = -1
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSA, nBaseVal, nAcc0)")
.head 7 -  Set nAcc1 = -1
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSA, nKV, nAcc1)")
.head 7 +  If nAcc0 < 0
.head 8 -  ! взять для покупки sNLS29 грн
.head 8 +  If nPokuProd = 1
.head 9 -  Set nAcc0 = Val(GetValueStr("
    SELECT to_char(acc)
    FROM accounts
    WHERE nls='" || sNLS29 || "' and kv=" || Str(nBaseVal)))
.head 9 +  If nAcc0 = 0
.head 10 -  Set sPrwo = '*Ошибочен или отсутствует Торговый счёт для списания (параметры клиента)'
.head 10 -  Set nPrwo = 20
.head 8 -  ! взять для продажи sNLS26 грн, если своё МФО (sMFO26)
.head 8 +  Else !! nPokuProd = 2
.head 9 +  If Len(sMFO26) = 0 or sMFO26 = GetBankMfo()
.head 10 -  Set nAcc0 = Val(GetValueStr("
    SELECT to_char(acc)
    FROM accounts
    WHERE nls='" || sNLS26 || "' and kv=" || Str(nBaseVal)))
.head 10 +  If nAcc0 = 0
.head 11 -  Set sPrwo = '*Ошибочен или отсутствует Расчётный счёт для зачисления (параметры клиента)'
.head 11 -  Set nPrwo = 21
.head 9 +  Else
.head 10 -  Set nAcc0 = NUMBER_Null
.head 7 -  ! ЗДЕСЬ ОСТАНАВЛИВАЛСЯ
.head 7 +  If nAcc1 < 0
.head 8 -  ! взять для покупки sNLS26 грн
.head 8 +  If nPokuProd = 1
.head 9 +  If Len(sMFO26) > 0 and sMFO26 != GetBankMfo()
.head 10 -  Set sPrwo = '*Ошибочно МФО (' || sMFO26 || ') для зачисления (параметры клиента)'
.head 10 -  Set nPrwo = 11
.head 9 +  Else
.head 10 -  Set nAcc1 = Val(GetValueStr("
    SELECT to_char(acc)
    FROM accounts
    WHERE nls='" || sNLS26 || "' and kv=" || Str(nKV)))
.head 10 +  If nAcc1 = 0
.head 11 -  Set sPrwo = '*Ошибочен или отсутствует Расчётный счёт для зачисления (параметры клиента)'
.head 11 -  Set nPrwo = 21
.head 8 -  ! взять для продажи sNLS29 грн
.head 8 +  Else !! nPokuProd = 2
.head 9 -  Set nAcc1 = Val(GetValueStr("
    SELECT to_char(acc)
    FROM accounts
    WHERE nls='" || sNLS29 || "' and kv=" || Str(nKV)))
.head 9 +  If nAcc1 = 0
.head 10 -  Set sPrwo = '*Ошибочен или отсутствует Торговый счёт для списания (параметры клиента)'
.head 10 -  Set nPrwo = 20
.head 7 -  ! это УСТАРЕВАЕТ
.head 7 -  ! Set nAcc0 = IifN(nPokuProd=1, nAcc, IifN(sMFOB=sMFOA, nAccB, NUMBER_Null))
.head 7 -  ! Set nAcc1 = IifN(nPokuProd=1, nAccB, nAcc)
.head 7 -  !
.head 7 -  ! Call Debug(Str(nAccB) || ' ' || sMFOB || ' ' || sMFOA)
.head 6 +  If nPrwo > 0
.head 7 -  ! добавить в массив "плохих" заявок
.head 7 -  ! Set smWZ[nW] = PadL(Str(nDodatok), 2) || PadL(Str(nPrwo), 2) || PadR(sPOND, 16) || PadR(sPrwo, 160) ||
    Right(sFileOrig, 12) || PadL(Str(nNomerStr), 4)
.head 7 -  Set smWZ[nW] = PadL(Str(nDodatok), 2) || PadL(Str(nPrwo), 2) || PadR(sPOND, 16) || PadR(sPrwo, 160) ||
    Right(sFileOrig, 12) || PadL(Str(nNomerStr), 4) || PadR(sND, 10) || PadL(Str(nS), 16) || PadL(Str(nKV), 3) ||
    SalFmtFormatDateTime(GetServerDate(), 'yyyyMMddhhhhmmss')
.head 7 -  Set nW = nW + 1
.head 6 +  Else
.head 7 -  ! сделать INSERT в таблицу ZAYAVKA
.head 7 +  If nDodatok = 4
.head 8 -  ! Set nAcc1 = NUMBER_Null
.head 8 -  Set nAcc0 = nAccB
.head 8 -  ! было до разделения визирования покупки/продажи на разные окна (так и НАДО оставить)
.head 8 +  If nAcc0 > 0
.head 9 -  Set sNLS26 = STRING_Null
.head 9 -  Set sMFO26 = STRING_Null
.head 9 -  Set sOKPO26 = STRING_Null
.head 8 +  Else
.head 9 -  Set sNLS26 = sNLSB
.head 9 -  Set sMFO26 = sMFOB
.head 9 -  Set sOKPO26 = sOKPOB
.head 8 -  ! стало после разделения визирования покупки/продажи на разные окна (это только предполагалось, но НЕ НУЖНО)
.head 8 +  ! If sNLS26 = STRING_Null
.head 9 -   Set sNLS26 = sNLSB
.head 8 +  ! If sMFO26 = STRING_Null
.head 9 -   Set sMFO26 = sMFOB
.head 8 +  ! If sOKPO26 = STRING_Null
.head 9 -   Set sOKPO26 = sOKPOB
.head 7 +  If nDodatok = 3
.head 8 -  If SqlPrepareAndExecute(hSql(), T("
   SELECT isp
   INTO :nIsp
   FROM accounts
   WHERE acc=:nAcc")) and SqlFetchNext(hSql(), nFetchRes)
.head 8 +  Else
.head 9 -  Call SalUseRegistry(FALSE, '')
.head 9 -  Call SalGetProfileString("ElektroKlients", "OperForAccNotFound", '0', sIsp, GetIniFileName())
.head 9 -  Set nIsp = Max(1, SalNumberRound(Val(sIsp)))
.head 7 +  If bOk
.head 8 -  Set dDTdokkb = SalDateCurrent()
.head 8 -  ! Call Debug('nRNK = ' || Str(nRNK) || PutCrLf() ||
	   'nPokuProd = ' || Str(nPokuProd) || PutCrLf() ||
	   'nAcc0 = ' || Str(nAcc0) || PutCrLf() ||
	   'nAcc1 = ' || Str(nAcc1) || PutCrLf() ||
	   'nS = ' || Str(nS) || PutCrLf() ||
	   'nKurs = ' || Str(nKurs) || PutCrLf() ||
	   'sMFOPF = ' || sMFOPF || PutCrLf() ||
	   'sNLSPF = ' || sNLSPF || PutCrLf() ||
	   'nKV = ' || Str(nKV) || PutCrLf() ||
	   'nKOM = ' || Str(nKOM) || PutCrLf() ||
	   'sMFO26 = ' || sMFO26 || PutCrLf() ||
	   'sNLS26 = ' || sNLS26 || PutCrLf() ||
	   'sOKPOPF = ' || sOKPOPF || PutCrLf() ||
	   'sOKPO26 = ' || sOKPO26 || PutCrLf() ||
           'nIdentC = ' || Str(nIdentC) || PutCrLf() ||
	   'sNomKS = ' || sNomKS || PutCrLf() ||
	   'nCel = ' || Str(nCel) || PutCrLf() ||
	   'sDadiPredVMD = ' || sDadiPredVMD || PutCrLf() ||
	   'sRNK_PF = ' || sRNK_PF || PutCrLf() ||
           'nCountryBenef = ' || Str(nCountryBenef) || PutCrLf() ||
           'nCountryBank = ' || Str(nCountryBank) || PutCrLf() ||
	   'sFile12 = ' || sFile12 || PutCrLf() ||
           'nDodatok = ' || Str(nDodatok) || PutCrLf() ||
	   'sPOND = ' || sPOND)
.head 8 +  If nDodatok = 2
.head 9 -  Set nIdentC = NUMBER_Null
.head 8 +  Else If nDodatok = 4
.head 9 -  Set nIdentC = NUMBER_Null
.head 9 -  Set dVMD = DATETIME_Null
.head 9 -  Set dDatKS = DATETIME_Null
.head 9 -  Set nCel = NUMBER_Null
.head 9 -  Set nCountryBenef = NUMBER_Null
.head 9 -  Set nCountryBank = NUMBER_Null
.head 9 -  Set sRNK_PF = STRING_Null
.head 9 -  Set nFL_PF = NUMBER_Null
.head 9 -  Set sMFOPF = STRING_Null
.head 9 -  Set sNLSPF = STRING_Null
.head 9 -  Set sOKPOPF = STRING_Null
.head 8 +  Else
.head 9 -  ! If nDodatok != 2
.head 9 -  Set sNomKS = STRING_Null
.head 9 -  Set dDatKS = DATETIME_Null
.head 8 +  ! If nDodatok = 5
.head 9 +  If nAcc0
.head 10 -  Set sMFO26 = STRING_Null
.head 10 -  Set sNLS26 = STRING_Null
.head 10 -  Set sOKPO26 = STRING_Null
.head 9 -  Set nFL_KURSZ = NUMBER_Null
.head 9 +  If nKurs = 0
.head 10 -  Set nKursDiler = NUMBER_Null
.head 10 -  ! If SqlPrepareAndExecute(hSql(), '
   SELECT kurs_b
   INTO :nKursDiler
   FROM diler_kurs
   WHERE kv=:nKV and
         dat=(SELECT max(dat)
              FROM diler_kurs
              WHERE trunc(dat)=trunc(sysdate) and kv=:nKV)') and
   SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If SqlPrepareAndExecute(hSql(), '
   SELECT kurs_b
   INTO :nKursDiler
   FROM diler_kurs
   WHERE kv=:nKV and
         dat=(SELECT max(dat)
              FROM diler_kurs
              WHERE kv=:nKV and kurs_b is not null)') and SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Set nKurs = nKursDiler
.head 11 -  Set nFL_KURSZ = 1
.head 10 -  Set nKurs = IifN(nKurs=0 or nKurs=NUMBER_Null, NUMBER_Null, nKurs)
.head 9 +  If nKursDiler = NUMBER_Null and nKurs = NUMBER_Null
.head 10 -  Set sPrwo = '*Не установлен курс банка'
.head 10 -  Set nPrwo = 14
.head 10 -  Set smWZ[nW] = PadL(Str(nDodatok), 2) || PadL(Str(nPrwo), 2) || PadR(sPOND, 16) || PadR(sPrwo, 160) ||
    Right(sFileOrig, 12) || PadL(Str(nNomerStr), 4) || PadR(sND, 10) || PadL(Str(nS), 16) || PadL(Str(nKV), 3)
    || SalFmtFormatDateTime(GetServerDate(), 'yyyyMMddhhhhmmss')
.head 10 -  Set nW = nW + 1
.head 9 +  Else 
.head 10 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    INSERT
    INTO zay_debt_klb (nd,datt,rnk,acc0,datz,s2,kurs_z,kv2,mfo0,nls0,okpo0,fnamekb,identkb,datedokkb,tipkb,
         fl_kursz)
    VALUES (:sND,:dDejstv,:nRNK,:nAcc0,:dPodach,:nS,:nKurs,:nKV,:sMFO26,:sNLS26,:sOKPO26,:sFile12,:sPOND,
            :dDTdokkb,:nDodatok,:nFL_KURSZ)'))
.head 8 +  ! Else If nDodatok = 3
.head 9 -  Set nEOM = nIsp
.head 9 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT neom
     INTO :nEOM
     FROM klpvacc
     WHERE acc=:nAcc"))
.head 9 +  If SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If nEOM = 0 or nEOM = NUMBER_Null
.head 11 -  Set nEOM = Max(nIsp, 1)
.head 9 +  If bOk
.head 10 -  Set sFile12 = Right(sFileOrig, 12)
.head 10 -  Set dDTdokkb = SalDateCurrent()
.head 10 -  Set nRefNext = 0
.head 10 -  Set nI = 0
.head 10 +  While nRefNext = 0
.head 11 -  Call Ref(nRefNext)
.head 11 -  Set nI = nI + 1
.head 11 +  If nI > 7
.head 12 -  Set nMinus = -1
.head 12 -  Set bOk = FALSE
.head 12 -  Break 
.head 10 +  If bOk
.head 11 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    SELECT S_klpv.NEXTVAL
    INTO :nId
    FROM DUAL')) and SqlFetchNext(hSql(), nFetchRes)
.head 11 +  If bOk
.head 12 -  Set nKurs = IifN(nKurs=0, NUMBER_Null, nKurs)
.head 12 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    INSERT
    INTO klpv (id,ref,neom,sab,fl,nls,nd,datd,dkreddog,s,kurskonv,kv,kvkomiss,fnamekb,identkb,tipkb,
               datedokkb)
    VALUES (:nId,:nRefNext,:nEOM,:sSAB,0,:sNLSA,:sND,:dPodach,:dDejstv,:nS,:nKurs,:nKV,:nKVkomiss,:sFile12,
            :sPOND,:nDodatok,:dDTdokkb)'))
.head 12 +  If bOk
.head 13 +  If bAUTO
.head 14 -  ! проверить "бизнес-правила" и если удовлетворяются поставить
  NOAUTO=('1'-not null)
.head 14 -  ! Set bP = FALSE
.head 14 -  ! Set nI = 0
.head 14 +  ! While nI < LenArray(smUSL)
.head 15 -   Set sCOMM = smCOMM[nI]
.head 15 -   Set sUSL = smUSL[nI]
.head 15 -   Set nKVBP = nmKVBP[nI]
.head 15 +   If nKVBP != GetBaseVal()
.head 16 +   If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 17 -   Call SqlPrepareAndExecute(hSql(), "
     UPDATE klpv
     SET noauto='1'
     WHERE ref=:nRefNext")
.head 14 -  Set nmRefi[nRI] = nRefNext
.head 14 -  Set nRI = nRI + 1
.head 10 -  ! Call Debug('INSERT')
.head 8 +  If nDodatok = 3
.head 9 -  Set nEOM = nIsp
.head 9 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT neom
     INTO :nEOM
     FROM klpvacc
     WHERE acc=:nAcc"))
.head 9 +  If SqlFetchNext(hSql(), nFetchRes)
.head 10 +  If nEOM = 0 or nEOM = NUMBER_Null
.head 11 -  Set nEOM = Max(nIsp, 1)
.head 9 +  If bOk
.head 10 -  Set sFile12 = Right(sFileOrig, 12)
.head 10 -  Set dDTdokkb = SalDateCurrent()
.head 10 -  Set nRefNext = 0
.head 10 -  Set nI = 0
.head 10 +  While nRefNext = 0
.head 11 -  Call Ref(nRefNext)
.head 11 -  Set nI = nI + 1
.head 11 +  If nI > 7
.head 12 -  Set nMinus = -1
.head 12 -  Set bOk = FALSE
.head 12 -  Break
.head 10 +  If bOk
.head 11 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    SELECT S_klpv.NEXTVAL
    INTO :nId
    FROM DUAL')) and SqlFetchNext(hSql(), nFetchRes)
.head 11 +  If bOk
.head 12 -  Set nKurs = IifN(nKurs=0, NUMBER_Null, nKurs)
.head 12 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    INSERT
    INTO klpv (id,ref,neom,sab,fl,nls,nd,datd,dkreddog,s,kurskonv,kv,kvkomiss,fnamekb,identkb,tipkb,
               datedokkb)
    VALUES (:nId,:nRefNext,:nEOM,:sSAB,0,:sNLSA,:sND,:dPodach,:dDejstv,:nS,:nKurs,:nKV,:nKVkomiss,:sFile12,
            :sPOND,:nDodatok,:dDTdokkb)'))
.head 12 +  If bOk
.head 13 +  If bAUTO
.head 14 -  ! проверить "бизнес-правила" и если удовлетворяются поставить
  NOAUTO=('1'-not null)
.head 14 -  ! Set bP = FALSE
.head 14 -  ! Set nI = 0
.head 14 +  ! While nI < LenArray(smUSL)
.head 15 -   Set sCOMM = smCOMM[nI]
.head 15 -   Set sUSL = smUSL[nI]
.head 15 -   Set nKVBP = nmKVBP[nI]
.head 15 +   If nKVBP != GetBaseVal()
.head 16 +   If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 17 -   Call SqlPrepareAndExecute(hSql(), "
     UPDATE klpv
     SET noauto='1'
     WHERE ref=:nRefNext")
.head 14 -  Set nmRefi[nRI] = nRefNext
.head 14 -  Set nRI = nRI + 1
.head 10 -  ! Call Debug('INSERT')
.head 8 +  Else
.head 9 -  ! Call Debug('dDejstv = ' || SalFmtFormatDateTime(dDejstv, 'dd-MM-yyyy') || PutCrLf() ||
           'dVMD = ' || SalFmtFormatDateTime(dVMD, 'dd-MM-yyyy') || PutCrLf() ||
           'dDatKS = ' || SalFmtFormatDateTime(dDatKS, 'dd-MM-yyyy') || PutCrLf() ||
           'dDTdokkb = ' || SalFmtFormatDateTime(dDTdokkb, 'dd-MM-yyyy'))
.head 9 -  Set nKursDiler = NUMBER_Null
.head 9 +  If nKurs = 0
.head 10 -  Set nFL_KURSZ = NUMBER_Null
.head 10 +  If nDodatok = 1 or nDodatok = 2 ! покупка или покупка для погашения кредита
.head 11 -  ! If SqlPrepareAndExecute(hSql(), '
   SELECT kurs_s
   INTO :nKursDiler
   FROM diler_kurs
   WHERE kv=:nKV and
         dat=(SELECT max(dat)
              FROM diler_kurs
              WHERE trunc(dat)=trunc(sysdate) and kv=:nKV)') and
   SqlFetchNext(hSql(), nFetchRes)
.head 11 +  If SqlPrepareAndExecute(hSql(), '
   SELECT kurs_s
   INTO :nKursDiler
   FROM diler_kurs
   WHERE kv=:nKV and
         dat=(SELECT max(dat)
              FROM diler_kurs
              WHERE kv=:nKV and kurs_s is not null)') and SqlFetchNext(hSql(), nFetchRes)
.head 12 -  Set nKurs = nKursDiler
.head 12 -  Set nFL_KURSZ = 1
.head 10 +  If nDodatok = 4 ! продажа
.head 11 -  ! If SqlPrepareAndExecute(hSql(), '
   SELECT kurs_b
   INTO :nKursDiler
   FROM diler_kurs
   WHERE kv=:nKV and
         dat=(SELECT max(dat)
              FROM diler_kurs
              WHERE trunc(dat)=trunc(sysdate) and kv=:nKV)') and
   SqlFetchNext(hSql(), nFetchRes)
.head 11 +  If SqlPrepareAndExecute(hSql(), '
   SELECT kurs_b
   INTO :nKursDiler
   FROM diler_kurs
   WHERE kv=:nKV and
         dat=(SELECT max(dat)
              FROM diler_kurs
              WHERE kv=:nKV and kurs_b is not null)') and SqlFetchNext(hSql(), nFetchRes)
.head 12 -  Set nKurs = nKursDiler
.head 12 -  Set nFL_KURSZ = 1
.head 9 -  Set nKurs = IifN(nKurs=0 or nKurs=NUMBER_Null, NUMBER_Null, nKurs)
.head 9 -  ! НОВЫЕ веяния в заявках по покупке (общая сумма покупки = сумма покупки + сумма комиссии)
.head 9 +  If nDodatok = 1 and nSkom != NUMBER_Null
.head 10 -  Set nS = nS + nSkom
.head 9 +  If nKursDiler = NUMBER_Null and nKurs = NUMBER_Null
.head 10 -  Set sPrwo = '*Не установлен курс банка'
.head 10 -  Set nPrwo = IifN(nDodatok=4, 16, nDodatok+13)
.head 10 -  ! Set nPrwo = 14 - (nDodatok=1) покупка
.head 10 -  ! Set nPrwo = 15 - (nDodatok=2) покупка для погашения кредита
.head 10 -  ! Set nPrwo = 16 - (nDodatok=4) продажа
.head 10 -  Set smWZ[nW] = PadL(Str(nDodatok), 2) || PadL(Str(nPrwo), 2) || PadR(sPOND, 16) || PadR(sPrwo, 160) ||
    Right(sFileOrig, 12) || PadL(Str(nNomerStr), 4) || PadR(sND, 10) || PadL(Str(nS), 16) || PadL(Str(nKV), 3)
    || SalFmtFormatDateTime(GetServerDate(), 'yyyyMMddhhhhmmss')
.head 10 -  Set nW = nW + 1
.head 9 +  Else
.head 10 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    INSERT
    INTO zayavka (nd,datt,rnk,dk,acc0,acc1,fdat,s2,kurs_z,mfop,nlsp,sos,kv2,kom,mfo0,nls0,okpop,okpo0,pid,
                  contract,dat_vmd,dat2_vmd,viza,meta,dat5_vmd,rnk_pf,priority,benefcountry,fnamekb,identkb,
                  datedokkb,tipkb,fl_kursz,country,s3,fl_pf,bank_code,bank_name)
    VALUES (:sND,:dDejstv,:nRNK,:nPokuProd,:nAcc0,:nAcc1,:dPodach,:nS,:nKurs,:sMFOPF,:sNLSPF,0,:nKV,:nKOM,
            :sMFO26,:sNLS26,:sOKPOPF,:sOKPO26,:nIdentC,:sNomKS,:dVMD,:dDatKS,0,:nCel,:sDadiPredVMD,:sRNK_PF,2,
            :nCountryBenef,:sFile12,:sPOND,:dDTdokkb,:nDodatok,:nFL_KURSZ,:nCountryBank,:nSkom,:nFL_PF,
            :sBankCode,:sBankName)'))
.head 8 -  ! Call Debug('INSERT')
.head 6 -  Set nID = nID + 1
.head 6 -  Set nCount0 = nCount0 + 1
.head 6 -  Set nCount1 = nCount1 + nS
.head 5 -  Call SalFileClose(hHan)
.head 5 +  If bOk
.head 6 -  ! обратиться (при необходимости) к функции формирования квитанции N
.head 6 +  If nW > 0
.head 7 -  Set bOk = FormFileN(smWZ)
.head 7 +  If bOk
.head 8 -  ! запузырить COMMIT, если квитанция создалась или ROLLBACK, если нет
.head 8 -  ! Call Debug('COMMIT')
.head 8 -  Call SqlCommit(hSql())
.head 8 +  If bAUTO
.head 9 -  Call SalArrayGetUpperBound(nmRefi, 1, nLA)
.head 9 -  ! Call DebugN(nLA)
.head 9 -  Set nRI = 0
.head 9 -  ! Set bB = FALSE
.head 9 +  While nRI <= nLA
.head 10 -  ! проверить "бизнес-правила" и если удовлетворяются поставить
  NOAUTO=('1'-not null)
.head 10 -  ! Set bP = FALSE
.head 10 -  Set nI = 0
.head 10 -  Set nRefNext = nmRefi[nRI]
.head 10 +  While nI <= LenArray(smUSL)
.head 11 -  Set sCOMM = smCOMM[nI]
.head 11 -  Set sUSL = smUSL[nI]
.head 11 -  Set nKVBP = nmKVBP[nI]
.head 11 +  If nKVBP != nBaseVal
.head 12 +  If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 13 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klpv
   SET noauto='1'
   WHERE ref=:nRefNext")
.head 14 -  Call SqlCommit(hSql())
.head 14 -  ! Set bB = TRUE
.head 11 -  Set nI = nI + 1
.head 10 +  ! If bB
.head 11 -   Break 
.head 10 -  Set nRI = nRI + 1
.head 8 -  Return 0
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Return 21
.head 6 +  Else
.head 7 -  ! Call Debug('COMMIT')
.head 7 -  Call SqlCommit(hSql())
.head 7 +  If bAUTO
.head 8 -  Call SalArrayGetUpperBound(nmRefi, 1, nLA)
.head 8 -  ! Call DebugN(nLA)
.head 8 -  Set nRI = 0
.head 8 -  ! Set bB = FALSE
.head 8 +  While nRI <= nLA
.head 9 -  ! проверить "бизнес-правила" и если удовлетворяются поставить
  NOAUTO=('1'-not null)
.head 9 -  ! Set bP = FALSE
.head 9 -  Set nI = 0
.head 9 -  Set nRefNext = nmRefi[nRI]
.head 9 +  While nI <= LenArray(smUSL)
.head 10 -  Set sCOMM = smCOMM[nI]
.head 10 -  Set sUSL = smUSL[nI]
.head 10 -  Set nKVBP = nmKVBP[nI]
.head 10 +  If nKVBP != nBaseVal
.head 11 +  If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 12 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klpv
   SET noauto='1'
   WHERE ref=:nRefNext")
.head 13 -  Call SqlCommit(hSql())
.head 13 -  ! Set bB = TRUE
.head 10 -  Set nI = nI + 1
.head 9 +  ! If bB
.head 10 -   Break 
.head 9 -  Set nRI = nRI + 1
.head 7 -  Return 0
.head 5 +  Else
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Return IifN(nMinus=0, 20, -1)
.head 3 +  Function: ObrFileZD
.head 4 -  Description: обработка файла ZD
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFileOrig
.head 5 -  String: sFileInput
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sNameFile
.head 5 -  ! File Handle: hHan
.head 5 -  Long String: lsTelo
.head 5 -  Number: nFileSize
.head 5 -  Date/Time: dServerDate
.head 5 -  Number: nUserId
.head 5 -  String: sCurrentDir
.head 5 -  Sql Handle: hSqlA
.head 5 -  ! String: sSqlDatabase
.head 5 -  ! Long String: lsTempDBF
.head 5 -  ! Long String: lsTempDBFplus1pdp
.head 5 -  ! String: sPDP1
.head 5 -  ! String: sPDP2
.head 5 -  ! Number: nKw
.head 5 -  ! String: sInfo1
.head 5 -  ! String: sInfo2
.head 5 -  !
.head 5 -  Number: nHo
.head 5 -  Number: nRet
.head 5 -  String: sStru
.head 4 +  Actions
.head 5 -  ! расшифрованный файл (тело) поместить в таблицу KLP_ZD - структура:
  (если проверка подписей успешна)
----------------------------------
namefile varchar2(12) - имя файла;
body long byte - сам файл (DBF);
datetime date - дата/время приема;
userin number(10) - кто принял;
otm int (1 - принят, 2 - обработан, 3 - ...);
userout number(10) - кто обработал;
.head 5 -  ! ---------------------------------
.head 5 -  Set nUserId = GetUserId()
.head 5 -  Set dServerDate = GetServerDate()
.head 5 -  ! Call Debug(sFileInput)
.head 5 -  !
.head 5 -  Call SalFileCopy(sFileInput, sTempPath || sNameFile, TRUE)
.head 5 -  !
.head 5 -  Set nFileSize = VisFileGetSize(sFileInput)
.head 5 -  ! Call DebugN(nFileSize)
.head 5 -  Set sStru = Spac(58)
.head 5 -  ! Call DebugN(Len(sStru))
.head 5 -  Set nHo = llopen(sFileInput, OF_ReadWrite)
.head 5 +  If nHo < 0
.head 6 -  Call Message('Ошибка при открытии файла ' || sFileInput || ' ...', TRUE)
.head 6 -  Return 9
.head 5 -  Set nRet = CHKFSGNB(nHo, sStru)
.head 5 -  Call lllseek(nHo, 0, 0)
.head 5 -  Set lsTelo = Spac(nFileSize)
.head 5 -  Call llread(nHo, lsTelo, nFileSize)
.head 5 -  ! Call Debug('sStru=' || sStru)
.head 5 +  If nRet != 0
.head 6 -  Call Message('Ошибка (' || Str(nRet) || ') подписи(2) файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 6 -  Call llclose(nHo)
.head 6 -  Return 8
.head 5 -  Call lllseek(nHo, nFileSize-98, 0)
.head 5 -  Call llwrite(nHo, Chr(0), 0)
.head 5 -  Set nRet = CHKFSGNB(nHo, sStru)
.head 5 +  If nRet != 0
.head 6 -  Call Message('Ошибка (' || Str(nRet) || ') подписи(1) файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 6 -  Call llclose(nHo)
.head 6 -  ! Call Debug(sFileInput || ' = stop')
.head 6 -  Return 8
.head 5 -  Call llclose(nHo)
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  ! Set nFileSize = VisFileGetSize(sFileInput)
.head 5 +  ! If not SalFileOpen(hHan, sFileInput, OF_Read)
.head 6 -  Call Message('Ошибка при открытии файла ' || sFileInput || ' ...', TRUE)
.head 6 -  Return 9
.head 5 -  ! Set lsTelo = Spac(nFileSize)
.head 5 +  ! If SalFileRead(hHan, lsTelo, nFileSize) != nFileSize
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Call Message('Ошибка при чтении файла ' || sFileInput || ' ...', TRUE)
.head 6 -  Return 9
.head 5 -  ! Call SalFileClose(hHan)
.head 5 +  ! If nFileSize < 196
.head 6 -  Call Message('Ошибка структуры файла ' || sFileInput || ' ...', TRUE)
.head 6 -  Return 6
.head 5 -  ! проверяем подписи
.head 5 -  ! Call DebugN(Len(lsTempDBF))
.head 5 -  ! Set lsTempDBF = Spac(nFileSize-196)
.head 5 -  ! Call InsertBuf(lsTempDBF, 0, lsTelo, 0, nFileSize-196)
.head 5 -  ! Set lsTempDBFplus1pdp = Spac(nFileSize-98)
.head 5 -  ! Call InsertBuf(lsTempDBFplus1pdp, 0, lsTelo, 0, nFileSize-98)
.head 5 -  ! Set sPDP1 = Spac(98)
.head 5 -  ! Call InsertBuf(sPDP1, 0, lsTelo, nFileSize-196, 98)
.head 5 -  ! Set sPDP2 = Spac(98)
.head 5 -  ! Call InsertBuf(sPDP2, 0, lsTelo, nFileSize-98, 98)
.head 5 -  ! Set nKw = CHKSIGNB(lsTempDBF, nFileSize-196, sPDP1, sInfo1)
.head 5 +  ! If nKw != 0
.head 6 -  Call Message('Ошибка (' || Str(nKw) || ') подписи(1) файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 6 -  Return 8
.head 5 -  ! Set nKw = CHKSIGNB(lsTempDBFplus1pdp, nFileSize-98, sPDP2, sInfo2)
.head 5 +  ! If nKw != 0
.head 6 -  Call Message('Ошибка (' || Str(nKw) || ') подписи(2) файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 6 -  Return 8
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  Set sNameFile = Right(sFileOrig, 12)
.head 5 -  Call SalFileCopy(sFileInput, sTempPath || sNameFile, TRUE)
.head 5 -  ! Call Debug(sTempPath || sNameFile)
.head 5 -  Call SalFileGetCurrentDirectory(sCurrentDir)
.head 5 -  Call SalFileSetCurrentDirectory(Left(sTempPath, Len(sTempPath)-1))
.head 5 -  ! Call Debug('0')
.head 5 -  ! Set sSqlDatabase = SqlDatabase
.head 5 -  Set SqlDatabase = 'dBase_Files'
.head 5 -  ! Set SqlUser = ''
.head 5 -  ! Set SqlPassword = ''
.head 5 -  ! Call SqlSetIsolationLevel(hSql(), 'RO')
.head 5 -  ! Call Debug('0x')
.head 5 -  Call SqlConnect(hSqlA)
.head 5 -  ! Call Debug('0a')
.head 5 -  Call SqlPrepareAndExecute(hSqlA, "
     SELECT SUM(sbk_sum),COUNT(*)
     FROM " || sNameFile || "
     INTO :nSummAll,:nKwoAll")
.head 5 -  ! Call Debug('0b')
.head 5 -  Call SqlFetchNext(hSqlA, nFetchRes)
.head 5 -  ! Call DebugN(nKwo)
.head 5 -  Set nSummAll = nSummAll*100
.head 5 -  ! Call Debug('0d')
.head 5 -  Call SqlDisconnect(hSqlA)
.head 5 -  Call SalFileSetCurrentDirectory(sCurrentDir)
.head 5 -  ! Call Debug('1')
.head 5 -  Call VisFileDelete(sTempPath || sNameFile)
.head 5 -  ! Call DebugN(nSummAll)
.head 5 -  ! Set SqlDatabase = sSqlDatabase
.head 5 -  ! Call Debug('2')
.head 5 -  ! поместить файл в хранилище (KLP_ZD) с флагом 1
.head 5 +  If SqlPrepareAndExecute(hSql(), "
   DELETE
   FROM klp_zd
   WHERE namefile=:sNameFile")
.head 6 +  If SqlPrepare(hSql(), "
   INSERT
   INTO klp_zd (namefile,body,datetime,userin,otm,sumdok)
   VALUES (:sNameFile,:lsTelo,:dServerDate,:nUserId,1,:nSummAll)")
.head 7 -  ! Call Debug('3')
.head 7 -  Call SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 7 -  ! Call Debug('4')
.head 7 +  If SqlExecute(hSql())
.head 8 -  ! Call Debug('5')
.head 8 -  Call SqlCommit(hSql())
.head 8 -  Return 0
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call Message('Ошибка(3) записи информации из файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 8 -  Return 9
.head 6 +  Else
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call Message('Ошибка(2) записи информации из файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 7 -  Return 9
.head 5 +  Else
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Call Message('Ошибка(1) записи информации из файла ' || Right(sFileOrig, 12) || ' ...', TRUE)
.head 6 -  Return 9
.head 3 +  Function: ObrFileM
.head 4 -  Description: обработка файла %M
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sFileOrig
.head 5 -  String: sFileInput
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sND
.head 5 -  !
.head 5 -  String: sNameFile
.head 5 -  Long String: sBuffer
.head 5 -  !
.head 5 -  String: sSab
.head 5 -  File Handle: hHan
.head 5 -  Number: nIsd
.head 5 -  Number: nID
.head 5 -  Number: nW
.head 5 -  Number: nKurs
.head 5 -  ! Date/Time: dDejstv
.head 5 -  ! Date/Time: dPodach
.head 5 -  ! Number: nIdentC
.head 5 -  ! Number: nCel
.head 5 -  ! Date/Time: dVMD
.head 5 -  ! String: sDadiPredVMD
.head 5 -  ! Number: nLenDopRekv
.head 5 -  ! Number: nPokuProd
.head 5 -  Number: nDodatok
.head 5 -  String: sPDP1
.head 5 -  String: sPDP2
.head 5 -  Number: nNomerStr
.head 5 -  ! String: sKorrProvodka
.head 5 -  String: sPrwo
.head 5 -  Number: nPrwo
.head 5 -  String: sSabC
.head 5 -  ! String: sNLS29
.head 5 -  ! String: sNLS26
.head 5 -  ! String: sMFOPF
.head 5 -  ! String: sNLSPF
.head 5 -  ! Number: nKOM
.head 5 -  ! String: sMFO26
.head 5 -  ! String: sOKPOF
.head 5 -  ! String: sOKPO26
.head 5 -  ! String: sRNK_PF
.head 5 -  Number: nFl
.head 5 -  ! Number: nAccB
.head 5 -  String: smWZ[*]
.head 5 -  ! Number: nAcc0
.head 5 -  ! Number: nAcc1
.head 5 -  ! String: sOKPOPF
.head 5 -  Number: nAcc
.head 5 -  Boolean: bOk
.head 5 -  Number: nKw
.head 5 -  String: sInfo1
.head 5 -  String: sInfo2
.head 5 -  String: sPDP198
.head 5 -  String: sPDP298
.head 5 -  ! String: sCONTRACT
.head 5 -  ! String: sKKKK
.head 5 -  ! String: sSAB
.head 5 -  ! String: sNomKS
.head 5 -  ! Date/Time: dDatKS
.head 5 -  Date/Time: dDTdokkb
.head 5 -  String: sFile12
.head 5 -  Number: nCountry
.head 5 -  ! Number: nKVB
.head 5 -  ! Number: nKVA
.head 5 -  !
.head 5 -  String: sReceiverH_tag59
.head 5 -  String: sBankReceiverH_tag57a
.head 5 -  String: sBankPosrednikH_tag56
.head 5 -  String: sNaznH_tag70
.head 5 -  Number: nDrugieDannieH_tag72
.head 5 -  String: sReceiver_tag59
.head 5 -  String: sBankReceiver_tag57a
.head 5 -  String: sBankPosrednik_tag56
.head 5 -  String: sNazn_tag70
.head 5 -  Number: nKodOp
.head 5 -  Number: nOURBENSHA
.head 5 -  Number: nContract
.head 5 -  !
.head 5 -  String: sOKPOA
.head 5 -  Date/Time: dDatDok
.head 5 -  String: sNLSVpog
.head 5 -  String: sNomKredDog
.head 5 -  Date/Time: dKredDog
.head 5 -  Number: nKVkomiss
.head 5 -  Number: nAccpog
.head 5 -  !
.head 5 -  Number: nId
.head 5 -  Number: nEOM
.head 5 -  Number: nIsp
.head 5 -  String: sIsp
.head 5 -  ! потом закомментарить
.head 5 -  ! File Handle: hF1
.head 5 -  !
.head 5 -  String: sNDw
.head 5 -  String: sNLSw
.head 5 -  Number: nKVw
.head 5 -  Number: nSw
.head 5 -  Date/Time: dDATDw
.head 5 -  !
.head 5 -  Number: nmRefi[*]
.head 5 -  Number: nRI
.head 5 -  Number: nLA
.head 5 -  ! Boolean: bB
.head 5 -  Number: nBaseVal
.head 5 -  !
.head 5 -  Number: nMinus
.head 5 -  Number: nI
.head 4 +  Actions
.head 5 -  Set nBaseVal = GetBaseVal()
.head 5 +  If not SalFileOpen(hHan, sFileInput, OF_Read)
.head 6 -  Return 6
.head 5 +  If SalFileRead(hHan, sBuffer, 72) != 72
!  llread(nHan, sBuffer, 72) != 72
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 6
.head 5 -  Set sNameFile = Left(sBuffer, 12)
.head 5 -  Set sSab = SalStrUpperX(Subs(sBuffer, 3, 4))
.head 5 -  Set nIsd = Val(SalStrTrimX(Subs(sBuffer, 27, 4)))
.head 5 +  If sNameFile != Right(sFileOrig, 12)
.head 6 -  Call SalFileClose(hHan)
.head 6 -  Return 5
.head 5 -  Set nID = 0
.head 5 -  Set nW = 0
.head 5 -  Call SalArraySetUpperBound(smWZ, 1, -1)
.head 5 -  Set nCount0 = 0
.head 5 -  Set nCount1 = 0
.head 5 -  Set nCount2 = 0
.head 5 -  Set sSAB = Subs(Right(sFileOrig, 12), 3, 4)
.head 5 -  Set bOk = TRUE
.head 5 -  Call SalArraySetUpperBound(nmRefi, 1, -1)
.head 5 -  Set nRI = 0
.head 5 -  Set nMinus = 0
.head 5 +  While nID < nIsd
.head 6 +  If SalFileRead(hHan, sBuffer, 1724) != 1724
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 6
.head 6 +  If Subs(sBuffer, 1, 1724) != sBuffer
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 6
.head 6 -  Set nNomerStr = Val(Subs(sBuffer, 1719, 4))
.head 6 -  !
.head 6 -  ! Debug-и
.head 6 -  !
.head 6 -  ! Call TOFILE('d:\\otl.txt', sBuffer)
.head 6 -  ! Call Debug('Subs(sBuffer, 1719, 4) = ' || Subs(sBuffer, 1719, 4))
.head 6 -  ! Call Debug('nNomerStr = ' || Str(nNomerStr) || PutCrLf() || 'nID+1 = ' || Str(nID+1))
.head 6 -  !
.head 6 +  If nNomerStr != nID+1
.head 7 -  Call SalFileClose(hHan)
.head 7 -  Return 1
.head 6 -  Set sNLSA = SalStrTrimX(Left(sBuffer, 14))
.head 6 -  Set sOKPOA = SalStrTrimX(Subs(sBuffer, 15, 14))
.head 6 -  Set sND = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 29, 10)))
.head 6 -  Set dDatDok = SalDateConstruct(Val(Subs(sBuffer, 39, 4)), Val(Subs(sBuffer, 43, 2)), Val(
    Subs(sBuffer, 45, 2)), 0, 0, 0)
.head 6 -  Set nS = Val(Subs(sBuffer, 47, 16))
.head 6 -  Set nKV = Val(Subs(sBuffer, 63, 3))
.head 6 -  Set sNLSVpog = SalStrTrimX(Subs(sBuffer, 66, 14))
.head 6 -  Set sNomKredDog = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 80, 10)))
.head 6 -  Set dKredDog = IifD(Val(Subs(sBuffer, 90, 8))=0, DATETIME_Null, SalDateConstruct(Val(Subs(sBuffer, 90, 4)), Val(
    Subs(sBuffer, 94, 2)), Val(Subs(sBuffer, 96, 2)), 0, 0, 0))
.head 6 -  Set nKVkomiss = Val(Subs(sBuffer, 98, 3))
.head 6 -  Set sReceiverH_tag59 = Subs(sBuffer, 101, 350)
.head 6 -  ! Set sReceiver_tag59 = Spac(175)
.head 6 -  ! Call llstr2str(SalStrUpperX(sReceiverH_tag59), sReceiver_tag59, 350)
.head 6 -  ! Set sReceiver_tag59 = StrDosToWinX(SalStrTrimX(sReceiver_tag59))
.head 6 -  Set sReceiver_tag59 = StrDosToWinX(SalStrTrimX(sReceiverH_tag59))
.head 6 -  Set sBankReceiverH_tag57a = Subs(sBuffer, 451, 280)
.head 6 -  ! Set sBankReceiver_tag57a = Spac(140)
.head 6 -  ! Call llstr2str(SalStrUpperX(sBankReceiverH_tag57a), sBankReceiver_tag57a, 280)
.head 6 -  ! Set sBankReceiver_tag57a = StrDosToWinX(SalStrTrimX(sBankReceiver_tag57a))
.head 6 -  Set sBankReceiver_tag57a = StrDosToWinX(SalStrTrimX(sBankReceiverH_tag57a))
.head 6 -  Set sBankPosrednikH_tag56 = Subs(sBuffer, 731, 280)
.head 6 -  ! Set sBankPosrednik_tag56 = Spac(140)
.head 6 -  ! Call llstr2str(SalStrUpperX(sBankPosrednikH_tag56), sBankPosrednik_tag56, 280)
.head 6 -  ! Set sBankPosrednik_tag56 = StrDosToWinX(SalStrTrimX(sBankPosrednik_tag56))
.head 6 -  Set sBankPosrednik_tag56 = StrDosToWinX(SalStrTrimX(sBankPosrednikH_tag56))
.head 6 -  Set sNaznH_tag70 = Subs(sBuffer, 1011, 280)
.head 6 -  ! Set sNazn_tag70 = Spac(140)
.head 6 -  ! Call llstr2str(SalStrUpperX(sNaznH_tag70), sNazn_tag70, 280)
.head 6 -  ! Set sNazn_tag70 = StrDosToWinX(SalStrTrimX(sNazn_tag70))
.head 6 -  Set sNazn_tag70 = StrDosToWinX(SalStrTrimX(sNaznH_tag70))
.head 6 -  Set nDrugieDannieH_tag72 = Val(Subs(sBuffer, 1291, 1))
.head 6 -  Set nCountry = Val(Subs(sBuffer, 1292, 3))
.head 6 -  Set nKodOp = Val(Subs(sBuffer, 1295, 7))
.head 6 -  Set nOURBENSHA = Val(Subs(sBuffer, 1302, 1))
.head 6 -  Set nContract = Val(Subs(sBuffer, 1303, 8))
.head 6 -  Set sPOND = SalStrTrimX(Subs(sBuffer, 1311, 16))
.head 6 -  Set sPDP1 = Subs(sBuffer, 1327, 196)
.head 6 -  Set sPDP2 = Subs(sBuffer, 1523, 196)
.head 6 -  Set nDodatok = IifN(nCountry>0, 6, 7)
.head 6 -  !
.head 6 -  ! Здесь обработать строку Платіжного доручення в іноземній валюті
.head 6 -  ! контролировать 1. принадлежность счёта sNLSA клиенту
		 2. наличие счёта sNLSVpog в банке (если nDodatok=6)
.head 6 -  ! Проверка всех реквизитов документа на допустимость
.head 6 -  Set sPrwo = ''
.head 6 -  Set nPrwo = 0
.head 6 -  ! Проверка на наличие счёта в SALDO
.head 6 -  Set nAcc = -1
.head 6 +  If nPrwo = 0 
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSA, nKV, nAcc)")
.head 7 +  If nAcc < 0
.head 8 -  Set sPrwo = '*Ошибочен счёт А'
.head 8 -  Set nPrwo = 6
.head 6 -  ! проверка на платёж с "чужого" счёта
.head 6 +  If nPrwo = 0 
.head 7 -  Set nFl = 0
.head 7 -  ! Call Debug('nAcc = ' || Str(nAcc) || ', sSAB = ' || sSAB)
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_alien(nAcc, sSAB, nFl)")
.head 7 +  If nFl = 0
.head 8 -  Set sPrwo = '*Ошибочен счёт А (чужой)'
.head 8 -  Set nPrwo = 7
.head 6 +  If nPrwo = 0 and (nS = 0 or nS >= SalNumberPower(10, 14))
.head 7 -  Set sPrwo = '*Ошибочна сумма в заявке'
.head 7 -  Set nPrwo = 10
.head 6 +  If nPrwo = 0 and nDodatok = 7
.head 7 -  Set nAccpog = -1
.head 7 -  Call SqlPLSQLCommand(hSql(), "verify_acc(sNLSVpog, nKV, nAccpog)")
.head 7 +  If nAccpog < 0
.head 8 -  Set sPrwo = '*Ошибочен счёт погашения'
.head 8 -  Set nPrwo = 9
.head 7 +  ! Else
.head 8 -   Set nFl = 0
.head 8 -   Call SqlPLSQLCommand(hSql(), "verify_alien(nAccpog, sSAB, nFl)")
.head 8 +   If nFl = 0
.head 9 -   Set sPrwo = '*Ошибочен счёт погашения (чужой)'
.head 9 -   Set nPrwo = 19
.head 6 -  ! сделать проверку подписей
.head 6 -  ! отладка
.head 6 -  ! Call Debug('sPDP1 = ' || sPDP1 || PutCrLf() || 'sPDP2 = ' || sPDP2)
.head 6 -  ! Call SalFileOpen(hF1, 'c:\\tmp\\debug.txt', OF_Create | OF_ReadWrite)
.head 6 -  ! Call SalFileWrite(hF1, Left(sBuffer, 1322), 1322)
.head 6 -  ! Call SalFileClose(hF1)
.head 6 -  ! Call Debug('Left(sBuffer, 1322) = ' || Left(sBuffer, 1322))
.head 6 -  ! отладка
.head 6 +  If nPrwo = 0
.head 7 -  Set sPDP198 = Spac(98)
.head 7 -  Call llstr2str(SalStrUpperX(sPDP1), sPDP198, 196)
.head 7 -  Set nKw = CHKSIGNB(Left(sBuffer, 1326), 1326, sPDP198, sInfo1)
.head 7 +  If nKw != 0
.head 8 -  Set sPrwo = '*Ошибка подписи 1 (' || Str(nKw) || ')'
.head 8 -  Set nPrwo = 12
.head 7 +  Else
.head 8 -  Set sPDP298 = Spac(98)
.head 8 -  Call llstr2str(SalStrUpperX(sPDP2), sPDP298, 196)
.head 8 -  Set nKw = CHKSIGNB(Left(sBuffer, 1326), 1326, sPDP298, sInfo2)
.head 8 +  If nKw != 0
.head 9 -  Set sPrwo = '*Ошибка подписи 2 (' || Str(nKw) || ')'
.head 9 -  Set nPrwo = 12
.head 6 +  If nPrwo = 0
.head 7 -  ! лазим по KLPV
.head 7 +  If SqlPrepareAndExecute(hSql(), '
   SELECT nd,nls,kv,datd,s/100
   INTO :sNDw,:sNLSw,:nKVw,:dDATDw,:nSw
   FROM klpv
   WHERE fl=8 and identkb=:sPOND') and SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set sPrwo = '*Дубль с док.N ' || SalStrTrimX(sNDw) || ' от ' || SalFmtFormatDateTime(dDATDw, 'dd/MM/yyyy') ||
    ' со счёта ' || SalStrTrimX(sNLSw) || '(' || Str(nKVw) || ') на сумму ' || Str(nSw)
.head 8 -  Set nPrwo = 52
.head 6 +  If nPrwo > 0
.head 7 -  ! добавить в массив "плохих" заявок
.head 7 -  ! Set smWZ[nW] = PadL(Str(nDodatok), 2) || PadL(Str(nPrwo), 2) || PadR(sPOND, 16) || PadR(sPrwo, 160) ||
    Right(sFileOrig, 12) || PadL(Str(nNomerStr), 4)
.head 7 -  Set smWZ[nW] = PadL(Str(nDodatok), 2) || PadL(Str(nPrwo), 2) || PadR(sPOND, 16) || PadR(sPrwo, 160) ||
    Right(sFileOrig, 12) || PadL(Str(nNomerStr), 4) || PadR(sND, 10) || PadL(Str(nS), 16) || PadL(Str(nKV), 3) ||
    SalFmtFormatDateTime(GetServerDate(), 'yyyyMMddhhhhmmss')
.head 7 -  Set nW = nW + 1
.head 6 +  Else
.head 7 -  ! сделать INSERT в таблицу KLPV (новая таблица !!!)
.head 7 -  If SqlPrepareAndExecute(hSql(), T("
   SELECT isp
   INTO :nIsp
   FROM accounts
   WHERE acc=:nAcc")) and SqlFetchNext(hSql(), nFetchRes)
.head 7 +  Else
.head 8 -  Call SalUseRegistry(FALSE, '')
.head 8 -  Call SalGetProfileString("ElektroKlients", "OperForAccNotFound", '0', sIsp, GetIniFileName())
.head 8 -  Set nIsp = Max(1, SalNumberRound(Val(sIsp)))
.head 7 -  Set nEOM = nIsp
.head 7 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT neom
     INTO :nEOM
     FROM klpvacc
     WHERE acc=:nAcc"))
.head 7 +  If SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If nEOM = 0 or nEOM = NUMBER_Null
.head 9 -  Set nEOM = Max(nIsp, 1)
.head 7 +  If bOk
.head 8 -  Set sFile12 = Right(sFileOrig, 12)
.head 8 -  Set dDTdokkb = SalDateCurrent()
.head 8 -  Set nRefNext = 0
.head 8 -  Set nI = 0
.head 8 +  While nRefNext = 0
.head 9 -  Call Ref(nRefNext)
.head 9 -  Set nI = nI + 1
.head 9 +  If nI > 7
.head 10 -  Set nMinus = -1
.head 10 -  Set bOk = FALSE
.head 10 -  Break
.head 8 +  If bOk
.head 9 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    SELECT S_klpv.NEXTVAL
    INTO :nId
    FROM DUAL')) and SqlFetchNext(hSql(), nFetchRes)
.head 9 +  If bOk
.head 10 -  ! Call Debug(SalFmtFormatDateTime(dDatDok, 'dd-MM-yyyy'))
.head 10 -  ! Call Debug(SalFmtFormatDateTime(dKredDog, 'dd-MM-yyyy'))
.head 10 -  ! Call Debug(SalFmtFormatDateTime(dDTdokkb, 'dd-MM-yyyy'))
.head 10 -  Set bOk = SqlPrepareAndExecute(hSql(), T('
    INSERT
    INTO klpv (id,ref,neom,sab,nls,okpo,nd,datd,s,kv,nlspog,nkreddog,dkreddog,kvkomiss,tag59,tag57a,tag56,
               tag70,tag72N,country,kodop,ourbensha,idcontract,fnamekb,identkb,tipkb,datedokkb,fl)
    VALUES (:nId,:nRefNext,:nEOM,:sSAB,:sNLSA,:sOKPOA,:sND,:dDatDok,:nS,:nKV,:sNLSVpog,:sNomKredDog,:dKredDog,
            :nKVkomiss,:sReceiver_tag59,:sBankReceiver_tag57a,:sBankPosrednik_tag56,:sNazn_tag70,
            :nDrugieDannieH_tag72,:nCountry,:nKodOp,:nOURBENSHA,:nContract,:sFile12,:sPOND,:nDodatok,:dDTdokkb,
            0)'))
.head 10 +  If bOk
.head 11 +  If bAUTO
.head 12 -  ! проверить "бизнес-правила" и если удовлетворяются поставить NOAUTO=('1'-not null)
.head 12 -  ! Set bP = FALSE
.head 12 -  ! Set nI = 0
.head 12 +  ! While nI < LenArray(smUSL)
.head 13 -   Set sCOMM = smCOMM[nI]
.head 13 -   Set sUSL = smUSL[nI]
.head 13 -   Set nKVBP = nmKVBP[nI]
.head 13 +   If nKVBP != GetBaseVal()
.head 14 +   If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 15 -   Call SqlPrepareAndExecute(hSql(), "
     UPDATE klpv
     SET noauto='1'
     WHERE ref=:nRefNext")
.head 12 -  Set nmRefi[nRI] = nRefNext
.head 12 -  Set nRI = nRI + 1
.head 8 -  ! Call Debug('INSERT')
.head 6 -  Set nID = nID + 1
.head 6 -  Set nCount0 = nCount0 + 1
.head 6 -  Set nCount1 = nCount1 + nS
.head 5 -  Call SalFileClose(hHan)
.head 5 +  If bOk
.head 6 -  ! обратиться (при необходимости) к функции формирования квитанции N
.head 6 +  If nW > 0
.head 7 -  Set bOk = FormFileN(smWZ)
.head 7 +  If bOk
.head 8 -  ! запузырить COMMIT, если квитанция создалась или ROLLBACK, если нет
.head 8 -  ! Call Debug('COMMIT')
.head 8 -  Call SqlCommit(hSql())
.head 8 +  If bAUTO
.head 9 -  Call SalArrayGetUpperBound(nmRefi, 1, nLA)
.head 9 -  ! Call DebugN(nLA)
.head 9 -  Set nRI = 0
.head 9 -  ! Set bB = FALSE
.head 9 +  While nRI <= nLA
.head 10 -  ! проверить "бизнес-правила" и если удовлетворяются поставить NOAUTO=('1'-not null)
.head 10 -  ! Set bP = FALSE
.head 10 -  Set nI = 0
.head 10 -  Set nRefNext = nmRefi[nRI]
.head 10 +  While nI <= LenArray(smUSL)
.head 11 -  Set sCOMM = smCOMM[nI]
.head 11 -  Set sUSL = smUSL[nI]
.head 11 -  Set nKVBP = nmKVBP[nI]
.head 11 +  If nKVBP != nBaseVal
.head 12 +  If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 13 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klpv
   SET noauto='1'
   WHERE ref=:nRefNext")
.head 14 -  Call SqlCommit(hSql())
.head 14 -  ! Set bB = TRUE
.head 11 -  Set nI = nI + 1
.head 10 +  ! If bB
.head 11 -   Break 
.head 10 -  Set nRI = nRI + 1
.head 8 -  Return 0
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Return 21
.head 6 +  Else
.head 7 -  ! Call Debug('COMMIT')
.head 7 -  Call SqlCommit(hSql())
.head 7 +  If bAUTO
.head 8 -  Call SalArrayGetUpperBound(nmRefi, 1, nLA)
.head 8 -  ! Call DebugN(nLA)
.head 8 -  Set nRI = 0
.head 8 -  ! Set bB = FALSE
.head 8 +  While nRI <= nLA
.head 9 -  ! проверить "бизнес-правила" и если удовлетворяются поставить NOAUTO=('1'-not null)
.head 9 -  ! Set bP = FALSE
.head 9 -  Set nI = 0
.head 9 -  Set nRefNext = nmRefi[nRI]
.head 9 +  While nI <= LenArray(smUSL)
.head 10 -  Set sCOMM = smCOMM[nI]
.head 10 -  Set sUSL = smUSL[nI]
.head 10 -  Set nKVBP = nmKVBP[nI]
.head 10 +  If nKVBP != nBaseVal
.head 11 +  If BP('
   SELECT k.ref
   FROM ' || sCOMM || '
   WHERE k.ref=:nRefNext and ' || sUSL) = nRefNext
.head 12 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE klpv
   SET noauto='1'
   WHERE ref=:nRefNext")
.head 13 -  Call SqlCommit(hSql())
.head 13 -  ! Set bB = TRUE
.head 10 -  Set nI = nI + 1
.head 9 +  ! If bB
.head 10 -   Break 
.head 9 -  Set nRI = nRI + 1
.head 7 -  Return 0
.head 5 +  Else
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Return IifN(nMinus=0, 20, -1)
.head 3 +  Function: OtborU
.head 4 -  Description: отбор информации по изменениям участников СЄП "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sNBW
.head 5 -  String: smNBW[*]
.head 5 -  String: sMFO
.head 5 -  String: smMFO[*]
.head 5 -  String: sSEP
.head 5 -  String: smSEP[*]
.head 5 -  String: sOP
.head 5 -  String: smOP[*]
.head 5 -  String: sRowid
.head 5 -  !
.head 5 -  Number: nIndex
.head 4 +  Actions
.head 5 +  If cbU
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к формированию изменений списка участников СЭП...', TRUE)
.head 6 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT nbw,mfo,sab,op,rowid
   INTO :sNBW,:sMFO,:sSEP,:sOP,:sRowid
   FROM klpu"))
.head 7 -  Call SalWaitCursor(FALSE)
.head 7 -  Set nIndex = 0
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Call Message('Формирование изменений списка участников СЭП (' || Str(nIndex) || ')', TRUE)
.head 8 -  Set smNBW[nIndex] = SalStrTrimX(sNBW)
.head 8 -  Set smMFO[nIndex] = SalStrTrimX(sMFO)
.head 8 -  Set smSEP[nIndex] = sSEP
.head 8 -  Set smOP[nIndex] = sOP
.head 8 -  Set nIndex = nIndex + 1
.head 8 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE klpu
     SET otm='1'
     WHERE rowid=:sRowid"))
.head 7 +  If nIndex > 0
.head 8 -  Set nIU = 0
.head 8 -  Set bU = TRUE
.head 8 +  While nIU <= nKLI
.head 9 -  Set sSAB = smSAB[nIU]
.head 9 -  Set nRNK = nmRNK[nIU]
.head 9 -  Set sNMK = smNMK[nIU]
.head 9 -  Set sOKPO = smOKPO[nIU]
.head 9 -  Set sTIMES = smTIMES[nIU]
.head 9 -  Call Message('Формирование изменений списка участников СЭП для ' || sSAB, TRUE)
.head 9 +  If not FormFileU(sSAB, smNBW, smMFO, smSEP, smOP)
.head 10 -  Set bU = FALSE
.head 9 -  Set nIU = nIU + 1
.head 8 +  If bU
.head 9 -  Call SqlCommit(hSql())
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpu
     WHERE otm='1'"))
.head 9 -  Call SqlCommit(hSqlAux())
.head 8 +  Else
.head 9 -  Call SqlRollback(hSqlAux())
.head 9 -  Call SqlRollback(hSql())
.head 7 +  Else
.head 8 -  Call Message('Изменений в списке участников СЭП нет', TRUE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 6 -  Call Message('', FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborB
.head 4 -  Description: отбор списка загранбанков "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sBIC
.head 5 -  String: smBIC[*]
.head 5 -  String: sNZB
.head 5 -  String: smNZB[*]
.head 5 -  String: sCITY
.head 5 -  String: smCITY[*]
.head 5 -  String: sCOUNTRY
.head 5 -  String: smCOUNTRY[*]
.head 5 -  String: sAction
.head 5 -  String: smAction[*]
.head 5 -  Date/Time: dDadaupd
.head 5 -  Date/Time: dmDadaupd[*]
.head 5 -  Number: nIdupd
.head 5 -  Number: nIB
.head 5 -  Boolean: bB
.head 5 -  !
.head 5 -  Number: nIndex
.head 5 -  Date/Time: dPodklu
.head 4 +  Actions
.head 5 +  If cbB
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к формированию изменений списка загранбанков ...', TRUE)
.head 6 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT idupd,bic,name,city,country,action,datupd
   INTO :nIdupd,:sBIC,:sNZB,:sCITY,:sCOUNTRY,:sAction,:dDadaupd
   FROM sw_banks_upd
   WHERE otmkb is null and rownum<=4096"))
.head 7 -  Call SalWaitCursor(FALSE)
.head 7 -  Set nIndex = 0
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If Mod(nIndex, 1000) = 0
.head 9 -  Call Message('Формирование изменений списка загранбанков (' || Str(nIndex) || ')', TRUE)
.head 8 -  Set smBIC[nIndex] = SalStrTrimX(sBIC)
.head 8 -  Set smNZB[nIndex] = SalStrTrimX(sNZB)
.head 8 -  Set smCITY[nIndex] = SalStrTrimX(sCITY)
.head 8 -  Set smCOUNTRY[nIndex] = SalStrTrimX(sCOUNTRY)
.head 8 -  Set smAction[nIndex] = sAction
.head 8 -  Set dmDadaupd[nIndex] = dDadaupd
.head 8 -  Set nIndex = nIndex + 1
.head 8 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE sw_banks_upd
     SET otmkb=1
     WHERE idupd=:nIdupd"))
.head 7 +  If nIndex > 0
.head 8 -  Set nIB = 0
.head 8 -  Set bB = TRUE
.head 8 +  While nIB <= nKLI
.head 9 -  Set sSAB = smSAB[nIB]
.head 9 -  Set nRNK = nmRNK[nIB]
.head 9 -  Set sNMK = smNMK[nIB]
.head 9 -  Set sOKPO = smOKPO[nIB]
.head 9 -  Set sTIMES = smTIMES[nIB]
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT dpodklu
   INTO :dPodklu
   FROM klpv_v
   WHERE rnk=:nRNK"))
.head 10 +  If SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Call Message('Формирование изменений списка загранбанков для ' || sSAB, TRUE)
.head 11 +  If not FormFileB(sSAB, smBIC, smNZB, smCITY, smCOUNTRY, smAction, dmDadaupd, dPodklu)
.head 12 -  Set bB = FALSE
.head 11 +  Else
.head 12 -  Call Message('Cформирован список загранбанков для ' || sSAB, TRUE)
.head 9 -  Set nIB = nIB + 1
.head 8 +  If bB
.head 9 -  Call SqlCommit(hSql())
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM sw_banks_upd
     WHERE otmkb=1"))
.head 9 -  Call SqlCommit(hSqlAux())
.head 8 +  Else
.head 9 -  Call SqlRollback(hSqlAux())
.head 9 -  Call SqlRollback(hSql())
.head 7 +  Else
.head 8 -  Call Message('Изменений в списке загранбанков НЕТ', TRUE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 6 -  Call Message('', FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborKV
.head 4 -  Description: отбор курсов валют "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSab
.head 5 -  !
.head 5 -  Number: nKV
.head 5 -  String: sSKV
.head 5 -  String: sNAME
.head 5 -  Number: nBSUM
.head 5 -  Date/Time: dVDATE
.head 5 -  Date/Time: dVDATEP
.head 5 -  Number: nRATE_O
.head 5 -  Number: nRATE_OP
.head 5 -  Number: nRATE_B
.head 5 -  Number: nRATE_S
.head 5 -  Number: nRATE_BP
.head 5 -  Number: nRATE_SP
.head 5 -  Number: nmKV[*]
.head 5 -  String: smSKV[*]
.head 5 -  String: smNAME[*]
.head 5 -  Number: nmBSUM[*]
.head 5 -  Date/Time: dmVDATE[*]
.head 5 -  Date/Time: dmVDATEP[*]
.head 5 -  Number: nmRATE_O[*]
.head 5 -  Number: nmRATE_OP[*]
.head 5 -  Number: nmRATE_B[*]
.head 5 -  Number: nmRATE_S[*]
.head 5 -  Number: nmRATE_BP[*]
.head 5 -  Number: nmRATE_SP[*]
.head 5 -  !
.head 5 -  Number: nBaseVal
.head 5 -  Number: nIndexKV
.head 5 -  Boolean: b1
.head 5 -  !
.head 5 -  Number: nRNKtemp
.head 4 +  Actions
.head 5 +  If cbKV
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору курсов валют...', TRUE)
.head 6 -  Set nBaseVal = GetBaseVal()
.head 6 +  If SalStrUpperX(SalStrTrimX(GetDBMS())) = "ORACLE"
.head 7 -  Set b1 = SqlPLSQLCommand(hSql(), 'val_ku(dBankDate, nBaseVal)')
.head 6 +  Else
.head 7 -  Call SqlRetrieve(hSql(), "informix.val_ku", ":dBankDate", ":nBaseVal")
.head 7 -  Call SqlExecute(hSql())
.head 7 -  Set b1 = SqlFetchNext(hSql(), nFetchRes)
.head 6 +  If b1 and SqlPrepareAndExecute(hSql(), T("
   SELECT kv,lcv,name,bsum,vdate1,vdate2,rateo1,rateo2,rateb1,rates1,rateb2,rates2
   INTO :nKV,:sSKV,:sNAME,:nBSUM,:dVDATE,:dVDATEP,:nRATE_O,:nRATE_OP,:nRATE_B,:nRATE_S,:nRATE_BP,:nRATE_SP
   FROM tmp_valk
   ORDER BY 1"))
.head 7 -  Set nIndexKV = 0
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If nRATE_B = NUMBER_Null
.head 9 -  Set nRATE_B = 0
.head 8 +  If nRATE_BP = NUMBER_Null
.head 9 -  Set nRATE_BP = 0
.head 8 +  If nRATE_S = NUMBER_Null
.head 9 -  Set nRATE_S = 0
.head 8 +  If nRATE_SP = NUMBER_Null
.head 9 -  Set nRATE_SP = 0
.head 8 -  Set nmKV[nIndexKV] = nKV
.head 8 -  Set smSKV[nIndexKV] = sSKV
.head 8 -  Set smNAME[nIndexKV] = sNAME
.head 8 -  Set nmBSUM[nIndexKV] = nBSUM
.head 8 -  Set dmVDATE[nIndexKV] = dVDATE
.head 8 -  Set dmVDATEP[nIndexKV] = dVDATEP
.head 8 -  Set nmRATE_O[nIndexKV] = nRATE_O
.head 8 -  Set nmRATE_OP[nIndexKV] = nRATE_OP
.head 8 -  Set nmRATE_B[nIndexKV] = nRATE_B
.head 8 -  Set nmRATE_S[nIndexKV] = nRATE_S
.head 8 -  Set nmRATE_BP[nIndexKV] = nRATE_BP
.head 8 -  Set nmRATE_SP[nIndexKV] = nRATE_SP
.head 8 -  Set nIndexKV = nIndexKV + 1
.head 7 +  If nIndexKV > 0
.head 8 -  Set nIV = 0
.head 8 +  While nIV <= nKLI
.head 9 -  Set sSAB = smSAB[nIV]
.head 9 -  Set nRNK = nmRNK[nIV]
.head 9 -  Set sNMK = smNMK[nIV]
.head 9 -  Set sOKPO = smOKPO[nIV]
.head 9 -  Set sTIMES = smTIMES[nIV]
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT rnk
   INTO :nRNKtemp
   FROM klp_kv
   WHERE rnk=:nRNK"))
.head 10 +  If SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Call Message('Формирование справочника курсов валют для ' || sSAB, TRUE)
.head 11 +  If FormFileD(sSAB, nmKV, smSKV, smNAME, nmBSUM, dmVDATE, dmVDATEP, nmRATE_O, nmRATE_OP, nmRATE_B, nmRATE_S,
   nmRATE_BP, nmRATE_SP, cbKvAll)
.head 12 -  Call Message('Cформирован справочник курсов валют для ' || sSAB, TRUE)
.head 9 -  Set nIV = nIV + 1
.head 7 -  Call Message('', FALSE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborNN
.head 4 -  Description: отбор квитанций по валютным документам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSAB
.head 5 -  ! String: sMFOA
.head 5 -  ! String: smMFOA[*]
.head 5 -  ! String: sNLSA
.head 5 -  ! String: smNLSA[*]
.head 5 -  ! String: sMFOB
.head 5 -  ! String: smMFOB[*]
.head 5 -  ! String: sNLSB
.head 5 -  ! String: smNLSB[*]
.head 5 -  ! String: sNAMB
.head 5 -  ! String: smNAMB[*]
.head 5 -  Number: nS
.head 5 -  ! Number: nmS[*]
.head 5 -  String: sND
.head 5 -  ! String: smND[*]
.head 5 -  ! String: sNAZN
.head 5 -  ! String: smNAZN[*]
.head 5 -  ! String: sPOND
.head 5 -  ! String: smPOND[*]
.head 5 -  ! String: sNFIA
.head 5 -  ! String: smNFIA[*]
.head 5 -  ! String: sRowid
.head 5 -  !
.head 5 -  Number: nIndex
.head 5 -  !
.head 5 -  ! String: sNIS
.head 5 -  String: smNIS[*]
.head 5 -  Number: nId
.head 5 -  Number: nTipKB
.head 5 -  Number: nKod
.head 5 -  String: sTextBack
.head 5 -  String: sIdentKB
.head 5 -  String: sFnameKB
.head 5 -  !
.head 5 -  Number: nKV
.head 4 +  Actions
.head 5 +  If cbNN
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору квитанций по валютным документам...', TRUE)
.head 6 -  Set nIO = 0
.head 6 +  While nIO <= nKLI
.head 7 -  Set sSAB = smSAB[nIO]
.head 7 -  Set nRNK = nmRNK[nIO]
.head 7 -  Set sNMK = smNMK[nIO]
.head 7 -  Set sOKPO = smOKPO[nIO]
.head 7 -  Set sTIMES = smTIMES[nIO]
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT id,tipkb,kod,textback,identkb,fnamekb
   INTO :nId,:nTipKB,:nKod,:sTextBack,:sIdentKB,:sFnameKB
   FROM zay_baop
   WHERE substr(fnamekb,3,4)=:sSAB and otm is null
   ORDER by 1"))
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(smNIS, 1, -1)
.head 8 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set sND = ''
.head 9 -  Set nS = 0
.head 9 -  Set nKV = 0
.head 9 +  If nTipKB = 3 or nTipKB = 6 or nTipKB = 3
.head 10 +  If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT nd,s,kv
   INTO :sND,:nS,:nKV
   FROM klpv
   WHERE sab=:sSAB and fnamekb=:sFnameKB and identkb=:sIdentKB"))
.head 11 -  Call SqlFetchNext(hSqlAux2(), nFetchRes)
.head 9 +  Else
.head 10 +  If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT nd,s2,kv2
   INTO :sND,:nS,:nKV
   FROM zayavka
   WHERE rnk=:nRNK and fnamekb is not null and identkb is not null and fnamekb=:sFnameKB and
         identkb=:sIdentKB"))
.head 11 -  Call SqlFetchNext(hSqlAux2(), nFetchRes)
.head 9 -  ! Set smNIS[nIndex] = PadL(Str(nTipKB), 2) || PadL(Str(nKod), 2) || PadR(sIdentKB, 16) || PadR(sTextBack, 160)
    || Right(sFnameKB, 12) || PadL(Str(nIndex+1), 4)
.head 9 -  Set smNIS[nIndex] = PadL(Str(nTipKB), 2) || PadL(Str(nKod), 2) || PadR(sIdentKB, 16) || PadR(sTextBack, 160) ||
    Right(sFnameKB, 12) || PadL(Str(nIndex+1), 4) || PadR(sND, 10) || PadL(Str(nS), 16) || PadL(Str(nKV), 3) ||
    SalFmtFormatDateTime(GetServerDate(), 'yyyyMMddhhhhmmss')
.head 9 -  Set nIndex = nIndex + 1
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE zay_baop
     SET otm=1
     WHERE id=:nId"))
.head 8 +  If nIndex > 0
.head 9 -  Call Message('Отбор квитанций по валютным документам для ' || sSAB || ' (' || Str(nIndex) || ')', TRUE)
.head 9 +  If not FormFileN(smNIS)
.head 10 -  Call SqlRollback(hSqlAux())
.head 10 -  Call Message('', FALSE)
.head 10 -  Return FALSE
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM zay_baop
     WHERE otm=1 and substr(fnamekb,3,4)=:sSAB"))
.head 9 -  Call SqlCommit(hSqlAux())
.head 7 -  Set nIO = nIO + 1
.head 6 -  Call Message('', FALSE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborOO
.head 4 -  Description: отбор документов, принятых к оплате операционистом  "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSAB
.head 5 -  String: sMFOA
.head 5 -  String: smMFOA[*]
.head 5 -  String: sNLSA
.head 5 -  String: smNLSA[*]
.head 5 -  String: sMFOB
.head 5 -  String: smMFOB[*]
.head 5 -  String: sNLSB
.head 5 -  String: smNLSB[*]
.head 5 -  String: sNAMB
.head 5 -  String: smNAMB[*]
.head 5 -  Number: nS
.head 5 -  Number: nmS[*]
.head 5 -  String: sND
.head 5 -  String: smND[*]
.head 5 -  String: sNAZN
.head 5 -  String: smNAZN[*]
.head 5 -  String: sPOND
.head 5 -  String: smPOND[*]
.head 5 -  String: sNFIA
.head 5 -  String: smNFIA[*]
.head 5 -  String: sRowid
.head 5 -  !
.head 5 -  Number: nIndex
.head 5 -  !
.head 5 -  String: sNIS
.head 5 -  String: smNIS[*]
.head 5 -  Number: nId
.head 5 -  Number: nTipKB
.head 5 -  Number: nKod
.head 5 -  String: sTextBack
.head 5 -  String: sIdentKB
.head 5 -  String: sFnameKB
.head 4 +  Actions
.head 5 +  If cbOO
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору документов, принятых к оплате...', TRUE)
.head 6 -  Set nIO = 0
.head 6 +  While nIO <= nKLI
.head 7 -  Set sSAB = smSAB[nIO]
.head 7 -  Set nRNK = nmRNK[nIO]
.head 7 -  Set sNMK = smNMK[nIO]
.head 7 -  Set sOKPO = smOKPO[nIO]
.head 7 -  Set sTIMES = smTIMES[nIO]
.head 7 +  ! If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT mfoa,nlsa,mfob,nlsb,namb,s,nd,nazn,pond,nfia,rowid
   INTO :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:sNFIA,:sRowid
   FROM klpoow
   WHERE sab=:sSAB and tip='O' and otm is null"))
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNFIA, 1, -1)
.head 8 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set smMFOA[nIndex] = sMFOA
.head 9 -  Set smNLSA[nIndex] = sNLSA
.head 9 -  Set smMFOB[nIndex] = sMFOB
.head 9 -  Set smNLSB[nIndex] = sNLSB
.head 9 -  Set smNAMB[nIndex] = sNAMB
.head 9 -  Set nmS[nIndex] = nS
.head 9 -  Set smND[nIndex] = sND
.head 9 -  Set smNAZN[nIndex] = sNAZN
.head 9 -  Set smPOND[nIndex] = sPOND
.head 9 -  Set smNFIA[nIndex] = sNFIA
.head 9 -  Set nIndex = nIndex + 1
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE klpoow
     SET otm='1'
     WHERE rowid=:sRowid"))
.head 8 +  If nIndex > 0
.head 9 -  Call Message('Отбор документов, принятых к оплате операционистом для ' || sSAB || ' (' || Str(nIndex) || ')',
     TRUE)
.head 9 +  If not FormFileO(sSAB, smMFOA, smNLSA, smMFOB, smNLSB, smNAMB, nmS, smND, smNAZN, smPOND, smNFIA)
.head 10 -  Call SqlRollback(hSqlAux())
.head 10 -  ! Call SqlRollback(hSqlAux3())
.head 10 -  ! Call Message('', FALSE)
.head 10 -  ! Return FALSE
.head 9 +  Else 
.head 10 -  ! Call SqlCommit(hSqlAux3())
.head 10 -  ! Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpoow
     WHERE otm='1' and sab=:sSAB and tip='O'"))
.head 10 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpoow
     WHERE otm='1' and sab=:sSAB and tip='O' and
           (nfia,pond) in (SELECT naex,pond
                           FROM klp
                           WHERE cl_type is null)"))
.head 10 -  Call SqlCommit(hSqlAux())
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT k.mfoa,k.nlsa,k.mfob,k.nlsb,k.namb,k.s,k.nd,k.nazn,k.pond,k.nfia,k.rowid
   INTO :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:sNFIA,:sRowid
   FROM klpoow k, customer c
   WHERE k.sab=:sSAB and k.tip='O' and k.otm is null and k.sab=c.sab and c.stmt=6"))
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNFIA, 1, -1)
.head 8 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set smMFOA[nIndex] = sMFOA
.head 9 -  Set smNLSA[nIndex] = sNLSA
.head 9 -  Set smMFOB[nIndex] = sMFOB
.head 9 -  Set smNLSB[nIndex] = sNLSB
.head 9 -  Set smNAMB[nIndex] = sNAMB
.head 9 -  Set nmS[nIndex] = nS
.head 9 -  Set smND[nIndex] = sND
.head 9 -  Set smNAZN[nIndex] = sNAZN
.head 9 -  Set smPOND[nIndex] = sPOND
.head 9 -  Set smNFIA[nIndex] = sNFIA
.head 9 -  Set nIndex = nIndex + 1
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE klpoow
     SET otm='1'
     WHERE rowid=:sRowid"))
.head 8 +  If nIndex > 0
.head 9 -  Call Message('Отбор документов, принятых к оплате операционистом для ' || sSAB || ' (' || Str(nIndex) || ')',
     TRUE)
.head 9 +  If not FormFileO(sSAB, smMFOA, smNLSA, smMFOB, smNLSB, smNAMB, nmS, smND, smNAZN, smPOND, smNFIA)
.head 10 -  Call SqlRollback(hSqlAux())
.head 10 -  ! Call SqlRollback(hSqlAux3())
.head 10 -  ! Call Message('', FALSE)
.head 10 -  ! Return FALSE
.head 9 +  Else
.head 10 -  ! Call SqlCommit(hSqlAux3())
.head 10 -  ! Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpoow
     WHERE otm='1' and sab=:sSAB and tip='O'"))
.head 10 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpoow
     WHERE otm='1' and sab=:sSAB and tip='O' and
           (nfia,pond) in (SELECT naex,pond
                           FROM klp
                           WHERE cl_type is null)"))
.head 10 -  Call SqlCommit(hSqlAux())
.head 7 -  Set nIO = nIO + 1
.head 6 -  Call Message('', FALSE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborWW
.head 4 -  Description: отбор документов, возвращенных операционистом "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSAB
.head 5 -  String: sMFOA
.head 5 -  String: smMFOA[*]
.head 5 -  String: sNLSA
.head 5 -  String: smNLSA[*]
.head 5 -  String: sMFOB
.head 5 -  String: smMFOB[*]
.head 5 -  String: sNLSB
.head 5 -  String: smNLSB[*]
.head 5 -  String: sNAMB
.head 5 -  String: smNAMB[*]
.head 5 -  Number: nS
.head 5 -  Number: nmS[*]
.head 5 -  String: sND
.head 5 -  String: smND[*]
.head 5 -  String: sNAZN
.head 5 -  String: smNAZN[*]
.head 5 -  String: sPOND
.head 5 -  String: smPOND[*]
.head 5 -  String: sPRWO
.head 5 -  String: smPRWO[*]
.head 5 -  String: sNFIA
.head 5 -  String: smNFIA[*]
.head 5 -  String: sRowid
.head 5 -  !
.head 5 -  Number: nIndex
.head 5 -  !
.head 5 -  String: sNIS
.head 5 -  String: smNIS[*]
.head 5 -  Number: nId
.head 5 -  Number: nTipKB
.head 5 -  Number: nKod
.head 5 -  String: sTextBack
.head 5 -  String: sIdentKB
.head 5 -  String: sFnameKB
.head 4 +  Actions
.head 5 +  If cbWO
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору возвращенных документов(О)...', TRUE)
.head 6 -  Set nIW = 0
.head 6 +  While nIW <= nKLI
.head 7 -  Set sSAB = smSAB[nIW]
.head 7 -  Set nRNK = nmRNK[nIW]
.head 7 -  Set sNMK = smNMK[nIW]
.head 7 -  Set sOKPO = smOKPO[nIW]
.head 7 -  Set sTIMES = smTIMES[nIW]
.head 7 +  ! If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT mfoa,nlsa,mfob,nlsb,namb,s,nd,nazn,pond,prwo,nfia,rowid
   INTO :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:sPRWO,:sNFIA,:sRowid
   FROM klpoow k, customer c
   WHERE sab=:sSAB and tip='W' and otm is null"))
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPRWO, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNFIA, 1, -1)
.head 8 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set smMFOA[nIndex] = sMFOA
.head 9 -  Set smNLSA[nIndex] = sNLSA
.head 9 -  Set smMFOB[nIndex] = sMFOB
.head 9 -  Set smNLSB[nIndex] = sNLSB
.head 9 -  Set smNAMB[nIndex] = sNAMB
.head 9 -  Set nmS[nIndex] = nS
.head 9 -  Set smND[nIndex] = sND
.head 9 -  Set smNAZN[nIndex] = sNAZN
.head 9 -  Set smPOND[nIndex] = sPOND
.head 9 -  Set smPRWO[nIndex] = sPRWO
.head 9 -  Set smNFIA[nIndex] = sNFIA
.head 9 -  Set nIndex = nIndex + 1
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE klpoow
     SET otm='1'
     WHERE rowid=:sRowid"))
.head 8 +  If nIndex > 0
.head 9 -  Call Message('Отбор документов, возвращенных операционистом для ' || sSAB || ' (' || Str(nIndex) || ')', TRUE)
.head 9 +  If not FormFileW(sSAB, smMFOA, smNLSA, smMFOB, smNLSB, smNAMB, nmS, smND, smNAZN, smPOND, smPRWO, smNFIA)
.head 10 -  Call SqlRollback(hSqlAux())
.head 10 -  ! Call SqlRollback(hSqlAux3())
.head 10 -  ! Call Message('', FALSE)
.head 10 -  ! Call SalWaitCursor(FALSE)
.head 10 -  ! Return FALSE
.head 9 +  Else 
.head 10 -  ! Call SqlCommit(hSqlAux3())
.head 10 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpoow
     WHERE otm='1' and sab=:sSAB and tip='W' and
           (nfia,pond) in (SELECT naex,pond
                           FROM klp
                           WHERE cl_type is null)"))
.head 10 -  Call SqlCommit(hSqlAux())
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT k.mfoa,k.nlsa,k.mfob,k.nlsb,k.namb,k.s,k.nd,k.nazn,k.pond,k.prwo,k.nfia,k.rowid
   INTO :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:sPRWO,:sNFIA,:sRowid
   FROM klpoow k, customer c
   WHERE k.sab=:sSAB and k.tip='W' and k.otm is null and c.sab=k.sab and c.stmt=6"))
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPRWO, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNFIA, 1, -1)
.head 8 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set smMFOA[nIndex] = sMFOA
.head 9 -  Set smNLSA[nIndex] = sNLSA
.head 9 -  Set smMFOB[nIndex] = sMFOB
.head 9 -  Set smNLSB[nIndex] = sNLSB
.head 9 -  Set smNAMB[nIndex] = sNAMB
.head 9 -  Set nmS[nIndex] = nS
.head 9 -  Set smND[nIndex] = sND
.head 9 -  Set smNAZN[nIndex] = sNAZN
.head 9 -  Set smPOND[nIndex] = sPOND
.head 9 -  Set smPRWO[nIndex] = sPRWO
.head 9 -  Set smNFIA[nIndex] = sNFIA
.head 9 -  Set nIndex = nIndex + 1
.head 9 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     UPDATE klpoow
     SET otm='1'
     WHERE rowid=:sRowid"))
.head 8 +  If nIndex > 0
.head 9 -  Call Message('Отбор документов, возвращенных операционистом для ' || sSAB || ' (' || Str(nIndex) || ')', TRUE)
.head 9 +  If not FormFileW(sSAB, smMFOA, smNLSA, smMFOB, smNLSB, smNAMB, nmS, smND, smNAZN, smPOND, smPRWO, smNFIA)
.head 10 -  Call SqlRollback(hSqlAux())
.head 10 -  ! Call SqlRollback(hSqlAux3())
.head 10 -  ! Call Message('', FALSE)
.head 10 -  ! Call SalWaitCursor(FALSE)
.head 10 -  ! Return FALSE
.head 9 +  Else
.head 10 -  ! Call SqlCommit(hSqlAux3())
.head 10 -  Call SqlPrepareAndExecute(hSqlAux(), T("
     DELETE
     FROM klpoow
     WHERE otm='1' and sab=:sSAB and tip='W' and
           (nfia,pond) in (SELECT naex,pond
                           FROM klp
                           WHERE cl_type is null)"))
.head 10 -  Call SqlCommit(hSqlAux())
.head 7 -  Set nIW = nIW + 1
.head 6 -  Call Message('', FALSE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborWWt
.head 4 -  Description: отбор документов, возвращенных ТЕХНОЛОГОМ "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSAB
.head 5 -  String: sMFOA
.head 5 -  String: smMFOA[*]
.head 5 -  String: sNLSA
.head 5 -  String: smNLSA[*]
.head 5 -  String: sMFOB
.head 5 -  String: smMFOB[*]
.head 5 -  String: sNLSB
.head 5 -  String: smNLSB[*]
.head 5 -  String: sNAMB
.head 5 -  String: smNAMB[*]
.head 5 -  Number: nS
.head 5 -  Number: nmS[*]
.head 5 -  String: sND
.head 5 -  String: smND[*]
.head 5 -  String: sNAZN
.head 5 -  String: smNAZN[*]
.head 5 -  String: sPOND
.head 5 -  String: smPOND[*]
.head 5 -  String: sPRWO
.head 5 -  String: smPRWO[*]
.head 5 -  String: sNFIA
.head 5 -  String: smNFIA[*]
.head 5 -  String: sRowidK
.head 5 -  !
.head 5 -  Number: nIndex
.head 5 -  !
.head 5 -  Number: nRefMinus
.head 5 -  Number: nmRefMinus[*]
.head 5 -  Number: nIM
.head 5 -  Number: nLenMinus
.head 4 +  Actions
.head 5 +  If cbWT
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору возвращенных документов(Т)...', TRUE)
.head 6 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT o.ref,o.mfoa,o.nlsa,o.mfob,o.nlsb,o.nam_b,o.s,o.nd,substr(o.nazn,1,40)
   INTO :nRefMinus,:sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sPRWO
   FROM oper o
   WHERE o.vdat=:dBankDate and o.sos=-1 and o.tt='KL2'"))
.head 7 -  Set nIndex = 0
.head 7 -  Call SalArraySetUpperBound(nmRefMinus, 1, -1)
.head 7 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 8 -  Set nmRefMinus[nIndex] = nRefMinus
.head 8 -  Set nIndex = nIndex + 1
.head 7 +  If nIndex > 0
.head 8 -  Set nLenMinus = nIndex - 1
.head 8 -  Set nIM = 0
.head 8 +  While nIM <= nLenMinus
.head 9 -  Set nRefMinus = nmRefMinus[nIM]
.head 9 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT k.text1,k.pond,k.naex,k.rowid
   INTO :sNAZN,:sPOND,:sNFIA,:sRowidK
   FROM klp k, klpond p
   WHERE p.ref=:nRefMinus and p.pond=k.pond and p.filename=k.naex and k.fl=8"))
.head 10 +  If SqlFetchNext(hSqlAux3(), nFetchRes)
.head 11 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 11 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smPRWO, 1, -1)
.head 11 -  Call SalArraySetUpperBound(smNFIA, 1, -1)
.head 11 -  Set smMFOA[0] = sMFOA
.head 11 -  Set smNLSA[0] = sNLSA
.head 11 -  Set smMFOB[0] = sMFOB
.head 11 -  Set smNLSB[0] = sNLSB
.head 11 -  Set smNAMB[0] = sNAMB
.head 11 -  Set nmS[0] = nS
.head 11 -  Set smND[0] = sND
.head 11 -  Set smNAZN[0] = sNAZN
.head 11 -  Set smPOND[0] = sPOND
.head 11 -  Set smPRWO[0] = sPRWO
.head 11 -  Set smNFIA[0] = sNFIA
.head 11 +  If SqlPrepareAndExecute(hSqlAux(), T("
   UPDATE klp
   SET fl=9
   WHERE rowid=:sRowidK"))
.head 12 -  Call Message('Отбор документов, возвращенных технологом для ' || Subs(sNFIA, 3, 4) || ' (1)', TRUE)
.head 12 +  If not FormFileW(Subs(sNFIA, 3, 4), smMFOA, smNLSA, smMFOB, smNLSB, smNAMB, nmS, smND, smNAZN, smPOND,
   smPRWO, smNFIA)
.head 13 -  Call SqlRollback(hSqlAux())
.head 13 -  Call Message('Ошибка отбора документов, возвращенных технологом для ' || Subs(sNFIA, 3, 4), TRUE)
.head 13 -  Call SalWaitCursor(FALSE)
.head 13 -  Return FALSE
.head 12 +  Else
.head 13 -  Call SqlCommit(hSqlAux())
.head 13 -  Call Message('Отобраны документы, возвращенные технологом для ' || Subs(sNFIA, 3, 4) || ' (1)', TRUE)
.head 11 +  Else
.head 12 -  Call SqlRollback(hSqlAux())
.head 9 -  Set nIM = nIM + 1
.head 7 +  Else
.head 8 -  Call Message('Возвращенные документы(Т) отсутствуют.', TRUE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborCC
.head 4 -  Description: отбор списка контрактов "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSAB
.head 5 -  Number: nPid
.head 5 -  Number: nmPid[*]
.head 5 -  String: sNomerK
.head 5 -  String: smNomerK[*]
.head 5 -  Number: nTipOp
.head 5 -  Number: nmTipOp[*]
.head 5 -  Number: nS
.head 5 -  Number: nmS[*]
.head 5 -  Number: nKv
.head 5 -  Number: nmKv[*]
.head 5 -  Date/Time: dBeg
.head 5 -  Date/Time: dmBeg[*]
.head 5 -  Date/Time: dEnd
.head 5 -  Date/Time: dmEnd[*]
.head 5 -  Number: nTipK
.head 5 -  Number: nmTipK[*]
.head 5 -  String: sNameK
.head 5 -  String: smNameK[*]
.head 5 -  Number: nCountryKodBenef
.head 5 -  String: smCountryKodBenef[*]
.head 5 -  String: sBenefBank
.head 5 -  String: smBenefBank[*]
.head 5 -  String: sBenefAcc
.head 5 -  String: smBenefAcc[*]
.head 5 -  String: sContinuedLic
.head 5 -  String: smContinuedLic[*]
.head 5 -  String: sCondK
.head 5 -  String: smCondK[*]
.head 5 -  String: sAimK
.head 5 -  String: smAimK[*]
.head 5 -  String: sDetailsK
.head 5 -  String: smDetailsK[*]
.head 5 -  Number: nCountryKodBank
.head 5 -  String: smCountryKodBank[*]
.head 5 -  !
.head 5 -  Number: nIndex
.head 5 -  !
.head 5 -  Number: nRNKtemp
.head 5 -  !
.head 5 -  Number: n10
.head 5 -  Number: n13
.head 4 +  Actions
.head 5 +  If cbContracts
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору списка контрактов...', TRUE)
.head 6 -  Set nIO = 0
.head 6 +  While nIO <= nKLI
.head 7 -  Set sSAB = smSAB[nIO]
.head 7 -  Set nRNK = nmRNK[nIO]
.head 7 -  Set sNMK = smNMK[nIO]
.head 7 -  Set sOKPO = smOKPO[nIO]
.head 7 -  Set sTIMES = smTIMES[nIO]
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT t.pid,t.name,t.impexp,t.s,t.kv,t.dateopen,t.dateclose,t.id_oper,t.benefcountry,t.benefbank,t.benefacc,
          t.continued,t.cond,t.aim,t.details,t.bankcountry
   INTO :nPid,:sNameK,:nTipOp,:nS,:nKv,:dBeg,:dEnd,:nTipK,:nCountryKodBenef,:sBenefBank,:sBenefAcc,:sContinuedLic,
        :sCondK,:sAimK,:sDetailsK,:nCountryKodBank
   FROM top_contracts t, customer c
   WHERE c.sab=:sSAB and c.rnk=t.rnk and t.closed=0 and t.impexp=1"))
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(nmPid, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNomerK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmTipOp, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmKv, 1, -1)
.head 8 -  Call SalArraySetUpperBound(dmBeg, 1, -1)
.head 8 -  Call SalArraySetUpperBound(dmEnd, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmTipK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNameK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smCountryKodBenef, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smBenefBank, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smBenefAcc, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smContinuedLic, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smCondK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smAimK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smDetailsK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smCountryKodBank, 1, -1)
.head 8 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set nmPid[nIndex] = nPid
.head 9 -  Set smNomerK[nIndex] = sNomerK
.head 9 -  Set nmTipOp[nIndex] = nTipOp
.head 9 -  Set nmS[nIndex] = nS
.head 9 -  Set nmKv[nIndex] = nKv
.head 9 -  Set dmBeg[nIndex] = dBeg
.head 9 -  Set dmEnd[nIndex] = dEnd
.head 9 -  Set nmTipK[nIndex] = nTipK
.head 9 -  Set smNameK[nIndex] = sNameK
.head 9 -  Set smCountryKodBenef[nIndex] = Str(nCountryKodBenef)
.head 9 -  Set smBenefBank[nIndex] = sBenefBank
.head 9 -  Set smBenefAcc[nIndex] = sBenefAcc
.head 9 -  Set smContinuedLic[nIndex] = sContinuedLic
.head 9 -  Set smCondK[nIndex] = sCondK
.head 9 -  Set smAimK[nIndex] = sAimK
.head 9 -  Set smCountryKodBank[nIndex] = Str(nCountryKodBank)
.head 9 +  Loop
.head 10 -  Set n13 = At(Chr(13), sDetailsK)
.head 10 +  If n13 > 0
.head 11 -  Set sDetailsK = Left(sDetailsK, n13-1) || Right(sDetailsK, Len(sDetailsK)-n13)
.head 10 +  Else
.head 11 -  Break
.head 9 +  Loop
.head 10 -  Set n10 = At(Chr(10), sDetailsK)
.head 10 +  If n10 > 0
.head 11 -  Set sDetailsK = Left(sDetailsK, n10-1) || Right(sDetailsK, Len(sDetailsK)-n10)
.head 10 +  Else
.head 11 -  Break
.head 9 -  Set smDetailsK[nIndex] = sDetailsK
.head 9 -  Set nIndex = nIndex + 1
.head 8 +  If nIndex > 0
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT rnk
   INTO :nRNKtemp
   FROM klpv_v
   WHERE rnk=:nRNK"))
.head 10 +  If SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Call Message('Отбор списка контрактов для ' || sSAB || ' (' || Str(nIndex) || ')', TRUE)
.head 11 +  If not FormFileC(sSAB, nRNK, sNMK, sOKPO, nmPid, smNomerK, nmTipOp, nmS, nmKv, dmBeg, dmEnd, nmTipK,
   smNameK, smCountryKodBenef, smBenefBank, smBenefAcc, smContinuedLic, smCondK, smAimK, smDetailsK,
   smCountryKodBank, cbContracts2)
.head 12 -  Call SqlRollback(hSqlAux())
.head 12 -  Call SqlRollback(hSqlAux3())
.head 12 -  Call Message('Отбор списка контрактов для ' || sSAB || ' не выполнен', TRUE)
.head 12 -  ! Return FALSE
.head 11 +  Else
.head 12 -  Call SqlCommit(hSqlAux3())
.head 12 -  Call Message('Cформирован список контрактов для ' || sSAB, TRUE)
.head 7 -  Set nIO = nIO + 1
.head 6 -  Call Message('', FALSE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: OtborSS
.head 4 -  Description: отбор списка стран "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSab
.head 5 -  Number: nCountry
.head 5 -  Number: nmCountry[*]
.head 5 -  String: sName
.head 5 -  String: smName[*]
.head 5 -  Number: nIS
.head 5 -  !
.head 5 -  Number: nRNKtemp
.head 4 +  Actions
.head 5 +  If cbCountry
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору списка стран...', TRUE)
.head 6 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT country,name
   INTO :nCountry,:sName
   FROM country
   ORDER by 1"))
.head 7 -  Set nIndex = 0
.head 7 -  Call SalArraySetUpperBound(nmCountry, 1, -1)
.head 7 -  Call SalArraySetUpperBound(smName, 1, -1)
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set nmCountry[nIndex] = nCountry
.head 8 -  Set smName[nIndex] = sName
.head 8 -  Set nIndex = nIndex + 1
.head 7 +  If nIndex > 0
.head 8 -  Set nIS = 0
.head 8 +  While nIS <= nKLI
.head 9 -  Set sSAB = smSAB[nIS]
.head 9 -  Set nRNK = nmRNK[nIS]
.head 9 -  Set sNMK = smNMK[nIS]
.head 9 -  Set sOKPO = smOKPO[nIS]
.head 9 -  Set sTIMES = smTIMES[nIS]
.head 9 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT rnk
   INTO :nRNKtemp
   FROM klpv_v
   WHERE rnk=:nRNK"))
.head 10 +  If SqlFetchNext(hSql(), nFetchRes)
.head 11 -  Call Message('Формирование списка стран для ' || sSAB, TRUE)
.head 11 +  If FormFileS(sSAB, nmCountry, smName, cbCountry2)
.head 12 -  Call Message('Cформирован список стран для ' || sSAB, TRUE)
.head 9 -  Set nIS = nIS + 1
.head 7 -  Call Message('', FALSE)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: GetFileDate
.head 4 -  Description: получить дату файла по имени
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 +  Parameters
.head 5 -  String: sFileName
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If Left(sFileName, 2) = 'ZD' or Left(sFileName, 2) = 'ZK'
.head 6 -  ! для файлов ZD надо поменять на другое (вот гадость !)
.head 6 -  Return SalDateConstruct(Char2Digit(Subs(sFileName, 7, 1)) + 1995, Char2Digit(Subs(sFileName, 8, 1)), Char2Digit(
       Subs(sFileName, 10, 1)), 0, 0, 0)
.head 5 +  Else
.head 6 -  Return SalDateConstruct(Char2Digit(SalStrMidX(sFileName, 9, 1)) + 1998, Char2Digit(SalStrMidX(sFileName, 7, 1)),
       Char2Digit(SalStrMidX(sFileName, 6, 1)), 0, 0, 0)
.head 3 +  Function: Char2Digit
.head 4 -  Description: получить число по символу
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sChar
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nTemp
.head 4 +  Actions
.head 5 -  Set nTemp = SalStrLop(sChar)
.head 5 -  Return nTemp - IifN(nTemp>57, 55, 48)
.head 3 +  Function: CopyArch
.head 4 -  Description: копирование файлов в архив KLP_ARCH
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sThree[*]
.head 5 -  Number: nT
.head 5 -  Boolean: bFlajok
.head 4 +  Actions
.head 5 -  Set bFlajok = SalFmtFormatDateTime(dBankDate, 'dd/MM/yyyy') != GetGlobalOption('KARCDATE')
.head 5 +  If GetArch_DAYS() < 99999 and bFlajok
.head 6 -  Set sThree[0] = 'INA'
.head 6 -  Set sThree[1] = 'IND'
.head 6 -  Set sThree[2] = 'INE'
.head 6 -  Set sThree[3] = 'INM'
.head 6 -  Set sThree[4] = 'INQ'
.head 6 -  Set sThree[5] = 'INZD'
.head 6 -  Set sThree[6] = 'ADR'
.head 6 -  Set sThree[7] = 'KWI'
.head 6 -  Set sThree[8] = 'NOT'
.head 6 -  Set sThree[9] = 'ARH'
.head 6 -  Call Message('Копирование файлов КЛИЕНТ-БАНК в архив ...', TRUE)
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 6 -  Set nCount = VisDosEnumFiles(sArchPath || '*.*', FA_Standard, sMass)
.head 6 +  If nCount > 0 ! удаление файлов ICT (барахло)
.head 7 -  Call Message('Всего файлов для удаления - ' || Str(nCount) || ' ...', TRUE)
.head 7 -  Set nI = 0
.head 7 +  While nI < nCount
.head 8 -  Call Message('Удаление файла ' || sMass[nI] || ' ...', TRUE)
.head 8 -  Call VisFileDelete(sArchPath || sMass[nI])
.head 8 -  Set nI = nI + 1
.head 6 -  Set nT = 0
.head 6 +  While nT < 10
.head 7 -  Set nI = 0
.head 7 +  While nI <= nKLI
.head 8 -  Set sSAB = smSAB[nI]
.head 8 -  ! Call SalArraySetUpperBound(sMass, 1, -1)
.head 8 -  Set nCount = VisDosEnumFiles(sArchPath || sThree[nT] || '\\??' || sSAB || '*.*', FA_Standard, sMass)
.head 8 +  If nCount > 0 ! обработка файлов
.head 9 -  Call Message('Всего файлов ' || sSAB || ' в ' || sThree[nT] || ' - ' || Str(nCount) || ' ...', TRUE)
.head 9 -  Set nNf = 0
.head 9 +  While nNf < nCount
.head 10 -  Call Message('Определение даты файла ' || sMass[nNf] || ' ...', TRUE)
.head 10 +  If GetFileDate(sMass[nNf]) + GetArch_DAYS() <= dBankDate
.head 11 -  ! скопировать в архив и удалить из каталога
.head 11 -  ! If sThree[nT] = 'INA' or sThree[nT] = 'IND' or sThree[nT] = 'INE' or sThree[nT] = 'INM' or
   sThree[nT] = 'INQ' or sThree[nT] = 'INZD'
.head 11 +  If Left(sThree[nT], 2) = 'IN'
.head 12 -  Call Message('Удаление файла ' || sMass[nNf] || ' ...', TRUE)
.head 11 +  Else
.head 12 -  Call Message('Копирование файла ' || sMass[nNf] || ' в архив ...', TRUE)
.head 11 -  Call File2Arch(sThree[nT], sMass[nNf])
.head 10 +  ! Else
.head 11 -   Call Message('1.Дата файла ' || sMass[nNf] || ' = ' || SalFmtFormatDateTime(
     GetFileDate(sMass[nNf]), 'dd-MM-yyyy'), TRUE)
.head 11 -   Call Message('2.Количество дней в INI = ' || Str(GetArch_DAYS()), TRUE)
.head 11 -   Call Message('3.Банковская дата = ' || SalFmtFormatDateTime(dBankDate, 'dd-MM-yyyy'), TRUE)
.head 11 -   Call Message('4.Дата файла + к-во дней = ' || SalFmtFormatDateTime(
     GetFileDate(sMass[nNf])+GetArch_DAYS(), 'dd-MM-yyyy'), TRUE)
.head 10 -  Set nNf = nNf + 1
.head 9 -  Call SalSetWindowText(ml1, '')
.head 8 -  Set nI = nI + 1
.head 7 -  Set nT = nT + 1
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  Function: File2Arch
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sPrefix
.head 5 -  String: sFileName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hF
.head 5 -  Number: nBytes
.head 5 -  Long String: sTabi
.head 5 -  Long String: sTelo
.head 5 -  Date/Time: dDfTf
.head 4 +  Actions
.head 5 -  ! открыть файл (sArchPath || sPrefix || sFileName)
.head 5 -  ! прочитать тело и записать в таблицы Klp_ARCH и Klp_Files
.head 5 -  ! если успешно, удалить файл (sArchPath || sPrefix || sFileName)
.head 5 +  If sPrefix = 'INA' or sPrefix = 'IND' or sPrefix = 'INE' or sPrefix = 'INM' or sPrefix = 'INQ' or sPrefix = 'INZD'
.head 6 -  Call VisFileDelete(sArchPath || sPrefix || '\\' || sFileName)
.head 6 -  Return TRUE
.head 5 -  ! Call Message('Открытие файла ' || sFileName || ' ...', TRUE)
.head 5 +  If SalFileOpen(hF, sArchPath || sPrefix || '\\' || sFileName, OF_Read)
.head 6 -  Call SalFileGetDateTime(sArchPath || sPrefix || '\\' || sFileName, dDfTf)
.head 6 -  Set sTabi = ''
.head 6 -  Call SalStrSetBufferLength(sTelo, 65534)
.head 6 +  While TRUE
.head 7 -  Set nBytes = SalFileRead(hF, sTelo, 65534)
.head 7 +  If nBytes > 0
.head 8 -  Set sTabi = sTabi || Left(sTelo, nBytes)
.head 7 +  If nBytes < 65534
.head 8 -  Break
.head 6 -  Call SalFileClose(hF)
.head 6 -  ! Call Message('Закрытие файла ' || sFileName || ' ...', TRUE)
.head 6 -  ! Сжимаем строку для экономии места в БД
  (это себя, к сожалению, не оправдало)
.head 6 -  ! Call SalStrCompress(sTabi)
.head 6 +  If Len(GetValueStr("
   SELECT fn
   FROM klp_files
   WHERE fn='" || sFileName || "'")) > 0
.head 7 +  If not SqlPrepareAndExecute(hSql(), T("
   DELETE
   FROM klp_files
   WHERE fn=:sFileName")) or not SqlPrepareAndExecute(
   hSql(), T("
   DELETE
   FROM klp_arch
   WHERE fn=:sFileName"))
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Return FALSE
.head 6 +  If SqlPrepare(hSql(), T("
   INSERT
   INTO klp_files (fn,body)
   VALUES (:sFileName,:sTabi)"))
.head 7 -  Call SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 7 +  If SqlExecute(hSql())
.head 8 +  If SqlPrepareAndExecute(hSql(), T("
   INSERT
   INTO klp_arch (fn,tip,filedate)
   VALUES (:sFileName,:sPrefix,:dDfTf)"))
.head 9 +  If VisFileDelete(sArchPath || sPrefix || '\\' || sFileName) < 0
.head 10 -  Call SqlRollback(hSql())
.head 10 -  Return FALSE
.head 9 -  Call SqlCommit(hSql())
.head 9 -  Call Message('Файл ' || sFileName || ' в АРХИВЕ.', TRUE)
.head 9 -  Return TRUE
.head 8 +  Else
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Return FALSE
.head 6 +  Else
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Return FALSE
.head 5 -  Return FALSE
.head 3 +  Function: Message
.head 4 -  Description: вывод текста в окно и запись в LOG
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sStr
.head 5 -  Boolean: bTL
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nNewRow
.head 5 -  String: sTime
.head 4 +  Actions
.head 5 +  If bTL
.head 6 -  Call SaveInfoToLog(sStr)
.head 5 -  Set sTime = SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss ')
.head 5 -  Call SalSetWindowText(ml1, IifS(Len(sStr)>0, sTime, '') || sStr)
.head 5 +  If sStr != ''
.head 6 -  ! вмалевать строку в табличку TblMessage
.head 6 -  Set nNewRow = SalTblInsertRow(tblMessage, TBL_MaxRow)
.head 6 -  Call SalTblSetContext(tblMessage, nNewRow)
.head 6 -  Set tblMessage.colTime = SalStrTrimX(sTime)
.head 6 -  Set tblMessage.colText = sStr
.head 6 -  Call SalTblSetFocusRow(tblMessage, nNewRow)
.head 5 -  Call SalUpdateWindow(hWndForm)
.head 3 +  Function: OtborLS
.head 4 -  Description: отбор ЛС "электронным" клиентам
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sSAB
.head 5 -  Number: nRNK
.head 5 -  String: sNMK
.head 5 -  Number: nIndex
.head 5 -  Date/Time: dBaDa
.head 5 -  !
.head 5 -  String: sMFOA
.head 5 -  String: smMFOA[*]
.head 5 -  String: sNLSA
.head 5 -  String: smNLSA[*]
.head 5 -  String: sNAMA
.head 5 -  String: smNAMA[*]
.head 5 -  String: sMFOB
.head 5 -  String: smMFOB[*]
.head 5 -  String: sNLSB
.head 5 -  String: smNLSB[*]
.head 5 -  String: sNAMB
.head 5 -  String: smNAMB[*]
.head 5 -  String: sOKPOB
.head 5 -  String: smOKPOB[*]
.head 5 -  Number: nDK
.head 5 -  Number: nmDK[*]
.head 5 -  Number: nS
.head 5 -  Number: nmS[*]
.head 5 -  Number: nVOB
.head 5 -  Number: nmVOB[*]
.head 5 -  String: sND
.head 5 -  String: smND[*]
.head 5 -  Number: nISP
.head 5 -  Number: nmISP[*]
.head 5 -  Number: nKV
.head 5 -  Number: nmKV[*]
.head 5 -  Date/Time: dDAOP
.head 5 -  Date/Time: dmDAOP[*]
.head 5 -  Number: nIOST
.head 5 -  Number: nmIOST[*]
.head 5 -  Date/Time: dDAPP
.head 5 -  Date/Time: dmDAPP[*]
.head 5 -  String: sNAZN
.head 5 -  String: smNAZN[*]
.head 5 -  String: sPOND
.head 5 -  String: smPOND[*]
.head 5 -  Number: nSK
.head 5 -  Number: nmSK[*]
.head 5 -  String: sNameFileA
.head 5 -  String: smNameFileA[*]
.head 5 -  Number: nREF
.head 5 -  Number: nmREF[*]
.head 5 -  !
.head 5 -  String: sOpenDay
.head 5 -  !
.head 5 -  String: sNazns
.head 5 -  Number: nBis
.head 5 -  String: sNaznk
.head 5 -  String: sD_rec
.head 5 -  String: sFn_a
.head 5 -  String: sNaznBis
.head 5 -  String: sD_recBis
.head 5 -  !
.head 5 -  Number: nUid
.head 5 -  Number: nKwo
.head 5 -  Boolean: bOk
.head 5 -  Number: nVal
.head 4 +  Actions
.head 5 +  If cbLS
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 -  Call Message('Подготовка к отбору выписок...', TRUE)
.head 6 -  Set dBaDa = dBankDate
.head 6 -  Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
.head 6 -  Set nIL = 0
.head 6 +  While nIL <= nKLI
.head 7 -  Set sSAB = smSAB[nIL]
.head 7 -  Set nRNK = nmRNK[nIL]
.head 7 -  Set sNMK = smNMK[nIL]
.head 7 -  Set sOKPO = smOKPO[nIL]
.head 7 -  Set sTIMES = smTIMES[nIL]
.head 7 -  Set nUid = GetUserId()
.head 7 -  ! Set nVal = GetBaseVal()
.head 7 -  Set nVal = NUMBER_Null
.head 7 +  If SqlPLSQLCommand(hSql(), "p_lici" || IifS(bmKORP[nIL], "u", "") || "(nUid,dBaDa,sSAB,nVal,'%')")
.head 8 -  Call SqlCommit(hSql())
.head 8 -  Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tmp_lici
     INTO :nKwo
     WHERE id=:nUid"))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set bOk = nKwo>0
.head 7 +  Else
.head 8 -  Set bOk = FALSE
.head 7 +  If bOk and SqlPrepareAndExecute(hSql(), T("
   SELECT nlsa,nama,mfob,nlsb,namb,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dapp,nazn,pond,sk,namefilea,Kodirowka,nazns,
          bis,naznk,d_rec,fn_a,ref
   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:dDAPP,:sNAZN,
        :sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nREF
   FROM tmp_lici
   WHERE id=:nUid
   ORDER BY nlsa,kv,dk,s"))
.head 8 -  Set sMFOA = GetBankMfo()
.head 8 -  Set nIndex = 0
.head 8 -  Call SalArraySetUpperBound(smMFOA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAMA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smMFOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAMB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smOKPOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmDK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmS, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmVOB, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmISP, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmKV, 1, -1)
.head 8 -  Call SalArraySetUpperBound(dmDAOP, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmIOST, 1, -1)
.head 8 -  Call SalArraySetUpperBound(dmDAPP, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNAZN, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smPOND, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmSK, 1, -1)
.head 8 -  Call SalArraySetUpperBound(smNameFileA, 1, -1)
.head 8 -  Call SalArraySetUpperBound(nmREF, 1, -1)
.head 8 +  While SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set smMFOA[nIndex] = sMFOA
.head 9 -  Set smNLSA[nIndex] = sNLSA
.head 9 -  Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
.head 9 -  Set smMFOB[nIndex] = sMFOB
.head 9 -  Set smNLSB[nIndex] = sNLSB
.head 9 -  Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
.head 9 -  Set smOKPOB[nIndex] = sOKPOB
.head 9 -  Set nmDK[nIndex] = nDK
.head 9 -  Set nmS[nIndex] = nS
.head 9 -  Set nmVOB[nIndex] = nVOB
.head 9 -  Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
.head 9 -  Set nmISP[nIndex] = nISP
.head 9 -  Set nmKV[nIndex] = nKV
.head 9 -  Set dmDAOP[nIndex] = dDAOP
.head 9 -  Set nmIOST[nIndex] = nIOST
.head 9 -  Set dmDAPP[nIndex] = dDAPP
.head 9 -  Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
.head 9 -  Set sD_rec = StrDosToWinX(sD_rec)
.head 9 +  If sNazns = '00'
.head 10 -  Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
    SELECT n_np
    FROM s_np
    WHERE k_np='" || sNaznk || "'"))
.head 9 +  Else If sNazns = '01' or sNazns = '11' or sNazns = '41'
.head 10 -  Set smNAZN[nIndex] = IifS(sNazns='01', SalStrTrimX(GetValueStr("
    SELECT n_np
    FROM s_np
    WHERE k_np='" || sNaznk || "'")), smNAZN[nIndex])
.head 10 +  If SalStrScan(sD_rec, '#B') >= 0 !! есть БИСы
.head 11 -  Call SqlPrepareAndExecute(hSqlAux3(), "
     SELECT substr(decode(:nSEP,2,convert(nazn,'RU8PC866','CL8MSWIN1251'),nazn),1,200),
            substr(decode(:nSEP,2,convert(d_rec,'RU8PC866','CL8MSWIN1251'),d_rec),1,200)
     INTO :sNaznBis,:sD_recBis
     FROM arc_rrp
     WHERE fn_a=:sFn_a and nd=:sND and ref is null and bis>1 and s=0 and dk=3 and nazns=33
     ORDER BY bis")
.head 11 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 12 -  Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || StrDosToWinX(Left(Right(sNaznBis,
    Len(sNaznBis)-2), Len(Right(sNaznBis, Len(sNaznBis)-2))-1)) || ' ' || StrDosToWinX(Left(
    Right(sD_recBis, Len(sD_recBis)-2), Len(Right(sD_recBis, Len(sD_recBis)-2))-1)))
.head 9 +  Else If sNazns = '21' or sNazns = '20'
.head 10 -  Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
    SELECT n_np
    FROM s_np
    WHERE k_np='" || sNaznk || "'") || ' ' || smNAZN[nIndex])
.head 10 +  If sNazns = '21' and SalStrScan(sD_rec, '#B') >= 0
!! есть БИСы
.head 11 -  Call SqlPrepareAndExecute(hSqlAux3(), "
     SELECT substr(decode(:nSEP,2,convert(nazn,'RU8PC866','CL8MSWIN1251'),nazn),1,200),
            substr(decode(:nSEP,2,convert(d_rec,'RU8PC866','CL8MSWIN1251'),d_rec),1,200)
     INTO :sNaznBis,:sD_recBis
     FROM arc_rrp
     WHERE fn_a=:sFn_a and nd=:sND and ref is null and bis>1 and s=0 and dk=3 and nazns=33
     ORDER BY bis")
.head 11 +  While SqlFetchNext(hSqlAux3(), nFetchRes)
.head 12 -  Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || StrDosToWinX(Left(Right(sNaznBis,
    Len(sNaznBis)-2), Len(Right(sNaznBis, Len(sNaznBis)-2))-1)) || ' ' || StrDosToWinX(Left(
    Right(sD_recBis, Len(sD_recBis)-2), Len(Right(sD_recBis, Len(sD_recBis)-2))-1)))
.head 9 +  ! Else !! If sNazns = '10' or sNazns = '40'
.head 10 -   Set smNAZN[nIndex] = smNAZN[nIndex]
.head 9 -  Set smPOND[nIndex] = sPOND
.head 9 -  Set nmSK[nIndex] = nSK
.head 9 -  Set smNameFileA[nIndex] = sNameFileA
.head 9 -  Set nmREF[nIndex] = nREF
.head 9 -  Set nIndex = nIndex + 1
.head 8 +  If nIndex > 0
.head 9 -  Call Message('Отбор выписки для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
.head 9 -  Call FormFileV(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOB, nmDK, nmS, nmVOB, smND,
     nmISP, nmKV, dmDAOP, nmIOST, dmDAPP, smNAZN, smPOND, nmSK, smNameFileA, nmREF, sTIMES)
.head 7 -  Set nIL = nIL + 1
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 +  ! Function: OtborLSV
.head 4 -   Description: отбор выписок по валютным документам
.head 4 +   Returns 
.head 5 -   Boolean: 
.head 4 -   Parameters 
.head 4 -   Static Variables 
.head 4 +   Local variables 
.head 5 -   String: sSAB
.head 5 -   Number: nRNK
.head 5 -   String: sNMK
.head 5 -   Number: nIndex
.head 5 -   Date/Time: dBaDa
.head 5 -  !
.head 5 -   String: sFNAMEKB
.head 5 -   String: smFNAMEKB[*]
.head 5 -   String: sIDENTKB
.head 5 -   String: smIDENTKB[*]
.head 5 -   String: sTIPKB
.head 5 -   String: smTIPKB[*]
.head 5 -   String: sNLSA
.head 5 -   String: smNLSA[*]
.head 5 -   String: sNLSB
.head 5 -   String: smNLSB[*]
.head 5 -   Number: nS
.head 5 -   Number: nmS[*]
.head 5 -   Number: nKVA
.head 5 -   Number: nmKVA[*]
.head 5 -   Number: nKVB
.head 5 -   Number: nmKVB[*]
.head 5 -   Number: nREF
.head 5 -   Number: nmREF[*]
.head 5 -  !
.head 5 -  ! String: sOpenDay
.head 5 -  !
.head 5 -   Number: nUid
.head 5 -   Number: nKwo
.head 5 -   Boolean: bOk
.head 5 -  ! Number: nVal
.head 4 +   Actions 
.head 5 +   If cbOper
.head 6 -   Call SalWaitCursor(TRUE)
.head 6 -   Call Message('Подготовка к отбору валютных выписок...', TRUE)
.head 6 -   Set dBaDa = dBankDate
.head 6 -  ! Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
.head 6 -   Set nIL = 0
.head 6 +   While nIL <= nKLI
.head 7 -   Set sSAB = smSAB[nIL]
.head 7 -   Set nRNK = nmRNK[nIL]
.head 7 -   Set sNMK = smNMK[nIL]
.head 7 -   Set sOKPO = smOKPO[nIL]
.head 7 -   Set sTIMES = smTIMES[nIL]
.head 7 -   Set nUid = GetUserId()
.head 7 -  ! Set nVal = GetBaseVal()
.head 7 -   Set nVal = NUMBER_Null
.head 7 +   If SqlPrepareAndExecute(hSql(), T("
   SELECT rnk
   INTO :nRNKtemp
   FROM klpv_v
   WHERE rnk=:nRNK"))
.head 8 +   If SqlFetchNext(hSql(), nFetchRes)
.head 9 +   If SqlPLSQLCommand(hSql(), "val_v(nUid,dBaDa,sSAB)")
.head 10 -   Call SqlCommit(hSql())
.head 10 -   Call SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tmp_vv
     INTO :nKwo
     WHERE id=:nUid"))
.head 10 -   Call SqlFetchNext(hSql(), nFetchRes)
.head 10 -   Set bOk = nKwo>0
.head 9 +   Else 
.head 10 -   Set bOk = FALSE
.head 9 +   If bOk and SqlPrepareAndExecute(hSql(), T("
   SELECT fnamekb,identkb,tipkb,nlsa,kva,nlsb,kvb,s,ref
   INTO :sFNAMEKB,:sIDENTKB,:sTIPKB,:sNLSA,:nKVA,:sNLSB,:nKVB,:nS,:nREF
   FROM tmp_vv
   WHERE id=:nUid
   ORDER BY 1,2"))
.head 10 -   Set sMFOA = GetBankMfo()
.head 10 -   Set nIndex = 0
.head 10 -   Call SalArraySetUpperBound(smFNAMEKB, 1, -1)
.head 10 -   Call SalArraySetUpperBound(smIDENTKB, 1, -1)
.head 10 -   Call SalArraySetUpperBound(smTIPKB, 1, -1)
.head 10 -   Call SalArraySetUpperBound(smNLSA, 1, -1)
.head 10 -   Call SalArraySetUpperBound(nmKVA, 1, -1)
.head 10 -   Call SalArraySetUpperBound(smNLSB, 1, -1)
.head 10 -   Call SalArraySetUpperBound(nmKVB, 1, -1)
.head 10 -   Call SalArraySetUpperBound(nmS, 1, -1)
.head 10 -   Call SalArraySetUpperBound(nmREF, 1, -1)
.head 10 +   While SqlFetchNext(hSql(), nFetchRes)
.head 11 -   Set smFNAMEKB[nIndex] = sFNAMEKB
.head 11 -   Set smIDENTKB[nIndex] = sIDENTKB
.head 11 -   Set smTIPKB[nIndex] = sTIPKB
.head 11 -   Set smNLSA[nIndex] = sNLSA
.head 11 -   Set nmKVA[nIndex] = nKVA
.head 11 -   Set smNLSB[nIndex] = sNLSB
.head 11 -   Set nmKVB[nIndex] = nKVB
.head 11 -   Set nmS[nIndex] = nS
.head 11 -   Set nmREF[nIndex] = nREF
.head 11 -   Set nIndex = nIndex + 1
.head 10 +   If nIndex > 0
.head 11 -   Call Message('Отбор вал.выписки для клиента ' || sSAB || ' (' || sNMK ||
     ')', TRUE)
.head 11 -   Call FormFileY(dBaDa, sSAB, smFNAMEKB, smIDENTKB, smTIPKB, smNLSA, nmKVA,
     smNLSB, nmKVB, nmS, nmREF, sTIMES)
.head 7 -   Set nIL = nIL + 1
.head 6 -   Call SalWaitCursor(FALSE)
.head 5 -   Return TRUE
.head 3 +  Function: FormFileV
.head 4 -  Description: формирование файла %V
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: s01
.head 5 -  String: sSab
.head 5 -  String: smMFOA[*]
.head 5 -  String: smNLSA[*]
.head 5 -  String: smNAMA[*]
.head 5 -  String: smMFOB[*]
.head 5 -  String: smNLSB[*]
.head 5 -  String: smNAMB[*]
.head 5 -  String: smOKPOB[*]
.head 5 -  Number: nmDK[*]
.head 5 -  Number: nmS[*]
.head 5 -  Number: nmVOB[*]
.head 5 -  String: smND[*]
.head 5 -  Number: nmISP[*]
.head 5 -  Number: nmKV[*]
.head 5 -  Date/Time: dmDAOP[*]
.head 5 -  Number: nmIOST[*]
.head 5 -  Date/Time: dmDAPP[*]
.head 5 -  String: smNAZN[*]
.head 5 -  String: smPOND[*]
.head 5 -  Number: nmSK[*]
.head 5 -  String: smNameFileA[*]
.head 5 -  Number: nmREF[*]
.head 5 -  String: sTITI
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sV
.head 5 -  File Handle: hV
.head 5 -  String: sDaTi
.head 5 -  Number: nSdeb
.head 5 -  Number: nSkre
.head 5 -  Number: nKw
.head 5 -  Number: nhV
.head 5 -  Number: nhVc
.head 5 -  String: sVc
.head 5 -  Long String: s404
.head 5 -  !
.head 5 -  Number: nVcrc
.head 5 -  Date/Time: dDFI
.head 5 -  Number: nCRC
.head 5 -  !
.head 5 -  Number: nLenArr
.head 5 -  Number: nIv
.head 5 -  !
.head 5 -  Number: nInterval
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smMFOA, nKd)
.head 5 -  Call SalArrayGetUpperBound(smMFOA, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set nVcrc = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла V
.head 7 -  ! Set sV = '%V' || sSab || DaySymbol(dmDAOP[0]) || MonthSymbol(dmDAOP[0]) || '.' || YearSymbol(dmDAOP[0]) ||
    Suffix(sSab, 'V')
.head 7 -  Set sV = sTempPath || '%V' || sSab || DaySymbol(dmDAOP[0]) || MonthSymbol(dmDAOP[0]) || '.' ||
    YearSymbol(dmDAOP[0]) || IifS(Mod(Val(s01), 2) = 1, '00', 'ZA')
.head 7 +  If not SalFileOpen(hV, sV, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании файла ' || sV, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(dmDAOP[0], 'yyyyMMdd') || IifS(Right(sV, 2)='ZA', '235959', Right('0' ||
    SalFmtFormatDateTime(SalDateCurrent(), 'hhhhmmss'), 6))
.head 7 +  If SalFileWrite(hV, Right(sV, 12) || sDaTi || PadL(Str(nLA+1), 4) || Spac(32) || Str(Mod(Val(s01), 2)) ||
   PutCrLf(), 65) != 65
.head 8 -  Call SalFileClose(hV)
.head 8 -  Call VisFileDelete(sV)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при записи в файл (65) ' ||  sV, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 +  If nmDK[nKd] = 0
.head 7 -  Set nSdeb = nSdeb + nmS[nKd]
.head 6 +  Else
.head 7 -  Set nSkre = nSkre + nmS[nKd]
.head 6 +  If Val(smMFOA[nKd]) = 0
.head 7 -  Set smMFOA[nKd] = GetBankMfo()
.head 6 +  If Val(smMFOB[nKd]) = 0
.head 7 -  Set smMFOB[nKd] = GetBankMfo()
.head 6 -  ! Дебетовые документы
.head 6 +  If nmDK[nKd] = 0
.head 7 -  Set s404 = PadL(VisStrLeftTrim(smMFOA[nKd]), 9) || PadL(VisStrLeftTrim(smNLSA[nKd]), 14) || PadR(VisStrLeftTrim(
    StrWinToDosX(smNAMA[nKd])), 38) || PadL(VisStrLeftTrim(smMFOB[nKd]), 9) || PadL(VisStrLeftTrim(smNLSB[nKd]), 14)
    || PadR(VisStrLeftTrim(StrWinToDosX(smNAMB[nKd])), 38) || PadR(VisStrLeftTrim(smOKPOB[nKd]), 14) ||
    Str(nmDK[nKd]) || PadL(Str(nmS[nKd]), 16) || PadL(Str(nmVOB[nKd]), 2) || PadR(VisStrLeftTrim(
    StrWinToDosX(smND[nKd])), 10) || PadL(Str(nmISP[nKd]), 8)
.head 6 -  ! Кредитовые документы
.head 6 +  Else
.head 7 -  Set s404 = PadL(VisStrLeftTrim(smMFOA[nKd]), 9) || PadL(VisStrLeftTrim(smNLSA[nKd]), 14) || PadR(VisStrLeftTrim(
    StrWinToDosX(smNAMB[nKd])), 38) || PadL(VisStrLeftTrim(smMFOB[nKd]), 9) || PadL(VisStrLeftTrim(smNLSB[nKd]), 14)
    || PadR(VisStrLeftTrim(StrWinToDosX(smNAMA[nKd])), 38) || PadR(VisStrLeftTrim(smOKPOB[nKd]), 14) ||
    Str(nmDK[nKd]) || PadL(Str(nmS[nKd]), 16) || PadL(Str(nmVOB[nKd]), 2) || PadR(VisStrLeftTrim(
    StrWinToDosX(smND[nKd])), 10) || PadL(Str(nmISP[nKd]), 8)
.head 6 -  ! Set s404 = s404 || PadL(Str(nmKV[nKd]), 3) || SalFmtFormatDateTime(dmDAOP[nKd], 'yyyyMMdd') || PadL(
    Str(nmIOST[nKd]), 24) || SalFmtFormatDateTime(dmDAPP[nKd], 'yyyyMMdd') || PadR(VisStrLeftTrim(
    StrWinToDosX(smNAZN[nKd])), 160) || PadR(VisStrLeftTrim(smPOND[nKd]), 8) || IifS(nmSK[nKd]=NUMBER_Null, '  ',
    PadL(Str(nmSK[nKd]), 2)) || PadR(VisStrLeftTrim(smNameFileA[nKd]), 12) || PadL(Str(nKd+1), 4) || PutCrLf()
.head 6 -  Set s404 = s404 || PadL(Str(nmKV[nKd]), 3) || SalFmtFormatDateTime(dmDAOP[nKd], 'yyyyMMdd') || PadL(
    Str(nmIOST[nKd]), 24) || SalFmtFormatDateTime(
    IifD(dmDAPP[nKd]=DATETIME_Null, dmDAOP[nKd], dmDAPP[nKd]), 'yyyyMMdd') || PadR(VisStrLeftTrim(
    StrWinToDosX(smNAZN[nKd])), 160) || Right(Str(100000000+Int(nmREF[nKd])), 8) || IifS(nmSK[nKd]=NUMBER_Null, '  ',
    PadL(Str(nmSK[nKd]), 2)) || PadR(VisStrLeftTrim(smNameFileA[nKd]), 12) || PadL(Str(nKd+1), 4) || PutCrLf()
.head 6 -  Set nVcrc = nVcrc + CRCstring(s404)
.head 6 +  If SalFileWrite(hV, s404, 404) != 404
.head 7 -  Call SalFileClose(hV)
.head 7 -  Call VisFileDelete(sV)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('Ошибка при записи в файл (404) ' || sV, 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 +  If not SalFileSeek(hV, 30, FILE_SeekBegin)
.head 6 -  Call SalFileClose(hV)
.head 6 -  Call VisFileDelete(sV)
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call MessageNoWait('Ошибка при записи в файл (30) ' || sV, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 5 +  If SalFileWrite(hV, PadL(Str(nSdeb), 16) || PadL(Str(nSkre), 16), 32) != 32
.head 6 -  Call SalFileClose(hV)
.head 6 -  Call VisFileDelete(sV)
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call MessageNoWait('Ошибка при записи в файл (32) ' || sV, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 5 -  Call SalFileClose(hV)
.head 5 +  If s01 = '1'
.head 6 +  If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT dfi,crc
   FROM klpcrc
   INTO :dDFI,:nCRC
   WHERE sab=:sSab and tip='V'"))
.head 7 +  If SqlFetchNext(hSqlAux2(),nFetchRes)
.head 8 -  Set nInterval = UGOECE(dDFI, sTITI)
.head 8 -  ! If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(
   SalDateCurrent(), 'yyyyMMdd') and nCRC = nDcrc and not bBezUsl
.head 8 +  If (SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(
   GetServerDate(), 'yyyyMMdd') and nCRC = nVcrc) or nInterval > 0
.head 9 -  Call VisFileDelete(sV)
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call Message(IifS(nInterval=2, 'Не наступило время формирования выписки для ' || sSab, IifS(nInterval=1,
     'Выписка для ' || sSab || ' в текущем интервале уже отбиралась', 'Идентичная выписка для ' || sSab ||
     ' ранее уже отбиралась (' || SalNumberToStrX(nCRC, 9) || ')')), TRUE)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     UPDATE klpcrc
     SET dfi= TODAY ,crc=:nVcrc
     WHERE sab=:sSab and tip='V'"))
.head 9 -  Call Message('Отобрана выписка для ' || sSab || ' (' || SalNumberToStrX(nCRC, 9) || ')', TRUE)
.head 7 +  Else
.head 8 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     INSERT
     INTO klpcrc (sab,tip,dfi,crc)
     VALUES (:sSab,'V', TODAY ,:nVcrc)"))
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sV)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sV)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhV = llopen(sV, OF_ReadWrite)
.head 5 +  If nhV > 0
.head 6 -  Set nKw = PUTFSGNB(nhV)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhV)
.head 7 -  Call VisFileDelete(sV)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sV), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sVc = VisFileCreateTemp('~V~')
.head 7 -  Call VisFileDelete(sVc)
.head 7 -  Set nhVc = llcreat(sVc, OF_ReadWrite)
.head 7 +  If nhVc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nIv = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nIv <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nIv]
.head 10 -  Set nSendId = nmlNOMER[nIv]
.head 10 -  Break
.head 9 -  Set nIv = nIv + 1
.head 8 -  Set nKw = ENCRYPTB(nhV, nhVc, nSendId)
.head 8 -  Call llclose(nhV)
.head 8 -  Call llclose(nhVc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sV)
.head 9 -  Call VisFileDelete(sVc)
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sV), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sVc, sDiskKata || sSab || '\\OUT\\' || Right(sV, 12), TRUE)
.head 10 -  Call MomFileCopy(sV, sArchPath || 'ARH\\' || Right(sV, 12), TRUE)
.head 10 -  Call VisFileDelete(sVc)
.head 10 -  Call VisFileDelete(sV)
.head 10 -  Call SqlCommit(hSql())
.head 10 -  Call SqlCommit(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sVc)
.head 10 -  Call VisFileDelete(sV)
.head 10 -  Call SqlRollback(hSql())
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhV)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sV)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sVc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sV)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sV, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: FormFileY
.head 4 -  Description: формирование файла %Y
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Date/Time: dFdat
.head 5 -  String: sSab
.head 5 -  String: smFNAMEKB[*]
.head 5 -  String: smIDENTKB[*]
.head 5 -  String: smTIPKB[*]
.head 5 -  String: smNLSA[*]
.head 5 -  Number: nmKVA[*]
.head 5 -  String: smNLSB[*]
.head 5 -  Number: nmKVB[*]
.head 5 -  Number: nmS[*]
.head 5 -  Number: nmREF[*]
.head 5 -  String: sTITI
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKd
.head 5 -  Number: nLA
.head 5 -  Boolean: bZag
.head 5 -  String: sV
.head 5 -  File Handle: hV
.head 5 -  String: sDaTi
.head 5 -  Number: nSdeb
.head 5 -  Number: nSkre
.head 5 -  Number: nKw
.head 5 -  Number: nhV
.head 5 -  Number: nhVc
.head 5 -  String: sVc
.head 5 -  Long String: s102
.head 5 -  !
.head 5 -  Number: nVcrc
.head 5 -  Date/Time: dDFI
.head 5 -  Number: nCRC
.head 5 -  !
.head 5 -  Number: nLenArr
.head 5 -  Number: nIv
.head 5 -  !
.head 5 -  Number: nInterval
.head 4 +  Actions
.head 5 -  Call SalArrayDimCount(smFNAMEKB, nKd)
.head 5 -  Call SalArrayGetUpperBound(smFNAMEKB, nKd, nLA)
.head 5 -  Set nKd = 0
.head 5 -  Set nVcrc = 0
.head 5 -  Set bZag = TRUE
.head 5 +  While nKd <= nLA
.head 6 +  If bZag ! Сформировать часть заголовка файла Y
.head 7 -  Set sV = sTempPath || '%Y' || sSab || DaySymbol(dFdat) || MonthSymbol(dFdat) || '.' || YearSymbol(dFdat) || '00'
.head 7 +  If not SalFileOpen(hV, sV, OF_Create | OF_ReadWrite)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при создании файла ' || sV, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set sDaTi = SalFmtFormatDateTime(dFdat, 'yyyyMMdd') || IifS(Right(sV, 2)='ZA', '235959', Right('0' ||
    SalFmtFormatDateTime(SalDateCurrent(), 'hhhhmmss'), 6))
.head 7 -  ! Call Debug(sDaTi)
.head 7 -  ! Call Debug(Str(nLA+1))
.head 7 +  If SalFileWrite(hV, Right(sV, 12) || sDaTi || PadL(Str(nLA+1), 4) || Repl('0', 8) || PutCrLf(), 40) != 40
.head 8 -  Call SalFileClose(hV)
.head 8 -  Call VisFileDelete(sV)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait('Ошибка при записи в файл (40) ' ||  sV, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 -  Set bZag = FALSE
.head 6 -  Set s102 = PadR(VisStrLeftTrim(smFNAMEKB[nKd]), 12) || PadR(VisStrLeftTrim(smIDENTKB[nKd]), 16) || PadL(
    VisStrLeftTrim(smTIPKB[nKd]), 2) || PadL(Str(nmREF[nKd]), 16) || PadL(VisStrLeftTrim(smNLSA[nKd]), 14) || PadL(
    Str(nmKVA[nKd]), 3) || PadL(VisStrLeftTrim(smNLSB[nKd]), 14) || PadL(Str(nmKVB[nKd]), 3) || PadL(
    Str(nmS[nKd]), 16) || PadL(Str(nKd+1), 4) || PutCrLf()
.head 6 -  Set nVcrc = nVcrc + CRCstring(s102)
.head 6 +  If SalFileWrite(hV, s102, 102) != 102
.head 7 -  Call SalFileClose(hV)
.head 7 -  Call VisFileDelete(sV)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('Ошибка при записи в файл (404) ' || sV, 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 -  Set nKd = nKd + 1
.head 5 -  Call SalFileClose(hV)
.head 5 +  ! If SqlPrepareAndExecute(hSqlAux2(), T("
   SELECT dfi,crc
   FROM klpcrc
   INTO :dDFI,:nCRC
   WHERE sab=:sSab and tip='Y'"))
.head 6 +   If SqlFetchNext(hSqlAux2(), nFetchRes)
.head 7 -   Set nInterval = UGOECE(dDFI, sTITI)
.head 7 -  ! If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(
   SalDateCurrent(), 'yyyyMMdd') and nCRC = nDcrc and not bBezUsl
.head 7 +   If (SalFmtFormatDateTime(dDFI, 'yyyyMMdd') =
   SalFmtFormatDateTime(GetServerDate(), 'yyyyMMdd') and nCRC = nVcrc) or
   nInterval > 0
.head 8 -   Call VisFileDelete(sV)
.head 8 -   Call SqlRollback(hSql())
.head 8 -   Call SqlRollback(hSqlAux2())
.head 8 -   Call Message(IifS(nInterval=2, 'Не наступило время формирования выписки для ' ||
     sSab, IifS(nInterval=1, 'Выписка для ' || sSab ||
     ' в текущем интервале уже отбиралась', 'Идентичная выписка для ' || sSab ||
     ' ранее уже отбиралась (' || SalNumberToStrX(nCRC, 9) || ')')), TRUE)
.head 8 -   Return FALSE
.head 7 +   Else 
.head 8 -   Call SqlPrepareAndExecute(hSqlAux2(), T("
     UPDATE klpcrc
     SET dfi= TODAY ,crc=:nVcrc
     WHERE sab=:sSab and tip='Y'"))
.head 8 -   Call Message('Отобрана вал.выписка для ' || sSab || ' (' ||
     SalNumberToStrX(nCRC, 9) || ')', TRUE)
.head 6 +   Else 
.head 7 -   Call SqlPrepareAndExecute(hSqlAux2(), T("
     INSERT
     INTO klpcrc (sab,tip,dfi,crc)
     VALUES (:sSab,'Y', TODAY ,:nVcrc)"))
.head 5 -  !
.head 5 -  ! пока вроде-бы не надо вставлять в klpcrc
.head 5 -  ! Call SqlPrepareAndExecute(hSqlAux2(), T("
     UPDATE klpcrc
     SET dfi= TODAY ,crc=:nVcrc
     WHERE sab=:sSab and tip='Y'"))
.head 5 -  ! Call Message('Отобрана вал.выписка для ' || sSab || ' (' || SalNumberToStrX(nCRC, 9)
     || ')', TRUE)
.head 5 -  !
.head 5 -  Call Message('Отобрана валютная выписка для ' || sSab, TRUE)
.head 5 -  ! Подписать файл и поместить в нужный ящик
.head 5 +  ! If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 6 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 6 +  If ShowInputPinCodeICT()
.head 7 -  Set nKw = InitICT()
.head 7 +  If nKw != 0
.head 8 -  Call VisFileDelete(sV)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 7 +  Else 
.head 8 -  Set bIni = TRUE
.head 6 +  Else 
.head 7 -  Call VisFileDelete(sV)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 5 -  Set nhV = llopen(sV, OF_ReadWrite)
.head 5 +  If nhV > 0
.head 6 -  Set nKw = PUTFSGNB(nhV)
.head 6 +  If nKw < 0
.head 7 -  Call llclose(nhV)
.head 7 -  Call VisFileDelete(sV)
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call SqlRollback(hSqlAux2())
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sV), 'Аварийная ситуация', 3, 1)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sVc = VisFileCreateTemp('~Y~')
.head 7 -  Call VisFileDelete(sVc)
.head 7 -  Set nhVc = llcreat(sVc, OF_ReadWrite)
.head 7 +  If nhVc > 0
.head 8 -  ! зашифровать
.head 8 -  ! Set nSendId = 1 ! пока
! (надо получить из KlpLcw по sSab)
.head 8 -  Set nIv = 0
.head 8 -  Set nSendId = 0
.head 8 -  Set nLenArr = LenArray(smlSAB)
.head 8 +  While nIv <= nLenArr
.head 9 +  If SalStrUpperX(sSab) = smlSAB[nIv]
.head 10 -  Set nSendId = nmlNOMER[nIv]
.head 10 -  Break
.head 9 -  Set nIv = nIv + 1
.head 8 -  Set nKw = ENCRYPTB(nhV, nhVc, nSendId)
.head 8 -  Call llclose(nhV)
.head 8 -  Call llclose(nhVc)
.head 8 +  If nKw != 0
.head 9 -  Call VisFileDelete(sV)
.head 9 -  Call VisFileDelete(sVc)
.head 9 -  Call SqlRollback(hSql())
.head 9 -  Call SqlRollback(hSqlAux2())
.head 9 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sV), 'Аварийная ситуация', 3, 1)
.head 9 -  Return FALSE
.head 8 +  Else
.head 9 +  If MomFileCopy(sVc, sDiskKata || sSab || '\\OUT\\' || Right(sV, 12), TRUE)
.head 10 -  Call MomFileCopy(sV, sArchPath || 'ARH\\' || Right(sV, 12), TRUE)
.head 10 -  Call VisFileDelete(sVc)
.head 10 -  Call VisFileDelete(sV)
.head 10 -  Call SqlCommit(hSql())
.head 10 -  Call SqlCommit(hSqlAux2())
.head 10 -  Return TRUE
.head 9 +  Else
.head 10 -  Call VisFileDelete(sVc)
.head 10 -  Call VisFileDelete(sV)
.head 10 -  Call SqlRollback(hSql())
.head 10 -  Call SqlRollback(hSqlAux2())
.head 10 -  Return FALSE
.head 7 +  Else
.head 8 -  Call llclose(nhV)
.head 8 -  Call SqlRollback(hSql())
.head 8 -  Call SqlRollback(hSqlAux2())
.head 8 -  Call VisFileDelete(sV)
.head 8 -  Call MessageNoWait('Ошибка при создании временного файла ' || sVc, 'Аварийная ситуация', 3, 1)
.head 8 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRollback(hSql())
.head 6 -  Call SqlRollback(hSqlAux2())
.head 6 -  Call VisFileDelete(sV)
.head 6 -  Call MessageNoWait('Ошибка при открытии файла ' || sV, 'Аварийная ситуация', 3, 1)
.head 6 -  Return FALSE
.head 3 +  Function: UGOECE
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Date/Time: dYes
.head 5 -  String: sInt
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sElement[*]
.head 5 -  String: sLTime[*]
.head 5 -  String: sRTime[*]
.head 5 -  Number: nLHou[*]
.head 5 -  Number: nLMin[*]
.head 5 -  Number: nRHou[*]
.head 5 -  Number: nRMin[*]
.head 5 -  String: sTemp
.head 5 -  Number: nI
.head 5 -  Number: n1
.head 5 -  Number: nSecondsYes
.head 5 -  Number: nSecondsCurrent
.head 5 -  Boolean: bPloxo
.head 4 +  Actions
.head 5 +  If SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') != SalFmtFormatDateTime(dBankDate, 'yyyyMMdd')
.head 6 -  Return 2
.head 5 -  ! Call Debug(sInt)
.head 5 +  If Len(SalStrTrimX(sInt)) = 0 or SalDateDay(dYes) != SalDateDay(SalDateCurrent()) or
   SalDateMonth(dYes) != SalDateMonth(SalDateCurrent()) or SalDateYear(dYes) != SalDateYear(SalDateCurrent())
.head 6 -  Return 0
.head 5 -  Set nSecondsYes = SalDateHour(dYes)*3600 + SalDateMinute(dYes)*60 + SalDateSecond(dYes)
.head 5 -  Set nSecondsCurrent = SalDateHour(SalDateCurrent())*3600 + SalDateMinute(SalDateCurrent())*60 + SalDateSecond(
    SalDateCurrent())
.head 5 -  Call SalArraySetUpperBound(sElement, 1, -1)
.head 5 -  Call SalArraySetUpperBound(sLTime, 1, -1)
.head 5 -  Call SalArraySetUpperBound(sRTime, 1, -1)
.head 5 -  Call SalArraySetUpperBound(nLHou, 1, -1)
.head 5 -  Call SalArraySetUpperBound(nLMin, 1, -1)
.head 5 -  Call SalArraySetUpperBound(nRHou, 1, -1)
.head 5 -  Call SalArraySetUpperBound(nRMin, 1, -1)
.head 5 -  Set sTemp = sInt
.head 5 -  Set nI = 0
.head 5 -  Set n1 = SalStrScan(sTemp, ',')
.head 5 +  If n1 >= 0
.head 6 +  Loop
.head 7 -  Set sElement[nI] = Left(sTemp, n1)
.head 7 -  Set sTemp = Subs(sTemp, n1+2, Len(sTemp)-n1-1)
.head 7 -  Set nI = nI + 1
.head 7 -  Set n1 = SalStrScan(sTemp, ',')
.head 7 +  If n1 < 0
.head 8 -  Set sElement[nI] = sTemp
.head 8 -  Break
.head 5 +  Else
.head 6 -  Set sElement[0] = sTemp
.head 5 -  Set nI = 0
.head 5 +  While nI <= LenArray(sElement)
.head 6 -  Set n1 = SalStrScan(sElement[nI], '-')
.head 6 +  If n1 < 0
.head 7 -  Return 0
.head 6 +  Else
.head 7 -  Set sLTime[nI] = Left(sElement[nI], n1)
.head 7 -  Set sRTime[nI] = Subs(sElement[nI], n1+2, Len(sElement[nI])-n1-1)
.head 7 +  If Len(sLTime[nI])*Len(sRTime[nI]) = 0
.head 8 -  Return 0
.head 7 +  Else
.head 8 -  Set n1 = SalStrScan(sLTime[nI], ':')
.head 8 -  Set nLHou[nI] = IifN(n1<0, Val(sLTime[nI]), Val(Left(sLTime[nI], n1)))
.head 8 -  Set nLMin[nI] = IifN(n1<0, 0, Val(Subs(sLTime[nI], n1+2, Len(sLTime[nI])-n1-1)))
.head 8 -  Set n1 = SalStrScan(sRTime[nI], ':')
.head 8 -  Set nRHou[nI] = IifN(n1<0, Val(sRTime[nI]), Val(Left(sRTime[nI], n1)))
.head 8 -  Set nRMin[nI] = IifN(n1<0, 0, Val(Subs(sRTime[nI], n1+2, Len(sRTime[nI])-n1-1)))
.head 8 -  Set bPloxo = nLHou[nI] < 0 or nLHou[nI] > 23 or nLMin[nI] < 0 or nLMin[nI] > 59 or nRHou[nI] < 0 or
    nRHou[nI] > 23 or nRMin[nI] < 0 or nRMin[nI] > 59 or nRHou[nI] < nLHou[nI] or (nRHou[nI] = nLHou[nI] and
    nRMin[nI] <= nLMin[nI])
.head 8 +  If nI > 0
.head 9 -  Set bPloxo = bPloxo or nLHou[nI-1] > nLHou[nI] or nRHou[nI-1] > nLHou[nI] or (nRHou[nI-1] = nLHou[nI] and
    nRMin[nI-1] >= nLMin[nI])
.head 8 +  If bPloxo
.head 9 -  Return 0
.head 8 +  Else
.head 9 +  If nSecondsCurrent >= nLHou[nI]*3600 + nLMin[nI]*60 and nSecondsCurrent <= nRHou[nI]*3600 + nRMin[nI]*60
.head 10 -  ! попали в нужный диапазон
.head 10 -  Return IifN(nSecondsYes<nLHou[nI]*3600+nLMin[nI]*60 or nSecondsYes>nRHou[nI]*3600+nRMin[nI]*60, 0, 1)
.head 6 -  Set nI = nI + 1
.head 5 -  Return 2
.head 3 +  Function: LenArrayN
.head 4 -  Description: возвращает длину одномерного массива чисел
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nmArr[*]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nBound
.head 4 +  Actions
.head 5 -  Call SalArrayGetUpperBound(nmArr, 1, nBound)
.head 5 -  Return nBound
.head 3 +  Function: ErrMsgIct
.head 4 -  Description: формирование текстовых расшифровок кодов возврата функций ИКТ
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nKow
.head 5 -  String: sDes
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTx
.head 4 +  Actions
.head 5 +  If nKow = -1
.head 6 -  Set sTx = 'На дискете отсутствует секретный ключ'
.head 5 +  Else If nKow = -2
.head 6 -  Set sTx = 'Ошибка чтения секретного ключа'
.head 5 +  Else If nKow = -3
.head 6 -  Set sTx = 'Нарушена целостность секретного ключа'
.head 5 +  Else If nKow = -4
.head 6 -  Set sTx = 'PIN-код введен неверно'
.head 5 +  Else If nKow = -9
.head 6 -  Set sTx = 'Ошибка инициализации БД открытых ключей'
.head 5 +  Else If nKow = -10
.head 6 -  Set sTx = 'Ошибка чтения открытого ключа'
.head 5 +  Else If nKow = -13
.head 6 -  Set sTx = 'Нарушена целостность открытого ключа'
.head 5 +  Else If nKow = -14
.head 6 -  Set sTx = 'Ошибка поиска открытого ключа'
.head 5 +  Else If nKow = -16
.head 6 -  Set sTx = 'Отсутствует заданный каталог'
.head 5 +  Else If nKow = -40
.head 6 -  Set sTx = 'Ошибка открытия/чтения файла'
.head 5 +  Else If nKow = -41
.head 6 -  Set sTx = 'Ошибка записи в файл'
.head 5 +  Else If nKow = -43
.head 6 -  Set sTx = 'Ошибка при постановке ЦП'
.head 5 +  Else If nKow = -45
.head 6 -  Set sTx = 'Отсутствует ЦП (файл не был подписан)'
.head 5 +  Else If nKow = -47
.head 6 -  Set sTx = 'Неверная ЦП (не снята подпись)'
.head 5 +  Else If nKow = -102
.head 6 -  Set sTx = 'Нарушена целостность файла'
.head 5 +  Else If nKow = -103
.head 6 -  Set sTx = 'Файл не зашифрован'
.head 5 +  Else
.head 6 -  Set sTx = 'Ошибка ' || Str(nKow)
.head 5 -  Return sDes || '(' || Str(nKow) || ').' || ' ' || sTx
.head 3 +  Function: InitICT
.head 4 -  Description: инициализация подписи ИКТ
.head 4 +  Returns
.head 5 -  Number:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! Call Debug(GetOpKeyPath()||'==='||GetSecKeyDrv()||'==='||sArchPath||'==='||GetPinCodeICT())
.head 5 -  Return INITKSGN(GetOpKeyPath(), GetSecKeyDrv(), sArcAudit, GetPinCodeICT())
.head 3 +  Function: ShowInputPinCodeICT
.head 4 -  Description: ввод PIN-кода ИКТ
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalModalDialog(dlg_InputPinCodeICT, hWndForm)
.head 3 +  Function: GetPinCodeICT
.head 4 -  Description: возвращает значение PIN-кода ИКТ
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return strPinCodeICT
.head 3 +  Function: Suffix
.head 4 -  Description: возвращает суффикс по типу файла и SAB
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sSab
.head 5 -  String: sTip
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nSuf
.head 5 -  Number: nRnk
.head 5 -  String: sTemp
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSqlAux2(), T('
     SELECT k.count,k.rnk
     INTO :nSuf,:nRnk
     FROM custcount k, customer c
     WHERE k.tip=:sTip and c.sab=:sSab and k.rnk=c.rnk'))
.head 5 +  If SqlFetchNext(hSqlAux2(), nFetchRes)
.head 6 -  Set nSuf = IifN(nSuf=99, 0, nSuf+1)
.head 6 -  Call SqlPrepareAndExecute(hSqlAux2(), T('
     UPDATE custcount
     SET count=:nSuf
     WHERE rnk=:nRnk and tip=:sTip'))
.head 5 +  Else
.head 6 -  Call SqlPrepareAndExecute(hSqlAux2(), T('
     SELECT rnk
     INTO :nRnk
     FROM customer
     WHERE sab=:sSab'))
.head 6 -  Call SqlFetchNext(hSqlAux2(), nFetchRes)
.head 6 -  Call SqlPrepareAndExecute(hSqlAux2(), T('
     SELECT tip
     INTO :sTemp
     FROM tipcount
     WHERE tip=:sTip'))
.head 6 +  If not SqlFetchNext(hSqlAux2(), nFetchRes)
.head 7 -  Call SqlPrepareAndExecute(hSqlAux2(), T("
     INSERT
     INTO tipcount (tip, name)
     VALUES (:sTip,'')"))
.head 6 -  ! Call Debug('rnk,tip,count = ' || Str(nRnk) || ',' || sTip || ',' || Str(nSuf))
.head 6 -  Call SqlPrepareAndExecute(hSqlAux2(), T('
     INSERT
     INTO custcount (rnk,tip,count)
     VALUES (:nRnk,:sTip,:nSuf)'))
.head 5 -  Return Right(Str(nSuf+100), 2)
.head 3 +  Function: LcwRead
.head 4 -  Description: обработка файла лицензии [МФО].Lcw
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sLiPa
.head 5 -  String: sKod
.head 5 -  File Handle: hO
.head 5 -  Number: nSeed
.head 5 -  Number: nB
.head 5 -  Number: n1
.head 5 -  Number: nTmp
.head 5 -  String: sKoPo
.head 5 -  String: sNoPo
.head 5 -  Number: nNoPo
.head 5 -  String: sDali
.head 5 -  Date/Time: dDali
.head 4 +  Actions
.head 5 +  If sProcInfo = '0'
.head 6 -  Return TRUE
.head 5 -  Set sLiPa = GetLicenPath() || GetBankMfo() || '.Lcw'
.head 5 +  ! If not SalFileOpen(hO, sLiPa, OF_Read)
.head 6 -   Call Message('Невозможно открыть файл ' || sLiPa || ' ...', TRUE)
.head 6 -   Return FALSE
.head 5 -  Set nTmp = VisFileOpen(hO, sLiPa, OF_Read)
.head 5 +  If nTmp != VTERR_Ok
.head 6 -  Call Message('Невозможно открыть файл ' || sLiPa || ' (' || Str(nTmp) || ') ...', TRUE)
.head 6 -  Return FALSE
.head 5 +  Else
.head 6 -  ! для отладки
.head 6 -  Call VisFileClose(hO)
.head 6 -  Call SalFileOpen(hO, sLiPa, OF_Read)
.head 6 -  ! для отладки
.head 6 -  Set nSeed = SalFileGetChar(hO)
.head 6 -  Set nIndex = 0
.head 6 +  While TRUE
.head 7 -  Set nB = SalFileGetChar(hO)
.head 7 +  If nB != -1 ! не конец файла
.head 8 -  Set nSeed = Mod(nSeed+1, 256)
.head 8 -  Set nB = SalNumberXOR(nB, nSeed)
.head 8 -  Set n1 = 0
.head 8 -  Set sKod = ''
.head 8 +  While n1 < nB
.head 9 -  Set nTmp = SalFileGetChar(hO)
.head 9 +  If nTmp = -1
.head 10 -  Call SalFileClose(hO)
.head 10 -  Call Message('Ошибка (1) обработки файла лицензии ' || sLiPa || ' ...', TRUE)
.head 10 -  Return FALSE
.head 9 +  Else
.head 10 -  Set nSeed = Mod(nSeed+1, 256)
.head 10 -  Set nTmp = SalNumberXOR(nTmp, nSeed)
.head 10 -  Set sKod = sKod || Chr(nTmp)
.head 10 -  Set n1 = n1 + 1
.head 8 -  Set n1 = 0
.head 8 -  Set sKoPo = ''
.head 8 +  While n1 < 4
.head 9 -  Set nTmp = SalFileGetChar(hO)
.head 9 +  If nTmp = -1
.head 10 -  Call SalFileClose(hO)
.head 10 -  Call Message('Ошибка (2) обработки файла лицензии ' || sLiPa || ' ...', TRUE)
.head 10 -  Return FALSE
.head 9 +  Else
.head 10 -  Set nSeed = Mod(nSeed+1, 256)
.head 10 -  Set nTmp = SalNumberXOR(nTmp, nSeed)
.head 10 -  Set sKoPo = sKoPo || Chr(nTmp)
.head 10 -  Set n1 = n1 + 1
.head 8 -  Set n1 = 0
.head 8 -  Set sNoPo = ''
.head 8 +  While n1 < 4
.head 9 -  Set nTmp = SalFileGetChar(hO)
.head 9 +  If nTmp = -1
.head 10 -  Call SalFileClose(hO)
.head 10 -  Call Message('Ошибка (3) обработки файла лицензии ' || sLiPa || ' ...', TRUE)
.head 10 -  Return FALSE
.head 9 +  Else
.head 10 -  Set nSeed = Mod(nSeed+1, 256)
.head 10 -  Set nTmp = SalNumberXOR(nTmp, nSeed)
.head 10 -  Set sNoPo = sNoPo || Chr(nTmp)
.head 10 -  Set n1 = n1 + 1
.head 8 -  Set nNoPo = Val(sNoPo)
.head 8 -  Set n1 = 0
.head 8 -  Set sDali = ''
.head 8 +  While n1 < 8
.head 9 -  Set nTmp = SalFileGetChar(hO)
.head 9 +  If nTmp = -1
.head 10 -  Call SalFileClose(hO)
.head 10 -  Call Message('Ошибка (4) обработки файла лицензии ' || sLiPa || ' ...', TRUE)
.head 10 -  Return FALSE
.head 9 +  Else
.head 10 -  Set nSeed = Mod(nSeed+1, 256)
.head 10 -  Set nTmp = SalNumberXOR(nTmp, nSeed)
.head 10 -  Set sDali = sDali || Chr(nTmp)
.head 10 -  Set n1 = n1 + 1
.head 8 -  Set dDali = SalDateConstruct(Val(Left(sDali, 4)), Val(SalStrMidX(sDali, 4, 2)), Val(
    SalStrMidX(sDali, 6, 2)), 0, 0, 0)
.head 8 -  Set smlKOD  [nIndex] = sKod
.head 8 -  Set smlSAB  [nIndex] = SalStrUpperX(sKoPo)
.head 8 -  Set nmlNOMER[nIndex] = nNoPo
.head 8 -  Set dmlDALI [nIndex] = dDali
.head 8 -  Set nIndex = nIndex + 1
.head 7 +  Else
.head 8 -  Call SalFileClose(hO)
.head 8 -  Return TRUE
.head 3 +  Function: SalNumberXOR
.head 4 -  Description: XOR
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: n1
.head 5 -  Number: n2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return (n1 & (-1-n2)) | (n2 & (-1-n1))
.head 3 +  Function: SetBankDate
.head 4 -  Description:
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! Call ExecuteParams()
.head 5 -  ! Call GetParamsSettings(hSql())
.head 5 -  ! Set dBankDate = GetParamBankDate()
.head 5 -  Set dBankDate = GetBankDateMom()
.head 5 -  Call SalSetWindowText(menu12, sTitle || ' банковская дата ' || SalFmtFormatDateTime(dBankDate, 'dd/MM/yyyy'))
.head 3 +  Function: OtborOPER
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return FALSE
.head 3 +  Function: PayAllDok
.head 4 -  Description: оплата документов
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: ssNaePon[*]
.head 5 -  Number: nnFl[*]
.head 5 -  Number: nnNeom[*]
.head 5 -  Number: nnS[*]
.head 5 -  String: ssNls[*]
.head 5 -  String: ssMfo[*]
.head 5 -  String: ssNlsp[*]
.head 5 -  String: ssNaimp[*]
.head 5 -  String: ssNd[*]
.head 5 -  String: ssText1[*]
.head 5 -  String: ssPond[*]
.head 5 -  String: ssPrwo[*]
.head 5 -  String: ssNaex[*]
.head 5 -  Number: nnCkv[*]
.head 5 -  String: ssKokb[*]
.head 5 -  Number: nnVob[*]
.head 5 -  Date/Time: ddDatad[*]
.head 5 -  String: ssKoka[*]
.head 5 -  Date/Time: ddDaVal[*]
.head 5 -  String: sNaex
.head 5 -  Number: nnRefKlp[*]
.head 5 -  Number: nFl
.head 5 -  Number: nNeom
.head 5 -  String: sNd
.head 5 -  String: sNls
.head 5 -  String: sMfo
.head 5 -  String: sNaimp
.head 5 -  String: sNlsp
.head 5 -  String: sText1
.head 5 -  String: sKokb
.head 5 -  String: sPrwo
.head 5 -  Number: nVob
.head 5 -  String: sPond
.head 5 -  Number: nCkv
.head 5 -  Date/Time: dDatad
.head 5 -  String: sKoka
.head 5 -  String: sNaePon
.head 5 -  Date/Time: dNaePon
.head 5 -  Number: nRefKlp
.head 5 -  Number: nElemCount
.head 5 -  Date/Time: dDaVal
.head 5 -  String: sMaket
.head 5 -  String: sNAMAs
.head 5 -  String: sVspo
.head 5 -  Number: nDk
.head 5 -  Number: nAcc
.head 5 -  Number: nOSTB
.head 5 -  Number: nOSTB8
.head 5 -  Boolean: bRoll
.head 5 -  String: AMFO
.head 5 -  : cDoc
.head 6 -  Class: cDoc
.head 5 -  Number: nRef
.head 5 -  String: sPon
.head 5 -  String: sNae
.head 5 -  String: sOper
.head 5 -  Boolean: bUIklp
.head 5 -  Number: nCountUpd
.head 5 -  Date/Time: dBankDate
.head 5 -  String: sSab0
.head 5 -  !
.head 5 -  Number: i
.head 5 -  Number: j
.head 5 -  String: strErrorNo
.head 5 -  String: strErrAbs
.head 5 -  String: strNls
.head 5 -  !
.head 5 -  String: ssNaimo[*]
.head 5 -  String: sNaimo
.head 5 -  !
.head 5 -  Number: nFLverify
.head 4 +  Actions
.head 5 +  If cbPAY
.head 6 -  Set dBankDate = GetBankDateMom()
.head 6 -  Set AMFO = GetBankMfo()
.head 6 -  Set nIndex = 0
.head 6 -  Call SalArraySetUpperBound(ssNaePon, 1, -1)
.head 6 -  Call SalArraySetUpperBound(nnFl, 1, -1)
.head 6 -  Call SalArraySetUpperBound(nnNeom, 1, -1)
.head 6 -  Call SalArraySetUpperBound(nnS, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNls, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssMfo, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNlsp, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNaimp, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNd, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssText1, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssPond, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssPrwo, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNaex, 1, -1)
.head 6 -  Call SalArraySetUpperBound(nnCkv, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssKokb, 1, -1)
.head 6 -  Call SalArraySetUpperBound(nnVob, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ddDatad, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssKoka, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ddDaVal, 1, -1)
.head 6 -  ! Call SqlPrepareAndExecute(hSqlAux2(), "
     SELECT ref,fl,eom,s,nls,mfo,nlsp,naimp,nd,text1,pond,prwo,naex,kv,kokb,vob,datad,koka,daval
     INTO :nRefKlp,:nFl,:nNeom,:nS,:sNls,:sMfo,:sNlsp,:sNaimp,:sNd,:sText1,:sPond,:sPrwo,:sNaex,:nCkv,:sKokb,:nVob,
          :dDatad,:sKoka,:dDaVal
     FROM klp
     WHERE fl=0 and noauto is null
     ORDER BY nvl(prwo,'$'),ref
     FOR UPDATE OF fl NOWAIT")
.head 6 -  Call SqlPrepareAndExecute(hSqlAux2(), "
     SELECT ref,fl,eom,s,nls,mfo,nlsp,naimp,nd,text1,pond,prwo,naex,kv,kokb,vob,datad,koka,daval,naimo
     INTO :nRefKlp,:nFl,:nNeom,:nS,:sNls,:sMfo,:sNlsp,:sNaimp,:sNd,:sText1,:sPond,:sPrwo,:sNaex,:nCkv,:sKokb,:nVob,
          :dDatad,:sKoka,:dDaVal,:sNaimo
     FROM klp
     WHERE fl=0 and noauto is null
     ORDER BY ref
     FOR UPDATE OF fl NOWAIT")
.head 6 +  While SqlFetchNext(hSqlAux2(), nFetchRes)
.head 7 -  Set ssNaePon[nIndex] = sNaex || Right('0000000000' || SalStrTrimX(sPond), 10)
.head 7 -  Set nnRefKlp[nIndex] = nRefKlp
.head 7 -  Set nnFl[nIndex] = nFl
.head 7 -  Set nnNeom[nIndex] = nNeom
.head 7 -  Set nnS[nIndex] = nS
.head 7 -  Set ssNls[nIndex] = sNls
.head 7 -  Set ssMfo[nIndex] = sMfo
.head 7 -  Set ssNlsp[nIndex] = sNlsp
.head 7 -  Set ssNaimp[nIndex] = sNaimp
.head 7 -  Set ssNd[nIndex] = sNd
.head 7 -  Set ssText1[nIndex] = sText1
.head 7 -  Set ssPond[nIndex] = sPond
.head 7 -  Set ssPrwo[nIndex] = sPrwo
.head 7 -  Set ssNaex[nIndex] = sNaex
.head 7 -  Set nnCkv[nIndex] = nCkv
.head 7 -  Set ssKokb[nIndex] = sKokb
.head 7 -  Set nnVob[nIndex] = nVob
.head 7 -  Set ddDatad[nIndex] = dDatad
.head 7 -  Set ssKoka[nIndex] = sKoka
.head 7 -  Set ddDaVal[nIndex] = dDaVal
.head 7 -  Set ssNaimo[nIndex] = sNaimo
.head 7 -  Set nIndex = nIndex + 1
.head 6 -  ! Call SalArrayDimCount(ssNaePon, nIndex)
.head 6 -  ! Call SalArrayGetUpperBound(ssNaePon, nIndex, nElemCount)
.head 6 -  Set nElemCount = nIndex - 1
.head 6 -  ! Call Debug('nElemCount=' || Str(nElemCount))
.head 6 -  Set nIndex = 0
.head 6 +  While nIndex <= nElemCount
.head 7 -  ! Call Debug(Str(nIndex))
.head 7 -  Set nFLverify = -1
.head 7 -  Set nRefKlp = nnRefKlp[nIndex]
.head 7 +  If SqlPrepareAndExecute(hSqlAux2(), "
   SELECT fl
   INTO :nFLverify
   FROM klp
   WHERE ref=:nRefKlp") and SqlFetchNext(hSqlAux2(), nFetchRes) and nFLverify=0
.head 8 -  Set sNaePon = ssNaePon[nIndex]
.head 8 -  Set dNaePon = ddDatad[nIndex]
.head 8 -  Set nFl = nnFl[nIndex]
.head 8 -  Set nNeom = nnNeom[nIndex]
.head 8 -  Set nS = nnS[nIndex]
.head 8 -  Set sNls = ssNls[nIndex]
.head 8 -  Set sMfo = ssMfo[nIndex]
.head 8 -  Set sNlsp = ssNlsp[nIndex]
.head 8 -  Set sNaimp = ssNaimp[nIndex]
.head 8 -  Set sNd = ssNd[nIndex]
.head 8 -  Set sText1 = ssText1[nIndex]
.head 8 -  Set sPond = ssPond[nIndex]
.head 8 -  Set sPrwo = ssPrwo[nIndex]
.head 8 -  Set sNaex = ssNaex[nIndex]
.head 8 -  Set nCkv = nnCkv[nIndex]
.head 8 -  Set sKokb = ssKokb[nIndex]
.head 8 -  Set nVob = nnVob[nIndex]
.head 8 -  Set dDatad = ddDatad[nIndex]
.head 8 -  Set sKoka = ssKoka[nIndex]
.head 8 -  Set dDaVal = ddDaVal[nIndex]
.head 8 -  Set sNaimo = ssNaimo[nIndex]
.head 8 -  Set sMaket = IifS(SalStrTrimX(sMfo)=AMFO, 'I', 'O')
.head 8 -  Set nI = VisArrayFindString(smTIP, sMaket)
.head 8 -  Set sTTS = IifS(nI>=0, smTTS[nI], '')
.head 8 -  Set nDk = 1
.head 8 -  Set nAcc = 0
.head 8 -  Set nOSTB = 0
.head 8 -  Set sNAMAs = 'Плательщик не идентифицирован'
.head 8 +  If Len(sNaimo) = 0
.head 9 +  If SqlPrepareAndExecute(hSqlAux3(), T('
   SELECT nvl(c.nmkk,c.nmk),a.acc,a.ostb
   INTO :sNAMAs,:nAcc,:nOSTB
   FROM customer c, cust_acc u, accounts a
   WHERE a.nls=:sNls and a.kv=:nCkv and c.rnk=u.rnk and a.acc=u.acc'))
.head 10 -  Call SqlFetchNext(hSqlAux3(), nFetchRes)
.head 8 +  Else
.head 9 +  If SqlPrepareAndExecute(hSqlAux3(), T('
   SELECT a.acc,a.ostb
   INTO :nAcc,:nOSTB
   FROM accounts a
   WHERE a.nls=:sNls and a.kv=:nCkv'))
.head 10 -  Call SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set sNAMAs = sNaimo
.head 8 -  Set sVspo = IifS(dDaVal=DATETIME_Null, '', '#D' || SalFmtFormatDateTime(dDaVal, 'yyMMdd') || '#')
.head 8 -  Set bRoll = FALSE
.head 8 +  If nOSTB < nS
.head 9 -  ! Лимит
.head 9 +  If SqlPrepareAndExecute(hSqlAux3(), T('
   SELECT a8.ostb
   INTO :nOSTB8
   FROM accounts a8, v862 v
   WHERE v.acc6=:nAcc and v.acc8=a8.acc and a8.ostb>0'))
.head 10 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 11 -  Set nOSTB8 = 0
.head 9 +  Else
.head 10 -  Set bRoll = TRUE
.head 9 +  If nOSTB+nOSTB8 >= nS
.head 10 -  ! Лимит есть
.head 10 +  If Len(sTTS) > 0
.head 11 -  Set sTTS = Left(sTTS, 2) || Str(Val(Right(sTTS, 1))+2)
.head 9 +  ! Else
.head 10 -  ! Лимита нет, ждите поступлений
.head 8 +  If not bRoll
.head 9 +  If Len(sTTS) > 0
.head 10 -  Call SaveInfoToLog('KLOP_ELL(1): cDoc.SetDoc(ref==>' || Str(nRefKlp) || ')')
.head 10 -  ! Call Debug(SalFmtFormatDateTime(dDatad, 'dd-MM-yyyy hhhh:mm:ss'))
.head 10 -  ! Call Debug(
'nRefKlp            = ' || Str(nRefKlp)                 || PutCrLf() ||
'sTTS               = ' || sTTS                         || PutCrLf() ||
'nDk                = ' || Str(nDk)                     || PutCrLf() ||
'nVob               = ' || Str(nVob)                    || PutCrLf() ||
'sNd                = ' || sNd                          || PutCrLf() ||
'dDatad             = ' || SalFmtFormatDateTime(dDatad,
                           'dd-MM-yyyy hhhh:mm:ss')     || PutCrLf() ||
'SalStrTrimX(sNls)  = ' || SalStrTrimX(sNls)            || PutCrLf() ||
'sNAMAs             = ' || sNAMAs                       || PutCrLf() ||
'AMFO               = ' || AMFO                         || PutCrLf() ||
'nCkv               = ' || Str(nCkv)                    || PutCrLf() ||
'nS                 = ' || Str(nS)                      || PutCrLf() ||
'SalStrTrimX(sKoka) = ' || SalStrTrimX(sKoka)           || PutCrLf() ||
'SalStrTrimX(sNlsp) = ' || SalStrTrimX(sNlsp)           || PutCrLf() ||
'sNaimp             = ' || sNaimp                       || PutCrLf() ||
'SalStrTrimX(sMfo)  = ' || SalStrTrimX(sMfo)            || PutCrLf() ||
'nCkv               = ' || Str(nCkv)                    || PutCrLf() ||
'nS                 = ' || Str(nS)                      || PutCrLf() ||
'SalStrTrimX(sKokb) = ' || SalStrTrimX(sKokb)           || PutCrLf() ||
'sText1             = ' || sText1                       || PutCrLf() ||
'sVspo              = ' || sVspo                        || PutCrLf() ||
'GetIdOper()        = ' || GetIdOper()
)
.head 10 -  ! Call Debug('1')
.head 10 -  Call SqlPrepareAndExecute(hSqlAux3(), T("
     SELECT i.acc
     FROM acci i, accounts a
     WHERE a.nls=:sNls and a.kv=:nCkv and a.acc=i.acc"))
.head 10 +  If SqlFetchNext(hSqlAux3(), nFetchRes)
.head 11 -  Call cDoc.SetDoc(nRefKlp, sTTS, nDk, nVob, sNd, dDatad, dBankDate, dBankDate,dBankDate, SalStrTrimX(sNls),
     sNAMAs, AMFO, '', nCkv, nS, SalStrTrimX(sKoka), SalStrTrimX(sNlsp), sNaimp, SalStrTrimX(sMfo), '',
     nCkv, nS, SalStrTrimX(sKokb), sText1, sVspo, GetIdOper(), '', NUMBER_Null, 0)
.head 11 -  ! Set cDoc.m_nTim = 1440
.head 11 -  Set g_nTim = 1440
.head 11 -  Set cDoc.m_nNom = nS - Max(nOSTB, 0)
.head 11 -  Set cDoc.m_sRef_A = Str(nRefKlp)
.head 11 -  ! Call Debug('2')
.head 11 +  If cDoc.sDoc()
.head 12 -  ! Call Debug('3 - ' || Str(nRefKlp))
.head 12 -  ! Call Debug(SalFmtFormatDateTime(cDoc.m_dDatD, 'dd-MM-yyyy hhhh:mm:ss'))
.head 12 -  ! Call Debug(SalFmtFormatDateTime(cDoc.m_dDatV1, 'dd-MM-yyyy hhhh:mm:ss'))
.head 12 -  ! Call Debug(SalFmtFormatDateTime(cDoc.m_dDatV2, 'dd-MM-yyyy hhhh:mm:ss'))
.head 12 -  ! Call Debug(SalFmtFormatDateTime(cDoc.m_dDatP, 'dd-MM-yyyy hhhh:mm:ss'))
.head 12 +  If cDoc.iDoc()
.head 13 -  ! Call Debug('4')
.head 13 -  Set spWozwr = ''
.head 13 -  Set boDoc = TRUE
.head 13 +  If cDoc.oDoc()
.head 14 -  ! Call Debug('5')
.head 14 -  Set nRef = cDoc.m_nRef
.head 14 -  Call SaveInfoToLog('KLOP_ELL(1): cDoc.oDoc() return ref==>' || Str(cDoc.m_nRef))
.head 14 -  Set sNae = Left(sNaePon, 12)
.head 14 -  Set sPon = Str(Val(Right(sNaePon, 10)))
.head 14 +  If SqlPrepareAndExecute(hSqlAux3(), "
   UPDATE klp
   SET fl=8,prwo=''
   WHERE naex=:sNae and pond=:sPon and datad=:dNaePon")
.head 15 -  Set sOper = Right(Str(10000+nNeom), 4)
.head 15 -  Set bUIklp = SqlPrepareAndExecute(hSqlAux3(), T("
    UPDATE klpond
    SET ref=:nRef
    WHERE pond=:sPond and filename=:sNaex"))
.head 15 -  Set nCountUpd = 0
.head 15 -  Call SqlGetModifiedRows(hSqlAux3(), nCountUpd)
.head 15 +  If nCountUpd = 0
.head 16 -  Set bUIklp = SqlPrepareAndExecute(hSqlAux3(), T("
    INSERT
    INTO klpond (ref,pond,filename)
    VALUES (:nRef,:sPond,:sNaex)"))
.head 15 +  If bUIklp
.head 16 -  Set sSab0 = Subs(sNaex, 3, 4)
.head 16 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   INSERT
   INTO klpoow (sab,oper,mfoa,nlsa,mfob,nlsb,namb,s,nd,nazn,pond,nfia,tip)
   VALUES (:sSab0,:sOper,:AMFO,:sNls,:sMfo,:sNlsp,:sNaimp,:nS,:sNd,:sText1,:sPond,:sNaex,'O')"))
.head 17 -  Call SqlCommit(hSql())
.head 17 -  Call SqlCommit(hSqlAux3())
.head 17 -  Call Message(sSab0 || ': Оплачен "электронный" док.' || SalStrTrimX(sNd) || ', (Ref=' ||
     Str(nRef) || '), СчётА=' || sNls || ', МФО=' || sMfo || ', СчётБ=' || sNlsp || ', Сумма='
     || SalNumberToStrX(nS/100, 2) || ', Получатель - ' || sNaimp || ', Назначение платежа - '
     || sText1, TRUE)
.head 16 +  Else
.head 17 -  Call SqlRollback(hSql())
.head 17 -  Call SqlRollback(hSqlAux3())
.head 15 +  Else
.head 16 -  Call SqlRollback(hSqlAux3())
.head 14 +  Else
.head 15 -  Call SqlRollback(hSqlAux3())
.head 13 +  Else
.head 14 -  Call SqlRollback(hSql())
.head 14 -  Call SqlRollback(hSqlAux3())
.head 14 -  Call Message('Откат для ref=' || Str(nRefKlp), TRUE)
.head 14 -  ! Call Message('Ошибка для ref=' || Str(nRefKlp) || ' - ' || spWozwr, TRUE)
.head 14 +  If Len(spWozwr) > 0 or cDoc.m_nErr != 0
.head 15 +  If Len(spWozwr) > 0
.head 16 -  ! Ищем код внутренней ошибки
.head 16 -  Set i = SalStrScan(spWozwr, '\\\\')
.head 16 +  If i > 0 ! Найден бэкслэш, есть код внутренней ошибки
.head 17 -  Set strErrorNo = SalStrTrimX(SalStrMidX(SalStrTrimX(spWozwr), i+1, 4))
.head 17 -  Set strErrAbs = ''
.head 17 -  Call SqlPrepareAndExecute(hSqlAux3(), T('
     SELECT n_er
     INTO :strErrAbs
     FROM s_er
     WHERE k_er=:strErrorNo'))
.head 17 -  Call SqlFetchNext(hSqlAux3(), nFetchRes)
.head 16 -  ! Ищем номер счёта в сообщении
.head 16 -  Set strNls = ''
.head 16 -  Set i = SalStrScan(spWozwr, '#')
.head 16 +  If i > 0 ! Найден хэш, есть номер счёта в сообщении
.head 17 -  Set strNls = Right(spWozwr, Len(spWozwr)-i-1)
.head 17 -  Set i = 0
.head 17 -  Set j = Len(strNls)
.head 17 +  While i < j and SalStrScan(' ,' || Chr(10), SalStrMidX(strNls, i, 1)) < 0
.head 18 -  Set i = i + 1
.head 17 +  If i > 0
.head 18 -  ! Set strNls = Left(strNls, i-1)
.head 18 -  Set strNls = Left(strNls, i)
.head 16 -  Set spWozwr = SalStrTrimX(strErrAbs || ' ' || strNls)
.head 15 +  Else
.head 16 -  Set strErrAbs = ''
.head 16 -  Set strErrorNo = Right('0000' || Str(cDoc.m_nErr), 4)
.head 16 -  Call SqlPrepareAndExecute(hSqlAux3(), T('
     SELECT n_er
     INTO :strErrAbs
     FROM s_er
     WHERE k_er=:strErrorNo'))
.head 16 -  Call SqlFetchNext(hSqlAux3(), nFetchRes)
.head 16 -  Set spWozwr = strErrAbs
.head 15 -  ! Call Debug(spWozwr)
.head 15 +  If Len(spWozwr) > 40
.head 16 +  If At(' ', spWozwr) = 0
.head 17 -  Set spWozwr = SalStrTrimX(Left(spWozwr, 40))
.head 16 +  Else
.head 17 -  ! режем причину неудачи до 40
.head 17 -  Set i = 41
.head 17 +  While i > 0
.head 18 -  Set sTemp = Subs(spWozwr, i, 1)
.head 18 +  If sTemp = ' '
.head 19 -  Set spWozwr = Left(spWozwr, i-1)
.head 19 -  Set i = 0
.head 18 +  Else
.head 19 -  Set i = i - 1
.head 15 -  Call SqlPrepareAndExecute(hSqlAux3(), '
     UPDATE klp
     SET prwo=:spWozwr
     WHERE ref=:nRefKlp')
.head 15 -  Call SqlCommit(hSqlAux3())
.head 15 -  Call SqlCommit(hSql())
.head 14 -  Call Message('Причина возврата для ref=' || Str(nRefKlp) || ' - ' || spWozwr, TRUE)
.head 12 +  Else
.head 13 -  ! Call Debug('4')
.head 13 -  Call SqlRollback(hSqlAux3())
.head 11 +  Else
.head 12 -  Call SqlRollback(hSqlAux3())
.head 10 +  Else
.head 11 -  Set sPrwo = '*Запрет на дебет счёта ' || sNls
.head 11 -  Call SqlPrepareAndExecute(hSqlAux3(), "
     UPDATE klp
     SET prwo=:sPrwo
     WHERE ref=:nRefKlp")
.head 11 -  Call SqlCommit(hSqlAux3())
.head 9 +  Else
.head 10 -  Call MessageNoWait('Ошибка заполнения справочника автоматических операций. Невозможно обработать док.' || sNd
     || ', СчётА=' || sNls || ', МФО=' || sMfo || ', СчётБ=' || sNlsp || ', Сумма=' || SalNumberToStrX(nS, 2)
     || ', Получатель - ' || sNaimp || ', Назначение платежа - ' || sText1, 'Ошибка !', 30, 1)
.head 8 +  Else
.head 9 -  Call SqlRollback(hSqlAux3())
.head 8 -  ! Call Debug('2')
.head 7 -  Set nIndex = nIndex + 1
.head 5 -  Return TRUE
.head 3 +  Function: BackAllDok
.head 4 -  Description: возврат документов
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nnNeom[*]
.head 5 -  Number: nnS[*]
.head 5 -  String: ssNls[*]
.head 5 -  String: ssMfo[*]
.head 5 -  String: ssNlsp[*]
.head 5 -  String: ssNaimp[*]
.head 5 -  String: ssNd[*]
.head 5 -  String: ssText1[*]
.head 5 -  String: ssPond[*]
.head 5 -  String: ssPrwo[*]
.head 5 -  String: ssNaex[*]
.head 5 -  Date/Time: ddDatad[*]
.head 5 -  String: sNaex
.head 5 -  Number: nNeom
.head 5 -  String: sNd
.head 5 -  String: sNls
.head 5 -  String: sMfo
.head 5 -  String: sNaimp
.head 5 -  String: sNlsp
.head 5 -  String: sText1
.head 5 -  String: sPrwo
.head 5 -  Number: nVob
.head 5 -  String: sPond
.head 5 -  Date/Time: dDatad
.head 5 -  Number: nElemCount
.head 5 -  String: AMFO
.head 5 -  Number: nRef
.head 5 -  String: sOper
.head 5 -  String: sSab0
.head 5 -  Number: nIndex
.head 4 +  Actions
.head 5 +  If cbPAY
.head 6 -  Set AMFO = GetBankMfo()
.head 6 -  Set nIndex = 0
.head 6 -  Call SalArraySetUpperBound(nnNeom, 1, -1)
.head 6 -  Call SalArraySetUpperBound(nnS, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNls, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssMfo, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNlsp, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNaimp, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNd, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssText1, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssPond, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssPrwo, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ssNaex, 1, -1)
.head 6 -  Call SalArraySetUpperBound(ddDatad, 1, -1)
.head 6 -  Call SqlPrepareAndExecute(hSqlAux2(), "
     SELECT eom,s,nls,mfo,nlsp,naimp,nd,text1,pond,prwo,naex,datad
     INTO :nNeom,:nS,:sNls,:sMfo,:sNlsp,:sNaimp,:sNd,:sText1,:sPond,:sPrwo,:sNaex,:dDatad
     FROM klp
     WHERE fl=1 and noauto is null
     ORDER BY ref
     FOR UPDATE OF fl NOWAIT")
.head 6 +  While SqlFetchNext(hSqlAux2(), nFetchRes)
.head 7 -  Set nnNeom[nIndex] = nNeom
.head 7 -  Set nnS[nIndex] = nS
.head 7 -  Set ssNls[nIndex] = sNls
.head 7 -  Set ssMfo[nIndex] = sMfo
.head 7 -  Set ssNlsp[nIndex] = sNlsp
.head 7 -  Set ssNaimp[nIndex] = sNaimp
.head 7 -  Set ssNd[nIndex] = sNd
.head 7 -  Set ssText1[nIndex] = sText1
.head 7 -  Set ssPond[nIndex] = sPond
.head 7 -  Set ssPrwo[nIndex] = sPrwo
.head 7 -  Set ssNaex[nIndex] = sNaex
.head 7 -  Set ddDatad[nIndex] = dDatad
.head 7 -  Set nIndex = nIndex + 1
.head 6 -  Set nElemCount = nIndex - 1
.head 6 -  Set nIndex = 0
.head 6 +  While nIndex <= nElemCount
.head 7 -  Set nNeom = nnNeom[nIndex]
.head 7 -  Set nS = nnS[nIndex]
.head 7 -  Set sNls = ssNls[nIndex]
.head 7 -  Set sMfo = ssMfo[nIndex]
.head 7 -  Set sNlsp = ssNlsp[nIndex]
.head 7 -  Set sNaimp = ssNaimp[nIndex]
.head 7 -  Set sNd = ssNd[nIndex]
.head 7 -  Set sText1 = ssText1[nIndex]
.head 7 -  Set sPond = ssPond[nIndex]
.head 7 -  Set sPrwo = ssPrwo[nIndex]
.head 7 -  Set sNaex = ssNaex[nIndex]
.head 7 -  Set dDatad = ddDatad[nIndex]
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), '
   UPDATE klp
   SET fl=9
   WHERE naex=:sNaex and pond=:sPond and datad=:dDatad')
.head 8 -  Set sSab0 = Subs(sNaex, 3, 4)
.head 8 -  Set sOper = Right(Str(10000+nNeom), 4)
.head 8 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   INSERT
   INTO klpoow (sab,oper,mfoa,nlsa,mfob,nlsb,namb,s,nd,nazn,pond,prwo,nfia,tip)
   VALUES (:sSab0,:sOper,:AMFO,:sNls,:sMfo,:sNlsp,:sNaimp,:nS,:sNd,:sText1,:sPond,:sPrwo,:sNaex,'W')"))
.head 9 -  Call SqlCommit(hSqlAux3())
.head 9 -  Call Message(sSab0 || ': Возвращен (' || sPrwo || ') "электронный" док.' || SalStrTrimX(sNd) || ', СчётА=' ||
     sNls || ', МФО=' || sMfo || ', СчётБ=' || sNlsp || ', Сумма=' || SalNumberToStrX(nS/100, 2) ||
     ', Получатель - ' || sNaimp || ', Назначение платежа - ' || sText1, TRUE)
.head 8 +  Else
.head 9 -  Call SqlRollback(hSqlAux3())
.head 7 +  Else
.head 8 -  Call SqlRollback(hSqlAux3())
.head 7 -  Set nIndex = nIndex + 1
.head 5 -  Return TRUE
.head 3 +  Function: BP
.head 4 -  Description: проверка бизнес-правила на документе
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sSELECT
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nTemp
.head 4 +  Actions
.head 5 -  ! Call Debug(sSELECT)
.head 5 +  If SqlPrepareAndExecute(hSql(), sSELECT || ' INTO :nTemp') and
   SqlFetchNext(hSql(), nFetchRes)
.head 6 -  ! Call DebugN(nTemp)
.head 6 -  Return nTemp
.head 5 +  Else
.head 6 -  ! Call Debug('пусто')
.head 6 -  Return NUMBER_Null
.head 3 +  ! Function: TOFILE
.head 4 -  Description: 
.head 4 -  Returns 
.head 4 +  Parameters 
.head 5 -  String: sFile
.head 5 -  String: sBuff
.head 4 -  Static Variables 
.head 4 +  Local variables 
.head 5 -  File Handle: fH
.head 4 +  Actions 
.head 5 +  If SalFileOpen(fH, sFile, OF_Create|OF_Read|OF_Write)
.head 6 -  Call SalFileWrite(fH, sBuff, Len(sBuff))
.head 6 -  Call SalFileClose(fH)
.head 5 +  Else 
.head 6 -  Call Debug('No create file '|| sFile)
.head 2 -  Window Parameters
.head 2 +  Window Variables
.head 3 -  String: sOpenDay
.head 3 -  Number: nI
.head 3 -  Number: nDubl
.head 3 -  !
.head 3 -  String: sNazns
.head 3 -  Number: nBis
.head 3 -  String: sNaznk
.head 3 -  String: sD_rec
.head 3 -  String: sFn_a
.head 3 -  String: sNaznBis
.head 3 -  String: sD_recBis
.head 3 -  !
.head 3 -  Number: nColor
.head 3 -  String: sTitle
.head 3 -  !
.head 3 -  Number: nUid
.head 3 -  Number: nVal
.head 3 -  Number: nKwo
.head 3 -  Boolean: bOk
.head 3 -  !
.head 3 -  Date/Time: dYes
.head 3 -  String: sValueCheck
.head 3 -  !
.head 3 -  Date/Time: dDateDel
.head 3 -  Number: hBtnYes
.head 3 -  Number: hBtnNo
.head 3 -  Number: hBtns[*]
.head 3 -  !
.head 3 -  String: sDelArchiv
.head 3 -  String: sDelOldDok
.head 3 -  !
.head 3 -  Boolean: bKORP
.head 3 -  Boolean: bmKORP[*]
.head 3 -  Number: nDiti
.head 3 -  Boolean: bKORP1
.head 3 -  !
.head 3 -  Number: nRefNext
.head 3 -  !
.head 3 -  String: smZAY_BAL[*]
.head 3 -  String: sTemp
.head 3 -  !
.head 3 -  Number: nTipV
.head 3 -  Number: nRNKtemp
.head 3 -  !
.head 3 -  Date/Time: dBaDa
.head 3 -  String: sFNAMEKB
.head 3 -  String: smFNAMEKB[*]
.head 3 -  String: sIDENTKB
.head 3 -  String: smIDENTKB[*]
.head 3 -  String: sTIPKB
.head 3 -  String: smTIPKB[*]
.head 3 -  Number: nKVA
.head 3 -  Number: nmKVA[*]
.head 3 -  Number: nKVB
.head 3 -  Number: nmKVB[*]
.head 3 -  !
.head 3 -  Number: nKursDiler
.head 3 -  Number: nFL_KURSZ
.head 3 -  !
.head 3 -  Boolean: bAUTO
.head 3 -  String: sTIP
.head 3 -  String: smTIP[*]
.head 3 -  String: sTTS
.head 3 -  String: smTTS[*]
.head 3 -  Number: nKVBP
.head 3 -  Number: nmKVBP[*]
.head 3 -  String: sUSL
.head 3 -  String: smUSL[*]
.head 3 -  String: sCOMM
.head 3 -  String: smCOMM[*]
.head 3 -  Boolean: bP
.head 3 -  !
.head 3 -  Number: nRowT
.head 3 -  !
.head 3 -  String: sProcDocs
.head 3 -  String: sProcInfo
.head 3 -  !
.head 3 -  String: sPathMfiles
.head 3 -  !
.head 3 -  String: sECWT
.head 3 -  Number: nECWT
.head 3 -  !
.head 3 -  Number: nSEP
.head 3 -  !
.head 3 -  Number: nE
.head 3 -  Number: nDim
.head 3 -  Number: nRazniza
.head 3 -  !
.head 3 -  String: sCRKpath
.head 3 -  String: sCRKpathICT
.head 3 -  !
.head 3 -  String: sArcAudit
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  ! Call SalCenterWindow(hWndForm)
.head 4 -  Call PrepareWindow(hWndForm)
.head 4 -  ! Call SetWindowFullSize(hWndForm)
.head 4 -  Call SalGetWindowText(menu12, sTitle, 80)
.head 4 -  Call SetBankDate()
.head 4 -  Call SalUseRegistry(FALSE, '')
.head 4 -  Call SalGetProfileString('ElektroKlients', 'ProcDocs', '1', sProcDocs, GetIniFileName())
.head 4 -  Call SalGetProfileString('ElektroKlients', 'ProcInfo', '1', sProcInfo, GetIniFileName())
.head 4 -  ! получить путь куда помещать файлы M*.* (карточные)
.head 4 -  Call SalGetProfileString('ElektroKlients', 'MfilesPath', GetPrnDir(), sPathMfiles, GetIniFileName())
.head 4 -  Set sPathMfiles = sPathMfiles || IifS(Right(sPathMfiles, 1) = '\\', '', '\\')
.head 4 -  Call SalGetProfileString('ElektroKlients', 'ErrorCopyWaitTime', '137', sECWT, GetIniFileName())
.head 4 -  Set nECWT = Val(sECWT)
.head 4 -  !
.head 4 -  Call SalGetProfileString('ElektroKlients', 'Arc_Audit', 'ArcAudit', sArcAudit, GetIniFileName())
.head 4 -  Set sArcAudit = sArcAudit || IifS(Right(sArcAudit, 1) = '\\', '', '\\')
.head 4 -  !
.head 4 +  If File('lcb_w32b.ini')
.head 5 -  Call SalGetProfileString('ElektroKlients', 'CRKpath', '', sCRKpath, GetIniFileName())
.head 5 -  Set sCRKpath = sCRKpath || IifS(Right(sCRKpath, 1) = '\\', Left(sCRKpath, Len(sCRKpath)-1), sCRKpath)
.head 5 -  Call SalGetProfileString('Section', 'CRKpath', '', sCRKpathICT, 'lcb_w32b.ini')
.head 5 -  Set sCRKpathICT = sCRKpathICT || IifS(Right(sCRKpathICT, 1) = '\\', Left(sCRKpathICT, Len(sCRKpathICT)-1), sCRKpathICT)
.head 5 +  If sCRKpath != sCRKpathICT
.head 6 -  Call SalSetProfileString('Section', 'CRKpath', sCRKpath, 'lcb_w32b.ini')
.head 4 -  !
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 -  Call SalGetProfileString('CheckBoxesKB', 'Values', '1111111111111', sValueCheck, '')
.head 4 -  Set cbKV = Left(sValueCheck, 1) = '1'
.head 4 -  Set cbLS = Subs(sValueCheck, 2, 1) = '1'
.head 4 -  Set cbU = Subs(sValueCheck, 3, 1) = '1'
.head 4 -  Set cbB = Subs(sValueCheck, 4, 1) = '1'
.head 4 -  Set cbIN = Subs(sValueCheck, 5, 1) = '1'
.head 4 -  Set cbOO = Subs(sValueCheck, 6, 1) = '1'
.head 4 -  Set cbWO = Subs(sValueCheck, 7, 1) = '1'
.head 4 -  Set cbNN = Subs(sValueCheck, 8, 1) = '1'
.head 4 -  Set cbContracts = Subs(sValueCheck, 9, 1) = '1'
.head 4 -  Set cbCountry = Subs(sValueCheck, 10, 1) = '1'
.head 4 -  Set cbOper = Subs(sValueCheck, 11, 1) = '1'
.head 4 -  Set cbWT = Subs(sValueCheck, 12, 1) = '1'
.head 4 -  Set cbPAY = Right(sValueCheck, 1) = '1'
.head 4 -  ! Call SqlPrepareAndExecute(hSql(), 'SET ROLE start1,tech_mom1')
.head 4 -  Call SetRole(hSql(), 'start1')
.head 4 -  Call SetRole(hSql(), 'tech_mom1')
.head 4 -  Set bKORP = Val(GetGlobalOption('KB_Corpo'))=1
.head 4 -  Set dfKorp = 'Корпорат. клиенты (' || IifS(bKORP, '+', '-') || ')'
.head 4 -  Set bAUTO = Val(GetGlobalOption('KL_PAY'))=1
.head 4 -  Set nSEP = GetGlobalOptionEx('SEPNUM')
.head 4 -  Call SalWaitCursor(TRUE)
.head 4 -  Set sUserid = Str(GetUserId())
.head 4 -  Set nKLI = -1
.head 4 +  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT sab,rnk,nvl(nmkk,nmk),okpo,notes
   INTO :sSAB,:nRNK,:sNMK,:sOKPO,:sTIMES
   FROM customer
   WHERE sab is not null and stmt=5
   ORDER BY sab"))
.head 5 -  Call SalArraySetUpperBound(smSAB, 1, -1)
.head 5 -  Call SalArraySetUpperBound(nmRNK, 1, -1)
.head 5 -  Call SalArraySetUpperBound(smNMK, 1, -1)
.head 5 -  Call SalArraySetUpperBound(smOKPO, 1, -1)
.head 5 -  Call SalArraySetUpperBound(smTIMES, 1, -1)
.head 5 -  Call SalArraySetUpperBound(bmKORP, 1, -1)
.head 5 -  Set nKLI = -1
.head 5 +  While SqlFetchNext(hSql(), nFetchRes)
.head 6 +  If bKORP
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT count(*)
   INTO :nDiti
   FROM customer
   WHERE rnkp=:nRNK"))
.head 8 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set nDiti = 0
.head 7 +  Else 
.head 8 -  Set nDiti = 0
.head 6 +  Else 
.head 7 -  Set nDiti = 0
.head 6 -  Set nKLI = nKLI + 1
.head 6 -  Set smSAB[nKLI] = sSAB
.head 6 -  Set nmRNK[nKLI] = nRNK
.head 6 -  Set smNMK[nKLI] = SalStrTrimX(sNMK)
.head 6 -  Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
.head 6 -  Set smTIMES[nKLI] = SalStrTrimX(sTIMES)
.head 6 -  Set bmKORP[nKLI] = nDiti>0
.head 4 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT sab,rnk,nvl(nmkk,nmk),okpo,notes
   INTO :sSAB,:nRNK,:sNMK,:sOKPO,:sTIMES
   FROM customer
   WHERE sab is not null and stmt=6
   ORDER BY sab"))
.head 5 -  Call SalArraySetUpperBound(smSAB, 1, -1)
.head 5 -  Call SalArraySetUpperBound(nmRNK, 1, -1)
.head 5 -  Call SalArraySetUpperBound(smNMK, 1, -1)
.head 5 -  Call SalArraySetUpperBound(smOKPO, 1, -1)
.head 5 -  Call SalArraySetUpperBound(smTIMES, 1, -1)
.head 5 -  Call SalArraySetUpperBound(bmKORP, 1, -1)
.head 5 -  Set nKLI = -1
.head 5 +  While SqlFetchNext(hSql(), nFetchRes)
.head 6 +  If bKORP
.head 7 +  If SqlPrepareAndExecute(hSqlAux3(), T("
   SELECT count(*)
   INTO :nDiti
   FROM customer
   WHERE rnkp=:nRNK"))
.head 8 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 9 -  Set nDiti = 0
.head 7 +  Else
.head 8 -  Set nDiti = 0
.head 6 +  Else
.head 7 -  Set nDiti = 0
.head 6 -  Set nKLI = nKLI + 1
.head 6 -  Set smSAB[nKLI] = sSAB
.head 6 -  Set nmRNK[nKLI] = nRNK
.head 6 -  Set smNMK[nKLI] = SalStrTrimX(sNMK)
.head 6 -  Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
.head 6 -  Set smTIMES[nKLI] = SalStrTrimX(sTIMES)
.head 6 -  Set bmKORP[nKLI] = nDiti>0
.head 4 +  If nKLI = -1
.head 5 -  Call SalSendMsg(menu12, SAM_Destroy, 0, 0)
.head 4 -  Set hBtnYes = VisMessageLoadButton('&Да', 1)
.head 4 -  Set hBtnNo = VisMessageLoadButton('&Нет', 2)
.head 4 -  Call SalHideWindow(l1)
.head 4 -  Call SalHideWindow(cc1)
.head 4 -  Call SalHideWindow(pbLB)
.head 4 -  Call SalHideWindow(pbAll)
.head 4 -  Call SalHideWindow(pbFind)
.head 4 -  Call SalHideWindow(pbNoDate)
.head 4 -  Call SalHideWindow(pbRun)
.head 4 -  Call SalHideWindow(pbOtkaz)
.head 4 -  Call SalWaitCursor(FALSE)
.head 3 +  On SAM_CreateComplete
.head 4 -  Set sDiskKata = GetElKDir()    ! получить путь к п/я электронных клиентов
.head 4 -  Set sArchPath = GetArchiv_KB() ! получить путь к архиву файлов электронных клиентов
.head 4 -  Set sTempPath = GetTempKPath() ! получить путь временных файлов КЛИЕНТ-БАНК
.head 4 -  Set bIni = FALSE
.head 4 -  Call Message('Обработка файла лицензии КЛИЕНТ-БАНК...', TRUE)
.head 4 -  Call SalDisableWindow(pb1)
.head 4 -  Call SalDisableWindow(pb2)
.head 4 -  Call SalDisableWindow(pb3)
.head 4 -  Call SalDisableWindow(pb4)
.head 4 -  Call SalDisableWindow(pb6)
.head 4 -  Call SalDisableWindow(pb7)
.head 4 -  Call SalDisableWindow(pb8)
.head 4 -  Call SalDisableWindow(pb9)
.head 4 -  Call SalDisableWindow(pb10)
.head 4 -  Call SalDisableWindow(pbEsc)
.head 4 +  If not LcwRead()
.head 5 -  Call MessageNoWait('Отсутствует или ошибочен файл лицензии ' || GetLicenPath() || GetBankMfo() || '.Lcw.',
     'Работа прекращается', 3, 1)
.head 5 -  Call SalDestroyWindow(menu12)
.head 4 +  Else
.head 5 -  Call SalArraySetUpperBound(smZAY_BAL, 1, -1)
.head 5 +  If SqlPrepareAndExecute(hSql(), "
   SELECT NBS
   INTO :sTemp
   FROM zay_bal")
.head 6 -  Set nI = 0
.head 6 +  While SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Set smZAY_BAL[nI] = sTemp
.head 7 -  Set nI = nI + 1
.head 5 -  Call Message('Обработан файл лицензии КЛИЕНТ-БАНК.', TRUE)
.head 5 -  ! анализ на окончание лицензий
.head 5 -  Set nI = 0
.head 5 -  Set nE = 0
.head 5 -  Call SalArrayGetUpperBound(dmlDALI, 1, nDim)
.head 5 +  While nI < nDim
.head 6 -  Set nRazniza = dmlDALI[nI] - dBankDate
.head 6 +  If nRazniza <= 0
.head 7 -  Set smLiEnd[nE] = 'Срок действия лицензии истёк.'
.head 7 -  Set smLiOkp[nE] = smlKOD[nI]
.head 7 -  Set smLiSab[nE] = smlSAB[nI]
.head 7 -  Set nmLiClr[nE] = 0
.head 7 -  Set nE = nE + 1
.head 6 +  Else If nRazniza < 8
.head 7 -  Set smLiEnd[nE] = 'До окончания срока действия лицензии остал' || IifS(nRazniza=1, 'ся ', 'ось ') || Str(nRazniza)
    || ' дн.'
.head 7 -  Set smLiOkp[nE] = smlKOD[nI]
.head 7 -  Set smLiSab[nE] = smlSAB[nI]
.head 7 -  Set nmLiClr[nE] = nRazniza
.head 7 -  Set nE = nE + 1
.head 6 -  Set nI = nI + 1
.head 5 +  If nE > 0
.head 6 -  ! вывод таблички
.head 6 -  Call SalModalDialog(dlgLicEnd, hWndForm, nE)
.head 5 -  Call SalEnableWindow(pbEsc)
.head 5 -  Call SalEnableWindow(pb10)
.head 5 -  Call SalEnableWindow(pb9)
.head 5 -  Call SalEnableWindow(pb8)
.head 5 -  Call SalEnableWindow(pb7)
.head 5 -  Call SalEnableWindow(pb6)
.head 5 -  Call SalEnableWindow(pb4)
.head 5 -  Call SalEnableWindow(pb3)
.head 5 -  Call SalEnableWindow(pb2)
.head 5 -  Call SalEnableWindow(pb1)
.head 5 +  If not bAUTO
.head 6 -  Set cbPAY = 0
.head 6 -  Call SalDisableWindow(cbPAY)
.head 5 +  Else
.head 6 +  If sProcInfo = '0'
.head 7 -  Set cbKV = 0
.head 7 -  Set cbKvAll = 0
.head 7 -  Set cbLS = 0
.head 7 -  Set cbU = 0
.head 7 -  Set cbB = 0
.head 7 -  Set cbIN = 0
.head 7 -  Set cbOO = 0
.head 7 -  Set cbWO = 0
.head 7 -  Set cbNN = 0
.head 7 -  Set cbContracts = 0
.head 7 -  Set cbContracts2 = 0
.head 7 -  Set cbCountry = 0
.head 7 -  Set cbCountry2 = 0
.head 7 -  Set cbOper = 0
.head 7 -  Set cbOper2 = 0
.head 7 -  Set cbWT = 0
.head 7 -  Call SalDisableWindow(cbKV)
.head 7 -  Call SalDisableWindow(cbKvAll)
.head 7 -  Call SalDisableWindow(cbLS)
.head 7 -  Call SalDisableWindow(cbU)
.head 7 -  Call SalDisableWindow(cbB)
.head 7 -  Call SalDisableWindow(cbIN)
.head 7 -  Call SalDisableWindow(cbOO)
.head 7 -  Call SalDisableWindow(cbWO)
.head 7 -  Call SalDisableWindow(cbNN)
.head 7 -  Call SalDisableWindow(cbContracts)
.head 7 -  Call SalDisableWindow(cbContracts2)
.head 7 -  Call SalDisableWindow(cbCountry)
.head 7 -  Call SalDisableWindow(cbCountry2)
.head 7 -  Call SalDisableWindow(cbOper)
.head 7 -  Call SalDisableWindow(cbOper2)
.head 7 -  Call SalDisableWindow(cbWT)
.head 7 -  !
.head 7 -  Call SalDisableWindow(pb3)
.head 7 -  Call SalDisableWindow(pb4)
.head 7 -  Call SalDisableWindow(pb6)
.head 7 -  Call SalDisableWindow(pb7)
.head 7 -  Call SalDisableWindow(pb9)
.head 6 +  If sProcDocs = '0'
.head 7 -  Set cbPAY = 0
.head 7 -  Call SalDisableWindow(cbPAY)
.head 6 -  If SqlPrepareAndExecute(hSql(), "
   SELECT tip,tts
   INTO :sTIP,:sTTS
   FROM kli_tts")
.head 6 -  Set nI = 0
.head 6 +  While SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Set smTIP[nI] = sTIP
.head 7 -  Set smTTS[nI] = sTTS
.head 7 -  Set nI = nI + 1
.head 6 -  !
.head 6 -  If SqlPrepareAndExecute(hSql(), "
   SELECT kv,usl,comm
   INTO :nKVBP,:sUSL,:sCOMM
   FROM kli_bp")
.head 6 -  Set nI = 0
.head 6 +  While SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Set nmKVBP[nI] = nKVBP
.head 7 -  Set smUSL[nI] = sUSL
.head 7 -  Set smCOMM[nI] = sCOMM
.head 7 -  Set nI = nI + 1
.head 5 -  !
.head 5 -  ! Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 5 +  ! While not bIni
.head 6 +   If ShowInputPinCodeICT()
.head 7 -   Set nKw = InitICT()
.head 7 +   If nKw != 0
.head 8 -   Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 7 +   Else 
.head 8 -   Set bIni = TRUE
.head 6 +   Else 
.head 7 -   Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
.head 7 -   Call SalDestroyWindow(menu12)
.head 7 -   Break 
.head 5 -  Call SalSetFocus(pb1)
.head 4 -  !
.head 4 +  If not bIni ! Надо инициализировать ЭЦП ИКТ
.head 5 -  Call Message('Инициализация ЭЦП ИКТ', TRUE)
.head 5 +  If ShowInputPinCodeICT()
.head 6 -  Set nKw = InitICT()
.head 6 +  If nKw != 0
.head 7 -  Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'), 'Аварийная ситуация', 3, 1)
.head 7 -  ! Break 
.head 6 +  Else
.head 7 -  Set bIni = TRUE
.head 5 +  Else
.head 6 -  Call MessageNoWait('PIN-код ИКТ не введен.', 'Предупреждение!', 3, 1)
.head 6 -  ! Break 
.head 3 +  On SAM_Close
.head 4 +  If SalMessageBox("Вы намерены прекратить работу? ", "Внимание!", MB_YesNo) = IDYES
.head 5 -  Call SalQuit()
.head 4 +  Else
.head 5 -  Return FALSE
.head 3 +  On SAM_Destroy
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 -  Call SalSetProfileString('CheckBoxesKB', 'Values', IifS(cbKV, '1', '0') || IifS(cbLS, '1', '0') || IifS(cbU, '1', '0') ||
     IifS(cbB, '1', '0') || IifS(cbIN, '1', '0') || IifS(cbOO, '1', '0') || IifS(cbWO, '1', '0') ||
     IifS(cbNN, '1', '0') || IifS(cbContracts, '1', '0') || IifS(cbCountry, '1', '0') || IifS(cbOper, '1', '0') ||
     IifS(cbWT, '1', '0') || IifS(cbPAY, '1', '0'), '')
.head 1 +  Dialog Box: dlg_edit_mess
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Просмотр сообщений
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   2.888"
.head 4 -  Top:    1.042"
.head 4 -  Width:  8.657"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 2.881"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Форма просмотра сообщений
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 -  Background Text: Время
.head 4 -  Resource Id: 53169
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.15"
.head 5 -  Top:    0.048"
.head 5 -  Width:  0.917"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: df_time
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   1.0"
.head 6 -  Top:    0.06"
.head 6 -  Width:  1.2"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? No
.head 5 -  Justify: Left
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: 10
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: 3D Face Color
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 +  Multiline Field: ml_text
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? Yes
.head 5 -  Window Location and Size
.head 6 -  Left:   0.133"
.head 6 -  Top:    0.333"
.head 6 -  Width:  8.3"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 1.729"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: 10
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: 3D Highlight Color
.head 4 -  Message Actions
.head 3 +  Pushbutton: pb_close
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   7.8"
.head 5 -  Top:    2.107"
.head 5 -  Width:  0.633"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.4"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name: Q:\BARS98\RESOURCE\BMP\Discard.bmp
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, 0)
.head 5 +  ! On SAM_TooltipSetText
.head 6 -   Return XSalTooltipSetText(lParam, 'Закрыть окно')
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  Number: nRow
.head 2 -  Window Variables
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call SalCenterWindow(hWndForm)
.head 3 +  On SAM_CreateComplete
.head 4 -  Set df_time = menu12.tblMessage.colTime
.head 4 -  Set ml_text = menu12.tblMessage.colText
.head 4 -  Call SalSetFocus(pb_close)
.head 1 +  Dialog Box: dlgLicEnd
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Сведения об окончании сроков действия лицензий
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   2.388"
.head 4 -  Top:    0.927"
.head 4 -  Width:  9.078"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 4.76"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Fixedsys
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description:
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Child Table: tbl2
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.033"
.head 6 -  Top:    0.024"
.head 6 -  Width:  8.978"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 4.464"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Fixedsys
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  View: Table
.head 5 -  Allow Row Sizing? No
.head 5 -  Lines Per Row: Default
.head 4 -  Memory Settings
.head 5 -  Maximum Rows in Memory: 10000
.head 5 -  Discardable? No
.head 4 +  Contents
.head 5 +  Column: col1
.head 6 -  Class Child Ref Key: 0
.head 6 -  Class ChildKey: 0
.head 6 -  Class:
.head 6 -  Property Template:
.head 6 -  Class DLL Name:
.head 6 -  Title: Код
.head 6 -  Visible? Yes
.head 6 -  Editable? Yes
.head 6 -  Maximum Data Length: Default
.head 6 -  Data Type: String
.head 6 -  Justify: Left
.head 6 -  Width:  0.789"
.head 6 -  Width Editable? Yes
.head 6 -  Format: Unformatted
.head 6 -  Country: Default
.head 6 -  Input Mask: Unformatted
.head 6 -  Cell Options
.head 7 -  Cell Type? Standard
.head 7 -  Multiline Cell? No
.head 7 -  Cell DropDownList
.head 8 -  Sorted? Yes
.head 8 -  Vertical Scroll? Yes
.head 8 -  Auto Drop Down? No
.head 8 -  Allow Text Editing? Yes
.head 7 -  Cell CheckBox
.head 8 -  Check Value:
.head 8 -  Uncheck Value:
.head 8 -  Ignore Case? Yes
.head 6 -  List Values
.head 6 -  Message Actions
.head 5 +  Column: col2
.head 6 -  Class Child Ref Key: 0
.head 6 -  Class ChildKey: 0
.head 6 -  Class:
.head 6 -  Property Template:
.head 6 -  Class DLL Name:
.head 6 -  Title: ОКПО
.head 6 -  Visible? Yes
.head 6 -  Editable? Yes
.head 6 -  Maximum Data Length: Default
.head 6 -  Data Type: String
.head 6 -  Justify: Left
.head 6 -  Width:  1.644"
.head 6 -  Width Editable? Yes
.head 6 -  Format: Unformatted
.head 6 -  Country: Default
.head 6 -  Input Mask: Unformatted
.head 6 -  Cell Options
.head 7 -  Cell Type? Standard
.head 7 -  Multiline Cell? No
.head 7 -  Cell DropDownList
.head 8 -  Sorted? Yes
.head 8 -  Vertical Scroll? Yes
.head 8 -  Auto Drop Down? No
.head 8 -  Allow Text Editing? Yes
.head 7 -  Cell CheckBox
.head 8 -  Check Value:
.head 8 -  Uncheck Value:
.head 8 -  Ignore Case? Yes
.head 6 -  List Values
.head 6 -  Message Actions
.head 5 +  Column: col3
.head 6 -  Class Child Ref Key: 0
.head 6 -  Class ChildKey: 0
.head 6 -  Class:
.head 6 -  Property Template:
.head 6 -  Class DLL Name:
.head 6 -  Title: Информация
.head 6 -  Visible? Yes
.head 6 -  Editable? Yes
.head 6 -  Maximum Data Length: Default
.head 6 -  Data Type: String
.head 6 -  Justify: Left
.head 6 -  Width:  6.067"
.head 6 -  Width Editable? Yes
.head 6 -  Format: Unformatted
.head 6 -  Country: Default
.head 6 -  Input Mask: Unformatted
.head 6 -  Cell Options
.head 7 -  Cell Type? Standard
.head 7 -  Multiline Cell? No
.head 7 -  Cell DropDownList
.head 8 -  Sorted? Yes
.head 8 -  Vertical Scroll? Yes
.head 8 -  Auto Drop Down? No
.head 8 -  Allow Text Editing? Yes
.head 7 -  Cell CheckBox
.head 8 -  Check Value:
.head 8 -  Uncheck Value:
.head 8 -  Ignore Case? Yes
.head 6 -  List Values
.head 6 -  Message Actions
.head 4 -  Functions
.head 4 -  Window Variables
.head 4 -  Message Actions
.head 3 +  Pushbutton: pb1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   9.011"
.head 5 -  Top:    0.031"
.head 5 -  Width:  0.356"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.298"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? No
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name: E:\Bars98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Timer
.head 6 -  Call SalTimerKill(pb1, 1)
.head 6 -  Call SalSendMsg(pb1, SAM_Click, 0, 0)
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, 0)
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  Number: nK
.head 2 +  Window Variables
.head 3 -  Number: nI
.head 3 -  Number: nRow
.head 3 -  Number: nmColor[*]
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Set nmColor[0] = COLOR_Red
.head 4 -  Set nmColor[1] = COLOR_Orchid
.head 4 -  Set nmColor[2] = COLOR_Yellow
.head 4 -  Set nmColor[3] = COLOR_Green
.head 4 -  Set nmColor[4] = COLOR_Sky
.head 4 -  Set nmColor[5] = COLOR_LightAqua
.head 4 -  Set nmColor[6] = COLOR_DarkAqua
.head 4 -  Set nmColor[7] = COLOR_Periwinkle
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  Set nI = 0
.head 4 +  While nI < nK
.head 5 -  Set nRow = SalTblInsertRow(tbl2, TBL_MaxRow)
.head 5 -  Call SalTblSetContext(tbl2, nRow)
.head 5 -  Set tbl2.col1 = smLiSab[nI]
.head 5 -  Set tbl2.col2 = smLiOkp[nI]
.head 5 -  Set tbl2.col3 = smLiEnd[nI]
.head 5 -  ! Call XSalTblSetRowBackColor(tbl2, nRow, IifN(nmLiClr[nI]=0, COLOR_Salmon, COLOR_Sky))
.head 5 -  Call XSalTblSetCellBackColor(tbl2.col3, nmColor[nmLiClr[nI]])
.head 5 -  Call SalTblSetRowFlags(tbl2, nRow, ROW_New, FALSE)
.head 5 -  Set nI = nI + 1
.head 4 -  Call VisTblAutoSizeColumn(tbl2, hWndNULL)
.head 4 -  Call SalTimerSet(pb1, 1, 37110)
