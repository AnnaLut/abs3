Application Description: технологические операции по обработке файлов системы КЛИЕНТ-БАНК (СберБанк)
	Outline Version - 4.0.26
	Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000B20000 002C000000020000 0003000000000000 005E030000FCFFFF
0040: FFE9FFFFFF000000 0000000000DE0100 0041010000010000 0001000000010000
0060: 000F4170706C6963 6174696F6E497465 6D00000000
.enddata
.data DT_MAKERUNDLG
0000: 000000001E5C4241 525339385C524553 4F555243455C4943 4F5C4D6F6E65792E
0020: 69636F205C424152 5339385C42494E5C 6B6C6F705F736262 5F7261625F6E6577
0040: 2E657865165C4241 525339385C42494E 5C6E65776170702E 646C6C165C424152
0060: 5339385C42494E5C 6E65776170702E61 7063000001010115 513A5C43454E5455
0080: 52415C6E65776170 702E72756E15513A 5C43454E54555241 5C6E65776170702E
00A0: 646C6C15513A5C43 454E545552415C6E 65776170702E6170 6300000101011A51
00C0: 3A5C424152533938 5C42494E5C6B6C6F 705F656C6C2E6578 6518513A5C424152
00E0: 5339385C42494E5C 6E65776170702E64 6C6C18513A5C4241 525339385C42494E
0100: 5C6E65776170702E 6170630000010101 15513A5C43454E54 5552415C6E657761
0120: 70702E61706C1551 3A5C43454E545552 415C6E6577617070 2E646C6C15513A5C
0140: 43454E545552415C 6E65776170702E61 70630000010101
.enddata
		Outline Window State: Normal
		Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
			Left:   -0.013"
			Top:    0.0"
			Width:  8.013"
			Height: 4.969"
		Options Box Location
.data VIEWINFO
0000: 0118B80BB80B2500
.enddata
.data VIEWSIZE
0000: 0800
.enddata
			Visible? Yes
			Left:   4.15"
			Top:    1.885"
			Width:  3.8"
			Height: 2.073"
		Class Editor Location
			Visible? No
			Left:   0.575"
			Top:    0.094"
			Width:  5.063"
			Height: 2.719"
		Tool Palette Location
			Visible? No
			Left:   6.388"
			Top:    0.729"
		Fully Qualified External References? Yes
		Reject Multiple Window Instances? No
		Enable Runtime Checks Of External References? Yes
		Use Release 4.0 Scope Rules? No
	Libraries
		Dynalib: Absapi.apd
		Dynalib: Global.apd
		Dynalib: Service.apd
		Dynalib: Message.apd
		Dynalib: Ssplashm.apd
		Dynalib: Dblogin.apd
		Dynalib: License.apd
		Dynalib: ROLEAUTH.APD
		!
		File Include: Vtdos.apl
		File Include: Vtfile.apl
		File Include: Vtstr.apl
		File Include: Vtcal.apl
		File Include: Vtarray.apl
		File Include: Vttblwin.apl
		File Include: Vtmsgbox.apl
		File Include: Winbars2.apl
		File Include: Constant.apl
		File Include: Watchdog.apc
		File Include: Winapi.apl
		File Include: qckole2.apl
		File Include: Gentbl.apl
	Global Declarations
		Window Defaults
			Tool Bar
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Form Window
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Dialog Box
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Top Level Table Window
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Data Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Multiline Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Spin Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Background Text
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Pushbutton
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Radio Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Check Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Option Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Group Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Child Table Window
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			List Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Combo Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Line
				Line Color: Use Parent
			Frame
				Border Color: Use Parent
				Background Color: 3D Face Color
			Picture
				Border Color: Use Parent
				Background Color: Use Parent
		Formats
			Number: 0'%'
			Number: #0
			Number: ###000
			Number: ###000;'($'###000')'
			Date/Time: hh:mm:ss AMPM
			Date/Time: M/d/yy
			Date/Time: MM-dd-yy
			Date/Time: dd-MMM-yyyy
			Date/Time: MMM d, yyyy
			Date/Time: MMM d, yyyy hh:mm AMPM
			Date/Time: MMMM d, yyyy hh:mm AMPM
		External Functions
			Library name: IctBob.Dll
				Function: llopen
					Description: открытие файла (C++)
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						! первый параметр: имя файла,
								  второй: тип открытия
						String: LPCSTR
						Number: INT
				Function: llcreat
					Description: создание файла (C++)
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						! первый параметр: имя файла,
								  второй: тип открытия
						String: LPCSTR
						Number: INT
				Function: llclose
					Description: закрытие файла (C++)
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						Number: HANDLE
				Function: llread
					Description: чтение файла (C++)
					Export Ordinal: 0
					Returns
						Number: UINT
					Parameters
						Number: HANDLE
						String: LPVOID
						Number: UINT
				Function: llwrite
					Description:
					Export Ordinal: 0
					Returns
						Number: UINT
					Parameters
						Number: HANDLE
						String: LPCSTR
						Number: UINT
				Function: lllseek
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Number: HANDLE
						Number: LONG
						Number: INT
				Function: llstr2str
					Description: преобразование строки HEXtoBIN
					Export Ordinal: 0
					Returns
					Parameters
						String: LPSTR
						Receive String: LPVOID
						Number: ULONG
			Library name: DSGBVC4.DLL
				! DSGBVC4.DLL - экспортируемые функции
				Function: nsignInitGBSign
					Description: int GLOBAL nsignInitGBSign(
							    char *dbDir, char *secKeyDisk,
							    char *pin, char *mfo, int mode)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: INT
				Function: nsignExitGBSign
					Description: int GLOBAL nsignExitGBSign(void)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: nsignInitOPSign
					Description: int GLOBAL nsignInitOPSign(
							    char *dbDir, char *secKeyDisk,
							    char *pin, char *mfo)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
				Function: nsignExitOPSign
					Description: int GLOBAL nsignExitOPSign(void)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: nsignMapError2Text
					Description: void GLOBAL nsignMapError2Text(
							            char *buffer, int errorCode)
					Export Ordinal: 0
					Returns
					Parameters
						Receive String: LPSTR
						Number: INT
				Function: nsignPutOPSignOnMemory
					Description: int GLOBAL nsignPutOPSignOnMemory(
							           void* data,
							           unsigned short size,
							           void* signPtr)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPVOID
						Number: SHORT
						Receive String: LPVOID
			Library name: VEGA32.DLL
				! Function: VegaGetVer
					                                                                                                                           Description: int GLOBAL VegaGetVer
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
				Function: VegaSetBuf
					Description: int GLOBAL VegaSetBuf(void *Buf, int len)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						Number: INT
				! Function: VegaCheck
					                                                                                                                           Description: int GLOBAL VegaCheck(void *Sign, void *Mess, word Len, void *IdR, void *Id, void *Nm, pVegaWA V,
							                                  pVegaSES xVS)
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   Number: DWORD
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   Number: DWORD
						                                                                                                                                   Number: DWORD
				Function: VegaCheckDat
					Description: int GLOBAL VegaCheckDat(void *Sign, char *Rs, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
				Function: VegaCheckGet
					Description: int GLOBAL VegaCheckGet(void *Sign, void *IdR, void *Id, void *Nm, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
						Number: DWORD
				! Function: VegaCheckDB
					                                                                                                                           Description: int GLOBAL VegaCheckDB()
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
				! Function: VegaSetDate
					                                                                                                                           Description: int GLOBAL VegaSetDate()
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
						                                                                                                                                   String: LPCSTR
				Function: VegaOpen
					Description: int GLOBAL VegaOpen (File Config, char *VegaPath, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
				Function: VegaClose
					Description: int GLOBAL VegaClose(pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: DWORD
				Function: VegaLoadSecKey
					Description: int GLOBAL VegaLoadSecKey(File SKPath, char *Psw, char *Id, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
				! Function: VegaDelSecKey
					                                                                                                                           Description: int GLOBAL VegaDelSecKey(char *Id, pVegaSES xVS)
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
				Function: VegaEnsignGet
					Description: int GLOBAL VegaEnsignGet(void *Sign, void *IdR, void *Id, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
						Number: DWORD
				! Function: VegaEnsign
					                                                                                                                           Description: int GLOBAL VegaEnsign(void *Sign, void *Mess, word Len, void *IdR, void *Id, pVegaWA V, pVegaSES xVS)
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   Number: DWORD
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
				Function: VegaStart
					Description: int GLOBAL VegaStart(pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VegaStep
					Description: void GLOBAL VegaStep(void *Mess, word Len, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
					Parameters
						String: LPCSTR
						Number: DWORD
						Number: DWORD
						Number: DWORD
				! Function: VegaRcpName
					                                                                                                                           Description: int GLOBAL VegaRcpName(char *Name, char *Path, File RcpNum, pVegaSES xVS)
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
				! Function: VegaMail
					                                                                                                                           Description: int GLOBAL VegaMail(File FileIn, File FileOut, pVegaSES xVS)
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns
						                                                                                                                                   Number: INT
					                                                                                                                           Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPCSTR
				Function: VegaSetFmode
					Description: int GLOBAL VegaSetFmode (int Fmode, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: DWORD
				Function: VegaCryptStart
					Description: void GLOBAL VegaCryptStart(pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
					Parameters
						Number: DWORD
						Number: DWORD
				Function: VegaCryptStep
					Description: void GLOBAL VegaCryptStep(void *Mess, word Len, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
					Parameters
						String: LPCSTR
						Number: WORD
						Number: DWORD
						Number: DWORD
				Function: VegaGetTempKey
					Description: int GLOBAL VegaGetTempKey(TempKey *T, void *IdR, void *Id, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
						Number: DWORD
				Function: VegaDecryptStart
					Description: int GLOBAL VegaDecryptStart(TempKey *T, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						Number: DWORD
						Number: DWORD
				Function: VegaDecryptStep
					Description: int GLOBAL VegaDecryptStep(void *Mess, word Len, pVegaWA V, pVegaSES xVS)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						Number: WORD
						Number: DWORD
						Number: DWORD
				Function: VegaDaysLeft
					Description: int VegaDaysLeft(pVegaSES VS);
							Получение числа дней, оставшихся до конца действия секретного ключа,
							загруженного при последнем запуске VegaLoadSecKey
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: DWORD
			Library name: VEGACCP.DLL
				Function: VegaLoadSecKeyCC
					Description: VegaLoadSecKeyCC (char *SKPath, char *Psw, char *Id, pVegaSES xVS, char *Rname)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: DWORD
						String: LPCSTR
			Library name: VEGAMSG.DLL
				Function: VegaGetMsgAux
					Description: void VegaGetMsgAux(int nCode, char* szMsgBuf, int nBufLen)
					Export Ordinal: 0
					Returns
					Parameters
						Number: INT
						Receive String: LPSTR
						Number: INT
				! Function: VegaCheckGetMsg
					                                                                                                                           Description: char*	VegaCheckGetMsg(int nCode);
					                                                                                                                           Export Ordinal: 0
					                                                                                                                           Returns 
						                                                                                                                           String: LPSTR
					                                                                                                                           Parameters 
						                                                                                                                           Number: INT
			Library name: hex2bin.dll
				! Function: ConvertHexToBin
					                                                                                                                                   Description: long ConvertHexToBin(
								char*	szSource,		// Исходная строка hex-цифр
								char*	szDest,			// приемный буфер.
								long	nDestLen );		// размер приемного буфера.
					                                                                                                                                   Export Ordinal: 0
					                                                                                                                                   Returns
						                                                                                                                                   Number: LONG
					                                                                                                                                   Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPSTR
						                                                                                                                                   Number: LONG
				! Function: ConvertBinToHex
					                                                                                                                                   Description: void ConvertBinToHex(
								char*	szSource,		// Исходный сырой BLOB.
								char*	szDest,			// буфер для результирующей строки hex-цифр
								long	nSourceLen );	// размер исходного массива.
					                                                                                                                                   Export Ordinal: 0
					                                                                                                                                   Returns
					                                                                                                                                   Parameters
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   String: LPSTR
						                                                                                                                                   Number: LONG
				Function: GetOffset
					Description: char* GetOffset(char* szSource, long nOffset)
									// Исходный	// смещение
									   сырой BLOB
					Export Ordinal: 0
					Returns
						String: LPSTR
					Parameters
						String: LPCSTR
						Number: LONG
				Function: InsertBuf
					Description: void* InsertBuf(char* szTarget, long nOffsetTarget, char* szSource, long nOffsetSource, long nLength)
					Export Ordinal: 0
					Returns
					Parameters
						Receive String: LPVOID
						Number: LONG
						String: LPVOID
						Number: LONG
						Number: LONG
				! Function: ConcatBufs
					                                                                                                                                   Description: char* ConcatBufs(char* szResult,
							         const char* szBuf1,
								 unsigned long nSize1,
								 const char* szBuf2,
								 unsigned long nSize2)
					                                                                                                                                   Export Ordinal: 0
					                                                                                                                                   Returns
					                                                                                                                                   Parameters
						                                                                                                                                   String: LPSTR
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   Number: LONG
						                                                                                                                                   String: LPCSTR
						                                                                                                                                   Number: LONG
				! Function: NumPtr2Str
					                                                                                                                                   Description: char* NumPtr2Str(unsigned int nNumPtr)
					                                                                                                                                   Export Ordinal: 6
					                                                                                                                                   Returns
						                                                                                                                                   String: LPSTR
					                                                                                                                                   Parameters
						                                                                                                                                   Number: DWORD
				! Function: NumPtr2HexStr
					                                                                                                                                   Description: char* NumPtr2HexStr(unsigned int nNumPtr, unsigned int nBufSize)
					                                                                                                                                   Export Ordinal: 5
					                                                                                                                                   Returns
						                                                                                                                                   String: LPSTR
					                                                                                                                                   Parameters
						                                                                                                                                   Number: DWORD
						                                                                                                                                   Number: DWORD
			Library name: tmm.dll
				Function: TMinitOwn
					Description: TMinit (int AdapterType, int PortNum, int TmType)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: INT
						Number: INT
				Function: TMcheckOwn
					Description: TMcheck (byte *Id, word *RAMsize);
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Receive String: LPVOID
						Receive Number: LPWORD
				Function: TMreadOwn
					Description: TMread (void *Buf, int Ofs, int Len);
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Receive String: LPVOID
						Number: INT
						Number: INT
				Function: TMdoneOwn
					Description: TMdone (void);
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				! Function: TMwriteOwn
					                                                 Description: int TMwrite (void *Buf, int Ofs, int Len);
					                                                 Export Ordinal: 0
					                                                 Returns 
						                                                 Number: INT
					                                                 Parameters 
						                                                 String: LPCSTR
						                                                 Number: INT
						                                                 Number: INT
			Library name: TMEX32.DLL
				Function: TMinit
					Description: int TMinit (int AdapterType, int PortNum)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: INT
				Function: TMdone
					Description: void TMdone (void)
					Export Ordinal: 0
					Returns
					Parameters
				Function: TMcheck
					Description: int TMcheck (byte *Id)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPVOID
				! Function: TMdelete
					                                                 Description: int TMdelete (char *Fn)
					                                                 Export Ordinal: 0
					                                                 Returns 
						                                                 Number: INT
					                                                 Parameters 
						                                                 String: LPCSTR
				! Function: TMFF
					                                                 Description: int TMFF(char *Fn)
					                                                 Export Ordinal: 0
					                                                 Returns 
						                                                 Number: INT
					                                                 Parameters 
						                                                 String: LPCSTR
				! Function: TMFN
					                                                 Description: int TMFN(char *Fn)
					                                                 Export Ordinal: 0
					                                                 Returns 
						                                                 Number: INT
					                                                 Parameters 
						                                                 String: LPCSTR
				Function: TMread
					Description: int TMread(char *Fn, void *Buf, int Len)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						Receive String: LPVOID
						Number: INT
				! Function: TMwrite
					                                                 Description: int TMwrite(char *Fn, void *Buf, int Len)
					                                                 Export Ordinal: 0
					                                                 Returns 
						                                                 Number: INT
					                                                 Parameters 
						                                                 String: LPCSTR
						                                                 String: LPVOID
						                                                 Number: INT
			Library name: XSal2_32.dll
				! *** Cell functions
				Function: XSalTblSetCellBackColor
					Description: BOOL XSalTblSetCellBackColor(
								HWND p_hwndCol,
								COLORREF p_cBackColor );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
				Function: XSalTblGetCellBackColor
					Description: BOOL XSalTblGetCellBackColor(
								HWND p_hwndCol,
								COLORREF FAR * p_lpcBackColor );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPLONG
				Function: XSalTblSetCellFont
					Description: BOOL XSalTblSetCellFont(
								HWND p_hwndCol,
								HFONT p_hFont );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: DWORD
				Function: XSalTblSetCellFontName
					Description: BOOL XSalTblSetCellFontName(
								HWND p_hwndCol,
								LPSTR p_szFontName,
								int p_nFontSize,
								WORD p_nFontEnh );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
						Number: WORD
				Function: XSalTblGetCellFont
					Description: BOOL XSalTblGetCellFont(
								HWND p_hwndCol,
								HFONT FAR * p_lphFont );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPDWORD
				Function: XSalTblSetCellImage
					Description: BOOL XSalTblSetCellImage(
								HWND p_hwndCol,
								HIMAGE p_hImage,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: DWORD
						Number: WORD
				Function: XSalTblSetCellImageFile
					Description: BOOL XSalTblSetCellImageFile(
								HWND p_hwndCol,
								LPSTR p_sImageFile,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: WORD
				Function: XSalTblSetCellImageString
					Description: BOOL XSalTblSetCellImageString(
								HWND p_hwndCol,
								HSTRING p_sImage,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: HSTRING
						Number: WORD
				Function: XSalTblSetCellImageResource
					Description: BOOL XSalTblSetCellImageResource(
								HWND p_hwndCol,
								LPSTR p_szImageResource,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: WORD
				Function: XSalTblGetCellImage
					Description: BOOL XSalTblGetCellImage(
								HWND p_hwndCol,
								HIMAGE FAR * p_lphImage,
								short FAR * p_lpnPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPDWORD
						Receive Number: LPWORD
				Function: XSalTblSetCellCustom
					Description: BOOL XSalTblSetCellCustom(
								HWND p_hwndCol,
								LONG p_nCustomValue );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
				Function: XSalTblGetCellCustom
					Description: BOOL XSalTblGetCellCustom(
								HWND p_hwndCol,
								LONG FAR * p_lpnCustomValue );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPLONG
				! *** Column functions
				Function: XSalTblSetColumnBackColor
					Description: BOOL XSalTblSetColumnBackColor(
								HWND p_hwndCol,
								COLORREF p_cBackColor );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
				Function: XSalTblGetColumnBackColor
					Description: BOOL XSalTblGetColumnBackColor(
								HWND p_hwndCol,
								COLORREF FAR * p_lpcBackColor );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPLONG
				Function: XSalTblSetColumnFont
					Description: BOOL XSalTblSetColumnFont(
								HWND p_hwndCol,
								HFONT p_hFont );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: DWORD
				Function: XSalTblSetColumnFontName
					Description: BOOL XSalTblSetColumnFontName(
								HWND p_hwndCol,
								LPSTR p_szFontName,
								int p_nFontSize,
								WORD p_nFontEnh );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: INT
						Number: WORD
				Function: XSalTblGetColumnFont
					Description: BOOL XSalTblGetColumnFont(
								HWND p_hwndCol,
								HFONT FAR * p_lphFont );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPDWORD
				Function: XSalTblSetColumnImage
					Description: BOOL XSalTblSetColumnImage(
								HWND p_hwndCol,
								HIMAGE p_hImage,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: DWORD
						Number: WORD
				Function: XSalTblSetColumnImageFile
					Description: BOOL XSalTblSetColumnImageFile(
								HWND p_hwndCol,
								LPSTR p_sImageFile,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: WORD
				Function: XSalTblSetColumnImageString
					Description: BOOL XSalTblSetColumnImageString(
								HWND p_hwndCol,
								HSTRING p_sImage,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: HSTRING
						Number: WORD
				Function: XSalTblSetColumnImageResource
					Description: BOOL XSalTblSetColumnImageResource(
								HWND p_hwndCol,
								LPSTR p_szImageResource,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						String: LPSTR
						Number: WORD
				Function: XSalTblGetColumnImage
					Description: BOOL XSalTblGetColumnImage(
								HWND p_hwndCol,
								HIMAGE FAR * p_lphImage,
								short FAR * p_lpnPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPDWORD
						Receive Number: LPWORD
				Function: XSalTblSetColumnCustom
					Description: BOOL XSalTblSetColumnCustom(
								HWND p_hwndCol,
								LONG p_nCustomValue );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
				Function: XSalTblGetColumnCustom
					Description: BOOL XSalTblGetColumnCustom(
								HWND p_hwndCol,
								LONG FAR * p_lpnCustomValue );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Receive Number: LPLONG
				! *** Row functions
				Function: XSalTblSetRowBackColor
					Description: BOOL XSalTblSetRowBackColor(
								HWND p_hwndCol,
								LONG p_nRow,
								COLORREF p_cBackColor );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Number: LONG
				Function: XSalTblGetRowBackColor
					Description: BOOL XSalTblGetRowBackColor(
								HWND p_hwndCol,
								LONG p_nRow,
								COLORREF FAR * p_lpcBackColor );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Receive Number: LPLONG
				Function: XSalTblSetRowFont
					Description: BOOL XSalTblSetRowFont(
								HWND p_hwndTable,
								LONG p_nRow,
								HFONT p_hFont );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Number: DWORD
				Function: XSalTblSetRowFontName
					Description: BOOL XSalTblSetRowFontName(
								HWND p_hwndTable,
								LONG p_nRow,
								LPSTR p_szFontName,
								int p_nFontSize,
								WORD p_nFontEnh );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						String: LPSTR
						Number: INT
						Number: WORD
				Function: XSalTblGetRowFont
					Description: BOOL XSalTblGetRowFont(
								HWND p_hwndTable,
								LONG p_nRow,
								HFONT FAR * p_lphFont );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Receive Number: LPDWORD
				Function: XSalTblSetRowImage
					Description: BOOL XSalTblSetRowImage(
								HWND p_hwndTable,
								LONG p_nRow,
								HIMAGE p_hImage,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Number: DWORD
						Number: WORD
				Function: XSalTblSetRowImageFile
					Description: BOOL XSalTblSetRowImageFile(
								HWND p_hwndTable,
								LONG p_nRow,
								LPSTR p_sImageFile,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						String: LPSTR
						Number: WORD
				Function: XSalTblSetRowImageString
					Description: BOOL XSalTblSetRowImageString(
								HWND p_hwndTable,
								LONG p_nRow,
								HSTRING p_sImage,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						String: HSTRING
						Number: WORD
				Function: XSalTblSetRowImageResource
					Description: BOOL XSalTblSetRowImageResource(
								HWND p_hwndTable,
								LONG p_nRow,
								LPSTR p_szImageResource,
								short p_nPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						String: LPSTR
						Number: WORD
				Function: XSalTblGetRowImage
					Description: BOOL XSalTblGetRowImage(
								HWND p_hwndTable,
								LONG p_nRow,
								HIMAGE FAR * p_lphImage,
								short FAR * p_lpnPosition );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Receive Number: LPDWORD
						Receive Number: LPWORD
				Function: XSalTblSetRowCustom
					Description: BOOL XSalTblSetRowCustom(
								HWND p_hwndTable,
								LONG p_nRow,
								LONG p_nCustomValue );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Number: LONG
				Function: XSalTblGetRowCustom
					Description: BOOL XSalTblGetRowCustom(
								HWND p_hwndTable,
								LONG p_nRow,
								LONG FAR * p_lpnCustomValue );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Window Handle: HWND
						Number: LONG
						Receive Number: LPLONG
				! *** Custom-drawn function
				Function: XSalTblGetCustomInfo
					Description: BOOL XSalTblGetCustomInfo(
								LPCUSTOMCELL p_lpCustomCell,
									HDC FAR * p_lphdc,
									LPINT p_lpnCol, LPLONG p_lpnRow,
									LPLONG p_lpnCustomValue,
									LPRECT p_lpRect );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						Receive Number: LPDWORD
						Receive Number: LPINT
						Receive Number: LPLONG
						Receive Number: LPLONG
						structPointer
							Receive Number: INT
							Receive Number: INT
							Receive Number: INT
							Receive Number: INT
				Function: XSalTblSetClipRect
					Description: BOOL XSalTblGetCustomInfo(
								LPCUSTOMCELL p_lpCustomCell,
								LPRECT p_lpRect );
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Number: DWORD
						structPointer
							Number: INT
							Number: INT
							Number: INT
							Number: INT
		Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
			System
			User
		Resources
		Variables
			Number: nCount0 ! счетчик к-ва документов в файле А
			Number: nCount1 ! счетчик сумм по дебету  в файле А
			Number: nCount2 ! счетчик сумм по кредиту в файле А
			String: strPinCodeVEGA
			! только для отладки
			File Handle: h1
			! все необходимые для ВСЕХ окон переменные
			String: sDiskKataIN
			String: sDiskKataOUT
			String: sDiskKataINS
			String: sDiskKataOUTS
			String: sDiskKataOUTI
			String: sDiskKataLETTER
			String: sArchPath
			String: sTempPath
			Number: nKLI
			String: sSAB
			String: smSAB[*]
			! String: sSABP
			! String: smSABP[*]
			Number: nRNK
			Number: nmRNK[*]
			String: sNMK
			String: smNMK[*]
			String: sOKPO
			String: smOKPO[*]
			String: sTIMES
			String: smTIMES[*]
			!
			String: sVERS
			String: smVERS[*]
			!
			Number: nFetchRes
			! String: sX
			! String: sY
			! Number: nX
			! Number: nY
			Number: nKw
			!
			String: sMass[*]
			String: sDirs[*]
			Number: nCount
			Number: nHo
			Number: nHc
			String: sFileTmp
			Number: nSendId
			Boolean: bIni
			String: sPinKod
			Number: nNf
			!
			! Number: nI
			Number: nII
			Number: nLenArr
			String: sUserid
			! переменные для файла лицензии
			String: smlKOD[*]
			String: smlSAB[*]
			Number: nmlNOMER[*]
			Date/Time: dmlDALI[*]
			! переменные для выбора LISTBOX и Calendar
			Number: nArray[*]
			String: sSelectNAIM[*]
			String: sSelectSAB[*]
			Date/Time: dSelect
			String: smWeek[7]
			String: smMonth[12]
			Date/Time: dDada
			String: sDat
			! String: sSqlSAB
			Number: nIndex
			!
			String: sMFOA
			String: smMFOA[*]
			String: sNLSA
			String: smNLSA[*]
			String: sNAMA
			String: smNAMA[*]
			String: sMFOB
			String: smMFOB[*]
			String: sNLSB
			String: smNLSB[*]
			String: sNAMB
			String: smNAMB[*]
			String: sOKPOB
			String: smOKPOB[*]
			String: sOKPOZ
			String: smOKPOZ[*]
			Number: nDK
			Number: nmDK[*]
			Number: nS
			Number: nmS[*]
			Number: nVOB
			Number: nmVOB[*]
			String: sND
			String: smND[*]
			Number: nISP
			Number: nmISP[*]
			Number: nKV
			Number: nmKV[*]
			Date/Time: dDAOP
			Date/Time: dmDAOP[*]
			Number: nIOST
			Number: nmIOST[*]
			Date/Time: dDAPP
			Date/Time: dmDAPP[*]
			String: sNAZN
			String: smNAZN[*]
			String: smD_rec[*]
			String: sPOND
			String: smPOND[*]
			Number: nSK
			Number: nmSK[*]
			String: sNameFileA
			String: smNameFileA[*]
			!
			Boolean: bU
			Number: nIU
			Number: nIL
			Number: nIQ
			Number: nIN
			Number: nIV
			Number: nIO
			Number: nIW
			!
			Number: nKodirowka
			!
			String: sFrag
			Number: nIl1
			!
			Number: nUsers
			Date/Time: dtExpDate
			Date/Time: dBankDate
			Date/Time: dBankDateM1
			!
			Date/Time: dBankTek
			!
			String: sIdVega
			String: sIds
			String: sIdb
			String: sIdd
			String: sIdo
			String: smIds[*]
			String: smIdb[*]
			String: smIdd[*]
			String: smIdo[*]
			String: sSab
			String: smSab[*]
			!
			String: sTemaPisma
			!
			Long String: g_lsSecretKey      ! Секрентный ключ
			Long String: g_lsSecretKeyCopy  ! Копия секретного ключа (надо для отката при записи измененного ключа на TouchMemory)
			!
			String: sVegaKeyB
		Internal Functions
			! все функции доступны здесь всем окнам
			Function: LenArray
				Description: возвращает длину одномерного массива строк
				Returns
					Number:
				Parameters
					String: smArr[*]
				Static Variables
				Local variables
					Number: nBound
				Actions
					Call SalArrayGetUpperBound(smArr, 1, nBound)
					Return nBound
			Function: DaySymbol
				Description: преобразовывает день  в символ
				Returns
					String:
				Parameters
					Date/Time: dDa
				Static Variables
				Local variables
					Number: nDa
					String: sDay
				Actions
					Set nDa = SalDateDay(dDa)
					If nDa < 10
						Set sDay = Str(nDa)
					Else
						Set sDay = SalNumberToChar(nDa+55)
					Return sDay
			Function: MonthSymbol
				Description: преобразовывает месяц  в символ
				Returns
					String:
				Parameters
					Date/Time: dDa
				Static Variables
				Local variables
					Number: nMo
					String: sMonth
				Actions
					Set nMo = SalDateMonth(dDa)
					If nMo<10
						Set sMonth = Str(nMo)
					Else
						Set sMonth = SalNumberToChar(nMo+55)
					Return sMonth
			Function: YearSymbol
				Description: преобразовывает год  в символ
				Returns
					String:
				Parameters
					Date/Time: dDa
				Static Variables
				Local variables
					Number: nY
					String: sYear
				Actions
					Set nY = SalNumberMax(SalDateYear(dDa) - 1998, 0)
					If nY<10
						Set sYear = Str(nY)
					Else
						Set sYear = SalNumberToChar(nY+55)
					Return sYear
			Function: StrWinToDosX2
				Description:
				Returns
					String:
				Parameters
					String: sIn
				Static Variables
				Local variables
					String: sOut
				Actions
					Set sOut = Spac(Len(sIn))
					Call CharToOemUkr(sIn, sOut)
					Return sOut
			Function: DSig_ReadTM
				Description: ! Читать ТМ
				Returns
					Boolean:
				Parameters
					String: sVegaKeyB
				Static Variables
				Local variables
					Number: nTmp
					Number: i
					String: sTmp
					String: strTMSystem
					Number: nAdapter
					Number: nPort
					Number: nType
					String: strTMFile
				Actions
					! Call Debug('Работаем с TM - Init, Read, Done')
					Set strTMSystem = GetTMSystem()
					Set nAdapter = GetTMAdapter()
					Set nPort = GetTMPort()
					Set nType = GetTMType()
					! Call Debug('TMInit(' || SalNumberToStrX(nAdapter, 0) || ',' || SalNumberToStrX(nPort, 0) || ',' ||
							  SalNumberToStrX(nType, 0) || ')')
					If strTMSystem = 'FILE' ! TM - файловая система
						Set i = TMinit(GetTMAdapter(), GetTMPort())
						If i
							Call SaveErrorToLog('TouchMemory: TMinit(' || SalNumberToStrX(nAdapter, 0) || ',' || SalNumberToStrX(nPort, 0) ||
									     ') return ' || SalNumberToStrX(i, 0))
					Else If strTMSystem = 'RAW' ! TM - сырое устройство
						Set i = TMinitOwn(GetTMAdapter(), GetTMPort(), GetTMType())
						If i
							Call SaveErrorToLog( 'TouchMemory: TMinitOwn(' || SalNumberToStrX(nAdapter, 0) || ',' || SalNumberToStrX(nPort, 0)
									     || ',' || SalNumberToStrX(nType, 0) || ') return ' || SalNumberToStrX(i, 0))
					Else
						Call SalMessageBox('Unknown TouchMemory System', 'Error', MB_IconStop|MB_Ok)
						Return FALSE
					If not i
						Call SalStrSetBufferLength(sTmp, 9)
						If strTMSystem = 'RAW' ! TM - сырое устройство
							Set i = TMcheckOwn(sTmp, nTmp)
							If i
								! Call Debug('TMcheck() return ' || SalNumberToStrX(i, 0))
								Call SaveErrorToLog('TouchMemory: TMcheck() return ' || SalNumberToStrX(i, 0))
						If not i
							Call SalStrSetBufferLength(g_lsSecretKey, 513)
							Call SalStrSetBufferLength(g_lsSecretKeyCopy, 513)
							If strTMSystem = 'FILE' ! TM - файловая система
								Set strTMFile = SalStrMidX(sVegaKeyB, 2, 4) || '.' || SalStrMidX(sVegaKeyB, 6, 2)
								Set i = TMread(strTMFile, g_lsSecretKey, 360)
								If i
									! Call Debug('TMread() return ' || SalNumberToStrX(i, 0))
									Call SaveErrorToLog('TouchMemory: TMread() return ' || SalNumberToStrX(i, 0))
								! делаем копию секр. ключа
								If not i
									Set i = TMread(strTMFile, g_lsSecretKeyCopy, 360)
							Else If strTMSystem = 'RAW' ! TM - сырое устройство
								Set i = TMreadOwn(g_lsSecretKey, 10, 512-10)
								If i
									! Call Debug('TMread() return ' || SalNumberToStrX(i, 0))
									Call SaveErrorToLog('TouchMemory: TMread() return ' || SalNumberToStrX(i, 0))
								! делаем копию секр. ключа
								If not i
									Set i = TMreadOwn(g_lsSecretKeyCopy, 10, 512-10)
					If i = 0
						Return 0
					If strTMSystem = 'FILE' ! TM - файловая система
						Call TMdone()
						Return i+600
					Else If strTMSystem = 'RAW' ! TM - сырое устройство
						Call TMdoneOwn()
						Return i+500
		Named Menus
		Class Definitions
.data RESOURCE 0 0 1 25218691
0000: 37010000A2000000 0000000000000000 0200000200FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F22003C00 000A630047656E46
0040: 696C746500727400 00000400001E0002 0400C10001000000 3F8001F800000037
0060: 040001F00D000000 FF1F110000DC0002 00FF7F1570000000 0100FFFF21018022
0080: 000001C200000B63 47F8444669B30004 00770200F601004F 800100FE008D0400
00A0: 010DFD00FF371100 02F700FFDF15DC00 0100FF7F
.enddata
		Default Classes
			MDI Window: cBaseMDI
			Form Window:
			Dialog Box:
			Table Window:
			Quest Window:
			Data Field:
			Spin Field:
			Multiline Field:
			Pushbutton: ctb_pbInsert
			Radio Button:
			Option Button:
			Check Box:
			Child Table:
			Quest Child Window: cQuickDatabase
			List Box:
			Combo Box:
			Picture:
			Vertical Scroll Bar:
			Horizontal Scroll Bar:
			Column:
			Background Text:
			Group Box:
			Line:
			Frame:
			Custom Control:
		Application Actions
			On SAM_AppStartup
				Call SplashOpenWindow()
				! Инициализация начальных параметров
				! Call SplashSetStatusText("Инициализация параметров...")
				Call GetConfigSettings()
				!
				! Call SplashSetStatusText("Инициализация аудита...")
				Call DBSpy_Init(GetDbs())
				!
				! Call SplashSetStatusText("Инициализация интерфейса...")
				Call SplashCloseWindow()
				If DatabaseLogin(dBankTek)
					Call SetWorkBankDate(dBankTek)
					Set nUsers = GetGlobalOptionEx('USRLIMIT')
					Set dtExpDate = SalFmtFormatStrDateTime(GetGlobalOption('EXPDATE'), 'dd/MM/yyyy')
					If dtExpDate < SalDateCurrent()
						Call SalMessageBeep(MB_IconStop)
						Call SalMessageBox('Истек срок действия лицензии!', 'Bars: Лицензирование!', MB_Ok)
						Call SalQuit()
					Else
						If IsLicenseValid(GetBankMfo(), GetBankName(), nUsers, dtExpDate, FALSE)
							If dtExpDate - SalDateCurrent() < 31
								Call SalMessageBeep(MB_IconStop)
								Call SalMessageBox('Срок действия лицензии истекает через ' ||
										     Str(dtExpDate-SalDateCurrent()) || ' дней!', 'Bars: Лицензирование!', MB_Ok)
							Call SalCreateWindow(menu12, hWndNULL)
							! Call SalModalDialog(menu11, hWndForm)
						Else
							Call SalMessageBeep(MB_IconStop)
							Call SalMessageBox('Лицензия неверна или истек срок ее действия!',
									     'Bars: Лицензирование!', MB_Ok)
							Call SalQuit()
				Else
					Call SalQuit()
			On SAM_SqlError
				Call ShowSqlError(wParam, lParam)
				Return FALSE
			On SAM_AppExit
				Call SaveInfoToLog(MSG_DisconnectDbs() || GetDbs())
				If hSqlAux3()
					Call SqlDisconnect(hSqlAux3())
				If hSqlAux2()
					Call SqlDisconnect(hSqlAux2())
				If hSqlAux()
					Call SqlDisconnect(hSqlAux())
				If hSql()
					Call SqlDisconnect(hSql())
				Call DBSpy_Disconnect()
				Call SalQuit()
	Dialog Box: dlg_InputPinCodeVEGA
		Class:
		Property Template:
		Class DLL Name:
		Title: Ввод PIN-кода ВЕГА
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? No
			Type of Dialog: Modal
			Window Location and Size
				Left:   1.588"
				Top:    1.646"
				Width:  4.357"
				Width Editable? Yes
				Height: 1.792"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: MS Sans Serif
			Font Size: 8
			Font Enhancement: Default
			Text Color: Blue
			Background Color: Default
		Description: Ввод PIN-кода пользователя
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? No
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Background Text: PIN-Код:
				Resource Id: 52809
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.586"
					Top:    0.375"
					Width:  1.214"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Right
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Default
				Background Color: Default
			Data Field: dfPinCode
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 16
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left:   1.829"
						Top:    0.333"
						Width:  1.586"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Invisible
					Country: Default
					Font Name: Arial
					Font Size: 12
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_AnyEdit
						Call SalEnableWindow(pbOk)
			Pushbutton: pbOk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ввести
				Window Location and Size
					Left:   0.5"
					Top:    1.021"
					Width:  1.429"
					Width Editable? Yes
					Height: 0.286"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Set strPinCodeVEGA = dfPinCode
						Call SalEndDialog(hWndForm, TRUE)
			Pushbutton: pbExit
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Выход
				Window Location and Size
					Left:   2.343"
					Top:    1.021"
					Width:  1.429"
					Width Editable? Yes
					Height: 0.286"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Set strPinCodeVEGA = ''
						Call SalEndDialog(hWndForm, FALSE)
			Frame
				Resource Id: 52810
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.057"
					Top:    0.031"
					Width:  4.171"
					Width Editable? Yes
					Height: 0.854"
					Height Editable? Yes
				Visible? Yes
				Corners: Square
				Border Style: Drop-Shadow
				Border Thickness: 1
				Border Color: Default
				Background Color: 3D Face Color
			Frame
				Resource Id: 52811
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.057"
					Top:    0.917"
					Width:  4.171"
					Width Editable? Yes
					Height: 0.521"
					Height Editable? Yes
				Visible? Yes
				Corners: Square
				Border Style: Drop-Shadow
				Border Thickness: 1
				Border Color: Default
				Background Color: 3D Face Color
		Functions
		Window Parameters
		Window Variables
		Message Actions
			On SAM_Create
				Call PrepareWindow(hWndForm)
				Call SalDisableWindow(pbOk)
				Call SalSetFocus(dfPinCode)
			On SAM_CreateComplete
				Call WaitCursorOff()
			On SAM_Destroy
				Call WaitCursorOff()
	Dialog Box: Find
		Class:
		Property Template:
		Class DLL Name:
		Title: Введите фрагмент наименования клиента
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   5.4"
				Top:    4.229"
				Width:  4.243"
				Width Editable? Yes
				Height: 0.667"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Arial Cyr
			Font Size: 10
			Font Enhancement: Bold-Italic
			Text Color: Default
			Background Color: Default
		Description: ввод фрагмента наименования клиента
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: 0.262"
				Size Editable? Yes
				Font Name: Arial Cyr
				Font Size: 10
				Font Enhancement: Bold
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Data Field: dfFind
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left:   0.086"
						Top:    0.073"
						Width:  3.5"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On WM_Char
						If wParam = 10 or wParam = 13
							! Set sFrag = dfFind
							! Call SalEndDialog(Find, 0)
							Call SalSendMsg(pbOk, SAM_Click, 0, 0)
						If wParam = 27
							Call SalEndDialog(Find, 1)
			Pushbutton: pbOk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ok
				Window Location and Size
					Left:   3.686"
					Top:    0.073"
					Width:  0.4"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: Default
				Font Size: 8
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Set sFrag = dfFind
						Call SalEndDialog(Find, 0)
		Functions
		Window Parameters
		Window Variables
			String: sX
			String: sY
			Number: nX
			Number: nY
		Message Actions
			On SAM_Create
				Set dfFind = sFrag
				Call SalUseRegistry(TRUE, GetCompanyName())
				Call SalGetProfileString('FindKlient', 'X-CoordinateFind',
						     'None', sX, 'Bars98')
				Call SalGetProfileString('FindKlient', 'Y-CoordinateFind',
						     'None', sY, 'Bars98')
				If sX != 'None' and sY != 'None'
					Call SalSetWindowLoc(Find, Val(sX), Val(sY))
				Else
					Call SalCenterWindow(Find)
			On SAM_Destroy
				Call SalGetWindowLoc(Find, nX, nY)
				Call SalUseRegistry(TRUE, GetCompanyName())
				If nX != Val(sX)
					Call SalSetProfileString('FindKlient', 'X-CoordinateFind',
							     SalNumberToStrX(nX, 3), 'Bars98')
				If nY != Val(sY)
					Call SalSetProfileString('FindKlient', 'Y-CoordinateFind',
							     SalNumberToStrX(nY, 3), 'Bars98')
	Dialog Box: DuplicateFileName
		Class:
		Property Template:
		Class DLL Name:
		Title: Файл поступил повторно
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   1.85"
				Top:    1.031"
				Width:  4.967"
				Width Editable? Yes
				Height: 2.536"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					String Type: String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? No
					Window Location and Size
						Left:   0.183"
						Top:    0.071"
						Width:  4.5"
						Width Editable? Yes
						Height: 0.833"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: 12
					Font Enhancement: Bold
					Text Color: Yellow
					Background Color: Red
				Message Actions
					On SAM_SetFocus
						Call SalSetFocus(pb1)
			Pushbutton: pb0
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Принять файл в обработку
				Window Location and Size
					Left:   0.183"
					Top:    0.988"
					Width:  4.5"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: Default
				Font Size: 10
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalEndDialog(hWndForm, 0)
			Pushbutton: pb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отложить обработку файла
				Window Location and Size
					Left:   0.183"
					Top:    1.405"
					Width:  4.5"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: 10
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalEndDialog(hWndForm, 1)
			Pushbutton: pb2
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Переместить файл в NOT
				Window Location and Size
					Left:   0.183"
					Top:    1.821"
					Width:  4.5"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: 10
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalEndDialog(hWndForm, 2)
		Functions
		Window Parameters
			String: sFile
		Window Variables
			String: sTimeWaitDupl
			Number: nTimeMiliseconds
			Number: n1
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
				Call SalWaitCursor(FALSE)
				Call SalUseRegistry(FALSE, '')
				Call SalGetProfileString("ElektroKlients", "WaitDuplicate", '7', sTimeWaitDupl, GetIniFileName())
				Set nTimeMiliseconds = Min(Max(1, Val(sTimeWaitDupl)), 65)*1000
				Call SalTimerSet(hWndForm, 1, nTimeMiliseconds)
				While n1 <= nTimeMiliseconds/100
					Call SalMessageBeep(-1)
					Set n1 = n1 + 1
				Set ml1 = 'ВНИМАНИЕ ! Файл ' || sFile || ' поступил повторно. Что делать ?'
			On SAM_Timer
				Call SalEndDialog(hWndForm, 1)
			On SAM_Destroy
				Call SalTimerKill(hWndForm, 1)
				Call SalWaitCursor(FALSE)
	Form Window: menu12
		Class:
		Property Template:
		Class DLL Name:
		Title: Работа с "электронными" клиентами (технолог)
		Icon File:
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Automatically Created at Runtime? No
			Initial State: Normal
			Maximizable? Yes
			Minimizable? Yes
			System Menu? Yes
			Resizable? Yes
			Window Location and Size
				Left:   2.4"
				Top:    1.885"
				Width:  17.133"
				Width Editable? Yes
				Height: 8.131"
				Height Editable? Yes
			Form Size
				Width:  Default
				Height: Default
				Number of Pages: Dynamic
			Font Name: Default
			Font Size: 8
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Pushbutton: pb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F1. АВТОМАТ-"вертушка" (F2)
				Window Location and Size
					Left:   0.083"
					Top:    0.036"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.239"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F1
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						Call SalDisableWindow(pb1)
						If cbD
							Call CopyArch()
						While TRUE
							Call SetBankDate()
							! Call DecodeAll()
							!
							! вызов внешнего приложения1
							If sExtApp1 != STRING_Null
								Call SalFileGetCurrentDirectory(sBuffer2)
								Call SalLoadAppAndWait(sExtApp1, Window_NotVisible, nI)
								Call SalFileSetCurrentDirectory(sBuffer2)
							!
							If cbD
								Call ObrD()
							If cb6
								Call Obr0()
								Call Obr1()
								Call Obr2()
								Call Obr3()
								Call Obr4()
								Call Obr5()
								Call Obr6()
								Call Obr7()
							If cbP
								Call ObrPismo()
							If cbO
								Call MakeU()
								Call MakeA()
							If cbC
								Call OtborOO()
								Call OtborWW()
								Call OtborC()
							! Call EncodeAll()
							Call SqlPrepareAndExecute(hSql(), "
									     SELECT eom,count(*),sum(s)
									     INTO   :nEmi,:nKdi,:nSdi
									     FROM   klp
									     WHERE  fl<3
									     GROUP BY eom")
							While SqlFetchNext(hSql(), nFetchRes)
								If nKdi > 0
									Call Message('Исп.=' || PadL(Str(nEmi), 5) || '   К-во=' || PadL(Str(nKdi), 5) || '   Сумма ' || PadL(
											     SalNumberToStrX(nSdi/100, 2), 20), TRUE, TRUE, 0)
							Call Message('Ожидание обработки файлов КЛИЕНТ-БАНК', FALSE, FALSE, 0)
							!
							! вызов внешнего приложения2
							If sExtApp2 != STRING_Null
								Call SalFileGetCurrentDirectory(sBuffer2)
								Call SalLoadAppAndWait(sExtApp2, Window_NotVisible, nI)
								Call SalFileSetCurrentDirectory(sBuffer2)
							!
							If MessageNoWait('Ожидание обработки файлов КЛИЕНТ-БАНК. Выход - ESC', 'ВЕРТУШКА КЛИЕНТ-БАНК (' || dfVers || ')',
									   GetWaitPeriod(), 0)
								Break
						Call SalEnableWindow(pb1)
						Call SalSetFocus(pb1)
			Pushbutton: pb3
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F2. Обработка информации
				Window Location and Size
					Left:   0.083"
					Top:    0.274"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F2
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Blue
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						Call SetBankDate()
						Call SalDisableWindow(pb3)
						! Call DecodeAll()
						If cbD
							Call ObrD()
						If cb6
							Call Obr0()
							Call Obr1()
							Call Obr2()
							Call Obr3()
							Call Obr4()
							Call Obr5()
							Call Obr6()
							Call Obr7()
						If cbP
							Call ObrPismo()
						If cbO
							Call MakeU()
							Call MakeA()
						If cbC
							Call OtborOO()
							Call OtborWW()
							Call OtborC()
						! Call EncodeAll()
						Call SalEnableWindow(pb3)
						Call SalSetFocus(pb3)
			Pushbutton: pbPismo
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F3. Отправка письма
				Window Location and Size
					Left:   0.083"
					Top:    0.512"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F3
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Periwinkle
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						Call SetBankDate()
						Set bPismo = TRUE
						Call SalDisableWindow(pbPismo)
						Set nI = 0
						Set nLenArr = LenArray(smSAB)
						Call SalShowWindow(l1)
						Call SalShowWindow(pbLB)
						Call SalShowWindow(pbAll)
						Call SalShowWindow(pbFind)
						Call SalShowWindow(pbOtkaz)
						Call SalListClear(l1)
						While nI <= nLenArr
							Call SalListAdd(l1, smSAB[nI] || ' ' || smNMK[nI])
							Set nI = nI + 1
						Call SalSetFocus(l1)
			Pushbutton: pb4
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F4. Отбор выписок по выбору
				Window Location and Size
					Left:   0.083"
					Top:    0.75"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F4
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Dark Green
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						If cbO
							Call SetBankDate()
							Call SalDisableWindow(pb4)
							Call SalDisableWindow(pb7)
							Set nI = 0
							Set nLenArr = LenArray(smSAB)
							Call SalShowWindow(l1)
							Call SalShowWindow(pbLB)
							Call SalShowWindow(pbAll)
							Call SalShowWindow(pbFind)
							Call SalShowWindow(pbOtkaz)
							Call SalListClear(l1)
							While nI <= nLenArr
								Call SalListAdd(l1, smSAB[nI] || ' ' || smNMK[nI])
								Set nI = nI + 1
							Call SalSetFocus(l1)
							Set bVi = TRUE
						Else
							Call MessageNoWait('Режим выключен!', 'ВНИМАНИЕ', 17, 1)
			Pushbutton: pb7
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F7. Отбор курсов валют по выбору
				Window Location and Size
					Left:   0.083"
					Top:    0.988"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F7
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Purple
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						If cbO
							Call SetBankDate()
							Call SalDisableWindow(pb4)
							Call SalDisableWindow(pb7)
							Set nI = 0
							Set nLenArr = LenArray(smSAB)
							Call SalShowWindow(l1)
							Call SalShowWindow(pbLB)
							Call SalShowWindow(pbAll)
							Call SalShowWindow(pbFind)
							Call SalShowWindow(pbOtkaz)
							Call SalListClear(l1)
							While nI <= nLenArr
								Call SalListAdd(l1, smSAB[nI] || ' ' || smNMK[nI])
								Set nI = nI + 1
							Call SalSetFocus(l1)
							Set bVi = FALSE
						Else
							Call MessageNoWait('Режим выключен!', 'ВНИМАНИЕ', 17, 1)
			Pushbutton: pb5
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F5. Отбор ЗАКЛЮЧИТЕЛЬНЫХ выписок
				Window Location and Size
					Left:   0.083"
					Top:    1.226"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F5
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Dark Red
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						If cbO
							Call SalDisableWindow(pb5)
							Call SalMessageBeep(MB_IconQuestion)
							If SalMessageBox('ВЫ УВЕРЕНЫ?', 'Отбор ЗАКЛЮЧИТЕЛЬНЫХ выписок', MB_YesNo|MB_IconQuestion) = IDYES
								Call OtborLS()
							Call SalEnableWindow(pb5)
							Call Message('', FALSE, FALSE, 0)
						Else
							Call MessageNoWait('Режим выключен!', 'ВНИМАНИЕ', 17, 1)
			Pushbutton: pbKartA
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: F6. Карточки (параметры) абонентов КБ
				Window Location and Size
					Left:   0.083"
					Top:    1.464"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F6
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Chartreuse
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						Call SetBankDate()
						Call SalDisableWindow(pbKartA)
						Call SalDisableWindow(pb1)
						Call SalDisableWindow(pb3)
						Call SalDisableWindow(pbPismo)
						Call SalDisableWindow(pb4)
						Call SalDisableWindow(pb7)
						Call SalDisableWindow(pb5)
						Call SalDisableWindow(pbEsc)
						If not IsWindow(hWin7)
							Set hWin7 = SalCreateWindow(abonKB, hWndNULL)
						Else
							Call SalBringWindowToTop(hWin7)
						! Call SalEnableWindow(pbKartA)
			Pushbutton: pbEsc
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: ESC. ВЫХОД
				Window Location and Size
					Left:   0.083"
					Top:    1.702"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.238"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Yellow
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalGetWindowText(hWndItem, sZag, 99)
						Call SaveInfoToLog(sZag)
						Call SalMessageBeep(-1)
						If SalMessageBox("Вы намерены выйти из программы ?", "Внимание !", MB_YesNo) = IDYES
							If sVegaSignOn = '2' or sVegaSignOn = '1'
								! Call VegaClose(0)
								Call VegaClose(nNull)
							Call SalQuit()
						Else
							Return FALSE
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 258
					String Type: Long String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? No
					Window Location and Size
						Left:   8.55"
						Top:    6.262"
						Width:  7.75"
						Width Editable? Yes
						Height: 1.25"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Black
					Background Color: Sky
				Message Actions
					On SAM_SetFocus
						Call SalSetFocus(pb1)
			List Box: l1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Window Location and Size
					Left:   0.067"
					Top:    3.845"
					Width:  4.7"
					Width Editable? Yes
					Height: 3.31"
					Height Editable? Yes
				Visible? Yes
				Multiple selection? Yes
				Sorted? Yes
				Vertical Scroll? Yes
				Font Name: Default
				Font Size: 10
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Horizontal Scroll? No
				List Initialization
				Message Actions
			Pushbutton: pbOtkaz
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отказ
				Window Location and Size
					Left:   0.05"
					Top:    7.19"
					Width:  0.8"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalHideWindow(l1)
						Call SalHideWindow(pbLB)
						Call SalHideWindow(pbAll)
						Call SalHideWindow(pbFind)
						Call SalHideWindow(pbOtkaz)
						Call SalHideWindow(cc1)
						Call SalHideWindow(pbNoDate)
						Call SalHideWindow(pbRun)
						Call Message('', FALSE, FALSE, 0)
						Call SalEnableWindow(pbPismo)
						Call SalEnableWindow(pb4)
						Call SalEnableWindow(pb7)
						If bPismo
							Call SalSetFocus(pbPismo)
						Else
							If bVi
								Call SalSetFocus(pb4)
							Else
								Call SalSetFocus(pb7)
						Set bPismo = FALSE
			Pushbutton: pbAll
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отметить всех
				Window Location and Size
					Left:   0.95"
					Top:    7.19"
					Width:  1.7"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F12
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SetBankDate()
						Set nI = 0
						While nI <= LenArray(smSAB)
							Call SalListSetMultiSelect(l1, nI, TRUE)
							Set nI = nI +1
						Call SalSetFocus(pbLB)
			Pushbutton: pbFind
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Поиск
				Window Location and Size
					Left:   2.75"
					Top:    7.19"
					Width:  0.9"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F7
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SetBankDate()
						If SalModalDialog(Find, hWndForm) = 0
							Set nIl1 = 0
							While nIl1 < SalListQueryCount(l1)
								If SalStrScan(SalStrUpperX(SalListQueryTextX(l1, nIl1)), SalStrUpperX(sFrag)) > 0
									Call SalListSetMultiSelect(l1, nIl1, TRUE)
									Call SalSetFocus(l1)
									Break
								Set nIl1 = nIl1 + 1
			Pushbutton: pbLB
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Выбор
				Window Location and Size
					Left:   3.75"
					Top:    7.19"
					Width:  1.0"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						If bPismo
							If SalListQueryMultiCount(l1) > 0
								! запросить тему письма
								Set sTemaPisma = 'Сообщение'
								If SalModalDialog(temaPisma, hWndForm) = 0
									! организовать выбор файла
									! Call Debug('sTemaPisma = ' || sTemaPisma)
									Set sFiltIn[0] = ''
									Set sFiltIn[1] = ''
									If SalDlgOpenFile(hWndForm, 'Выберите файл для отправки ...', sFiltIn, 2, nI, sFileIn, sPathIn)
										! Call Debug('sFileIn = ' || sFileIn)
										! Call Debug('sPathIn = ' || sPathIn)
										Call SalWaitCursor(TRUE)
										! сформировать файл письма
										! Set sFile = sTempPath || '~B' || ddd(dBankDate) || Right(Suffix(sSab, '~'), 2) || Left(sSab, 1) || '.' ||
												    Right(sSab, 3)
										! Set sFile = sTempPath || '~B' || ddd(dBankDate) || 'nnA.AAA'
										Set sFile = sTempPath || 'B' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
												    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
												    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(
												    Str(SalDateSecond(dDateCurrent)+100), 2)
										If File(sFile)
											Call VisFileDelete(sFile)
										Set nFo = llcreat(sFile, 0)
										If nFo < 0
											Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
											Return FALSE
										Set nFi = llopen(sPathIn, 0)
										If nFi < 0
											Call llclose(nFo)
											Call VisFileDelete(sFile)
											Call MessageNoWait('Ошибка при открытии файла ' || sPathIn, 'Аварийная ситуация', 3, 1)
											Return FALSE
										! определяем длину файла
										Set nLenI = lllseek(nFi, 0, 2)
										Set sBuf = '  2  1 ' || PadL(Str(Len(sTemaPisma)), 9) || PadL(Str(Len(sFileIn)), 3) || sFileIn || PadL(
												    Str(nLenI), 9) || StrWinToDosX(sTemaPisma)
										Call lllseek(nFi, 0, 0)
										Call llwrite(nFo, sBuf, Len(sBuf))
										Set sBuf = Spac(256)
										Set bFlag = TRUE
										While bFlag
											Set nI = llread(nFi, sBuf, 256)
											If nI > 0
												Call llwrite(nFo, sBuf, nI)
											If nI < 256
												Set bFlag = FALSE
										Call llclose(nFi)
										Call llclose(nFo)
										Call SalListGetMultiSelect(l1, nArray)
										! Call Debug('LenArrayN(nArray)=')
										! Call DebugN(LenArrayN(nArray))
										Set nI = 0
										Call SalArraySetUpperBound(sSelectSAB, 1, -1)
										Call SalArraySetUpperBound(sSelectNAIM, 1, -1)
										While nI <= LenArrayN(nArray)
											Set sSab = SalStrUpperX(Left(SalListQueryTextX(l1, nArray[nI]), 4))
											Set sNaim = SalStrMidX(SalListQueryTextX(l1, nArray[nI]), 5, 38)
											! послать письмо SABу (NAIMу), содержащее выбранный файл (вызвать ФУНКЦИЮ)
											Set sFileSab = sTempPath || '~B' || ddd(dBankDate) || Right(Suffix(sSab, '~'), 2) || Left(sSab, 1) || '.'
													    || Right(sSab, 3)
											If sVegaSignOn = '2'
												Call VisFileCopy(sFile, sFileSab)
												Set nF = llopen(sFileSab, 0)
												Set dDateCurrent = SalDateCurrent()
												Set sTempCrypt = sTempPath || 'B' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
														    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
														    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) ||
														    Right(Str(SalDateSecond(dDateCurrent)+100), 2)
												If FileSignCrypt(nF, sTempCrypt, Right(sFileSab, 12)) = 0
													Call llclose(nF)
													Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFileSab, 12))
													Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
													Call SalFileCreateDirectory(syyyyMMddPath)
													Call SalFileCopy(sFileSab, syyyyMMddPath || Right(sFileSab, 12), TRUE)
													Call VisFileDelete(sTempCrypt)
													If File(sDiskKataOUTS || Right(sFileSab, 12))
														Call SqlCommit(hSqlAux2())
													Else
														Call SqlRollback(hSqlAux2())
												Else
													Call llclose(nF)
													Call SqlRollback(hSqlAux2())
												Call VisFileDelete(sFileSab)
											Else
												Call VisFileCopy(sFile, sDiskKataOUT || Right(sFileSab, 12))
												Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sFile, syyyyMMddPath || Right(sFileSab, 12), TRUE)
												Call SqlCommit(hSqlAux2())
											Call Message('Создано письмо (' || sTemaPisma || ') ' || Right(sFileSab, 12) || ' для ' || sNaim, TRUE,
													     TRUE, 0)
											Set nI = nI + 1
										Call VisFileDelete(sFile)
										! Call SalShowWindow(pbNoDate)
										! Call SalShowWindow(pbRun)
										! Call SalShowWindow(cc1)
										! Call SalSetFocus(cc1)
										! Call GetMonthArray(smMonth)
										! Call GetWeekDayArray(smWeek)
										! Call cc1.SetMonthText(smMonth)
										! Call cc1.SetWeekDayText(smWeek)
										Call SalWaitCursor(FALSE)
									Else
										Call SalSendMsg(pbOtkaz, SAM_Click, 0, 0)
						Else
							Call SetBankDate()
							If SalListQueryMultiCount(l1) > 0
								Call SalWaitCursor(TRUE)
								Call Message('Определение дат возможного выбора информации ...', FALSE, FALSE, 0)
								Call cc1.ClearSpecials()
								Call SalListGetMultiSelect(l1, nArray)
								Set nI = 0
								Set nII = 0
								Call SalArraySetUpperBound(sSelectSAB, 1, -1)
								Call SalArraySetUpperBound(sSelectNAIM, 1, -1)
								While nI <= LenArrayN(nArray)
									Set sSelectSAB[nII] = SalStrUpperX(Left(SalListQueryTextX(l1, nArray[nI]), 4))
									Set sSelectNAIM[nII] = SalStrMidX(SalListQueryTextX(l1, nArray[nI]), 5, 38)
									Set nI = nI + 1
									Set nII = nII + 1
								Call SalShowWindow(pbNoDate)
								Call SalShowWindow(pbRun)
								Call SalShowWindow(cc1)
								Call SalSetFocus(cc1)
								Call GetMonthArray(smMonth)
								Call GetWeekDayArray(smWeek)
								Call cc1.SetMonthText(smMonth)
								Call cc1.SetWeekDayText(smWeek)
								If SqlPrepareAndExecute(hSql(), "
										   SELECT fdat
										   INTO   :dSelect
										   FROM   fdat")
									Set nI = 0
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Sunday,    SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Monday,    SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Tuesday,   SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Wednesday, SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Thursday,  SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Friday,    SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									Call cc1.SpecialDate(SPECIAL_Weekly, DATETIME_Null, DAY_Saturday,  SEQ_Unset, COLOR_Black, COLOR_Gray, TRUE)
									While SqlFetchNext(hSql(), nFetchRes)
										Call cc1.SpecialDate(SPECIAL_OneTime, dSelect, DAY_Unset, SEQ_Unset, COLOR_Blue, COLOR_Cyan, TRUE)
										Set nI = nI + 1
									If nI = 0
										Call Message('Нет информации по выбранным клиентам для отбора выписок.', TRUE, TRUE, COLOR_Maize)
										Call SalHideWindow(cc1)
										Call SalHideWindow(pbNoDate)
										Call SalHideWindow(pbRun)
										Call SalSetFocus(l1)
									Else
										Call Message('Для отбора ' || IifS(bVi, 'выписок', 'КУРСОВ') ||
												     ' нажмите кнопку ОТБОР (по дате на ЖЕЛТОМ фоне).', FALSE, FALSE, 0)
										Call cc1.SetFocusDate(dBankDate)
								Else
									Call Message('Нет информации по выбранным клиентам для отбора выписок.', TRUE, TRUE, COLOR_Maize)
									Call SalHideWindow(cc1)
									Call SalHideWindow(pbNoDate)
									Call SalHideWindow(pbRun)
									Call SalSetFocus(l1)
								Call SalWaitCursor(FALSE)
			Custom Control: cc1
.data CLASSPROPSSIZE
0000: 3600
.enddata
.data CLASSPROPS
0000: 56543A43616C656E 6461720025000100 0000000100010000 0200000001000001
0020: 0101010000000A31 352E30362E313935 360000000000
.enddata
.data INHERITPROPS
0000: 0100
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: cCalendar
				Property Template:
				Class DLL Name:
				Display Settings
					DLL Name:
					MS Windows Class Name:
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left:   4.867"
						Top:    5.429"
						Width:  3.6"
						Width Editable? Class Default
						Height: 1.702"
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Etched Border? No
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Class Default
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Class Default
					Background Color: Black
					DLL Settings
				Message Actions
					On SAM_Create
						Call cc1.WeekStartSet(2)
					On SAM_CustControlCmd
						Call cc1.GetFocusDate(dDada)
						If cc1.IsSpecialDate(SPECIAL_OneTime, dDada, DAY_Unset, SEQ_Unset)
							Call cc1.SpecialDate(SPECIAL_OneTime, dYes, DAY_Unset, SEQ_Unset, COLOR_Blue,
									     COLOR_Cyan, TRUE)
							Set dYes = dDada
							Call cc1.SpecialDate(SPECIAL_OneTime, dYes, DAY_Unset, SEQ_Unset, COLOR_Blue,
									     COLOR_Yellow, TRUE)
			Pushbutton: pbRun
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: ОТБОР
				Window Location and Size
					Left:   4.883"
					Top:    7.19"
					Width:  1.033"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F11
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Black
				Background Color: Maize
				Message Actions
					On SAM_Click
						Call SalWaitCursor(TRUE)
						If bVi
							! выписки
							Call SetBankDate()
							! выполнить обработку для выбранной (ЖЕЛТОЙ) даты по всем клиентам (ЦИКЛ)
							Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
							If sOpenDay = '1' and dDada = dBankDate
								! НЕ ОТБИРАТЬ
								! ОТБИРАТЬ !!! но только V
								Set nI = 0
								! Call DebugN(LenArray(sSelectSAB))
								While nI <= LenArray(sSelectSAB)
									Set sSAB = sSelectSAB[nI]
									Set nUid = GetUserId()
									Set nVal = GetBaseVal()
									Set sYearBaDa = Str(SalDateYear(dDada))
									If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dDada,dDada,sSAB,nVal,'%','V')")
										Call SqlCommit(hSql())
										Call SqlPrepareAndExecute(hSql(), "
												     SELECT count(*)
												     FROM   tmp_lics
												     INTO   :nKwo
												     WHERE  id=:nUid")
										Call SqlFetchNext(hSql(), nFetchRes)
										Set bOk = nKwo>0
									Else
										Call SqlRollback(hSql())
										Set bOk = FALSE
									If bOk and SqlPrepareAndExecute(hSql(), "
											   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
											          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,okpoz
											   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,
											          :nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,
											          :nRec,:dDATD,:dDATb1,:dDATb2,:dDATOV,:dDATbis,:sOKPOZ
											   FROM   tmp_lics
											   WHERE  id=:nUid
											   ORDER BY nlsa,kv,daopl,dk,s")
										Set sMFOA = GetBankMfo()
										Set nIndex = 0
										Call SalArraySetUpperBound(smMFOA, 1, -1)
										Call SalArraySetUpperBound(smNLSA, 1, -1)
										Call SalArraySetUpperBound(smNAMA, 1, -1)
										Call SalArraySetUpperBound(smMFOB, 1, -1)
										Call SalArraySetUpperBound(smNLSB, 1, -1)
										Call SalArraySetUpperBound(smNAMB, 1, -1)
										Call SalArraySetUpperBound(smOKPOA, 1, -1)
										Call SalArraySetUpperBound(smOKPOZ, 1, -1)
										Call SalArraySetUpperBound(smOKPOB, 1, -1)
										Call SalArraySetUpperBound(nmDK, 1, -1)
										Call SalArraySetUpperBound(nmS, 1, -1)
										Call SalArraySetUpperBound(nmVOB, 1, -1)
										Call SalArraySetUpperBound(smND, 1, -1)
										Call SalArraySetUpperBound(nmISP, 1, -1)
										Call SalArraySetUpperBound(nmKV, 1, -1)
										Call SalArraySetUpperBound(dmDAOP, 1, -1)
										Call SalArraySetUpperBound(nmIOST, 1, -1)
										Call SalArraySetUpperBound(nmDOS, 1, -1)
										Call SalArraySetUpperBound(nmKOS, 1, -1)
										Call SalArraySetUpperBound(dmDAPP, 1, -1)
										Call SalArraySetUpperBound(dmPDAT, 1, -1)
										Call SalArraySetUpperBound(dmDATD, 1, -1)
										Call SalArraySetUpperBound(smNAZN, 1, -1)
										Call SalArraySetUpperBound(smD_rec, 1, -1)
										Call SalArraySetUpperBound(smPOND, 1, -1)
										Call SalArraySetUpperBound(nmSK, 1, -1)
										Call SalArraySetUpperBound(smNameFileA, 1, -1)
										Call SalArraySetUpperBound(nmBis, 1, -1)
										Call SalArraySetUpperBound(smBis, 1, -1)
										Call SalArraySetUpperBound(dmDATb1, 1, -1)
										Call SalArraySetUpperBound(dmDATb2, 1, -1)
										Call SalArraySetUpperBound(dmDATOV, 1, -1)
										While SqlFetchNext(hSql(), nFetchRes)
											Set smMFOA[nIndex] = sMFOA
											Set smNLSA[nIndex] = sNLSA
											Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
											Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
											Set smNLSB[nIndex] = sNLSB
											Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
											Set smOKPOA[nIndex] = sOKPOA
											Set smOKPOZ[nIndex] = sOKPOZ
											Set smOKPOB[nIndex] = sOKPOB
											Set nmDK[nIndex] = nDK
											Set nmS[nIndex] = nS
											! Set nmVOB[nIndex] = nVOB
											! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
											Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
											Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
											Set nmISP[nIndex] = nISP
											Set nmKV[nIndex] = nKV
											Set dmDAOP[nIndex] = dDAOP
											Set nmIOST[nIndex] = nIOST
											Set nmDOS[nIndex] = nDOS
											Set nmKOS[nIndex] = nKOS
											Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
											Set dmDATD[nIndex] = dDATD
											Set dmDAPP[nIndex] = dDAPP
											Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
											Set sD_rec = StrDosToWinX(sD_rec)
											Set smD_rec[nIndex] = sD_rec
											! If nBis = NUMBER_Null or nBis = 0
												                                              Set nmBis[nIndex] = 0
												                                              Set smBis[nIndex] = ''
											Set nmBis[nIndex] = 0
											Set smBis[nIndex] = ''
											If sNazns = '00'
												Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
														    SELECT n_np
														    FROM   s_np
														    WHERE  k_np='" || sNaznk || "'"))
											! Set nPosKwoBis = SalStrScan(sD_rec, '#B')
											! If nBis > 0 and nPosKwoBis >= 0
												                                              Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
												                                              Set nB = SalStrScan(sTempBis, '#')
												                                              Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
												                                              Set nLoop = nmBis[nIndex]
												                                              Set smBis[nIndex] = ''
												                                              Set nmBis[nIndex] = 0
												! Call SqlPrepareAndExecute(hSqlAux3(), "
														     SELECT substr(convert(nazn,'RU8PC866','CL8MSWIN1251'),1,200),
														            substr(convert(d_rec,'RU8PC866','CL8MSWIN1251'),1,200)
														     INTO   :sNaznBis,:sD_recBis
														     FROM   arc_rrp
														     WHERE  fn_a=:sFn_a and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
														     ORDER BY rec_a,bis")
												                                              Call SqlPrepareAndExecute(hSqlAux3(), "
														     SELECT nazn,d_rec
														     INTO   :sNaznBis,:sD_recBis
														     FROM   arc_rrp
														     WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
														     ORDER BY rec_a,bis")
												                                              While SqlFetchNext(hSqlAux3(), nFetchRes)
													                                              If nLoop > 0
														                                              Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
														                                              Set nLenOdinBis = Len(sOdinBis)
														! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
														                                              Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
														                                              Set nmBis[nIndex] = nmBis[nIndex] + 1
														                                              Set nLoop = nLoop - 1
												! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
												                                              If nmBis[nIndex] > 0
													                                              If Len(smBis[nIndex]) = 0
														                                              Set nmBis[nIndex] = 0
													                                              Else 
														                                              Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
												                                              Else 
													                                              Set smBis[nIndex] = ''
											Set smPOND[nIndex] = sPOND
											Set nmSK[nIndex] = nSK
											Set smNameFileA[nIndex] = sNameFileA
											Set dmDATb1[nIndex] = dDATb1
											Set dmDATb2[nIndex] = dDATb2
											Set dmDATOV[nIndex] = dDATOV
											Set nIndex = nIndex + 1
										! Call Debug('перед MAKEV2, nIndex=' || Str(nIndex))
										If nIndex > 0
											Call Message('Отбор (V) для ' || sSAB || ' ...', TRUE, TRUE, 0)
											If MakeV2(dDada, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOB, nmDK, nmS, nmVOB, smND,
													   nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK, smNameFileA,
													   nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
												Call Message('Отбор (V) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
										Else
											Call Message('Отбор (V) для ' || sSAB || ' ош. (нет информации)', TRUE, TRUE, 0)
									Set nI = nI + 1
							Else
								! ОТБИРАТЬ
								! Call Debug(SalFmtFormatDateTime(dDada, 'dd/MM/yyyy'))
								Set nI = 0
								! Call DebugN(LenArray(sSelectSAB))
								While nI <= LenArray(sSelectSAB)
									Set sSAB = sSelectSAB[nI]
									Set nUid = GetUserId()
									Set nVal = GetBaseVal()
									Set sYearBaDa = Str(SalDateYear(dDada))
									If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dDada,dDada,sSAB,nVal,'%','Z')")
										Call SqlCommit(hSql())
										Call SqlPrepareAndExecute(hSql(), "
												     SELECT count(*)
												     FROM   tmp_lics
												     INTO   :nKwo
												     WHERE  id=:nUid")
										Call SqlFetchNext(hSql(), nFetchRes)
										! Call Debug('nKwo=' || Str(nKwo))
										Set bOk = nKwo>0
									Else
										Call SqlRollback(hSql())
										Set bOk = FALSE
									If bOk and SqlPrepareAndExecute(hSql(), "
											   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
											          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,ref,okpoz
											   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,
											          :nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,
											          :nRec,:dDATD,:dDATb1,:dDATb2,:dDATOV,:dDATbis,:nRef,:sOKPOZ
											   FROM   tmp_lics
											   WHERE  id=:nUid
											   ORDER BY nlsa,kv,dk,s")
										Set sMFOA = GetBankMfo()
										Set nIndex = 0
										Call SalArraySetUpperBound(smMFOA, 1, -1)
										Call SalArraySetUpperBound(smNLSA, 1, -1)
										Call SalArraySetUpperBound(smNAMA, 1, -1)
										Call SalArraySetUpperBound(smMFOB, 1, -1)
										Call SalArraySetUpperBound(smNLSB, 1, -1)
										Call SalArraySetUpperBound(smNAMB, 1, -1)
										Call SalArraySetUpperBound(smOKPOA, 1, -1)
										Call SalArraySetUpperBound(smOKPOZ, 1, -1)
										Call SalArraySetUpperBound(smOKPOB, 1, -1)
										Call SalArraySetUpperBound(nmDK, 1, -1)
										Call SalArraySetUpperBound(nmS, 1, -1)
										Call SalArraySetUpperBound(nmVOB, 1, -1)
										Call SalArraySetUpperBound(smND, 1, -1)
										Call SalArraySetUpperBound(nmISP, 1, -1)
										Call SalArraySetUpperBound(nmKV, 1, -1)
										Call SalArraySetUpperBound(dmDAOP, 1, -1)
										Call SalArraySetUpperBound(nmIOST, 1, -1)
										Call SalArraySetUpperBound(nmDOS, 1, -1)
										Call SalArraySetUpperBound(nmKOS, 1, -1)
										Call SalArraySetUpperBound(dmDAPP, 1, -1)
										Call SalArraySetUpperBound(dmPDAT, 1, -1)
										Call SalArraySetUpperBound(dmDATD, 1, -1)
										Call SalArraySetUpperBound(smNAZN, 1, -1)
										Call SalArraySetUpperBound(smD_rec, 1, -1)
										Call SalArraySetUpperBound(smPOND, 1, -1)
										Call SalArraySetUpperBound(nmSK, 1, -1)
										Call SalArraySetUpperBound(smNameFileA, 1, -1)
										Call SalArraySetUpperBound(nmBis, 1, -1)
										Call SalArraySetUpperBound(smBis, 1, -1)
										Call SalArraySetUpperBound(dmDATb1, 1, -1)
										Call SalArraySetUpperBound(dmDATb2, 1, -1)
										Call SalArraySetUpperBound(dmDATOV, 1, -1)
										While SqlFetchNext(hSql(), nFetchRes)
											Set smMFOA[nIndex] = sMFOA
											Set smNLSA[nIndex] = sNLSA
											Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
											Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
											Set smNLSB[nIndex] = sNLSB
											Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
											Set smOKPOA[nIndex] = sOKPOA
											Set smOKPOZ[nIndex] = sOKPOZ
											Set smOKPOB[nIndex] = sOKPOB
											Set nmDK[nIndex] = nDK
											Set nmS[nIndex] = nS
											! Set nmVOB[nIndex] = nVOB
											! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
											Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
											Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
											Set nmISP[nIndex] = nISP
											Set nmKV[nIndex] = nKV
											Set dmDAOP[nIndex] = dDAOP
											Set nmIOST[nIndex] = nIOST
											Set nmDOS[nIndex] = nDOS
											Set nmKOS[nIndex] = nKOS
											Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
											Set dmDATD[nIndex] = dDATD
											Set dmDAPP[nIndex] = dDAPP
											Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
											Set sD_rec = StrDosToWinX(sD_rec)
											Set smD_rec[nIndex] = sD_rec
											If nBis = NUMBER_Null or nBis = 0
												Set nmBis[nIndex] = 0
												Set smBis[nIndex] = ''
											If sNazns = '00'
												Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
														    SELECT n_np
														    FROM   s_np
														    WHERE  k_np='" || sNaznk || "'"))
											If nBis > 0
												Set nPosKwoBis = SalStrScan(sD_rec, '#B')
												! внешние бисы
												If nPosKwoBis >= 0
													Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
													Set nB = SalStrScan(sTempBis, '#')
													Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
													Set sSQL = "SELECT nazn,d_rec
															            INTO   :sNaznBis,:sD_recBis
															            FROM   arc_rrp
															            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
															            ORDER BY rec_a,bis"
												! внутрение бисы
												Else
													Set nmBis[nIndex] = nBis
													Set sSQL = "
															    SELECT '#C'||value||'#','' as d_recbis
															    INTO   :sNaznBis,:sD_recBis
															    FROM   operw
															    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
															    ORDER BY tag"
												!
												Set nLoop = nmBis[nIndex]
												Set smBis[nIndex] = ''
												Set nmBis[nIndex] = 0
												Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
												While SqlFetchNext(hSqlAux3(), nFetchRes)
													If nLoop > 0
														Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
														Set nLenOdinBis = Len(sOdinBis)
														! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
														Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
														Set nmBis[nIndex] = nmBis[nIndex] + 1
														Set nLoop = nLoop - 1
												! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
												If nmBis[nIndex] > 0
													If Len(smBis[nIndex]) = 0
														Set nmBis[nIndex] = 0
													Else
														Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
												Else
													Set smBis[nIndex] = ''
											Set smPOND[nIndex] = sPOND
											Set nmSK[nIndex] = nSK
											Set smNameFileA[nIndex] = sNameFileA
											Set dmDATb1[nIndex] = dDATb1
											Set dmDATb2[nIndex] = dDATb2
											Set dmDATOV[nIndex] = dDATOV
											Set nIndex = nIndex + 1
										If nIndex > 0
											Call Message('Отбор (Z) за ' || Str(SalDateDay(dDada)) || ' ' || GetMonthName(SalDateMonth(dDada), TRUE) ||
													     ' ' || Str(SalDateYear(dDada)) || ' г. для ' || sSAB || ' ... ' || sSelectNAIM[nI], TRUE, TRUE, 0)
											If MakeZ(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOA, smOKPOB, nmDK, nmS, nmVOB,
													   smND, nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK,
													   smNameFileA, nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
												Call Message('Отбор (Z) за ' || Str(SalDateDay(dDada)) || ' ' || GetMonthName(SalDateMonth(dDada), TRUE)
														     || ' ' || Str(SalDateYear(dDada)) || ' г. для ' || sSAB || ' Ok ' || sSelectNAIM[nI], TRUE, TRUE, 0)
										Else
											Call Message('Отбор (Z) за ' || Str(SalDateDay(dDada)) || ' ' || GetMonthName(SalDateMonth(dDada), TRUE)
													     || ' ' || Str(SalDateYear(dDada)) || ' г. для ' || sSAB || ' ош. (нет информации) ' || sSelectNAIM[nI],
													     TRUE, TRUE, 0)
									Set nI = nI + 1
							Call Message('Для отбора выписок нажмите кнопку ОТБОР (по дате на ЖЕЛТОМ фоне).', FALSE, FALSE, 0)
						Else
							! курсы валют
							Set nI = 0
							Set nVal = GetBaseVal()
							If SqlPLSQLCommand(hSql(), 'val_ksbb(dDada, dDada, nVal)')
								Call SqlCommit(hSql())
								While nI <= LenArray(sSelectSAB)
									Set sSAB = sSelectSAB[nI]
									Call Message('Отбор (K) для ' || sSAB || ' за ' || SalFmtFormatDateTime(dDada, 'dd/MM/yyyy') || '...', TRUE,
											     TRUE, 0)
									Set bFl = TRUE
									Call SqlPrepareAndExecute(hSql(), "
											     SELECT kv,bsum,vdate1,rateo1
											     INTO   :nKV,:nBSUM,:dVDATE,:nRATE_O
											     FROM   tmp_valk
											     ORDER BY 1")
									While SqlFetchNext(hSql(), nFetchRes)
										If bFl
											Set bFl = FALSE
											Set sFile = sTempPath || 'K' || ddd(dBankDate) || Suffix(sSAB, 'K') || Left(sSAB, 1) || '.' ||
													    Right(sSAB, 3)
											If File(sFile)
												Call VisFileDelete(sFile)
											Set nF = llcreat(sFile, 0)
											If nF < 0
												Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
												Set bFl = TRUE
										If not bFl
											Set s16t = PadL(SalNumberToStrX(nRATE_O/nBSUM, 8), 16)
											Set sString = PadL(Str(nKV), 3) || SalFmtFormatDateTime(dVDATE, 'yyyyMMdd') || Left(s16t, 7) || '.' ||
													    Right(s16t, 8) || PutCrLf()
											Call llwrite(nF, sString, Len(sString))
										Else
											Call Message('Отбор (K) для ' || sSAB || ' за ' || SalFmtFormatDateTime(dDada, 'dd/MM/yyyy') || ' ош.',
													     TRUE, TRUE, 0)
									If not bFl
										If sVegaSignOn = '2'
											Set dDateCurrent = SalDateCurrent()
											Set sTempCrypt = sTempPath || 'K' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
													    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
													    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(
													    Str(SalDateSecond(dDateCurrent)+100), 2)
											If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
												Call llclose(nF)
												Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
												Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
												Call VisFileDelete(sTempCrypt)
												Call VisFileDelete(sFile)
												Call Message('Отбор (K) для ' || sSAB || ' за ' || SalFmtFormatDateTime(dDada, 'dd/MM/yyyy') || ' Ok',
														     TRUE, TRUE, 0)
												Call SqlCommit(hSqlAux2())
											Else
												Call llclose(nF)
												Call VisFileDelete(sFile)
												Call Message('Отбор (K) для ' || sSAB || ' за ' || SalFmtFormatDateTime(dDada, 'dd/MM/yyyy') || ' ош.',
														     TRUE, TRUE, 0)
												Call SqlRollback(hSqlAux2())
										Else
											Call llclose(nF)
											Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
											Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
											Call VisFileDelete(sFile)
											Call Message('Отбор (K) для ' || sSAB || ' за ' || SalFmtFormatDateTime(dDada, 'dd/MM/yyyy') || ' Ok', TRUE,
													     TRUE, 0)
											Call SqlCommit(hSqlAux2())
									Set nI = nI + 1
								Call Message('Для отбора КУРСОВ нажмите кнопку ОТБОР (по дате на ЖЕЛТОМ фоне).', FALSE, FALSE, 0)
							Else
								Call SqlRollback(hSql())
								Call Message('Ошибка отбора курсов за ' || SalFmtFormatDateTime(dDada, 'dd/MM/yyyy') || '... (курсы отсутствуют)',
										     TRUE, TRUE, COLOR_Salmon)
						Call SalWaitCursor(FALSE)
			Pushbutton: pbNoDate
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отказ от выбора даты
				Window Location and Size
					Left:   6.017"
					Top:    7.19"
					Width:  2.433"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Light Gray
				Message Actions
					On SAM_Click
						Call SalHideWindow(pbNoDate)
						Call SalHideWindow(pbRun)
						Call SalHideWindow(cc1)
						Call SalSetFocus(l1)
						Call Message('', FALSE, FALSE, 0)
			Background Text: ТЕКУЩЕЕ СООБЩЕНИЕ
				Resource Id: 36610
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   12.0"
					Top:    6.06"
					Width:  4.3"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Right
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Dark Gray
				Background Color: Default
			Child Table: tblMessage
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Display Settings
					Window Location and Size
						Left:   4.883"
						Top:    -0.012"
						Width:  11.767"
						Width Editable? Yes
						Height: 5.381"
						Height Editable? Yes
					Visible? Yes
					Font Name: Courier
					Font Size: 9
					Font Enhancement: Bold
					Text Color: Charcoal
					Background Color: Light Gray
					View: Table
					Allow Row Sizing? No
					Lines Per Row: Default
				Memory Settings
					Maximum Rows in Memory: 10000000
					Discardable? No
				Contents
					Column: colTime
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Время
						Visible? Yes
						Editable? No
						Maximum Data Length: Default
						Data Type: String
						Justify: Right
						Width:  0.914"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
					Column: colText
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Текст сообщения
						Visible? Yes
						Editable? No
						Maximum Data Length: Default
						Data Type: String
						Justify: Left
						Width:  6.2"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
				Functions
				Window Variables
				Message Actions
					On SAM_DoubleClick
						Set nRowT = SalTblQueryContext(tblMessage)
						Call SalModalDialog(dlg_edit_mess, hWndForm, nRowT)
			! Check Box: cbC
.winattr
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отбор файлов (С) при F1 или F2
				Window Location and Size
					Left:   0.083"
					Top:    0.988"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold-Italic
				Text Color: Purple
				Background Color: Gray
.end
				                                                                                                                       Message Actions 
			! Check Box: cbP
.winattr
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Формировать файлы C вышестоящим кл.
				Window Location and Size
					Left:   0.083"
					Top:    1.702"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Blue
				Background Color: Gray
.end
				                                                                                Message Actions 
			Check Box: cbK
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отбор файлов K (курсы валют) при F5
				Window Location and Size
					Left:   0.083"
					Top:    1.988"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Purple
				Background Color: Gray
				Message Actions
					On SAM_Click
						If cbK
							Set cbK = cbO
			Check Box: cbD
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Обработка входных документов (D)
				Window Location and Size
					Left:   0.083"
					Top:    2.238"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Blue
				Background Color: Light Gray
				Message Actions
					On SAM_Click
						If cbD
							Set cbD = cbSet(1, TRUE)
						Else
							If SqlPrepareAndExecute(hSql(), "
									   UPDATE tmp_klp_c
									   set    sid=null
									   where  id=1") and SqlCommit(hSql())
			Check Box: cb6
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Обработка запросов (0,1,2,3,5,6)
				Window Location and Size
					Left:   0.083"
					Top:    2.488"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Default
				Background Color: Light Gray
				Message Actions
					On SAM_Click
						If cb6
							Set cb6 = cbSet(2, TRUE)
						Else
							If SqlPrepareAndExecute(hSql(), "
									   UPDATE tmp_klp_c
									   set    sid=null
									   where  id=2") and SqlCommit(hSql())
			Check Box: cbP
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Обработка писем (~) в т.ч. вал. док-тов
				Window Location and Size
					Left:   0.083"
					Top:    2.738"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Chartreuse
				Background Color: Light Gray
				Message Actions
					On SAM_Click
						If cbP
							Set cbP = cbSet(3, TRUE)
						Else
							If SqlPrepareAndExecute(hSql(), "
									   UPDATE tmp_klp_c
									   set    sid=null
									   where  id=3") and SqlCommit(hSql())
			Check Box: cbC
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Отбор файлов состояния документов (C)
				Window Location and Size
					Left:   0.083"
					Top:    2.988"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Periwinkle
				Background Color: Light Gray
				Message Actions
					On SAM_Click
						If cbC
							Set cbC = cbSet(4, TRUE)
						Else
							If SqlPrepareAndExecute(hSql(), "
									   UPDATE tmp_klp_c
									   set    sid=null
									   where  id=4") and SqlCommit(hSql())
			Check Box: cbO
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Форм. выходной информации (U,A,V,Z,K)
				Window Location and Size
					Left:   0.083"
					Top:    3.238"
					Width:  4.7"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Dark Green
				Background Color: Light Gray
				Message Actions
					On SAM_Click
						If cbO
							Set cbO = cbSet(5, TRUE)
						Else
							If SqlPrepareAndExecute(hSql(), "
									   UPDATE tmp_klp_c
									   set    sid=null
									   where  id=5") and SqlCommit(hSql())
						If cbK
							Set cbK = cbO
			Line
				Resource Id: 16934
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Coordinates
					Begin X:  0.083"
					Begin Y:  3.56"
					End X:  4.783"
					End Y:  3.56"
				Visible? Yes
				Line Style: Solid
				Line Thickness: 1
				Line Color: Default
			Background Text: Режим:
				Resource Id: 14667
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.083"
					Top:    3.643"
					Width:  0.8"
					Width Editable? Yes
					Height: 0.19"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: 8
				Font Enhancement: Bold
				Text Color: Default
				Background Color: Default
			Data Field: dfRab
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? No
				Display Settings
					Window Location and Size
						Left:   0.833"
						Top:    3.655"
						Width:  3.883"
						Width Editable? Yes
						Height: 0.167"
						Height Editable? Yes
					Visible? Yes
					Border? No
					Justify: Center
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: 8
					Font Enhancement: Bold
					Text Color: Blue
					Background Color: 3D Face Color
					Input Mask: Unformatted
				Message Actions
			Data Field: dfVers
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? No
				Display Settings
					Window Location and Size
						Left:   15.1"
						Top:    5.417"
						Width:  1.483"
						Width Editable? Yes
						Height: 0.167"
						Height Editable? Yes
					Visible? Yes
					Border? No
					Justify: Right
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: 3D Face Color
					Input Mask: Unformatted
				Message Actions
		Functions
			Function: ObrD
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || 'D' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов D', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || 'D' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов D', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Set nDubl = DuplicateFile(sMass[nNf])
									If nDubl = 0 ! нет или принять
										Call fLnFilesD(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else If nDubl = 2 ! переместить в NOT
										Call Message('Копирование файла ' || sMass[nNf] || ' в NOT', TRUE, TRUE, 0)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: fLnFilesD
				Description: Обработка входных файлов D КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
					String: sFilNam
				Static Variables
				Local variables
					Number: nI
					Number: nLenArr
					Number: nErrorSign
					String: sTempFile
					Number: nCode
				Actions
					Call Message('Обработка файла ' || Right(sFilNam, 12), TRUE, TRUE, 0)
					! расшифровать входной файл, выложить во временный каталог с "диким" именем и подать на обработку
					Call VisDosEnumFileInfo(sFilNam, FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
					If sVegaSignOn = '2'
						Set nCode = DecryptDesign(sFilNam, nmSizes[0], sTempFile, nErrorSign)
						If nCode != 0
							Set nErrorSign = nCode
					Else
						Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
								    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
								    SalDateCurrent())), 3)
						Set nErrorSign = SalFileCopy(sFilNam, sTempFile, TRUE)
					If nErrorSign != 0 ! не расшифрован или не проверена подпись, или ошибка копирования
						Call SalArraySetUpperBound(smKOD4, 1, -1)
						Call SalArraySetUpperBound(nmPOND, 1, -1)
						! Set smKOD4[0] = '3401'
						Set smKOD4[0] = IifS(sVegaSignOn='2', '3401', '0505')
						Set nmPOND[0] = 0
						Call Message('Ошибка '|| IifS(sVegaSignOn='2', 'подписи', 'копирования') || ' (код=' || Str(nErrorSign) ||
								     ') входного файла ' || Right(sFilNam, 12), TRUE, TRUE, COLOR_Salmon)
						! записать файл квитанции T
						If FormFileT(smKOD4, nmPOND, Subs(Right(sFilNam, 12), 8, 1) || Right(sFilNam, 3), Right(sFilNam, 12))
							Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFilNam, syyyyMMddPath || Right(sFilNam, 12), TRUE)
							Call VisFileDelete(sFilNam)
						Return FALSE
					! конец проверки подписи
					Set nKw = ObrFileD(sTempFile, sFilNam) ! параметр - имя файла
					! Call DebugN(nKw)
					Call VisFileDelete(sTempFile)
					If nKw = 0
						Call Message('Сформирована квитанция T на файл ' || Right(sFilNam, 12) || '. Код возврата = 0', TRUE, TRUE, 0)
						Set syyyyMMddPath = sArchPath || 'ADR\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sFilNam, syyyyMMddPath ||  Right(sFilNam, 12), TRUE)
						Call VisFileDelete(sFilNam)
						Return TRUE
					Else
						If nKw = 9 ! повторный приход файла
							Call Message('Повторный приход файла ' || Right(sFilNam, 12) || ' - перемещён в архив (DBL)', TRUE, TRUE,
									     COLOR_Yellow)
							Set syyyyMMddPath = sArchPath || 'DBL\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFilNam, syyyyMMddPath || Right(sFilNam, 12), TRUE)
							Call VisFileDelete(sFilNam)
							Return FALSE
						Else If nKw = -9 ! ошибка при формировании квитанции T
							!
						Else
							Call Message('Cформирована квитанция T на файл ' || Right(sFilNam, 12) || '. Код возврата = ' || Str(nKw), TRUE,
									     TRUE, 0)
							Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFilNam, syyyyMMddPath || Right(sFilNam, 12), TRUE)
							Call VisFileDelete(sFilNam)
							Return FALSE
			Function: ObrFileD
				Description: обработка файла D
				Returns
					Number:
				Parameters
					String: sFileOrig
					String: sFileInput
				Static Variables
				Local variables
					String: sNameFile
					String: sNameFile1
					Number: nDokCount
					Number: nDebSum
					Number: nKreSum
					!
					String: sMFOA
					String: sNLSA
					String: sOKPOA
					String: sMFOB
					String: sNLSB
					String: sOKPOB
					String: sOKPOO
					! Number: nDebKre
					Number: nSumma
					Number: nVOB
					String: sND
					Number: nVAL
					Date/Time: dDATdok
					String: sNAMA
					String: sNAMB
					String: sNAZN
					String: sPOND
					! Long String: sPDP1
					! Long String: sPDP2
					String: sNameFileA
					Number: nPND
					Number: nLenDopRek
					Long String: sDopRek
					!
					Long String: sBuffer
					! Long String: sBuffer2
					Long String: sBuffer2cl
					Long String: sBuffer3
					Long String: sBuffer2a
					Long String: sBuffer2b
					Long String: sBufferP
					Number: nBytes
					Number: nBytes2
					Number: nBytes3
					Number: nBytes2a
					Number: nBytes2b
					String: sData
					String: sData2
					Long String: s1723
					Number: nAcc
					Number: nFetchRes
					String: sKKKK
					Number: nFl
					String: sInfo1
					String: sInfo2
					Number: nMdop
					! Long String: sPDPinternal
					String: sKodK
					Date/Time: dDalic
					!
					String: sPrwo
					Number: nIsp
					String: sIsp
					Number: nEOM
					Number: nRazniza
					!
					String: sPARAMETR
					File Handle: hHan
					! String: sPDP198
					! String: sPDP298
					String: sN
					String: sNs
					Number: nLenArr
					Number: nI
					Number: nC
					String: sDubNaex
					String: sDubPond
					!
					Boolean: bGood
					String: sOKPObars
					String: sId
					String: sNm
					String: sIdR
					!
					File Handle: hFotl
					!
					String: sDaVal
					Date/Time: dDaVal
					!
					Number: nRNK
					Number: nIter
					!
					Date/Time: dDateDokKB
					!
					String: sAccSql
					Boolean: bFl
					!
					Number: nNumTokens
					String: sTmp
					Number: nJ
					String: smTokenArray[*]
					!
					Number: nSum
					Number: nCnt
					Number: nSumZ
					Number: nCntZ
					Boolean: bRet
				Actions
					Set nIter = 0
					Set sSAB1 = Subs(Right(sFileInput, 12), 8, 1) || Right(sFileInput, 3)
					Set sKKKK = sSAB1
					Call SalArraySetUpperBound(smKOD4, 1, -1)
					Call SalArraySetUpperBound(nmPOND, 1, -1)
					! Call Debug('sFileOrig =' || sFileOrig)
					! Call Debug('sFileInput=' || sFileInput)
					If not SalFileOpen(hHan, sFileOrig, OF_ReadWrite)
						! записать квитанцию T
						Set smKOD4[0] = '3832'
						Set nmPOND[0] = 0
						Call Message('Не открылся входной файл ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
						! If FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
							           Return 6
						! Else 
							           Return -9
						!
						Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
					Set sVERS = smVERS[VisArrayFindString(smSAB, sKKKK)]
					Set bFl = FALSE
					!
					Set nSumZ = 0
					Set nCntZ = 0
					Set nSum = 0
					Set nCnt = 0
					!
					While TRUE
						If sVERS >= '1.55'
							Call SalStrSetBufferLength(sBuffer, 102)
							! Set sBuffer = Spac(102)
							Set nBytes = SalFileRead(hHan, sBuffer, 102)
							If nBytes != 102 or Left(sBuffer, 7) != 'VERSION'
								Call SalFileClose(hHan)
								Call SalArraySetUpperBound(smKOD4, 1, -1)
								Call SalArraySetUpperBound(nmPOND, 1, -1)
								If nIter = 0
									Set sBuffer = 'VERSION20041207 ' || PadR('1.50.0.3711', 84)
									Set nIter = 1
								Else
									Set smKOD4[0] = '3832'
									Set nmPOND[0] = 0
									Call Message('Ошибка в структуре входного файла ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
									! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									! Return 6
									Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
							Set smVERS[VisArrayFindString(smSAB, sKKKK)] = SalStrTrimX(Subs(sBuffer, 17, 14))
							!
							Set nCntZ = Val(Subs(sBuffer, 31, 5))
							Set nSumZ = Val(Subs(sBuffer, 36, 16))
							!
							If sVERS != smVERS[VisArrayFindString(smSAB, sKKKK)]
								Set sVERS = SalStrTrimX(Subs(sBuffer, 17, 14))
								Set nRNK = nmRNK[VisArrayFindString(smSAB, sKKKK)]
								Set bFl = TRUE
						If nIter = 1 and sBuffer = 'VERSION20041207 ' || PadR('1.50.0.3711', 84)
							Call SalFileOpen(hHan, sFileOrig, OF_ReadWrite)
						Set nC = 0
						Set bGood = TRUE
						Loop !! While TRUE
							Call SalStrSetBufferLength(sBuffer, 421)
							Call SalStrSetBufferLength(sBuffer2a, 90)
							Call SalStrSetBufferLength(sBuffer2b, 90)
							Call SalStrSetBufferLength(sBuffer2cl, 2)
							Call SalStrSetBufferLength(sBuffer3, 18)
							! Set sBuffer = Spac(421)
							! Set sBuffer2a = Spac(90)
							! Set sBuffer2b = Spac(90)
							! Set sBuffer2cl = '  '
							! Set sBuffer3 = Spac(18)
							Set nBytes = SalFileRead(hHan, sBuffer, 421)
							! Set sBufferP = Left(sBuffer, 85) || Subs(sBuffer, 162, 220) ! для проверки подписи
							Set sBufferP = VisStrTrim(Left(sBuffer, 9)) || VisStrTrim(Subs(sBuffer, 10, 14)) || VisStrTrim(
									    Subs(sBuffer, 24, 9)) || VisStrTrim(Subs(sBuffer, 33, 14)) || VisStrTrim(Subs(sBuffer, 47, 16)) || VisStrTrim(
									    Subs(sBuffer, 63, 2)) || VisStrTrim(Subs(sBuffer, 65, 10)) || VisStrTrim(Subs(sBuffer, 75, 3)) || VisStrTrim(
									    Subs(sBuffer, 78, 8)) || VisStrTrim(Subs(sBuffer, 162, 160)) || VisStrTrim(Subs(sBuffer, 322, 60))
							! Call Debug('sBufferP = ' || StrDosToWinX(sBufferP))
							Set nBytes2a = SalFileRead(hHan, sBuffer2a, 90)
							Set nBytes2b = SalFileRead(hHan, sBuffer2b, 90)
							Set nBytes3 = SalFileRead(hHan, sBuffer3, 18)
							! Call Debug('sBuffer=' || sBuffer)
							! Call Debug('sBuffer2=' || sBuffer2)
							! Call Debug('sBuffer3=' || sBuffer3)
							!
							! Call DebugN(nBytes)
							! Call DebugN(nBytes2a)
							! Call DebugN(nBytes2b)
							! Call DebugN(nBytes3)
							! отладка beg
							! Call SalFileOpen(hFotl, 'c:\\otl.txt', OF_Create | OF_ReadWrite)
							! Call SalFileWrite(hFotl, sBuffer, 421)
							! Call SalFileWrite(hFotl, sBuffer2a, 90)
							! Call SalFileWrite(hFotl, sBuffer2b, 90)
							! Call SalFileWrite(hFotl, sBuffer3, 18)
							! Call SalFileClose(hFotl)
							! отладка end
							If nBytes+nBytes2a+nBytes2b+nBytes3 != 619 ! (647)
									!! llread(nHan, sBuffer, 619) != 619 ! (647)
								If nBytes+nBytes2a+nBytes2b+nBytes3 = 0
									If nSumZ + nCntZ > 0
										If nSum != nSumZ or nCnt != nCntZ
											Call SqlRollback(hSql())
											Call SalFileClose(hHan)
											Call SalArraySetUpperBound(smKOD4, 1, -1)
											Call SalArraySetUpperBound(nmPOND, 1, -1)
											Set smKOD4[0] = '0810'
											Set nmPOND[0] = 0
											Call Message('Ошибка количества документов в пакете ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
											! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
											! Return 4
											Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 4, -9)
									If bGood
										Call SqlCommitEx(hSql(), 'Документы из пакета ' || sNameFile || ' приняты')
									Else
										Call SqlRollbackEx(hSql(), 'Документы из пакета ' || sNameFile || ' НЕ приняты')
									Call SalFileClose(hHan)
									! записать файл квитанции T
									! Call Debug('2')
									! Call Debug(smKOD4[0] || ' --- ' || Str(nmPOND[0]))
									! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									Set bRet = FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									If bFl
										Call SqlPrepareAndExecute(hSql(), "
												     begin
												       INSERT
												       INTO   klp_version (rnk,version)
												       VALUES ("||Str(nRNK)||",'"||sVERS||"');
												     exception when dup_val_on_index then
												       UPDATE klp_version 
												       SET    version='"||sVERS||"' 
												       WHERE  rnk="||Str(nRNK)||";
												     end;")
										Call SqlCommit(hSql())
									! Return IifN(bGood, 0, 3)
									Return IifN(bRet, IifN(bGood, 0, 3), -9)
								Else
									Call SqlRollback(hSql())
									Call SalFileClose(hHan)
									Call SalArraySetUpperBound(smKOD4, 1, -1)
									Call SalArraySetUpperBound(nmPOND, 1, -1)
									Set smKOD4[0] = '3832'
									Set nmPOND[0] = 0
									Call Message('Ошибка в структуре входного файла ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
									! записать файл квитанции T
									! Call Debug('3')
									! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									! Return 6
									Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
							Set sNameFile = Left(sBuffer3, 12)
							If Left(sNameFile, 1) = 'D'
								Set sNameFile1 = sNameFile
							! было - If sNameFile != Right(sFileOrig, 12)
							! Call Debug('sNameFile  = ' || sNameFile)
							! Call Debug('sFileInput = ' || Right(sFileInput, 12))
							If sNameFile != Right(sFileInput, 12) ! было - Right(sFileOrig, 12)
								Call SalFileClose(hHan)
								Call SqlRollback(hSql())
								If nIter = 0
									Call SalFileOpen(hHan, sFileOrig, OF_ReadWrite)
									Set nIter = 1
									Set sVERS = '1.55'
									Break
								Else
									Call SqlRollback(hSql())
									Call SalArraySetUpperBound(smKOD4, 1, -1)
									Call SalArraySetUpperBound(nmPOND, 1, -1)
									Set smKOD4[0] = '3840'
									Set nmPOND[0] = 0
									Call Message('Имя входного файла не совпадает с именем пакета в строке документа: ' || Str(nC+1), TRUE, TRUE,
											     COLOR_Salmon)
									! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									! Return 5
									Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 5, -9)
							! Проверки всех реквизитов из sBuffer
							Set sKOD4 = '0000'
							Set sMFOA = SalStrTrimX(Left(sBuffer, 9))
							Set sNLSA = SalStrTrimX(Subs(sBuffer, 10, 14))
							Set sOKPOA = SalStrTrimX(Subs(sBuffer, 385, 14))
							If Len(sOKPOA) < 8
								Set sOKPOA = Right('00000000' || sOKPOA, 8)
							Set sOKPOO = ''
							Set sMFOB = SalStrTrimX(Subs(sBuffer, 24, 9))
							Set sNLSB = SalStrTrimX(Subs(sBuffer, 33, 14))
							Set sOKPOB = SalStrTrimX(Subs(sBuffer, 399, 14))
							If Len(sOKPOB) < 8
								Set sOKPOB = Right('00000000' || sOKPOB, 8)
							! Set nDebKre = 1 ! Val(Subs(sBuffer, 75, 1))
							Set nSumma = Val(Subs(sBuffer, 47, 16))
							!
							Set nSum = nSum + nSumma
							Set nCnt = nCnt + 1
							!
							Set nVOB = Val(Subs(sBuffer, 63, 2))
							! по умолчанию при 0 - 1 (поручение)
							Set nVOB = IifN(nVOB=0, 1, nVOB)
							Set sND = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 65, 10)))
							Set nVAL = Val(Subs(sBuffer, 75, 3))
							If nVAL = 0
								Set nVAL = GetBaseVal() ! 980 - базовая валюта
							Set sData = Subs(sBuffer, 78, 8)
							Set dDATdok = SalDateConstruct(Val(Left(sData, 4)), Val(Subs(sData, 5, 2)), Val(Subs(sData, 7, 2)), 0, 0, 0)
							Set sNAMA = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 86, 38)))
							Set sNAMB = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 124, 38)))
							Set sNAZN = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 162, 160)))
							Set sVSPO = StrDosToWinX(SalStrTrimX(Subs(sBuffer, 322, 60)))
							Set dDaVal = DATETIME_Null
							If Len(sVSPO) > 0
								If Left(sVSPO, 1) = '#' and Right(sVSPO, 1) = '#'
									Set nNumTokens = SalStrTokenize(sVSPO, '#', '#', smTokenArray)
									If nNumTokens > 0
										Set nI = 0
										While nI < nNumTokens
											Set sTmp = Left(smTokenArray[nI], 1)
											Set nJ = 0
											If SqlPrepareAndExecute(hSql(), "
													   SELECT count(1)
													   INTO   :nJ
													   FROM   s_nr
													   WHERE  k_rk=:sTmp") and SqlFetchNext(hSql(), nFetchRes)
											Else
												Set nJ = 0
											If nJ = 0
												If sIgnoreErrDrec = '1'
													Set sVSPO = ''
												Else
													Set sPrwo = '*Неверен синтаксис вспомогательных реквизитов'
													Set sKOD4 = '0931'
													Set bGood = FALSE
													Break
											Set nI = nI + 1
										If bGood
											Set nI = At('#D', sVSPO)
											If nI > 0
												Set sDaVal = Subs(sVSPO, nI+2, 6)
												Set dDaVal = SalDateConstruct(2000+Val(Left(sDaVal, 2)), Val(Subs(sDaVal, 3, 2)), Val(Right(sDaVal, 2)),
														    0, 0, 0)
											! Else 
												                                        Set dDaVal = DATETIME_Null
								Else
									If sIgnoreErrDrec = '1'
										Set sVSPO = ''
									Else
										Set sPrwo = '*Неверен синтаксис вспомогательных реквизитов'
										Set sKOD4 = '0931'
										Set bGood = FALSE
							Set sPOND = SalStrTrimX(Subs(sBuffer, 413, 9))
							! Set sPDPd = Left(sBuffer2, 90)
							! Set sPDPb = Right(sBuffer2, 90)
							Set nLenDopRek = Val(Subs(sBuffer3, 13, 4))
							Set sNameFileA = Left(sBuffer3, 12)
							If nLenDopRek > 0
								Set sBIS = ''
								Set nI = 1
								While nI <= nLenDopRek
									If SalFileRead(hHan, sLenDopRek, 4) != 4
										Call SqlRollback(hSql())
										Call SalFileClose(hHan)
										! записать файл квитанции T
										Call SalArraySetUpperBound(smKOD4, 1, -1)
										Call SalArraySetUpperBound(nmPOND, 1, -1)
										Set smKOD4[0] = '3832'
										Set nmPOND[0] = 0
										Call Message('Ошибка в структуре входного файла ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
										! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
										! Return 6
										Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
									Set sBIS = sBIS || sLenDopRek
									If SalFileRead(hHan, sDopRek, Val(sLenDopRek)) != Val(sLenDopRek)
										Call SqlRollback(hSql())
										Call SalFileClose(hHan)
										! записать файл квитанции T
										Call SalArraySetUpperBound(smKOD4, 1, -1)
										Call SalArraySetUpperBound(nmPOND, 1, -1)
										Set smKOD4[0] = '3832'
										Set nmPOND[0] = 0
										Call Message('Ошибка в структуре входного файла ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
										! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
										! Return 6
										Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
									Set sBIS = sBIS || sDopRek
									Set nI = nI + 1
								If SalFileRead(hHan, sBuffer2cl, 2) != 2
									Call SqlRollback(hSql())
									Call SalFileClose(hHan)
									! записать файл квитанции T
									Call SalArraySetUpperBound(smKOD4, 1, -1)
									Call SalArraySetUpperBound(nmPOND, 1, -1)
									Set smKOD4[0] = '3832'
									Set nmPOND[0] = 0
									Call Message('Ошибка в структуре входного файла ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
									! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									! Return 6
									Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
								If Left(sBuffer2cl, 2) != PutCrLf()
									Call SqlRollback(hSql())
									Call SalFileClose(hHan)
									! записать файл квитанции T
									Call SalArraySetUpperBound(smKOD4, 1, -1)
									Call SalArraySetUpperBound(nmPOND, 1, -1)
									Set smKOD4[0] = '3832'
									Set nmPOND[0] = 0
									Call Message('Ошибка в структуре входного файла ' || sFileInput, TRUE, TRUE, COLOR_Salmon)
									! Call FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12))
									! Return 6
									Return IifN(FormFileT(smKOD4, nmPOND, sSAB1, Right(sFileInput, 12)), 6, -9)
							Else
								Set sBIS = ''
							! Проверка всех реквизитов документа на допустимость
							Set sPrwo = ''
							If nVOB = 1 or nVOB = 6
								If sMFOA != GetBankMfo()
									Set sPrwo = '*Ошибочен код МФО плательщика'
									Set sKOD4 = '0902'
									Set bGood = FALSE
								If sOKPOB != V_OkpoKB(sMFOB, sNLSB, nVAL, sOKPOB)
									Set sPrwo = '*Ошибочен код ОКПО получателя'
									Set sKOD4 = '0956'
									Set bGood = FALSE
							Else
								If sMFOB != GetBankMfo()
									Set sPrwo = '*Ошибочен код МФО получателя'
									Set sKOD4 = '0902'
									Set bGood = FALSE
								If sOKPOA != V_OkpoKB(sMFOA, sNLSA, nVAL, sOKPOA)
									Set sPrwo = '*Ошибочен код ОКПО плательщика'
									Set sKOD4 = '0956'
									Set bGood = FALSE
							! Проверка на наличие счета в SALDO
							Set nAcc = -1
							Set sAccSql = 'verify_acc(sNLS' || IifS(nVOB=1 or nVOB=6, 'A', 'B') || ', nVAL, nAcc)'
							Call SqlPLSQLCommand(hSql(), sAccSql)
							If nAcc < 0
								Set sPrwo = '*Ошибочeн cчёт п' || IifS(nVOB=1 or nVOB=6, 'лательщика', 'олучателя')
								Set sKOD4 = '0012'
								Set bGood = FALSE
							! проверка на платеж с "чужого" счета
							Set nFl = 0
							! Call Debug('nAcc=' || Str(nAcc))
							Call SqlPLSQLCommand(hSql(), "verify_alien(nAcc, sKKKK, nFl)")
							If nFl = 0
								Set sPrwo = '*Ошибочeн cчёт п' || IifS(nVOB=1 or nVOB=6, 'лательщика', 'олучателя') || ' (чужой)'
								Set sKOD4 = '0039'
								Set bGood = FALSE
							If nVOB = 1 or nVOB = 6
								If not DopustMfo(sMFOB)
									Set sPrwo = '*Ошибочен код МФО получателя'
									Set sKOD4 = '0903'
									Set bGood = FALSE
								If not DopustNls(sMFOB, sNLSB, nVAL)
									Set sPrwo = '*Ошибочен счёт получателя'
									Set sKOD4 = '0992'
									Set bGood = FALSE
								If SalStrLength(sNAMB) < 3
									Set sPrwo = '*Ошибочно наименование получателя'
									Set sKOD4 = '0924'
									Set bGood = FALSE
							Else
								If not DopustMfo(sMFOA)
									Set sPrwo = '*Ошибочен код МФО плательщика'
									Set sKOD4 = '0903'
									Set bGood = FALSE
								If not DopustNls(sMFOA, sNLSA, nVAL)
									Set sPrwo = '*Ошибочен счёт плательщика'
									Set sKOD4 = '0992'
									Set bGood = FALSE
								If SalStrLength(sNAMA) < 3
									Set sPrwo = '*Ошибочно наименование плательщика'
									Set sKOD4 = '0924'
									Set bGood = FALSE
							If nSumma = 0 or nSumma >= SalNumberPower(10, 14)
								Set sPrwo = '*Ошибочна сумма документа'
								Set sKOD4 = IifS(nSumma=0, '0017', '0917')
								Set bGood = FALSE
							If SalStrLength(sNAZN) < 3
								Set sPrwo = '*Ошибочно назначение платежа'
								Set sKOD4 = '0150'
								Set bGood = FALSE
							!
							! Call Debug('перед ВегаСтарт')
							! Call Debug('sBufferP     = ' || StrDosToWinX(sBufferP) || '
									Len sBufferP = ' || Str(Len(sBufferP)))
							! Set sRs = Spac(88)
							! Set nC = llcrea('C:\\Temp\\sBuffer2.axx', 0)
							! Call llwrite(nC, sBuffer2a, 90)
							! Call llclose(nC)
							! Set nKw = VegaCheckDat(sBuffer2a, sRs, 0)
							! If nKw = 0
							! Set sId = Right(sRs, 17)
							! Set sIdR = sIdVega
							If sVegaSignOn = '1' or sVegaSignOn = '2'
								Set sId = Spac(8)
								Set sNm = Spac(40)
								! Call Debug('sRs = ' || sRs)
								! Call Debug('sId = ' || sId)
								! Call Debug('sIdR = ' || sIdR)
								! Set nKw = VegaStart(0, 0)
								Set nKw = VegaStart(nNull, nNull)
								If nKw != 0
									Call Debug('Код возврата VegaStart = ' || Str(nKw))
								! Call VegaStep(sBufferP, Len(sBufferP), 0, 0)
								Call VegaStep(sBufferP, Len(sBufferP), nNull, nNull)
								! Set nKw = VegaCheckGet(sBuffer2a, sIdVega, sId, sNm, 0, 0)
								Set nKw = VegaCheckGet(sBuffer2a, sIdVega, sId, sNm, nNull, nNull)
								! Call Debug('sNm = ' || sNm)
								! Call Debug('kod wozwrata VegaCheckGet(b-a) = ' || Str(nKw))
								If nKw = 0
									! Set sRs = Spac(88)
									! Set nKw = VegaCheckDat(sBuffer2b, sRs, 0)
									! If nKw = 0
									! Set sId = Right(sRs, 16)
									! Set sIdR = Right(sId, 8)
									! Set sId = Left(sId, 8)
									! Set sNm = Spac(40)
									! Set nKw = VegaStart(0, 0)
									Set nKw = VegaStart(nNull, nNull)
									If nKw != 0
										Call Debug('Код возврата VegaStart = ' || Str(nKw))
									! Call VegaStep(sBufferP, Len(sBufferP), 0, 0)
									Call VegaStep(sBufferP, Len(sBufferP), nNull, nNull)
									! Set nKw = VegaCheckGet(sBuffer2b, sIdR, sId, sNm, 0, 0)
									! Set nKw = VegaCheckGet(sBuffer2b, sIdVega, sId, sNm, 0, 0)
									Set nKw = VegaCheckGet(sBuffer2b, sIdVega, sId, sNm, nNull, nNull)
									! Call Debug('kod wozwrata VegaCheckGet(d-b) = ' || Str(nKw))
									If nKw = 0
										! обе подписи проверены
									Else
										Set sPrwo = '*Ошибка подписи d (' || Str(nKw) || ')'
										Set sKOD4 = '0064'
										Set bGood = FALSE
								Else
									Set sPrwo = '*Ошибка подписи b (' || Str(nKw) || ')'
									Set sKOD4 = '0065'
									Set bGood = FALSE
							! ------------------------------------- ЭТО пока не надо -- (
							! Set sPDPinternal = 'none' !!!
							! Call SqlPrepareAndExecute(hSql(), "
									     SELECT MAX(dop)
									     INTO   :nMdop
									     FROM   klp_mt")
							! Call SqlFetchNext(hSql(), nFetchRes)
							! If nMdop = NUMBER_Null
								                                                      Set nMdop = 0
								                                                    Call SqlPrepareAndExecute(hSql(), "
										     INSERT
										     INTO klp_mt (dop)
										     VALUES (0)")
							! If nLenDopRek > 0
								                                                      Set nMdop = nMdop + 1
								                                                    Call SqlPrepareAndExecute(hSql(), "
										     INSERT
										     INTO klp_mt (dop,value)
										     VALUES (:nMdop,:sDopRek)")
							! ------------------------------------- ЭТО пока не надо -- )
							Call SqlPrepareAndExecute(hSql(), "
									     SELECT isp
									     INTO   :nIsp
									     FROM   accounts
									     WHERE  acc=:nAcc")
							If not SqlFetchNext(hSql(), nFetchRes)
								Call SalUseRegistry(FALSE, '')
								Call SalGetProfileString("ElektroKlients", "OperForAccNotFound", '0', sIsp, GetIniFileName())
								Set nIsp = SalNumberMax(1, SalNumberRound(Val(sIsp)))
							Set nEOM = nIsp
							Call SqlPrepareAndExecute(hSql(), "
									     SELECT neom
									     INTO   :nEOM
									     FROM   klpacc
									     WHERE  acc=:nAcc")
							If SqlFetchNext(hSql(), nFetchRes)
								If nEOM = 0 or nEOM = NUMBER_Null
									Set nEOM = SalNumberMax(nIsp, 1)
							Set nFl = IifN(sPrwo='', 0, 1)
							!
							! Call Debug('sPOND=' || sPOND)
							If SqlPrepareAndExecute(hSql(), "
									   SELECT datedokkb
									   INTO   :dDateDokKB
									   FROM   klp
									   WHERE  naex=:sNameFile and pond=:sPOND and vob=:nVOB") and SqlFetchNext(hSql(), nFetchRes)
								If SalDateYear(dDateDokKB) = SalDateYear(dBankDate)
									! повторный приход файла
									Call SqlRollbackEx(hSql(), 'Документы из пакета ' || sNameFile || ' НЕ приняты - файл пришёл повторно')
									Call SalFileClose(hHan)
									Return 9
								Else
									Call SqlPrepareAndExecute(hSql(), "
											     DELETE
											     FROM   klpond
											     WHERE  filename=:sNameFile and filename in (SELECT naex
											                                                 FROM   klp
											                                                 WHERE  naex=:sNameFile and
											                                                        to_char(datedokkb,'YYYY')<>to_char(bankdate,'YYYY'))")
									Call SqlPrepareAndExecute(hSql(), "
											     DELETE
											     FROM   klp
											     WHERE  naex=:sNameFile and to_char(datedokkb,'YYYY')<>to_char(bankdate,'YYYY')")
							! Call SqlPrepareAndExecute(hSql(), "
									     SELECT naex,pond
									     INTO   :sDubNaex,:sDubPond
									     FROM   klp
									     WHERE  vob=:nVOB and nd=:sND and nls=:sNLSA and mfo=:sMFOB and nlsp=:sNLSB and s=:nSumma and text1=:sNAZN and
									            fl<9 and datad=:dDATdok")
							Call SqlPrepareAndExecute(hSql(), "
									     SELECT naex,pond
									     INTO   :sDubNaex,:sDubPond
									     FROM   klp
									     WHERE  vob=:nVOB and nd=:sND and nls=:sNLSA and mfo=:sMFOB and nlsp=:sNLSB and s=:nSumma and text1=:sNAZN and
									            datad=:dDATdok and fl<9")
							If SqlFetchNext(hSql(), nFetchRes) and nFl = 0
								Set nFl = 1
								Set sPrwo = '*Дубль с док. клиента ' || Subs(sDubNaex, 8, 1) || Right(sDubNaex, 3) || '(' ||
										    SalStrTrimX(sDubPond) || ')'
							! Call SqlPrepare(hSql(), "
									     INSERT
									     INTO   klp (dop,eom,naex,vob,nd,datad,nls,mfo,naimp,nlsp,s,text1,isp,kokb,koka,koko,prwo,pdp1,fl,pond,kv,
									                 daval,mfoa,naimo,drec)
									     VALUES (:nMdop,:nEOM,:sNameFile,:nVOB,:sND,:dDATdok,:sNLSA,:sMFOB,:sNAMB,:sNLSB,:nSumma,:sNAZN,:nIsp,:sOKPOB,
									             :sOKPOA,:sOKPOO,:sPrwo,:sPDPinternal,:nFl,:sPOND,:nVAL,:dDaVal,:sMFOA,:sNAMA,:sVSPO)")
							! Call SqlSetLongBindDatatype(18, BLOB_BYTE)
							Call SqlPrepare(hSql(), "
									     INSERT
									     INTO   klp (dop,eom,naex,vob,nd,datad,nls,mfo,naimp,nlsp,s,text1,isp,kokb,koka,koko,prwo,fl,pond,kv,daval,
									                 mfoa,naimo,drec)
									     VALUES (:nMdop,:nEOM,:sNameFile,:nVOB,:sND,:dDATdok,:sNLSA,:sMFOB,:sNAMB,:sNLSB,:nSumma,:sNAZN,:nIsp,:sOKPOB,
									             :sOKPOA,:sOKPOO,:sPrwo,:nFl,:sPOND,:nVAL,:dDaVal,:sMFOA,:sNAMA,:sVSPO)")
							If not SqlExecute(hSql())
								Set sKOD4 = '0027'
								Set bGood = FALSE
							Set smKOD4[nC] = sKOD4
							Set nmPOND[nC] = Val(sPOND)
							Set nC = nC + 1
			Function: OtborC
				Description:
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					String: sSABi
					! Long String: sRefi
					! String: sWhere
					Number: nRetC
				Actions
					Call SalWaitCursor(TRUE)
					Set sSABi = ''
					If SqlPrepareAndExecute(hSqlAux3(), "
							   SELECT DISTINCT sab
							   INTO   :sSAB
							   FROM   klpoow
							   WHERE  sab is not null and tip='O' and otm is null and pond is null and substr(nfia,1,1)<>'D'")
						While SqlFetchNext(hSqlAux3(), nFetchRes)
							Set sSABi = sSABi || sSAB || '='
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						! Set nRNK = nmRNK[nI]
						! Set sNMK = smNMK[nI]
						! Set sOKPO = smOKPO[nI]
						! Set sTIMES = smTIMES[nI]
						! Call SalArraySetUpperBound(sMass, 1, -1)
						If At(sSAB || '=', sSABi) > 0
							Call Message('Отбор (C) для ' || sSAB || ' (поступления) ...', TRUE, TRUE, 0)
							! Call SqlPrepareAndExecute(hSqlAux3(), "
									     UPDATE klpoow
									     SET    otm='1'
									     WHERE  sab=:sSAB and tip='O' and otm is null and substr(nfia,1,1)<>'D'")
							Call SqlPrepareAndExecute(hSqlAux3(), "
									     UPDATE klpoow
									     SET    otm='R'
									     WHERE  sab=:sSAB and tip='O' and otm is null and pond is null and substr(nfia,1,1)<>'D'")
							Set nRetC = MakeC(sSAB, TRUE)
							If nRetC = 0
								Call Message('Отбор (C) для ' || sSAB || ' (поступления) Ok', TRUE, TRUE, 0)
								Call SqlPrepareAndExecute(hSqlAux3(), "
										     DELETE
										     FROM   klpoow
										     WHERE  sab=:sSAB and tip='O' and otm='1' and pond is null and substr(nfia,1,1)<>'D'")
								Call SqlCommit(hSqlAux3())
								Call SqlCommit(hSqlAux2())
								Call SqlCommit(hSql())
							Else If nRetC = 216
								Call SqlPrepareAndExecute(hSqlAux3(), "
										     DELETE
										     FROM   klpoow
										     WHERE  sab=:sSAB and tip='O' and otm='1' and pond is null and substr(nfia,1,1)<>'D'")
								Call SqlCommit(hSqlAux3())
								Call SqlCommit(hSqlAux2())
								Call SqlCommit(hSql())
							Else
								Call SqlRollback(hSqlAux3())
								Call SqlRollback(hSqlAux2())
								Call SqlRollback(hSql())
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Call SalSetWindowText(ml1, '')
					Return TRUE
			Function: Obr0
				Description: обработка входной информации КЛИЕНТ-БАНК (запрос на поступления)
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					String: sTempFile
					Number: nErrorSign
					String: sTemp
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '0' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 0', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '0' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 0', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									! расшифровать файл, проверить подпись, прочитать 1 символ (должен быть = '0'),
									! если все нормально работать
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									If nErrorSign = 0 ! расшифрован и проверена подпись
										Set nC = llopen(sTempFile, 0)
										Set sTemp = ' '
										Call llread(nC, sTemp, 1)
										Call llclose(nC)
										Call VisFileDelete(sTempFile)
										If sTemp = '0'
											Call Message('Отбор (C) для ' || sSAB || ' (по запросу) ...', TRUE, TRUE, 0)
											If MakeC(sSAB, FALSE) = 0
												Call Message('Отбор (C) для ' || sSAB || ' (по запросу) Ok', TRUE, TRUE, 0)
												Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
												Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
												Call SqlCommit(hSql())
												Call SqlCommit(hSqlAux2())
												Call SqlCommit(hSqlAux3())
											Else
												Call Message('Отбор (C) для ' || sSAB || ' (по запросу) ош.', TRUE, TRUE, COLOR_Salmon)
												Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
												Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
												Call SqlRollback(hSql())
												Call SqlRollback(hSqlAux2())
												Call SqlRollback(hSqlAux3())
										Else
											Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr1
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					File Handle: hF
					String: s16
					Date/Time: dBeg
					Date/Time: dEnd
					Number: nI
					String: sTempFile
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					! Call Debug('zaxod')
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '1' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 1', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '1' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						! Call Debug('nCount=' || Str(nCount))
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 1', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								! Call Debug('sDiskKataIN+sMass[nNf]=' || sDiskKataIN || sMass[nNf])
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									! вычитать две даты
									If nErrorSign = 0 ! расшифрован и проверена подпись
										If VisFileOpen(hF, sTempFile, OF_Read) = VTERR_Ok
											Call SalStrSetBufferLength(s16, 16)
											If VisFileRead(hF, s16, 16) = 16
												! Call Debug('s16=' || s16)
												Set dBeg = SalDateConstruct(Val(Left(s16, 4)), Val(Subs(s16, 5, 2)), Val(Subs(s16, 7, 2)), 0, 0, 0)
												Set dEnd = SalDateConstruct(Val(Subs(s16, 9, 4)), Val(Subs(s16, 13, 2)), Val(Subs(s16, 15, 2)), 0, 0, 0)
												! Call Debug('dEndsss=' || Subs(s16, 9, 4) || Subs(s16, 13, 2) || Right(s16, 2))
												! Call Debug('dBeg=' || SalFmtFormatDateTime(dBeg, 'dd-MM-yyyy'))
												! Call Debug('dEnd=' || SalFmtFormatDateTime(dEnd, 'dd-MM-yyyy'))
												Call VisFileClose(hF)
												If dEnd >= dBeg
													Call MakeV(sSAB, dBeg, dEnd)
													Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
													Call SalFileCreateDirectory(syyyyMMddPath)
													Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
													! удалить входной файл
													Call VisFileDelete(sTempFile)
													Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
											Else
												Call VisFileClose(hF)
												Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
												Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
												! удалить входной файл
												Call VisFileDelete(sTempFile)
												Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call VisFileClose(hF)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call Message('Ошибка при открытии файла ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											! удалить входной файл
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr2
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					String: sTempFile
					String: sTemp
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '2' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 2', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '2' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 2', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									If nErrorSign = 0 ! расшифрован и проверена подпись
										Set nC = llopen(sTempFile, 0)
										Set sTemp = ' '
										Call llread(nC, sTemp, 1)
										Call llclose(nC)
										Call VisFileDelete(sTempFile)
										If sTemp = '2'
											Call Message('Отбор (S) для ' || sSAB || ' ...', TRUE, TRUE, 0)
											Call MakeS(sSAB, nRNK)
											Call Message('Отбор (S) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
											Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr3
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					String: sTempFile
					String: sTemp
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '3' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 3', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '3' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 3', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									If nErrorSign = 0 ! расшифрован и проверена подпись
										Set nC = llopen(sTempFile, 0)
										Set sTemp = ' '
										Call llread(nC, sTemp, 1)
										Call llclose(nC)
										Call VisFileDelete(sTempFile)
										If sTemp = '3'
											Call Message('Отбор (M) для ' || sSAB || ' ...', TRUE, TRUE, 0)
											Call MakeM(sSAB)
											Call Message('Отбор (M) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
											Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr4
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					File Handle: hF
					String: s16
					Date/Time: dBeg
					Date/Time: dEnd
					Number: nI
					String: sTempFile
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '4' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 4', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '4' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 4', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								! Call Debug('sDiskKataIN+sMass[nNf]=' || sDiskKataIN || sMass[nNf])
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									! вычитать две даты
									If nErrorSign = 0 ! расшифрован и проверена подпись
										If VisFileOpen(hF, sTempFile, OF_Read) = VTERR_Ok
											Call SalStrSetBufferLength(s16, 16)
											If VisFileRead(hF, s16, 16) = 16
												Set dBeg = SalDateConstruct(Val(Left(s16, 4)), Val(Subs(s16, 5, 2)), Val(Subs(s16, 7, 2)), 0, 0, 0)
												Set dEnd = SalDateConstruct(Val(Subs(s16, 9, 4)), Val(Subs(s16, 13, 2)), Val(Subs(s16, 15, 2)), 0, 0, 0)
												Call VisFileClose(hF)
												If dEnd >= dBeg
													Call Message('Запрос архива документов (файл 4) не используется (' || sSAB || ') ...', TRUE, TRUE,
															     COLOR_Maize)
													Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
													Call SalFileCreateDirectory(syyyyMMddPath)
													Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
													! удалить входной файл
													Call VisFileDelete(sTempFile)
													Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
											Else
												Call VisFileClose(hF)
												Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
												Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
												! удалить входной файл
												Call VisFileDelete(sTempFile)
												Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call VisFileClose(hF)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call Message('Ошибка при открытии файла ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											! удалить входной файл
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr5
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					String: sTempFile
					String: sTemp
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '5' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 5', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '5' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 5', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									If nErrorSign = 0 ! расшифрован и проверена подпись
										Set nC = llopen(sTempFile, 0)
										Set sTemp = ' '
										Call llread(nC, sTemp, 1)
										Call llclose(nC)
										Call VisFileDelete(sTempFile)
										If sTemp = '5'
											Call Message('Отбор (W) для ' || sSAB || ' ...', TRUE, TRUE, 0)
											Call MakeW(sSAB)
											Call Message('Отбор (W) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
											Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr6
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					File Handle: hF
					String: s16
					Date/Time: dBeg
					Date/Time: dEnd
					Number: nI
					String: sTempFile
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '6' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 6', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '6' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 6', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								! Call Debug('sDiskKataIN+sMass[nNf]=' || sDiskKataIN || sMass[nNf])
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									! вычитать две даты
									If nErrorSign = 0 ! расшифрован и проверена подпись
										If VisFileOpen(hF, sTempFile, OF_Read) = VTERR_Ok
											Call SalStrSetBufferLength(s16, 16)
											If VisFileRead(hF, s16, 16) = 16
												Set dBeg = SalDateConstruct(Val(Left(s16, 4)), Val(Subs(s16, 5, 2)), Val(Subs(s16, 7, 2)), 0, 0, 0)
												Set dEnd = SalDateConstruct(Val(Subs(s16, 9, 4)), Val(Subs(s16, 13, 2)), Val(Subs(s16, 15, 2)), 0, 0, 0)
												Call VisFileClose(hF)
												If dEnd >= dBeg
													Call Message('Отбор (K) для ' || sSAB || ' ...', TRUE, TRUE, 0)
													If MakeK(sSAB, dBeg, dEnd)
														Call Message('Отбор (K) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
													Else
														Call Message('Отбор (K) для ' || sSAB || ' не выполнен - курсы отсутствуют', TRUE, TRUE, COLOR_Salmon)
													Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
													Call SalFileCreateDirectory(syyyyMMddPath)
													Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
													! удалить входной файл
													Call VisFileDelete(sTempFile)
													Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
											Else
												Call VisFileClose(hF)
												Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
												Call SalFileCreateDirectory(syyyyMMddPath)
												Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
												Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
												! удалить входной файл
												Call VisFileDelete(sTempFile)
												Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call VisFileClose(hF)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call Message('Ошибка при открытии файла ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											! удалить входной файл
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: Obr7
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					String: sTempFile
					String: sTemp
					Number: nErrorSign
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '7' || ddd(dBankDate) || '????.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов 7', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '7' || ddd(dBankDate) || '???' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов 7', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									If nErrorSign = 0 ! расшифрован и проверена подпись
										Set nC = llopen(sTempFile, 0)
										Set sTemp = ' '
										Call llread(nC, sTemp, 1)
										Call llclose(nC)
										Call VisFileDelete(sTempFile)
										If sTemp = '7'
											Call Message('Запрос картотеки (файл 7) не используется (' || sSAB || ') ...', TRUE, TRUE, COLOR_Maize)
											Set syyyyMMddPath = sArchPath || 'ZAP\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(sTempFile)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
										Else
											Call Message('Ошибка (неверна структура файла) при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
											Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
											Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: DuplicateFile
				Description:
				Returns
					Number:
				Parameters
					String: sFile
				Static Variables
				Local variables
					Number: nRet
				Actions
					! If not File(sArchPath || 'ADR\\' || sFile)
						                                 Call SqlPrepareAndExecute(hSql(), "
								     SELECT fn
								     FROM   klp_arch
								     WHERE  fn=:sFile and tip='ADR'")
						                                 If not SqlFetchNext(hSql(), nFetchRes)
							                                 Return 0
					! Return SalModalDialog(DuplicateFileName, hWndForm, sFile)
					Return 0
			Function: SetBankDate
				Description:
				Returns
				Parameters
				Static Variables
				Local variables
				Actions
					Call ExecuteParams()
					Call GetParamsSettings(hSql())
					! Set dBankDate = GetBankDate()
					Set dBankDate = GetParamBankDate()
					Set dBankDateM1 = dBankDate - 1
					Call SalSetWindowText(menu12, sTitle || ', банковская дата ' || SalFmtFormatDateTime(dBankDate, 'dd/MM/yyyy') || ' ('
							     || GetDbs() || ' - ' || Str(GetSessionId()) || ')')
			Function: Message
				Description: вывод текста в окно и запись в LOG
				Returns
					Boolean:
				Parameters
					String: sStr
					Boolean: bTL
					Boolean: bEK
					Number: nColor
				Static Variables
				Local variables
					Number: nNewRow
					String: sTime
				Actions
					If bTL
						Call SaveInfoToLog(sStr)
					Set sTime = SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss ')
					Call SalSetWindowText(ml1, IifS(Len(sStr)>0, sTime, '') || sStr)
					If sStr != '' and bEK
						! вмалевать строку в табличку TblMessage
						Set nNewRow = SalTblInsertRow(tblMessage, TBL_MaxRow)
						Call SalTblSetContext(tblMessage, nNewRow)
						Set tblMessage.colTime = SalStrTrimX(sTime)
						Set tblMessage.colText = sStr
						Call SalTblSetFocusRow(tblMessage, nNewRow)
						If nColor != 0
							Call XSalTblSetRowBackColor(tblMessage, nNewRow, nColor)
					Call SalUpdateWindow(hWndForm)
			Function: CopyArch
				Description: копирование файлов в архив KLP_ARCH
				Returns
				Parameters
				Static Variables
				Local variables
					String: sThree[*]
					Number: nT
					Boolean: bFlajok
					Number: nNumDirs
					Number: nNt
					Number: nI
				Actions
					Set bFlajok = SalFmtFormatDateTime(dBankDate, 'dd/MM/yyyy')!=GetGlobalOption('KARCDATE') ! .T. ! пока
					If GetArch_DAYS() < 99999 and bFlajok
						Set sThree[0] = 'ADR'
						Set sThree[1] = 'BCK'
						Set sThree[2] = 'ZAP'
						Set sThree[3] = 'NOT'
						Set sThree[4] = 'DBL'
						Call Message('Копирование файлов КЛИЕНТ-БАНК в архив ...', TRUE, TRUE, 0)
						Call SalWaitCursor(TRUE)
						Set nT = 0
						While nT < 5
							Set nI = 0
							While nI <= nKLI
								Set sSAB = smSAB[nI]
								Call SalArraySetUpperBound(sDirs, 1, -1)
								Set nNumDirs = VisDosEnumDirs(sArchPath || sThree[nT] || '\\????????', sDirs)
								If nNumDirs > 0 ! обработка подкаталогов YYYYMMDD
									Set nNt = 0
									While nNt < nNumDirs
										Call SalArraySetUpperBound(sMass, 1, -1)
										Set nCount = VisDosEnumFiles(sArchPath || sThree[nT] || '\\' || sDirs[nNt] || '\\???????' || Left(sSAB, 1) ||
												    '.' || Right(sSAB, 3), FA_Standard, sMass)
										If nCount > 0 ! обработка файлов
											Set nNf = 0
											While nNf < nCount
												! Call Debug('file - ' || sMass[nNf] || ', datefile=' || SalFmtFormatDateTime(GetFileDate(sMass[nNf])+
														     GetArch_DAYS(), 'dd-MM-yyyy') || ', bankdate=' || SalFmtFormatDateTime(dBankDate, 'dd-MM-yyyy'))
												If GetFileDate(sMass[nNf]) + GetArch_DAYS() <= dBankDate
													! скопировать в архив и удалить из каталога
													Call Message('Копирование файла ' || sMass[nNf] || ' в архив ...', TRUE, TRUE, 0)
													Call File2Arch(sThree[nT], sDirs[nNt], sMass[nNf])
												Set nNf = nNf + 1
											Call SalSetWindowText(ml1, '')
										Set nNt = nNt + 1
								Set nI = nI + 1
							Set nT = nT + 1
						Call SalWaitCursor(FALSE)
					Return TRUE
			Function: LenArrayN
				Description: возвращает длину одномерного массива чисел
				Returns
					Number:
				Parameters
					Number: nmArr[*]
				Static Variables
				Local variables
					Number: nBound
				Actions
					Call SalArrayGetUpperBound(nmArr, 1, nBound)
					Return nBound
			Function: GetFileDate
				Description: получить дату файла по имени
				Returns
					Date/Time:
				Parameters
					String: sFileName
				Static Variables
				Local variables
				Actions
					Return SalDateConstruct(Char2Digit(SalStrMidX(sFileName, 9, 1)) + 1998, Char2Digit(SalStrMidX(sFileName, 7, 1)),
							       Char2Digit(SalStrMidX(sFileName, 6, 1)), 0, 0, 0)
			Function: File2Arch
				Description:
				Returns
					Boolean:
				Parameters
					String: sPrefix
					String: sDir
					String: sFileName
				Static Variables
				Local variables
					File Handle: hF
					Number: nBytes
					Long String: sTabi
					Long String: sTelo
					Date/Time: dDfTf
				Actions
					! открыть файл (sArchPath || sPrefix || sFileName)
					! прочитать тело и записать в таблицы Klp_ARCH и Klp_Files
					! если успешно, удалить файл (sArchPath || sPrefix || sFileName)
					If SalFileOpen(hF, sArchPath || sPrefix || '\\' || sDir || '\\' || sFileName, OF_Read)
						Call SalFileGetDateTime(sArchPath || sPrefix || '\\' || sDir || '\\' || sFileName, dDfTf)
						Set sTabi = ''
						Call SalStrSetBufferLength(sTelo, 65534)
						While TRUE
							Set nBytes = SalFileRead(hF, sTelo, 65534)
							If nBytes > 0
								Set sTabi = sTabi || Left(sTelo, nBytes)
							If nBytes < 65534
								Break
						Call SalFileClose(hF)
						! Сжимаем строку для экономии места в БД (это себя, к сожалению, не оправдало)
						! Call SalStrCompress(sTabi)
						If Len(GetValueStr("
								   SELECT fn
								   FROM   klp_files
								   WHERE  fn='" || sFileName || "'")) > 0
							If not SqlPrepareAndExecute(hSql(), "
									   DELETE
									   FROM klp_files
									   WHERE fn=:sFileName") or not SqlPrepareAndExecute(
									   hSql(), "
									   DELETE
									   FROM klp_arch
									   WHERE fn=:sFileName")
								Call SqlRollback(hSql())
								Return FALSE
						If SqlPrepare(hSql(), "
								   INSERT
								   INTO   klp_files (fn,body)
								   VALUES (:sFileName,:sTabi)")
							Call SqlSetLongBindDatatype(2, BLOB_BYTE)
							If SqlExecute(hSql())
								If SqlPrepareAndExecute(hSql(), "
										   INSERT
										   INTO   klp_arch (fn,tip,filedate)
										   VALUES (:sFileName,:sPrefix,:dDfTf)")
									If VisFileDelete(sArchPath || sPrefix || '\\' || sDir || '\\' || sFileName) < 0
										Call SqlRollback(hSql())
										Return FALSE
									Call SqlCommit(hSql())
									Return TRUE
								Else
									Call SqlRollback(hSql())
									Return FALSE
							Else
								Call SqlRollback(hSql())
								Return FALSE
						Else
							Call SqlRollback(hSql())
							Return FALSE
					Return FALSE
			Function: Char2Digit
				Description: получить число по символу
				Returns
					Number:
				Parameters
					String: sChar
				Static Variables
				Local variables
					Number: nTemp
				Actions
					Set nTemp = SalStrLop(sChar)
					Return nTemp - IifN(nTemp>57, 55, 48)
			!
			Function: MakeA
				Description:
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSab
					String: sNls
					Number: nKv
					Number: nBlkk
					Number: nBlkd
					Number: nPap
					String: sNms
					Date/Time: dDaos
					Date/Time: dDazs
					Number: nOsti
					Number: nDos
					Number: nKos
					Number: nOstc
					Number: nAcc
					String: smSab[*]
					String: smNls[*]
					Number: nmKv[*]
					Number: nmBlkk[*]
					Number: nmBlkd[*]
					Number: nmPap[*]
					String: smNms[*]
					Date/Time: dmDaos[*]
					Date/Time: dmDazs[*]
					Number: nmOsti[*]
					Number: nmDos[*]
					Number: nmKos[*]
					Number: nmOstc[*]
					Number: nmAcc[*]
					Date/Time: dDaep
					Boolean: bFl
					String: sTek
					String: sString
					!
					Number: nIndex
					Number: nI
					Number: nKwo
					!
					String: sTempCrypt
				Actions
					Set sTek = '____'
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT k.sab,a.nls,a.kv,a.blkk,a.blkd,a.pap,a.nms,a.daos,a.dazs,fost(a.acc,:dBankDateM1),
							            fdos(a.acc,:dBankDate,:dBankDate),fkos(a.acc,:dBankDate,:dBankDate),fost(a.acc,:dBankDate),a.acc
							     INTO   :sSab,:sNls,:nKv,:nBlkk,:nBlkd,:nPap,:sNms,:dDaos,:dDazs,:nOsti,:nDos,:nKos,:nOstc,:nAcc
							     FROM   KLP_QUEUEA k, accounts a
							     WHERE  k.acc=a.acc
							     ORDER BY 1")
					Set nIndex = 0
					Call SalArraySetUpperBound(smSab, 1, -1)
					Call SalArraySetUpperBound(smNls, 1, -1)
					Call SalArraySetUpperBound(nmKv, 1, -1)
					Call SalArraySetUpperBound(nmBlkk, 1, -1)
					Call SalArraySetUpperBound(nmBlkd, 1, -1)
					Call SalArraySetUpperBound(nmPap, 1, -1)
					Call SalArraySetUpperBound(smNms, 1, -1)
					Call SalArraySetUpperBound(dmDaos, 1, -1)
					Call SalArraySetUpperBound(dmDazs, 1, -1)
					Call SalArraySetUpperBound(nmOsti, 1, -1)
					Call SalArraySetUpperBound(nmDos, 1, -1)
					Call SalArraySetUpperBound(nmKos, 1, -1)
					Call SalArraySetUpperBound(nmOstc, 1, -1)
					Call SalArraySetUpperBound(nmAcc, 1, -1)
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						Set smSab[nIndex] = sSab
						Set smNls[nIndex] = sNls
						Set nmKv[nIndex] = nKv
						Set nmBlkk[nIndex] = nBlkk
						Set nmBlkd[nIndex] = nBlkd
						Set nmPap[nIndex] = nPap
						Set smNms[nIndex] = sNms
						Set dmDaos[nIndex] = dDaos
						Set dmDazs[nIndex] = dDazs
						Set nmOsti[nIndex] = nOsti
						Set nmDos[nIndex] = nDos
						Set nmKos[nIndex] = nKos
						Set nmOstc[nIndex] = nOstc
						Set nmAcc[nIndex] = nAcc
						Set nIndex = nIndex + 1
					If nIndex > 0
						Call SalArrayGetUpperBound(smSab, 1, nKwo)
						Set nI = 0
						While nI <= nKwo
							Set sSab = smSab[nI]
							Set sNls = smNls[nI]
							Set nKv = nmKv[nI]
							Set nBlkk = nmBlkk[nI]
							Set nBlkd = nmBlkd[nI]
							Set nPap = nmPap[nI]
							Set sNms = smNms[nI]
							Set dDaos = dmDaos[nI]
							Set dDazs = dmDazs[nI]
							Set nOsti = nmOsti[nI]
							Set nDos = nmDos[nI]
							Set nKos = nmKos[nI]
							Set nOstc = nmOstc[nI]
							Set nAcc = nmAcc[nI]
							Call SqlPrepareAndExecute(hSqlAux(), "
									     SELECT max(fdat)
									     INTO   :dDaep
									     FROM   saldoa
									     WHERE  acc=:nAcc")
							Call SqlFetchNext(hSqlAux(), nFetchRes)
							Set bFl = sTek!=sSab
							If bFl
								If sTek != '____'
									If sVegaSignOn = '2'
										Set dDateCurrent = SalDateCurrent()
										Set sTempCrypt = sTempPath || 'A' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
												    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
												    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(
												    Str(SalDateSecond(dDateCurrent)+100), 2)
										If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
											Call llclose(nF)
											Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
											Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
											Call SalFileCreateDirectory(syyyyMMddPath)
											Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
											Call VisFileDelete(sTempCrypt)
											Call VisFileDelete(sFile)
											If File(sDiskKataOUTS || Right(sFile, 12))
												Call SqlCommit(hSqlAux())
												Call SqlCommit(hSqlAux2())
												Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' Ok', TRUE, TRUE, 0)
											Else
												Call SqlRollback(hSqlAux())
												Call SqlRollback(hSqlAux2())
												Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' error', TRUE, TRUE, 0)
										Else
											Call llclose(nF)
											Call VisFileDelete(sFile)
											Call SqlRollback(hSqlAux())
											Call SqlRollback(hSqlAux2())
											Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' error', TRUE, TRUE, 0)
									Else
										Call llclose(nF)
										Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
										Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
										Call VisFileDelete(sFile)
										Call SqlCommit(hSqlAux())
										Call SqlCommit(hSqlAux2())
										Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' Ok', TRUE, TRUE, 0)
								Call Message('Отбор (A) для ' || sSab || ' ...', TRUE, TRUE, 0)
								Set sFile = sTempPath || 'A' || ddd(dBankDate) || Suffix(sSab, 'A') || Left(sSab, 1) || '.' || Right(sSab, 3)
								Set sTek = sSab
								If File(sFile)
									Call VisFileDelete(sFile)
								Set nF = llcreat(sFile, 0)
								If nF < 0
									Call SalWaitCursor(FALSE)
									Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
									Call SalWaitCursor(TRUE)
									Call SqlCommit(hSqlAux())
									Call SqlCommit(hSqlAux2())
									Return FALSE
							! Call Debug('sSab+nAcc=' || sSab || ' - ' || Str(nAcc))
							Set sString = PadL(sNls, 14) || PadL(Str(nKv), 3) || Str(Min(nBlkk+nBlkd, 1)) || PadL(Str(IifN(nPap=3, 0, nPap)), 2)
									    || PadR(StrWinToDosX(sNms), 38) || SalFmtFormatDateTime(dDaos, 'yyyyMMdd') || PadL(
									    SalFmtFormatDateTime(dDazs, 'yyyyMMdd'), 8) || PadL(Str(nOsti), 16) || PadL(Str(nDos), 16) || PadL(
									    Str(nKos), 16) || PadL(Str(nOstc), 16) || PadL(SalFmtFormatDateTime(dDaep, 'yyyyMMdd'), 8) || PutCrLf()
							Call llwrite(nF, sString, Len(sString))
							Call SqlPrepareAndExecute(hSqlAux(), "
									     DELETE
									     FROM   KLP_QUEUEA
									     WHERE  sab=:sSab and acc=:nAcc")
							! Call Debug('Delete ' || sSab || ' - ' || Str(nAcc))
							Set nI = nI + 1
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'A' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								If File(sDiskKataOUTS || Right(sFile, 12))
									Call SqlCommit(hSqlAux())
									Call SqlCommit(hSqlAux2())
									Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' Ok', TRUE, TRUE, 0)
								Else
									Call SqlRollback(hSqlAux())
									Call SqlRollback(hSqlAux2())
									Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' error', TRUE, TRUE, 0)
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Call SqlRollback(hSqlAux())
								Call SqlRollback(hSqlAux2())
								Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' error', TRUE, TRUE, 0)
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Call SqlCommit(hSqlAux())
							Call SqlCommit(hSqlAux2())
							Call Message('Отбор (A) для ' || Left(Right(sFile, 5), 1) || Right(sFile, 3) || ' Ok', TRUE, TRUE, 0)
					Return TRUE
			Function: MakeU
				Description: отбор информации по изменениям участников СЄП "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sNBW
					String: smNBW[*]
					String: sMFO
					String: smMFO[*]
					String: sSEP
					String: smSEP[*]
					String: sOP
					String: smOP[*]
					! String: sRowid
					!
					Number: nIndex
					Number: nFetchRes
					Number: nIU
				Actions
					Call SalWaitCursor(TRUE)
					! Call Message('Подготовка к формированию изменений списка участников СЭП (файл U) ...', TRUE, TRUE, 0)
					If SqlPrepareAndExecute(hSql(), "
							   SELECT nbw,mfo,sab,op
							   INTO   :sNBW,:sMFO,:sSEP,:sOP
							   FROM   klpu")
						Call SalWaitCursor(FALSE)
						Set nIndex = 0
						While SqlFetchNext(hSql(), nFetchRes)
							Call Message('Формирование (U) ' || Str(nIndex), TRUE, TRUE, 0)
							Set smNBW[nIndex] = SalStrTrimX(sNBW)
							Set smMFO[nIndex] = SalStrTrimX(sMFO)
							Set smSEP[nIndex] = sSEP
							Set smOP[nIndex] = sOP
							Set nIndex = nIndex + 1
						Call SqlPrepareAndExecute(hSql(), "
								     UPDATE klpu
								     SET    otm='1'")
						If nIndex > 0
							Set nIU = 0
							Set bU = TRUE
							While nIU <= nKLI
								Set sSAB = smSAB[nIU]
								! Set nRNK = nmRNK[nIU]
								! Set sNMK = smNMK[nIU]
								! Set sOKPO = smOKPO[nIU]
								! Set sTIMES = smTIMES[nIU]
								Call Message('Отбор (U) для ' || sSAB || ' ...', TRUE, TRUE, 0)
								Set bU = FormFileU(sSAB, smNBW, smMFO, smSEP, smOP)
								If bU
									Call Message('Отбор (U) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
								Set nIU = nIU + 1
							If bU
								Call SqlPrepareAndExecute(hSql(), "
										     DELETE
										     FROM   klpu
										     WHERE  otm='1'")
								Call SqlCommit(hSql())
							Else
								Call SqlRollback(hSql())
					Call SalWaitCursor(FALSE)
					Call Message('', FALSE, FALSE, 0)
					Return TRUE
			Function: MakeC
				Description: отправка поступлений за текущий день
				Returns
					Number:
				Parameters
					String: sSab
					Boolean: bUsl
				Static Variables
				Local variables
					String: sNBW
					String: smNBW[*]
					String: sMFO
					String: smMFO[*]
					String: sSEP
					String: smSEP[*]
					String: sOP
					String: smOP[*]
					String: sRowid
					!
					Number: nIndex
					Number: nFetchRes
					!
					Number: nKd
					Number: nLA
					Boolean: bZag
					String: sU
					File Handle: hU
					String: sDaTi
					Number: nKw
					Number: nhU
					Number: nhUc
					String: sUc
					Long String: s15
					Number: nLenArr
					!
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					String: snls
					String: smfo
					String: snlsp
					Number: ns
					Number: nvob
					String: snd
					Number: nkv
					Date/Time: ddadad
					String: snaimp
					String: stext1
					String: skoka
					String: skokb
					String: spond
					!
					Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					!
					String: sSAB
					Number: nRNK
					String: sNMK
					Date/Time: dBaDa
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOA
					String: smOKPOA[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Number: nDOS
					Number: nmDOS[*]
					Number: nKOS
					Number: nmKOS[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					Date/Time: dPDAT
					Date/Time: dmPDAT[*]
					String: sNAZN
					String: smNAZN[*]
					String: sD_rec
					String: smD_rec[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					!
					String: sOpenDay
					!
					Number: nUid
					Boolean: bOk
					Number: nVal
					Number: nPosKwoBis
					String: sTempBis
					String: sOdinBis
					Number: nLenOdinBis
					Number: nB
					!
					String: sYearBaDa
					!
					Date/Time: dDATbis
					!
					! String: sSabP
					!
					Number: nRet
				Actions
					Call SalWaitCursor(TRUE)
					Set nBaseVal = GetBaseVal()
					! Call Message('Отправка поступлений за текущий день для ' || sSab, TRUE, TRUE, 0)
					Set nUid = GetUserId()
					Set nVal = GetBaseVal()
					Set sYearBaDa = Str(SalDateYear(dBankDate))
					If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dBankDate,dBankDate,sSab,nVal,'%','C')")
						! Call SqlCommit(hSql())
						Set nKwo = 0
						If SqlPrepareAndExecute(hSql(), "
								   SELECT count(*)
								   FROM   tmp_lics
								   INTO   :nKwo
								   WHERE  id=:nUid") and SqlFetchNext(hSql(), nFetchRes)
							Set bOk = nKwo>0
							If nKwo = 0
								Call Message('Данных для ' || sSab || ' нет - файл (C) не формируется', TRUE, TRUE, COLOR_Yellow)
						Else
							! Call SqlRollback(hSql())
							Set bOk = FALSE
							Call Message('Невозможно определить количество документов для ' || sSab || ' - файл (C) не формируется', TRUE, TRUE,
									     COLOR_Yellow)
					Else
						! Call SqlRollback(hSql())
						Set bOk = FALSE
						Call Message('Невозможно выполнить процедуру отбора документов для ' || sSab || ' - файл (C) не формируется', TRUE,
								     TRUE, COLOR_Yellow)
					!
					If bOk
						If SqlPrepareAndExecute(hSql(), "
								   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,namefilea,
								          Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datb1,datb2,datov,datd,datbis,ref,okpoz
								   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,:nKOS,
								          :dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nRec,:dDATb1,
								          :dDATb2,:dDATOV,:dDATD,:dDATbis,:nRef,:sOKPOZ
								   FROM   tmp_lics
								   WHERE  id=:nUid and dk=1
								   ORDER BY nlsa,kv,dk,s")
							Set sMFOA = GetBankMfo()
							Set nIndex = 0
							Call SalArraySetUpperBound(smMFOA, 1, -1)
							Call SalArraySetUpperBound(smNLSA, 1, -1)
							Call SalArraySetUpperBound(smNAMA, 1, -1)
							Call SalArraySetUpperBound(smMFOB, 1, -1)
							Call SalArraySetUpperBound(smNLSB, 1, -1)
							Call SalArraySetUpperBound(smNAMB, 1, -1)
							Call SalArraySetUpperBound(smOKPOA, 1, -1)
							Call SalArraySetUpperBound(smOKPOZ, 1, -1)
							Call SalArraySetUpperBound(smOKPOB, 1, -1)
							Call SalArraySetUpperBound(nmDK, 1, -1)
							Call SalArraySetUpperBound(nmS, 1, -1)
							Call SalArraySetUpperBound(nmVOB, 1, -1)
							Call SalArraySetUpperBound(smND, 1, -1)
							Call SalArraySetUpperBound(nmISP, 1, -1)
							Call SalArraySetUpperBound(nmKV, 1, -1)
							Call SalArraySetUpperBound(dmDAOP, 1, -1)
							Call SalArraySetUpperBound(nmIOST, 1, -1)
							Call SalArraySetUpperBound(nmDOS, 1, -1)
							Call SalArraySetUpperBound(nmKOS, 1, -1)
							Call SalArraySetUpperBound(dmDAPP, 1, -1)
							Call SalArraySetUpperBound(dmPDAT, 1, -1)
							Call SalArraySetUpperBound(dmDATD, 1, -1)
							Call SalArraySetUpperBound(smNAZN, 1, -1)
							Call SalArraySetUpperBound(smD_rec, 1, -1)
							Call SalArraySetUpperBound(smPOND, 1, -1)
							Call SalArraySetUpperBound(nmSK, 1, -1)
							Call SalArraySetUpperBound(smNameFileA, 1, -1)
							Call SalArraySetUpperBound(nmBis, 1, -1)
							Call SalArraySetUpperBound(smBis, 1, -1)
							Call SalArraySetUpperBound(dmDATb1, 1, -1)
							Call SalArraySetUpperBound(dmDATb2, 1, -1)
							Call SalArraySetUpperBound(dmDATOV, 1, -1)
							While SqlFetchNext(hSql(), nFetchRes)
								Set smMFOA[nIndex] = sMFOA
								Set smNLSA[nIndex] = sNLSA
								Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
								Set smMFOB[nIndex] = sMFOB
								Set smNLSB[nIndex] = sNLSB
								Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
								Set smOKPOA[nIndex] = sOKPOA
								Set smOKPOZ[nIndex] = sOKPOZ
								Set smOKPOB[nIndex] = sOKPOB
								Set nmDK[nIndex] = nDK
								Set nmS[nIndex] = nS
								! Set nmVOB[nIndex] = nVOB
								! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
								Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
								Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
								Set nmISP[nIndex] = nISP
								Set nmKV[nIndex] = nKV
								Set dmDAOP[nIndex] = dDAOP
								Set nmIOST[nIndex] = nIOST
								Set nmDOS[nIndex] = nDOS
								Set nmKOS[nIndex] = nKOS
								Set dmPDAT[nIndex] = dPDAT
								Set dmDATD[nIndex] = dDATD
								Set dmDAPP[nIndex] = dDAPP
								Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
								Set sD_rec = StrDosToWinX(sD_rec)
								Set smD_rec[nIndex] = sD_rec
								If nBis = NUMBER_Null or nBis = 0
									Set nmBis[nIndex] = 0
									Set smBis[nIndex] = ''
								If sNazns = '00'
									Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM   s_np
											    WHERE  k_np='" || sNaznk || "'"))
								If nBis > 0
									Set nPosKwoBis = SalStrScan(sD_rec, '#B')
									! внешние бисы
									If nPosKwoBis >= 0
										Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
										Set nB = SalStrScan(sTempBis, '#')
										Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
										Set sSQL = "SELECT nazn,d_rec
												            INTO   :sNaznBis,:sD_recBis
												            FROM   arc_rrp
												            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
												            ORDER BY rec_a,bis"
									! внутрение бисы
									Else
										Set nmBis[nIndex] = nBis
										Set sSQL = "
												    SELECT '#C'||value||'#','' as d_recbis
												    INTO   :sNaznBis,:sD_recBis
												    FROM   operw
												    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
												    ORDER BY tag"
									!
									Set nLoop = nmBis[nIndex]
									Set smBis[nIndex] = ''
									Set nmBis[nIndex] = 0
									Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
									While SqlFetchNext(hSqlAux3(), nFetchRes)
										If nLoop > 0
											Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
											Set nLenOdinBis = Len(sOdinBis)
											! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
											Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
											Set nmBis[nIndex] = nmBis[nIndex] + 1
											Set nLoop = nLoop - 1
									! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									If nmBis[nIndex] > 0
										If Len(smBis[nIndex]) = 0
											Set nmBis[nIndex] = 0
										Else
											Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									Else
										Set smBis[nIndex] = ''
								Set smPOND[nIndex] = IifS(sPOND='', '0', sPOND)
								Set nmSK[nIndex] = nSK
								Set smNameFileA[nIndex] = sNameFileA
								Set dmDATb1[nIndex] = dDATb1
								Set dmDATb2[nIndex] = dDATb2
								Set dmDATOV[nIndex] = dDATOV
								Set nIndex = nIndex + 1
							If nIndex > 0
								! Call Message('Отбор (C) для ' || sSab, TRUE, TRUE, 0)
								Set nRet = MakeC2(-1, sSab, smMFOA, smNLSA, smMFOB, smNLSB, nmS, nmVOB, smND, nmKV, dmPDAT, smNAMA, smNAMB,
										    smNAZN, smD_rec, smOKPOA, smOKPOB, smPOND, dmDAOP, nmBis, smBis, dmDATb1, dmDATb2, dmDATOV, dmDATD, bUsl,
										    smOKPOZ)
							Else
								Set nRet = -1
						Else
							! Call SqlRollback(hSql())
							Call Message('Не выполнена необходимая выборка для ' || sSab || ' - файл (C) не формируется', TRUE, TRUE,
									     COLOR_Yellow)
							Return -2
					Else
						Return -3
					Call SalWaitCursor(FALSE)
					Call Message('', FALSE, FALSE, 0)
					Return nRet
			Function: hMM
				Description: время в формате: 1-й символ  - часы (0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n)
						                 2-й и 3-й символ - минуты от 00 до 59
						
				Returns
					String:
				Parameters
					Date/Time: dDat
				Static Variables
				Local variables
				Actions
					Return IifS(SalDateHour(dDat)<0, '000', IifS(SalDateHour(dDat)<10, Str(SalDateHour(dDat)), Chr(87+SalDateHour(dDat)))
							       || Right(Str(SalDateMinute(dDat)+100), 2))
			Function: MakeB
				Description:
				Returns
					Boolean:
				Parameters
					String: sSAB
					String: sTema
				Static Variables
				Local variables
					Number: nF
					String: sString
					!
					String: sTempCrypt
				Actions
					Set sFile = sTempPath || '~B' || ddd(dBankDate) || Right(Suffix(sSAB, '~'), 2) || Left(sSAB, 1) || '.' ||
							    Right(sSAB, 3)
					If File(sFile)
						Call VisFileDelete(sFile)
					Set nF = llcreat(sFile, 0)
					Set sString = '  1  1 ' || PadL(Str(Len(sTema)), 9) || sTema
					Call llwrite(nF, sString, Len(sString))
					!
					If sVegaSignOn = '2'
						Set dDateCurrent = SalDateCurrent()
						Set sTempCrypt = sTempPath || 'B' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
								    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
								    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
								    SalDateSecond(dDateCurrent)+100), 2)
						If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
							Call llclose(nF)
							Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sTempCrypt)
							Call VisFileDelete(sFile)
							If File(sDiskKataOUTS || Right(sFile, 12))
								Call SqlCommit(hSqlAux2())
								Return TRUE
							Else
								Call SqlRollback(hSqlAux2())
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileDelete(sFile)
							Call SqlRollback(hSqlAux2())
							Return FALSE
					Else
						Call llclose(nF)
						Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
						Call VisFileDelete(sFile)
						If File(sDiskKataOUT || Right(sFile, 12))
							Call SqlCommit(hSqlAux2())
							Return TRUE
						Else
							Call SqlRollback(hSqlAux2())
							Return FALSE
			Function: MakeC2
				Description:
				Returns
					Number:
				Parameters
					Number: nStatusDok
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmKV[*]
					Date/Time: dmPDAT[*]
					String: smNAMA[*]
					String: smNAMB[*]
					String: smNAZN[*]
					String: smD_rec[*]
					String: smOKPOA[*]
					String: smOKPOB[*]
					String: smPOND[*]
					Date/Time: dmDAOP[*]
					Number: nmBis[*]
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Date/Time: dmDATOV[*]
					Date/Time: dmDATD[*]
					! String: smPRWO[*]
					Boolean: bUsl
					String: smOKPOZ[*]
				Static Variables
				Local variables
					Boolean: bFl
					Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					String: sFile
					File Handle: hF
					String: sString
					Number: nI
					!
					Number: nDcrc
					Number: nCRC
					Date/Time: dDFI
					Boolean: bCommit
					!
					String: sVERS
					!
					Number: nF
					String: sTempCrypt
					!
					Number: nRet
				Actions
					Set bFl = TRUE
					Set sVERS = smVERS[VisArrayFindString(smSAB, sSab)]
					Set nBaseVal = GetBaseVal()
					Call SalArrayGetUpperBound(smMFOA, 1, nKwo)
					Set nI = 0
					Set nDcrc = 0
					While nI <= nKwo
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'C' || ddd(dBankDate) || Suffix(sSab, 'C') || Left(sSab, 1) || '.' || Right(sSab, 3)
							! Call SqlCommit(hSqlAux2())
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
							If sVERS >= '1.55'
								! Set sString = 'VERSION20041207' || Spac(85) || PutCrLf()
								Set sString = 'VERSION20041207 ' || PadR(SalStrTrimX(sVERS), 84) || PutCrLf()
								! Call VisFileWrite(hF, sString, Len(sString))
								Call llwrite(nF, sString, Len(sString))
						If SalStrTrimX(smOKPOA[nI]) = '0'
							Set smOKPOA[nI] = ''
						If SalStrTrimX(smOKPOB[nI]) = '0'
							Set smOKPOB[nI] = ''
						! Set sString = StrWinToDosX2(PadL(smMFOA[nI], 9) || PadL(smNLSA[nI], 14) || PadL(smMFOB[nI], 9) ||
								    PadL(smNLSB[nI], 14) || PadL(Str(nmS[nI]), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) || PadL(
								    Str(nmKV[nI]), 3) || SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || PadR(smNAMA[nI], 38) || PadR(smNAMB[nI], 38)
								    || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) || hMM(dmDATOV[nI]) || PadR(smOKPOA[nI], 14) ||
								    PadR(smOKPOB[nI], 14) || PadL(smPOND[nI], 9) || PadL(Str(nStatusDok), 2) || IifS(nStatusDok=0, Spac(8),
								    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd')) || IifS(sVERS>='1.55', PadR(
								    SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
								    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PadL(Str(nmBis[nI]), 4) || PutCrLf())
						Set sString = StrWinToDosX2(PadL(smMFOA[nI], 9) || PadL(smNLSA[nI], 14) || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14)
								    || PadL(Str(nmS[nI]), 16) || PadL(Str(IifN(sVERS<'1.63.0.4201', IifN(nmVOB[nI]=6, 1, nmVOB[nI]), nmVOB[nI])), 2)
								    || PadR(smND[nI], 10) || PadL(Str(nmKV[nI]), 3) || SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') ||
								    PadR(smNAMA[nI], 38) || PadR(smNAMB[nI], 38) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) || hMM(dmDATOV[nI])
								    || PadR(smOKPOA[nI], 14) || PadR(smOKPOB[nI], 14) || PadL(smPOND[nI], 9) || PadL(Str(nStatusDok), 2) ||
								    IifS(nStatusDok=0, Spac(8), SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd')) || IifS(sVERS>='1.55', PadR(
								    SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
								    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PadL(Str(nmBis[nI]), 4) || PutCrLf())
						Call llwrite(nF, sString, Len(sString))
						Set nDcrc = nDcrc + CRCstring(sString)
						If nmBis[nI] > 0
							Set sString = StrWinToDosX2(smBis[nI])
							Call llwrite(nF, sString, Len(sString))
							Set nDcrc = nDcrc + CRCstring(sString)
						Set nI = nI + 1
					If not bFl
						If SqlPrepareAndExecute(hSqlAux2(), "
								   SELECT dfi,crc
								   FROM   klpcrc
								   INTO   :dDFI,:nCRC
								   WHERE  sab=:sSab and tip='C'")
							If SqlFetchNext(hSqlAux2(),nFetchRes)
								If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') = SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') and
										   nCRC = nDcrc and bUsl
									Call llclose(nF)
									Call VisFileDelete(sFile)
									! Call SqlRollback(hSqlAux2())
									Call Message('Данные для ' || sSab || ' не изменились - файл (C) удален', TRUE, TRUE, COLOR_Yellow)
									Return -2
								Else
									Call SqlPrepareAndExecute(hSqlAux2(), T("
											     UPDATE klpcrc
											     SET    dfi= TODAY ,crc=:nDcrc
											     WHERE  sab=:sSab and tip='C'"))
									Set bCommit = TRUE
							Else
								Call SqlPrepareAndExecute(hSqlAux2(), T("
										     INSERT
										     INTO   klpcrc (sab,tip,dfi,crc)
										     VALUES (:sSab,'C', TODAY ,:nDcrc)"))
								Set bCommit = TRUE
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'C' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							Set nRet = FileSignCrypt(nF, sTempCrypt, Right(sFile, 12))
							If nRet = 0
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								If File(sDiskKataOUTS || Right(sFile, 12))
									! Call SqlCommit(hSqlAux2())
									! Call SqlCommit(hSql())
									Return 0
								Else
									! Call SqlRollback(hSqlAux2())
									! Call SqlRollback(hSql())
									Return -1
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								! Call SqlRollback(hSqlAux2())
								! Call SqlRollback(hSql())
								Return nRet
						Else
							! Call VisFileClose(hF)
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							If File(sDiskKataOUT || Right(sFile, 12))
								! Call SqlCommit(hSqlAux2())
								! Call SqlCommit(hSql())
								Return 0
							Else
								! Call SqlRollback(hSqlAux2())
								! Call SqlRollback(hSql())
								Return -1
					Return -3
			Function: MakeV
				Description: отправка выписки за интервал дат
				Returns
					Boolean:
				Parameters
					String: sSab
					Date/Time: dBeg
					Date/Time: dEnd
				Static Variables
				Local variables
					String: sNBW
					String: smNBW[*]
					String: sMFO
					String: smMFO[*]
					String: sSEP
					String: smSEP[*]
					String: sOP
					String: smOP[*]
					String: sRowid
					!
					Number: nIndex
					Number: nFetchRes
					!
					Number: nKd
					Number: nLA
					Boolean: bZag
					String: sU
					File Handle: hU
					String: sDaTi
					Number: nKw
					Number: nhU
					Number: nhUc
					String: sUc
					Long String: s15
					Number: nLenArr
					!
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					String: snls
					String: smfo
					String: snlsp
					Number: ns
					Number: nvob
					String: snd
					Number: nkv
					Date/Time: ddadad
					String: snaimp
					String: stext1
					String: skoka
					String: skokb
					String: spond
					!
					Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					!
					String: sSAB
					Number: nRNK
					String: sNMK
					Date/Time: dBaDa
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOA
					String: smOKPOA[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Number: nDOS
					Number: nmDOS[*]
					Number: nKOS
					Number: nmKOS[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					Date/Time: dPDAT
					Date/Time: dmPDAT[*]
					String: sNAZN
					String: smNAZN[*]
					String: smD_rec[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					Date/Time: dDATb1
					Date/Time: dmDATb1[*]
					Date/Time: dDATb2
					Date/Time: dmDATb2[*]
					Date/Time: dDATOV
					Date/Time: dmDATOV[*]
					!
					String: sOpenDay
					!
					Number: nUid
					Boolean: bOk
					Number: nVal
					Number: nPosKwoBis
					String: sTempBis
					String: sOdinBis
					Number: nLenOdinBis
					Number: nB
					!
					Date/Time: dV
					Date/Time: dVtemp
					!
					Date/Time: dDATD
					Date/Time: dmDATD[*]
					!
					String: sYearBaDa
					!
					Date/Time: dDATbis
					!
					Number: nRef
				Actions
					Call SalWaitCursor(TRUE)
					Set nBaseVal = GetBaseVal()
					Call Message('Отправка выписки за интервал дат для ' || sSab, TRUE, TRUE, 0)
					Set nUid = GetUserId()
					Set nVal = GetBaseVal()
					Set dV = dBeg
					While dV <= dEnd
						Set sYearBaDa = Str(SalDateYear(dV))
						Call SqlPrepareAndExecute(hSql(), "
								     SELECT fdat
								     INTO   :dVtemp
								     FROM   fdat
								     WHERE  fdat=:dV")
						If SqlFetchNext(hSql(), nFetchRes)
							Call Message('Отправка выписки за ' || SalFmtFormatDateTime(dV, 'dd-MM-yyyy') || ' для ' || sSab, TRUE, TRUE, 0)
							If dV = dBankDate
								! V
								If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dV,dV,sSab,nVal,'%','V')")
									Call SqlCommit(hSql())
									Call SqlPrepareAndExecute(hSql(), "
											     SELECT count(*)
											     FROM   tmp_lics
											     INTO   :nKwo
											     WHERE  id=:nUid")
									Call SqlFetchNext(hSql(), nFetchRes)
									Set bOk = nKwo>0
								Else
									Call SqlRollback(hSql())
									Set bOk = FALSE
								If bOk and SqlPrepareAndExecute(hSql(), "
										   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
										          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,okpoz
										   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,
										          :nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,
										          :nRec,:dDATD,:dDATb1,:dDATb2,:dDATOV,:dDATbis,:sOKPOZ
										   FROM   tmp_lics
										   WHERE  id=:nUid
										   ORDER BY nlsa,kv,daopl,dk,s")
									Set sMFOA = GetBankMfo()
									Set nIndex = 0
									Call SalArraySetUpperBound(smMFOA, 1, -1)
									Call SalArraySetUpperBound(smNLSA, 1, -1)
									Call SalArraySetUpperBound(smNAMA, 1, -1)
									Call SalArraySetUpperBound(smMFOB, 1, -1)
									Call SalArraySetUpperBound(smNLSB, 1, -1)
									Call SalArraySetUpperBound(smNAMB, 1, -1)
									Call SalArraySetUpperBound(smOKPOA, 1, -1)
									Call SalArraySetUpperBound(smOKPOZ, 1, -1)
									Call SalArraySetUpperBound(smOKPOB, 1, -1)
									Call SalArraySetUpperBound(nmDK, 1, -1)
									Call SalArraySetUpperBound(nmS, 1, -1)
									Call SalArraySetUpperBound(nmVOB, 1, -1)
									Call SalArraySetUpperBound(smND, 1, -1)
									Call SalArraySetUpperBound(nmISP, 1, -1)
									Call SalArraySetUpperBound(nmKV, 1, -1)
									Call SalArraySetUpperBound(dmDAOP, 1, -1)
									Call SalArraySetUpperBound(nmIOST, 1, -1)
									Call SalArraySetUpperBound(nmDOS, 1, -1)
									Call SalArraySetUpperBound(nmKOS, 1, -1)
									Call SalArraySetUpperBound(dmDAPP, 1, -1)
									Call SalArraySetUpperBound(dmPDAT, 1, -1)
									Call SalArraySetUpperBound(dmDATD, 1, -1)
									Call SalArraySetUpperBound(smNAZN, 1, -1)
									Call SalArraySetUpperBound(smD_rec, 1, -1)
									Call SalArraySetUpperBound(smPOND, 1, -1)
									Call SalArraySetUpperBound(nmSK, 1, -1)
									Call SalArraySetUpperBound(smNameFileA, 1, -1)
									Call SalArraySetUpperBound(nmBis, 1, -1)
									Call SalArraySetUpperBound(smBis, 1, -1)
									Call SalArraySetUpperBound(dmDATb1, 1, -1)
									Call SalArraySetUpperBound(dmDATb2, 1, -1)
									Call SalArraySetUpperBound(dmDATOV, 1, -1)
									While SqlFetchNext(hSql(), nFetchRes)
										Set smMFOA[nIndex] = sMFOA
										Set smNLSA[nIndex] = sNLSA
										Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
										Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
										Set smNLSB[nIndex] = sNLSB
										Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
										Set smOKPOA[nIndex] = sOKPOA
										Set smOKPOZ[nIndex] = sOKPOZ
										Set smOKPOB[nIndex] = sOKPOB
										Set nmDK[nIndex] = nDK
										Set nmS[nIndex] = nS
										! Set nmVOB[nIndex] = nVOB
										! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
										Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
										Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
										Set nmISP[nIndex] = nISP
										Set nmKV[nIndex] = nKV
										Set dmDAOP[nIndex] = dDAOP
										Set nmIOST[nIndex] = nIOST
										Set nmDOS[nIndex] = nDOS
										Set nmKOS[nIndex] = nKOS
										Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
										Set dmDATD[nIndex] = dDATD
										Set dmDAPP[nIndex] = dDAPP
										Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
										Set sD_rec = StrDosToWinX(sD_rec)
										Set smD_rec[nIndex] = sD_rec
										! If nBis = NUMBER_Null or nBis = 0
											                                              Set nmBis[nIndex] = 0
											                                              Set smBis[nIndex] = ''
										Set nmBis[nIndex] = 0
										Set smBis[nIndex] = ''
										If sNazns = '00'
											Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
													    SELECT n_np
													    FROM   s_np
													    WHERE  k_np='" || sNaznk || "'"))
										! Set nPosKwoBis = SalStrScan(sD_rec, '#B')
										! If nBis > 0 and nPosKwoBis >= 0
											                                              Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
											                                              Set nB = SalStrScan(sTempBis, '#')
											                                              Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
											                                              Set nLoop = nmBis[nIndex]
											                                              Set smBis[nIndex] = ''
											                                              Set nmBis[nIndex] = 0
											! Call SqlPrepareAndExecute(hSqlAux3(), "
													     SELECT substr(convert(nazn,'RU8PC866','CL8MSWIN1251'),1,200),
													            substr(convert(d_rec,'RU8PC866','CL8MSWIN1251'),1,200)
													     INTO   :sNaznBis,:sD_recBis
													     FROM   arc_rrp
													     WHERE  fn_a=:sFn_a and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
													     ORDER BY rec_a,bis")
											                                              Call SqlPrepareAndExecute(hSqlAux3(), "
													     SELECT nazn,d_rec
													     INTO   :sNaznBis,:sD_recBis
													     FROM   arc_rrp
													     WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
													     ORDER BY rec_a,bis")
											                                              While SqlFetchNext(hSqlAux3(), nFetchRes)
												                                              If nLoop > 0
													                                              Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
													                                              Set nLenOdinBis = Len(sOdinBis)
													! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
													                                              Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
													                                              Set nmBis[nIndex] = nmBis[nIndex] + 1
													                                              Set nLoop = nLoop - 1
											! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
											                                              If nmBis[nIndex] > 0
												                                              If Len(smBis[nIndex]) = 0
													                                              Set nmBis[nIndex] = 0
												                                              Else 
													                                              Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
											                                              Else 
												                                              Set smBis[nIndex] = ''
										Set smPOND[nIndex] = sPOND
										Set nmSK[nIndex] = nSK
										Set smNameFileA[nIndex] = sNameFileA
										Set dmDATb1[nIndex] = dDATb1
										Set dmDATb2[nIndex] = dDATb2
										Set dmDATOV[nIndex] = dDATOV
										Set nIndex = nIndex + 1
									! Call Debug('перед MAKEV2, nIndex=' || Str(nIndex))
									If nIndex > 0
										Call Message('Отбор (V) для ' || sSab || ' ...', TRUE, TRUE, 0)
										If MakeV2(dV, sSab, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOB, nmDK, nmS, nmVOB, smND, nmISP,
												   nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK, smNameFileA, nmBis,
												   smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
											Call Message('Отбор (V) для ' || sSab || ' Ok', TRUE, TRUE, 0)
							Else
								! Z
								If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dV,dV,sSab,nVal,'%','Z')")
									Call SqlCommit(hSql())
									Call SqlPrepareAndExecute(hSql(), "
											     SELECT count(*)
											     FROM   tmp_lics
											     INTO   :nKwo
											     WHERE  id=:nUid")
									Call SqlFetchNext(hSql(), nFetchRes)
									! Call Debug('nKwo=' || Str(nKwo))
									Set bOk = nKwo>0
								Else
									Call SqlRollback(hSql())
									Set bOk = FALSE
								If bOk and SqlPrepareAndExecute(hSql(), "
										   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
										          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,ref,okpoz
										   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,
										          :nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,
										          :nRec,:dDATD,:dDATb1,:dDATb2,:dDATOV,:dDATbis,:nRef,:sOKPOZ
										   FROM   tmp_lics
										   WHERE  id=:nUid
										   ORDER BY nlsa,kv,dk,s")
									Set sMFOA = GetBankMfo()
									Set nIndex = 0
									Call SalArraySetUpperBound(smMFOA, 1, -1)
									Call SalArraySetUpperBound(smNLSA, 1, -1)
									Call SalArraySetUpperBound(smNAMA, 1, -1)
									Call SalArraySetUpperBound(smMFOB, 1, -1)
									Call SalArraySetUpperBound(smNLSB, 1, -1)
									Call SalArraySetUpperBound(smNAMB, 1, -1)
									Call SalArraySetUpperBound(smOKPOA, 1, -1)
									Call SalArraySetUpperBound(smOKPOZ, 1, -1)
									Call SalArraySetUpperBound(smOKPOB, 1, -1)
									Call SalArraySetUpperBound(nmDK, 1, -1)
									Call SalArraySetUpperBound(nmS, 1, -1)
									Call SalArraySetUpperBound(nmVOB, 1, -1)
									Call SalArraySetUpperBound(smND, 1, -1)
									Call SalArraySetUpperBound(nmISP, 1, -1)
									Call SalArraySetUpperBound(nmKV, 1, -1)
									Call SalArraySetUpperBound(dmDAOP, 1, -1)
									Call SalArraySetUpperBound(nmIOST, 1, -1)
									Call SalArraySetUpperBound(nmDOS, 1, -1)
									Call SalArraySetUpperBound(nmKOS, 1, -1)
									Call SalArraySetUpperBound(dmDAPP, 1, -1)
									Call SalArraySetUpperBound(dmPDAT, 1, -1)
									Call SalArraySetUpperBound(dmDATD, 1, -1)
									Call SalArraySetUpperBound(smNAZN, 1, -1)
									Call SalArraySetUpperBound(smD_rec, 1, -1)
									Call SalArraySetUpperBound(smPOND, 1, -1)
									Call SalArraySetUpperBound(nmSK, 1, -1)
									Call SalArraySetUpperBound(smNameFileA, 1, -1)
									Call SalArraySetUpperBound(nmBis, 1, -1)
									Call SalArraySetUpperBound(smBis, 1, -1)
									Call SalArraySetUpperBound(dmDATb1, 1, -1)
									Call SalArraySetUpperBound(dmDATb2, 1, -1)
									Call SalArraySetUpperBound(dmDATOV, 1, -1)
									While SqlFetchNext(hSql(), nFetchRes)
										Set smMFOA[nIndex] = sMFOA
										Set smNLSA[nIndex] = sNLSA
										Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
										Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
										Set smNLSB[nIndex] = sNLSB
										Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
										Set smOKPOA[nIndex] = sOKPOA
										Set smOKPOZ[nIndex] = sOKPOZ
										Set smOKPOB[nIndex] = sOKPOB
										Set nmDK[nIndex] = nDK
										Set nmS[nIndex] = nS
										! Set nmVOB[nIndex] = nVOB
										! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
										Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
										Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
										Set nmISP[nIndex] = nISP
										Set nmKV[nIndex] = nKV
										Set dmDAOP[nIndex] = dDAOP
										Set nmIOST[nIndex] = nIOST
										Set nmDOS[nIndex] = nDOS
										Set nmKOS[nIndex] = nKOS
										Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
										Set dmDATD[nIndex] = dDATD
										Set dmDAPP[nIndex] = dDAPP
										Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
										Set sD_rec = StrDosToWinX(sD_rec)
										Set smD_rec[nIndex] = sD_rec
										If nBis = NUMBER_Null or nBis = 0
											Set nmBis[nIndex] = 0
											Set smBis[nIndex] = ''
										If sNazns = '00'
											Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
													    SELECT n_np
													    FROM   s_np
													    WHERE  k_np='" || sNaznk || "'"))
										If nBis > 0
											Set nPosKwoBis = SalStrScan(sD_rec, '#B')
											! внешние бисы
											If nPosKwoBis >= 0
												Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
												Set nB = SalStrScan(sTempBis, '#')
												Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
												Set sSQL = "
														    SELECT nazn,d_rec
														    INTO   :sNaznBis,:sD_recBis
														    FROM   arc_rrp
														    WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
														    ORDER BY rec_a,bis"
											! внутрение бисы
											Else
												Set nmBis[nIndex] = nBis
												Set sSQL = "
														    SELECT '#C'||value||'#','' as d_recbis
														    INTO   :sNaznBis,:sD_recBis
														    FROM   operw
														    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
														    ORDER BY tag"
											!
											Set nLoop = nmBis[nIndex]
											Set smBis[nIndex] = ''
											Set nmBis[nIndex] = 0
											Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
											While SqlFetchNext(hSqlAux3(), nFetchRes)
												If nLoop > 0
													Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
													Set nLenOdinBis = Len(sOdinBis)
													! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
													Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
													Set nmBis[nIndex] = nmBis[nIndex] + 1
													Set nLoop = nLoop - 1
											! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
											If nmBis[nIndex] > 0
												If Len(smBis[nIndex]) = 0
													Set nmBis[nIndex] = 0
												Else
													Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
											Else
												Set smBis[nIndex] = ''
										Set smPOND[nIndex] = sPOND
										Set nmSK[nIndex] = nSK
										Set smNameFileA[nIndex] = sNameFileA
										Set dmDATb1[nIndex] = dDATb1
										Set dmDATb2[nIndex] = dDATb2
										Set dmDATOV[nIndex] = dDATOV
										Set nIndex = nIndex + 1
									If nIndex > 0
										Call Message('Отбор (Z) за ' || Str(SalDateDay(dV)) || ' ' || GetMonthName(SalDateMonth(dV), TRUE) || ' ' ||
												     Str(SalDateYear(dV)) || ' г. для ' || sSab || ' ' || sSelectNAIM[nI], TRUE, TRUE, 0)
										Call MakeZ(sOpenDay, sSab, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOA, smOKPOB, nmDK, nmS,
												     nmVOB, smND, nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK,
												     smNameFileA, nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
						Set dV = dV + 1
					Call SalWaitCursor(FALSE)
					Call Message('', FALSE, FALSE, 0)
					Return TRUE
			Function: MakeV2
				Description:
				Returns
					Boolean:
				Parameters
					Date/Time: dV
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smNAMA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					String: smNAMB[*]
					String: smOKPOB[*]
					Number: nmDK[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmISP[*]
					Number: nmKV[*]
					Date/Time: dmDAOP[*]
					Number: nmIOST[*]
					Number: nmDOS[*]
					Number: nmKOS[*]
					Date/Time: dmDAPP[*]
					Date/Time: dmPDAT[*]
					String: smNAZN[*]
					String: smD_rec[*]
					String: smPOND[*]
					Number: nmSK[*]
					String: smNameFileA[*]
					Number: nmBis[*]
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Date/Time: dmDATD[*]
					Date/Time: dmDATOV[*]
					String: smOKPOZ[*]
				Static Variables
				Local variables
					Boolean: bFl
					! Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					Number: nKvTek
					String: sFile
					File Handle: hF
					String: sString
					Number: nI
					!
					String: sVERS
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					Set sVERS = smVERS[VisArrayFindString(smSAB, sSab)]
					! Set nBaseVal = GetBaseVal()
					Call SalArrayGetUpperBound(smMFOA, 1, nKwo)
					! Call Debug('nKwo=' || Str(nKwo))
					Set nI = 0
					Set sNlsTek = ''
					Set nKvTek = -1
					While nI <= nKwo
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'V' || SalFmtFormatDateTime(dV, 'yyMMdd') || Left(sSab, 1) || '.' || Right(sSab, 3)
							! Set sFile = sTempPath || 'V' || ddd(dV) || Suffix(sSab, 'V') || Left(sSab, 1) || '.' || Right(sSab, 3)
							! Call Debug('sFile=' || sFile)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
							If nF < 0
								Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
								Return FALSE
							If sVERS >= '1.55'
								! Set sString = 'VERSION20041207' || Spac(85) || PutCrLf()
								Set sString = 'VERSION20041207 ' || PadR(SalStrTrimX(sVERS), 84) || PutCrLf()
								! Call VisFileWrite(hF, sString, Len(sString))
								Call llwrite(nF, sString, Len(sString))
						If sNlsTek != smNLSA[nI] or nKvTek != nmKV[nI]
							Set sNlsTek = smNLSA[nI]
							Set nKvTek = nmKV[nI]
							! Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nBaseVal), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd') || Spac(13) ||
									    '0' || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							! Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nmKV[nI]), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || PadL(SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd'), 8) ||
									    Spac(13) || '0' || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							If SalStrTrimX(smOKPOZ[nI]) = '0'
								Set smOKPOZ[nI] = ''
							Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nmKV[nI]), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || PadL(SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd'), 8) ||
									    PadR(smOKPOZ[nI], 14) || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							! Call Debug('0' || sString)
							! Call VisFileWrite(hF, sString, Len(sString))
							Call llwrite(nF, sString, Len(sString))
						If Abs(nmS[nI]) + Val(smNLSB[nI]) > 0
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDATD[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60)) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PutCrLf()
							If SalStrTrimX(smOKPOB[nI]) = '0'
								Set smOKPOB[nI] = ''
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60)) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PutCrLf()
							Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(IifN(sVERS<'1.63.0.4201',
									    IifN(nmVOB[nI]=6, 1, nmVOB[nI]), nmVOB[nI])), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60)) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PutCrLf()
							! Call Debug('1' || sString)
							! Call VisFileWrite(hF, sString, Len(sString))
							Call llwrite(nF, sString, Len(sString))
						Set nI = nI + 1
					If not bFl
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'V' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Return TRUE
					Return FALSE
			Function: MakeS
				Description:
				Returns
					Boolean:
				Parameters
					String: sSab
					Number: nRnk
				Static Variables
				Local variables
					Boolean: bFl
					Number: nBaseVal
					String: sFile
					String: sString
					File Handle: hF
					!
					String: sNls
					Number: nKv
					Number: nBlkk
					Number: nBlkd
					Number: nPap
					String: sNms
					Date/Time: dDaos
					Date/Time: dDazs
					Number: nOstc
					Number: nOsti
					Number: nDos
					Number: nKos
					Number: nAcc
					Date/Time: dDaep
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					Set nBaseVal = GetBaseVal()
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT nls,kv,blkk,blkd,pap,nms,daos,dazs,fost(acc,:dBankDateM1),fdos(acc,:dBankDate,:dBankDate),
							            fkos(acc,:dBankDate,:dBankDate),fost(acc,:dBankDate),acc
							     INTO   :sNls,:nKv,:nBlkk,:nBlkd,:nPap,:sNms,:dDaos,:dDazs,:nOsti,:nDos,:nKos,:nOstc,:nAcc
							     FROM   accounts
							     WHERE  rnk=:nRnk and (acc in (SELECT acc
							                                   FROM   acce
							                                   WHERE  nvl(pers,0)=1) or
							                           acc in (SELECT acc
							                                   FROM   accc
							                                   WHERE  nvl(pers,0)=1))
							     UNION ALL
							     SELECT a.nls,a.kv,a.blkk,a.blkd,a.pap,a.nms,a.daos,a.dazs,fost(a.acc,:dBankDateM1),
							            fdos(a.acc,:dBankDate,:dBankDate),fkos(a.acc,:dBankDate,:dBankDate),fost(a.acc,:dBankDate),a.acc
							     FROM   accounts a, klp_top c, customer r
							     WHERE  r.rnk=:nRnk and c.rnkp=r.rnk and c.rnk=a.rnk and (a.acc in (SELECT acc
							                                                                        FROM   acce
							                                                                        WHERE  nvl(high,0)=1) or
							                                                              a.acc in (SELECT acc
							                                                                        FROM   accc
							                                                                        WHERE  nvl(high,0)=1))")
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						Call SqlPrepareAndExecute(hSqlAux2(), "
								     SELECT max(fdat)
								     INTO   :dDaep
								     FROM   opldok
								     WHERE  acc=:nAcc")
						Call SqlFetchNext(hSqlAux2(), nFetchRes)
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'S' || ddd(dBankDate) || Suffix(sSab, 'S') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
							If nF < 0
								Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
								Return FALSE
						Set sString = PadL(sNls, 14) || PadL(Str(nKv), 3) || Str(Min(nBlkk+nBlkd, 1)) || PadL(Str(IifN(nPap=3, 0, nPap)), 2)
								    || PadR(StrWinToDosX2(sNms), 38) || SalFmtFormatDateTime(dDaos, 'yyyyMMdd') || PadL(
								    SalFmtFormatDateTime(dDazs, 'yyyyMMdd'), 8) || PadL(Str(nOsti), 16) || PadL(Str(nDos), 16) || PadL(Str(nKos), 16)
								    || PadL(Str(nOstc), 16) || PadL(SalFmtFormatDateTime(dDaep, 'yyyyMMdd'), 8) || PutCrLf()
						! Call VisFileWrite(hF, sString, Len(sString))
						Call llwrite(nF, sString, Len(sString))
					If not bFl
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'S' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Call SqlCommit(hSqlAux2())
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Call SqlRollback(hSqlAux2())
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Call SqlCommit(hSqlAux2())
							Return TRUE
					Return FALSE
			Function: MakeM
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					String: sMfo
					String: sNb
					Number: nBlk
					!
					Number: nF
					String: sTempCrypt
				Actions
					! Call Debug('zaxod')
					Set bFl = TRUE
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT mfo,nb,blk
							     INTO   :sMfo,:sNb,:nBlk
							     FROM   banks
							     WHERE  blk<>4")
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'M' || ddd(dBankDate) || Suffix(sSab, 'M') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
						Set sString = PadL(sMfo, 9) || PadR(StrWinToDosX2(sNb), 38) || IifS(nBlk=0, '0', '1') || PutCrLf()
						! Call VisFileWrite(hF, sString, Len(sString))
						Call llwrite(nF, sString, Len(sString))
					! Call SqlCommit(hSqlAux2())
					If not bFl
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'M' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Call SqlCommit(hSqlAux2())
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Call SqlRollback(hSqlAux2())
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Call SqlCommit(hSqlAux2())
							Return TRUE
					Return FALSE
			Function: MakeW
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					Number: nKv
					String: sName
					String: sLcv
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT kv,name,lcv
							     INTO   :nKv,:sName,:sLcv
							     FROM   tabval")
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'W' || ddd(dBankDate) || Suffix(sSab, 'W') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
						Set sString = PadL(Str(nKv), 3) || PadR(StrWinToDosX2(sName), 38) || PadR(sLcv, 3) || PutCrLf()
						! Call VisFileWrite(hF, sString, Len(sString))
						Call llwrite(nF, sString, Len(sString))
					! Call SqlCommit(hSqlAux2())
					If not bFl
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'W' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Call SqlCommit(hSqlAux2())
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Call SqlRollback(hSqlAux2())
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Call SqlCommit(hSqlAux2())
							Return TRUE
					Return FALSE
			Function: MakeK
				Description:
				Returns
				Parameters
					String: sSab
					Date/Time: dBeg
					Date/Time: dEnd
				Static Variables
				Local variables
					Number: nKV
					Number: nBSUM
					Date/Time: dVDATE
					Number: nRATE_O
					Boolean: bFl
					String: sFile
					File Handle: hF
					Boolean: b1
					String: sString
					String: s16t
					Number: nBaseVal
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set nBaseVal = GetBaseVal()
					Set b1 = SqlPLSQLCommand(hSql(), 'val_ksbb(dBeg, dEnd, nBaseVal)')
					If b1
						Call SqlCommit(hSql())
						Set bFl = TRUE
						Call SqlPrepareAndExecute(hSql(), "
								     SELECT kv,bsum,vdate1,rateo1
								     INTO   :nKV,:nBSUM,:dVDATE,:nRATE_O
								     FROM   tmp_valk
								     ORDER BY 1")
						While SqlFetchNext(hSql(), nFetchRes)
							If bFl
								Set bFl = FALSE
								Set sFile = sTempPath || 'K' || ddd(dBankDate) || Suffix(sSab, 'K') || Left(sSab, 1) || '.' || Right(sSab, 3)
								If File(sFile)
									Call VisFileDelete(sFile)
								! Call VisFileOpen(hF, sFile, OF_Create)
								Set nF = llcreat(sFile, 0)
								If nF < 0
									Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
									Return FALSE
							Set s16t = PadL(SalNumberToStrX(nRATE_O/nBSUM, 8), 16)
							Set sString = PadL(Str(nKV), 3) || SalFmtFormatDateTime(dVDATE, 'yyyyMMdd') || Left(s16t, 7) || '.' ||
									    Right(s16t, 8) || PutCrLf()
							! Call VisFileWrite(hF, sString, Len(sString))
							Call llwrite(nF, sString, Len(sString))
						! Call SqlCommit(hSqlAux2())
						If not bFl
							If sVegaSignOn = '2'
								Set dDateCurrent = SalDateCurrent()
								Set sTempCrypt = sTempPath || 'K' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
										    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
										    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
										    SalDateSecond(dDateCurrent)+100), 2)
								If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
									Call llclose(nF)
									Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
									Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
									Call SalFileCreateDirectory(syyyyMMddPath)
									Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
									Call VisFileDelete(sTempCrypt)
									Call VisFileDelete(sFile)
									Call SqlCommit(hSqlAux2())
									Return TRUE
								Else
									Call llclose(nF)
									Call VisFileDelete(sFile)
									Call SqlRollback(hSqlAux2())
									Return FALSE
							Else
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sFile)
								Call SqlCommit(hSqlAux2())
								Return TRUE
					Return FALSE
			Function: MakeZ
				Description:
				Returns
					Boolean:
				Parameters
					String: s01
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smNAMA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					String: smNAMB[*]
					String: smOKPOA[*]
					String: smOKPOB[*]
					Number: nmDK[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmISP[*]
					Number: nmKV[*]
					Date/Time: dmDAOP[*]
					Number: nmIOST[*]
					Number: nmDOS[*]
					Number: nmKOS[*]
					Date/Time: dmDAPP[*]
					Date/Time: dmPDAT[*]
					String: smNAZN[*]
					String: smD_rec[*]
					String: smPOND[*]
					Number: nmSK[*]
					String: smNameFileA[*]
					Number: nmBis[*]
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Date/Time: dmDATD[*]
					Date/Time: dmDATOV[*]
					String: smOKPOZ[*]
				Static Variables
				Local variables
					Boolean: bFl
					! Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					Number: nKvTek
					String: sFile
					File Handle: hF
					String: sString
					Number: nI
					!
					String: sVERS
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					Set sVERS = smVERS[VisArrayFindString(smSAB, sSab)]
					! Set nBaseVal = GetBaseVal()
					Call SalArrayGetUpperBound(smMFOA, 1, nKwo)
					Set nI = 0
					Set sNlsTek = ''
					Set nKvTek = -1
					While nI <= nKwo
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'Z' || SalFmtFormatDateTime(dmDAOP[0], 'yyMMdd') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
							If nF < 0
								Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
								Return FALSE
							If sVERS >= '1.55'
								! Set sString = 'VERSION20041207' || Spac(85) || PutCrLf()
								Set sString = 'VERSION20041207 ' || PadR(SalStrTrimX(sVERS), 84) || PutCrLf()
								! Call VisFileWrite(hF, sString, Len(sString))
								Call llwrite(nF, sString, Len(sString))
						If sNlsTek != smNLSA[nI] or nKvTek != nmKV[nI]
							Set sNlsTek = smNLSA[nI]
							Set nKvTek = nmKV[nI]
							! Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nBaseVal), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd') || Spac(13) ||
									    '0' || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							! Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nBaseVal), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd') ||
									    PadR(smOKPOA[nI], 14) || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							If SalStrTrimX(smOKPOZ[nI]) = '0'
								Set smOKPOZ[nI] = ''
							Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nmKV[nI]), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || PadL(SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd'), 8) ||
									    PadR(smOKPOZ[nI], 14) || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							! Call VisFileWrite(hF, sString, Len(sString))
							Call llwrite(nF, sString, Len(sString))
						If Abs(nmS[nI]) + Val(smNLSB[nI]) > 0
							! Call DebugN(Val(smNLSA[nI]))
							! Call DebugN(Val(smMFOB[nI]))
							! Call DebugN(Val(smNLSB[nI]))
							! Call DebugN(Abs(nmS[nI]))
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDATD[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							If SalStrTrimX(smOKPOB[nI]) = '0'
								Set smOKPOB[nI] = ''
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PadL(Str(nmBis[nI]), 4) || PutCrLf())
							Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(IifN(sVERS<'1.63.0.4201',
									    IifN(nmVOB[nI]=6, 1, nmVOB[nI]), nmVOB[nI])), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '') || PadL(Str(nmBis[nI]), 4) || PutCrLf())
							! Call VisFileWrite(hF, sString, Len(sString)) 
							Call llwrite(nF, sString, Len(sString))
							If nmBis[nI] > 0
								Set sString = StrWinToDosX2(smBis[nI])
								Call llwrite(nF, sString, Len(sString))
						Set nI = nI + 1
					If not bFl
						If sVegaSignOn = '2'
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'Z' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Return TRUE
					Return FALSE
			Function: FormFileU
				Description: формирование файла U (из MakeU для каждого SAB)
				Returns
					Boolean:
				Parameters
					String: sSab
					String: smNBW[*]
					String: smMFO[*]
					String: smSEP[*]
					String: smOP[*]
				Static Variables
				Local variables
					Number: nKd
					Number: nLA
					Boolean: bZag
					String: sU
					File Handle: hU
					String: sDaTi
					Number: nKw
					Number: nhU
					Number: nhUc
					String: sUc
					Long String: s51
					Number: nLenArr
					!
					Number: nU
					String: sTempCrypt
				Actions
					Call SalArrayDimCount(smMFO, nKd)
					Call SalArrayGetUpperBound(smMFO, nKd, nLA)
					Set nKd = 0
					Set bZag = TRUE
					While nKd <= nLA
						If bZag ! Сформировать часть заголовка файла U
							Set sU = sTempPath || 'U' || ddd(dBankDate) || Suffix(sSab, 'U') || Left(sSab, 1) || '.' || Right(sSab, 3)
							! Call SqlCommit(hSqlAux2())
							If File(sU)
								Call VisFileDelete(sU)
							Set nU = llcreat(sU, 0)
							If nU < 0 ! not SalFileOpen(hU, sU, OF_Create | OF_ReadWrite)
								! Call SqlRollback(hSqlAux2())
								Call MessageNoWait('Ошибка при создании файла ' || sU, 'Аварийная ситуация', 3, 1)
								Call SqlRollback(hSqlAux2())
								Return FALSE
							Set bZag = FALSE
						Set s51 = IifS(smOP[nKd]='D', 'D', 'A') || PadL(smMFO[nKd], 9) || PadR(StrWinToDosX2(smNBW[nKd]), 38) || '0' ||
								    PutCrLf()
						If llwrite(nU, s51, 51) != 51 ! SalFileWrite(hU, s51, 51) != 51
							! Call SalFileClose(hU)
							Call llclose(nU)
							Call VisFileDelete(sU)
							! Call SqlRollback(hSqlAux2())
							Call MessageNoWait('Ошибка при записи в файл ' || sU, 'Аварийная ситуация', 3, 1)
							Call SqlRollback(hSqlAux2())
							Return FALSE
						Set nKd = nKd + 1
					If sVegaSignOn = '2'
						Set dDateCurrent = SalDateCurrent()
						Set sTempCrypt = sTempPath || 'U' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
								    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
								    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
								    SalDateSecond(dDateCurrent)+100), 2)
						If FileSignCrypt(nU, sTempCrypt, Right(sU, 12)) = 0
							Call llclose(nU)
							Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sU, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sU, syyyyMMddPath || Right(sU, 12), TRUE)
							Call VisFileDelete(sTempCrypt)
							Call VisFileDelete(sU)
							Call SqlCommit(hSqlAux2())
							Return TRUE
						Else
							Call llclose(nU)
							Call VisFileDelete(sU)
							Call SqlRollback(hSqlAux2())
							Return FALSE
					Else
						! Call SalFileClose(hU)
						Call llclose(nU)
						Call VisFileCopy(sU, sDiskKataOUT || Right(sU, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sU, syyyyMMddPath || Right(sU, 12), TRUE)
						Call VisFileDelete(sU)
						Call SqlCommit(hSqlAux2())
						Return TRUE
			Function: FormFileT
				Description: формирование файла T
				Returns
					Boolean:
				Parameters
					String: smKOD4[*]
					Number: nmPOND[*]
					String: sSab
					String: sNameFD
				Static Variables
				Local variables
					Number: nKd
					Number: nLA
					Boolean: bZag
					String: sU
					File Handle: hU
					String: sDaTi
					Number: nKw
					Number: nhU
					Number: nhUc
					String: sUc
					Long String: s15
					Number: nLenArr
					!
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					String: snls
					String: smfo
					String: snlsp
					Number: ns
					Number: nvob
					String: snd
					Number: nkv
					Date/Time: ddadad
					String: snaimp
					String: stext1
					String: skoka
					String: skokb
					String: spond
					!
					Date/Time: dDatBegYear
					!
					Number: nU
					String: sTempCrypt
				Actions
					Call SalArrayDimCount(smKOD4, nKd)
					Call SalArrayGetUpperBound(smKOD4, nKd, nLA)
					Set nKd = 0
					Set bZag = TRUE
					Call Message('Отбор (T) для ' || sSab, TRUE, TRUE, 0)
					While nKd <= nLA
						If bZag
							Set sU = sTempPath || 'T' || Subs(sNameFD, 2, 6) || Left(sSab, 1) || '.' || Right(sSab, 3)
							Set nU = llcreat(sU, 0)
							If nU < 0 ! not SalFileOpen(hU, sU, OF_Create | OF_ReadWrite)
								! Call SqlRollback(hSqlAux2())
								Call MessageNoWait('Ошибка при создании файла ' || sU, 'Аварийная ситуация', 3, 1)
								Return FALSE
							Set bZag = FALSE
						Set s15 = smKOD4[nKd] || PadL(Str(nmPOND[nKd]), 9) || PutCrLf()
						! Call Debug('s15=' || s15)
						If llwrite(nU, s15, 15) != 15 ! SalFileWrite(hU, s15, 15) != 15
							! Call SalFileClose(hU)
							Call llclose(nU)
							Call VisFileDelete(sU)
							! Call SqlRollback(hSqlAux2())
							Call MessageNoWait('Ошибка при записи в файл ' || sU, 'Аварийная ситуация', 3, 1)
							Return FALSE
						Set nKd = nKd + 1
					If sVegaSignOn = '2'
						! здесь поставить подпись и шифрование файла квитанции (T)
						! искать код КЛЮЧА ШИФРОВАНИЯ в FileSignCrypt
						Set dDateCurrent = SalDateCurrent()
						Set sTempCrypt = sTempPath || 'T' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
								    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
								    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
								    SalDateSecond(dDateCurrent)+100), 2)
						If FileSignCrypt(nU, sTempCrypt, Right(sU, 12)) = 0
							! Call SalFileClose(hU)
							Call llclose(nU)
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sU, syyyyMMddPath || Right(sU, 12), TRUE)
							Call SalFileCopy(sTempCrypt, sDiskKataOUTS || Right(sU, 12), TRUE)
							Call VisFileDelete(sU)
							Call VisFileDelete(sTempCrypt)
							Return TRUE
						Else
							Call llclose(nU)
							Call VisFileDelete(sU)
							Return FALSE
					Else
						Call llclose(nU)
						Call VisFileCopy(sU, sDiskKataOUT || Right(sU, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sU, syyyyMMddPath || Right(sU, 12), TRUE)
						Call VisFileDelete(sU)
						! Call SqlCommit(hSqlAux2())
						Return TRUE
			Function: Suffix
				Description: возвращает суффикс по типу файла и SAB
				Returns
					String:
				Parameters
					String: sSab
					String: sTip
				Static Variables
				Local variables
					Number: nSuf
					Number: nRnk
					String: sTemp
					Number: nCount
				Actions
					Call SqlPrepareAndExecute(hSqlAux2(), '
							     SELECT k.count,k.rnk
							     INTO   :nSuf,:nRnk
							     FROM   custcount k, customer c
							     WHERE  k.tip=:sTip and c.sab=:sSab and k.rnk=c.rnk and k.dform=:dBankDate')
					If SqlFetchNext(hSqlAux2(), nFetchRes)
						Set nSuf = IifN(nSuf=999, 1, nSuf+1)
						Call SqlPrepareAndExecute(hSqlAux2(), '
								     UPDATE custcount
								     SET    count=:nSuf,dform=:dBankDate
								     WHERE  rnk=:nRnk and tip=:sTip')
					Else
						Set nSuf = 1
						Call SqlPrepareAndExecute(hSqlAux2(), '
								     SELECT rnk
								     INTO   :nRnk
								     FROM   customer
								     WHERE  sab=:sSab')
						Call SqlFetchNext(hSqlAux2(), nFetchRes)
						Call SqlPrepareAndExecute(hSqlAux2(), '
								     SELECT tip
								     INTO   :sTemp
								     FROM   tipcount
								     WHERE  tip=:sTip')
						If not SqlFetchNext(hSqlAux2(), nFetchRes)
							Call SqlPrepareAndExecute(hSqlAux2(), "
									    INSERT
									    INTO   tipcount (tip,name)
									    VALUES (:sTip,'')")
						Set nCount = 0
						Call SqlPrepareAndExecute(hSqlAux2(), '
								     UPDATE custcount
								     SET    count=:nSuf,dform=:dBankDate
								     WHERE  rnk=:nRnk and tip=:sTip')
						Call SqlGetModifiedRows(hSqlAux2(), nCount)
						If nCount = 0
							Call SqlPrepareAndExecute(hSqlAux2(), '
									     INSERT
									     INTO   custcount (rnk,tip,count,dform)
									     VALUES (:nRnk,:sTip,:nSuf,:dBankDate)')
					Return Right(Str(nSuf+1000), 3)
			Function: OtborOO
				Description: отбор документов, принятых к оплате операционистом  "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMA
					String: smNAMA[*]
					String: sNAMB
					String: smNAMB[*]
					Number: nS
					Number: nmS[*]
					String: sND
					String: smND[*]
					String: sNAZN
					String: smNAZN[*]
					String: sD_rec
					String: smD_rec[*]
					String: sPOND
					! String: smPOND[*]
					! String: sRowid
					!
					! String: smNFIA[*]
					String: sNFIA
					!
					Date/Time: dDADAD
					Date/Time: dmDADAD[*]
					String: sKOKA
					String: smKOKA[*]
					String: sKOKB
					String: smKOKB[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Number: nIndex
					Number: nFetchRes
					Number: nBaseVal
					Number: nIO
					!
					Date/Time: dDATD
					Date/Time: dmDATD[*]
					!
					Number: nCnt
					Boolean: bOk
					!
					String: sSABi
					!
					! String: sSabP
					Number: nRetO
				Actions
					Call SalWaitCursor(TRUE)
					Set nBaseVal = GetBaseVal()
					Set sSABi = ''
					If SqlPrepareAndExecute(hSqlAux3(), "
							   SELECT DISTINCT sab
							   INTO   :sSAB
							   FROM   klpoow
							   WHERE  sab is not null and pond is not null and tip='O' and otm is null")
						While SqlFetchNext(hSqlAux3(), nFetchRes)
							Set sSABi = sSABi || sSAB || '='
					!
					Set nIO = 0
					While nIO <= nKLI
						Set sSAB = smSAB[nIO]
						Set nRNK = nmRNK[nIO]
						Set sNMK = smNMK[nIO]
						Set sOKPO = smOKPO[nIO]
						Set sTIMES = smTIMES[nIO]
						If At(sSAB || '=', sSABi) > 0
							If SqlPrepareAndExecute(hSqlAux3(), "
									   SELECT G.mfoa,G.nlsa,G.mfob,G.nlsb,G.namb,G.s,G.nd,G.nazn,G.pond,G.vob,G.datad,G.koka,G.kokb,v.dat,G.d_rec,
									          G.datd,G.nfia,G.kv
									   INTO   :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:nVOB,:dDADAD,:sKOKA,:sKOKB,:dDATOV,:sD_rec,
									          :dDATD,:sNFIA,:nKV
									   FROM   (SELECT o.mfoa,o.nlsa,o.mfob,o.nlsb,o.namb,o.s,o.nd,o.nazn,o.pond,k.vob,k.datad,k.koka,k.kokb,r.d_rec,
									                  r.datd,o.nfia,r.ref,r.kv
									           FROM   klpoow o, klp k, klpond p, oper r
									           WHERE  o.sab=:sSAB and o.tip='O' and o.nfia=k.naex and o.pond=k.pond and p.pond=k.pond and
									                  p.filename=k.naex and r.ref=p.ref) G, oper_visa v
									   WHERE   v.ref=G.ref and v.dat=(SELECT max(dat)
									                                  FROM   oper_visa
									                                  WHERE  ref=G.ref)")
								Set nIndex = 0
								Call SalArraySetUpperBound(smMFOA, 1, -1)
								Call SalArraySetUpperBound(smNLSA, 1, -1)
								Call SalArraySetUpperBound(smMFOB, 1, -1)
								Call SalArraySetUpperBound(smNLSB, 1, -1)
								Call SalArraySetUpperBound(nmS, 1, -1)
								Call SalArraySetUpperBound(nmVOB, 1, -1)
								Call SalArraySetUpperBound(smND, 1, -1)
								Call SalArraySetUpperBound(dmDADAD, 1, -1)
								Call SalArraySetUpperBound(smNAMA, 1, -1)
								Call SalArraySetUpperBound(smNAMB, 1, -1)
								Call SalArraySetUpperBound(smNAZN, 1, -1)
								Call SalArraySetUpperBound(smD_rec, 1, -1)
								Call SalArraySetUpperBound(smKOKA, 1, -1)
								Call SalArraySetUpperBound(smKOKB, 1, -1)
								Call SalArraySetUpperBound(smPOND, 1, -1)
								Call SalArraySetUpperBound(dmDATb1, 1, -1)
								Call SalArraySetUpperBound(dmDATb2, 1, -1)
								Call SalArraySetUpperBound(dmDATOV, 1, -1)
								Call SalArraySetUpperBound(dmDATD, 1, -1)
								! Call SalArraySetUpperBound(smNFIA, 1, -1)
								While SqlFetchNext(hSqlAux3(), nFetchRes)
									Set smMFOA[nIndex] = sMFOA
									Set smNLSA[nIndex] = sNLSA
									Set smMFOB[nIndex] = sMFOB
									Set smNLSB[nIndex] = sNLSB
									Set nmS[nIndex] = 0 - nS
									! Set nmVOB[nIndex] = nVOB
									! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
									Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
									Set smND[nIndex] = sND
									! Set nmKV[nIndex] = nBaseVal
									Set nmKV[nIndex] = nKV
									Set dmDADAD[nIndex] = dDADAD
									Set smNAMA[nIndex] = sNMK
									Set smNAMB[nIndex] = sNAMB
									Set smNAZN[nIndex] = sNAZN
									Set smD_rec[nIndex] = sD_rec
									Set smKOKA[nIndex] = sKOKA
									Set smKOKB[nIndex] = sKOKB
									Set smPOND[nIndex] = sPOND
									Set dmDAOP[nIndex] = dBankDate
									Set dmDATb1[nIndex] = dDATOV
									Set dmDATb2[nIndex] = dDATOV
									Set dmDATOV[nIndex] = dDATOV
									Set dmDATD[nIndex] = dDATD
									! Set smNFIA[nIndex] = sNFIA
									Set nmBis[nIndex] = 0
									Set smBis[nIndex] = ''
									Set nIndex = nIndex + 1
									! Call SqlPrepareAndExecute(hSqlAux(), "
											     UPDATE klpoow
											     SET    otm='1'
											     WHERE  rowid=:sRowid")
									Call SqlPrepareAndExecute(hSqlAux(), "
											     UPDATE klpoow
											     SET    otm='1'
											     WHERE  sab=:sSAB and pond=:sPOND and nfia=:sNFIA and tip='O' and nvl(otm,'0')<>'1'")
								If nIndex > 0
									Call Message('Отбор (C) для ' || sSAB || ' (проведенные документы) ...', TRUE, TRUE, 0)
									Set nRetO = MakeC2(-1, sSAB, smMFOA, smNLSA, smMFOB, smNLSB, nmS, nmVOB, smND, nmKV, dmDADAD, smNAMA, smNAMB,
											    smNAZN, smD_rec, smKOKA, smKOKB, smPOND, dmDAOP, nmBis, smBis, dmDATb1, dmDATb2, dmDATOV, dmDATD, FALSE,
											    smKOKA)
									If nRetO = 216
										Call SqlPrepareAndExecute(hSqlAux(), "
												     DELETE
												     FROM   klpoow
												     WHERE  otm='1' and sab=:sSAB and pond is not null and substr(nfia,1,1)='D' and tip='O'")
										Call SqlCommit(hSqlAux())
										Call SqlCommit(hSqlAux3())
										Call SqlCommit(hSqlAux2())
										! Return FALSE
									If nRetO = 0
										Call SqlPrepareAndExecute(hSqlAux(), "
												     DELETE
												     FROM   klpoow
												     WHERE  sab=:sSAB and pond is not null and substr(nfia,1,1)='D' and tip='O'")
										Call SqlCommit(hSqlAux())
										Call SqlCommit(hSqlAux3())
										Call SqlCommit(hSqlAux2())
										Call Message('Отбор (C) для ' || sSAB || ' (проведенные документы) Ok', TRUE, TRUE, 0)
										Call Message('', FALSE, FALSE, 0)
									Else
										Call SqlRollback(hSqlAux())
										Call SqlRollback(hSqlAux3())
										Call SqlRollback(hSqlAux2())
										! Return FALSE
						Set nIO = nIO + 1
					Call Message('', FALSE, FALSE, 0)
					! отбор документов (файл С) - "чужие" принятые к оплате (из KLPOOW)
					Set sSABi = ''
					If SqlPrepareAndExecute(hSqlAux3(), "
							   SELECT DISTINCT sab
							   INTO   :sSAB
							   FROM   klpoow
							   WHERE  sab is not null and pond is null and tip='O' and otm is null")
						While SqlFetchNext(hSqlAux3(), nFetchRes)
							Set sSABi = sSABi || sSAB || '='
						!
						Set nIO = 0
						While nIO <= nKLI
							Set sSAB = smSAB[nIO]
							Set nRNK = nmRNK[nIO]
							Set sNMK = smNMK[nIO]
							Set sOKPO = smOKPO[nIO]
							Set sTIMES = smTIMES[nIO]
							Set nUid = GetUserId()
							Set nVal = GetBaseVal()
							If At(sSAB || '=', sSABi) > 0
								! SELECT o.mfoa,o.nlsa,o.mfob,o.nlsb,o.namb,o.s,o.nd,o.nazn,o.pond,o.rowid,to_number(o.nfia)
										  INTO   :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:sRowid,:nRef
										  FROM   klpoow o
										  WHERE  o.sab=:sSAB and o.tip='O' and o.pond is null
								If SqlPrepareAndExecute(hSql(), "
										   SELECT count(*)
										   INTO   :nCnt
										   FROM   klpoow
										   WHERE  sab=:sSAB and tip='O' and pond is null and otm is null") and SqlFetchNext(hSql(), nFetchRes)
									If nCnt > 0
										If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dBankDate,dBankDate,sSAB,nVal,'%','C')")
											! Call SqlCommit(hSql())
											If SqlPrepareAndExecute(hSql(), "
													   SELECT count(*)
													   FROM   tmp_lics
													   INTO   :nKwo
													   WHERE  id=:nUid") and SqlFetchNext(hSql(), nFetchRes)
												! Call DebugN(nKwo)
												Set bOk = nKwo>0
											Else
												Set bOk = FALSE
										Else
											Call SqlRollback(hSql())
											Set bOk = FALSE
											! Call Debug('2')
										! If bOk and SqlPrepareAndExecute(hSqlAux3(), "
												   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
												          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datb1,datb2,datov,datd,datbis,ref,okpoz
												   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,
												          :nDOS,:nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,
												          :sFn_a,:nRec,:dDATb1,:dDATb2,:dDATOV,:dDATD,:dDATbis,:nRef,:sOKPOZ
												   FROM   tmp_lics
												   WHERE  id=:nUid and ref in (SELECT to_number(nfia)
												                               FROM   klpoow
												                               WHERE  sab=:sSAB and tip='O' and pond is null and otm is null)
												   ORDER BY nlsa,kv,dk,s")
										If bOk and SqlPrepareAndExecute(hSqlAux3(), "
												   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,vdat,iost,dos,kos,pdat,dapp,nazn,pond,sk,
												          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datb1,datb2,datov,datd,datbis,ref,okpoz
												   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,
												          :nDOS,:nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,
												          :sFn_a,:nRec,:dDATb1,:dDATb2,:dDATOV,:dDATD,:dDATbis,:nRef,:sOKPOZ
												   FROM   tmp_lics
												   WHERE  id=:nUid and ref in (SELECT to_number(nfia)
												                               FROM   klpoow
												                               WHERE  sab=:sSAB and tip='O' and pond is null and otm is null)
												   ORDER BY nlsa,kv,dk,s")
											! Call Debug('1')
											Set sMFOA = GetBankMfo()
											Set nIndex = 0
											Call SalArraySetUpperBound(smMFOA, 1, -1)
											Call SalArraySetUpperBound(smNLSA, 1, -1)
											Call SalArraySetUpperBound(smNAMA, 1, -1)
											Call SalArraySetUpperBound(smMFOB, 1, -1)
											Call SalArraySetUpperBound(smNLSB, 1, -1)
											Call SalArraySetUpperBound(smNAMB, 1, -1)
											Call SalArraySetUpperBound(smOKPOA, 1, -1)
											Call SalArraySetUpperBound(smOKPOZ, 1, -1)
											Call SalArraySetUpperBound(smOKPOB, 1, -1)
											Call SalArraySetUpperBound(nmDK, 1, -1)
											Call SalArraySetUpperBound(nmS, 1, -1)
											Call SalArraySetUpperBound(nmVOB, 1, -1)
											Call SalArraySetUpperBound(smND, 1, -1)
											Call SalArraySetUpperBound(nmISP, 1, -1)
											Call SalArraySetUpperBound(nmKV, 1, -1)
											Call SalArraySetUpperBound(dmDAOP, 1, -1)
											Call SalArraySetUpperBound(nmIOST, 1, -1)
											Call SalArraySetUpperBound(nmDOS, 1, -1)
											Call SalArraySetUpperBound(nmKOS, 1, -1)
											Call SalArraySetUpperBound(dmDAPP, 1, -1)
											Call SalArraySetUpperBound(dmPDAT, 1, -1)
											Call SalArraySetUpperBound(dmDATD, 1, -1)
											Call SalArraySetUpperBound(smNAZN, 1, -1)
											Call SalArraySetUpperBound(smD_rec, 1, -1)
											Call SalArraySetUpperBound(smPOND, 1, -1)
											Call SalArraySetUpperBound(nmSK, 1, -1)
											Call SalArraySetUpperBound(smNameFileA, 1, -1)
											Call SalArraySetUpperBound(nmBis, 1, -1)
											Call SalArraySetUpperBound(smBis, 1, -1)
											Call SalArraySetUpperBound(dmDATb1, 1, -1)
											Call SalArraySetUpperBound(dmDATb2, 1, -1)
											Call SalArraySetUpperBound(dmDATOV, 1, -1)
											While SqlFetchNext(hSqlAux3(), nFetchRes)
												Set smMFOA[nIndex] = sMFOA
												Set smNLSA[nIndex] = sNLSA
												Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
												Set smMFOB[nIndex] = sMFOB
												Set smNLSB[nIndex] = sNLSB
												Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
												Set smOKPOA[nIndex] = sOKPOA
												Set smOKPOA[nIndex] = sOKPOZ
												Set smOKPOB[nIndex] = sOKPOB
												Set nmDK[nIndex] = nDK
												Set nmS[nIndex] = nS
												! Set nmVOB[nIndex] = nVOB
												! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
												Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
												Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
												Set nmISP[nIndex] = nISP
												Set nmKV[nIndex] = nKV
												Set dmDAOP[nIndex] = dDAOP
												Set nmIOST[nIndex] = nIOST
												Set nmDOS[nIndex] = nDOS
												Set nmKOS[nIndex] = nKOS
												Set dmPDAT[nIndex] = dPDAT
												Set dmDATD[nIndex] = dDATD
												Set dmDAPP[nIndex] = dDAPP
												Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
												Set sD_rec = StrDosToWinX(sD_rec)
												Set smD_rec[nIndex] = sD_rec
												If nBis = NUMBER_Null or nBis = 0
													Set nmBis[nIndex] = 0
													Set smBis[nIndex] = ''
												If sNazns = '00'
													Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
															    SELECT n_np
															    FROM   s_np
															    WHERE  k_np='" || sNaznk || "'"))
												If nBis > 0
													Set nPosKwoBis = SalStrScan(sD_rec, '#B')
													! внешние бисы
													If nPosKwoBis >= 0
														Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
														Set nB = SalStrScan(sTempBis, '#')
														Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
														Set sSQL = "SELECT nazn,d_rec
																            INTO   :sNaznBis,:sD_recBis
																            FROM   arc_rrp
																            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
																            ORDER BY rec_a,bis"
													! внутрение бисы
													Else
														Set nmBis[nIndex] = nBis
														Set sSQL = "
																    SELECT '#C'||value||'#','' as d_recbis
																    INTO   :sNaznBis,:sD_recBis
																    FROM   operw
																    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
																    ORDER BY tag"
													!
													Set nLoop = nmBis[nIndex]
													Set smBis[nIndex] = ''
													Set nmBis[nIndex] = 0
													Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
													While SqlFetchNext(hSqlAux3(), nFetchRes)
														If nLoop > 0
															Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
															Set nLenOdinBis = Len(sOdinBis)
															! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
															Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
															Set nmBis[nIndex] = nmBis[nIndex] + 1
															Set nLoop = nLoop - 1
													! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
													If nmBis[nIndex] > 0
														If Len(smBis[nIndex]) = 0
															Set nmBis[nIndex] = 0
														Else
															Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
													Else
														Set smBis[nIndex] = ''
												Set smPOND[nIndex] = IifS(sPOND='', '0', sPOND)
												Set nmSK[nIndex] = nSK
												Set smNameFileA[nIndex] = sNameFileA
												Set dmDATb1[nIndex] = dDATb1
												Set dmDATb2[nIndex] = dDATb2
												Set dmDATOV[nIndex] = dDATOV
												Set nIndex = nIndex + 1
												! Call DebugN(nIndex)
												Call SqlPrepareAndExecute(hSqlAux(), "
														     DELETE
														     FROM  klpoow
														     WHERE sab=:sSAB and tip='O' and pond is null and nfia=to_char(:nRef)")
											If nIndex > 0
												Call Message('Отбор (C) для ' || sSAB || ' ...', TRUE, TRUE, 0)
												Set nRetO = MakeC2(-1, sSAB, smMFOA, smNLSA, smMFOB, smNLSB, nmS, nmVOB, smND, nmKV, dmPDAT, smNAMA,
														    smNAMB, smNAZN, smD_rec, smOKPOA, smOKPOB, smPOND, dmDAOP, nmBis, smBis, dmDATb1, dmDATb2, dmDATOV,
														    dmDATD, TRUE, smOKPOZ)
												If nRetO = 0
													Call SqlCommit(hSql())
													Call SqlCommit(hSqlAux())
													Call SqlCommit(hSqlAux2())
													Call Message('Отбор (C) для ' || sSAB || ' Ok', TRUE, TRUE, 0)
												Else If nRetO = 216
													Call SqlPrepareAndExecute(hSqlAux(), "
															     DELETE
															     FROM   klpoow
															     WHERE  sab=:sSAB and pond is null and substr(nfia,1,1)<>'D' and tip='O'")
													Call SqlCommit(hSql())
													Call SqlCommit(hSqlAux())
													Call SqlCommit(hSqlAux2())
												Else
													Call SqlRollback(hSql())
													Call SqlRollback(hSqlAux())
													Call SqlRollback(hSqlAux2())
							Set nIO = nIO + 1
					!
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: OtborWW
				Description: отбор документов, возвращенных операционистом "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					Number: nS
					Number: nmS[*]
					String: sND
					String: smND[*]
					String: sNAZN
					String: smNAZN[*]
					String: smD_rec[*]
					String: sPOND
					String: smPOND[*]
					String: sRowid
					!
					Date/Time: dDADAD
					Date/Time: dmDADAD[*]
					String: sKOKA
					String: smKOKA[*]
					String: sKOKB
					String: smKOKB[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					String: sPRWO
					Number: nIndex
					Number: nFetchRes
					Number: nBaseVal
					Number: nIW
					!
					String: sSABi
					!
					! String: sSabP
					Number: nRetW
				Actions
					! If cbWO
					Call SalWaitCursor(TRUE)
					Set nBaseVal = GetBaseVal()
					! Call Message('Подготовка к отбору возвращенных документов(О)...', TRUE, TRUE, 0)
					Set sSABi = ''
					If SqlPrepareAndExecute(hSqlAux3(), "
							   SELECT DISTINCT sab
							   INTO   :sSAB
							   FROM   klpoow
							   WHERE  sab is not null and pond is not null and tip='W' and otm is null")
						While SqlFetchNext(hSqlAux3(), nFetchRes)
							Set sSABi = sSABi || sSAB || '='
					Set nIW = 0
					While nIW <= nKLI
						Set sSAB = smSAB[nIW]
						Set nRNK = nmRNK[nIW]
						Set sNMK = smNMK[nIW]
						Set sOKPO = smOKPO[nIW]
						Set sTIMES = smTIMES[nIW]
						If At(sSAB || '=', sSABi) > 0
							If SqlPrepareAndExecute(hSqlAux3(), "
									   SELECT o.mfoa,o.nlsa,o.mfob,o.nlsb,o.namb,o.s,o.nd,o.nazn,o.pond,o.rowid,k.vob,k.datad,k.koka,k.kokb,o.prwo,k.kv
									   INTO   :sMFOA,:sNLSA,:sMFOB,:sNLSB,:sNAMB,:nS,:sND,:sNAZN,:sPOND,:sRowid,:nVOB,:dDADAD,:sKOKA,:sKOKB,:sPRWO,:nKV
									   FROM   klpoow o, klp k
									   WHERE  o.sab=:sSAB and o.tip='W' and o.nfia=k.naex and o.pond=k.pond and otm is null")
								Set nIndex = 0
								Call SalArraySetUpperBound(smMFOA, 1, -1)
								Call SalArraySetUpperBound(smNLSA, 1, -1)
								Call SalArraySetUpperBound(smMFOB, 1, -1)
								Call SalArraySetUpperBound(smNLSB, 1, -1)
								Call SalArraySetUpperBound(smNAMB, 1, -1)
								Call SalArraySetUpperBound(nmS, 1, -1)
								Call SalArraySetUpperBound(smND, 1, -1)
								Call SalArraySetUpperBound(smNAZN, 1, -1)
								Call SalArraySetUpperBound(smD_rec, 1, -1)
								Call SalArraySetUpperBound(smPOND, 1, -1)
								Call SalArraySetUpperBound(dmDATb1, 1, -1)
								Call SalArraySetUpperBound(dmDATb2, 1, -1)
								Call SalArraySetUpperBound(dmDATD, 1, -1)
								While SqlFetchNext(hSqlAux3(), nFetchRes)
									Set smMFOA[nIndex] = sMFOA
									Set smNLSA[nIndex] = sNLSA
									Set smMFOB[nIndex] = sMFOB
									Set smNLSB[nIndex] = sNLSB
									Set nmS[nIndex] = 0 - nS
									! Set nmVOB[nIndex] = nVOB
									! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
									Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
									Set smND[nIndex] = sND
									! Set nmKV[nIndex] = nBaseVal
									Set nmKV[nIndex] = nKV
									Set dmDADAD[nIndex] = dDADAD
									Set smNAMA[nIndex] = sNMK
									Set smNAMB[nIndex] = sNAMB
									Set smNAZN[nIndex] = sNAZN
									Set smD_rec[nIndex] = sPRWO
									Set smKOKA[nIndex] = sKOKA
									Set smKOKB[nIndex] = sKOKB
									Set smPOND[nIndex] = sPOND
									Set dmDAOP[nIndex] = dBankDate
									Set nmBis[nIndex] = 0
									Set smBis[nIndex] = ''
									Set dmDATb1[nIndex] = DATETIME_Null
									Set dmDATb2[nIndex] = DATETIME_Null
									Set dmDATOV[nIndex] = DATETIME_Null
									Set dmDATD[nIndex] = DATETIME_Null
									Set nIndex = nIndex + 1
									Call SqlPrepareAndExecute(hSqlAux(), "
											     UPDATE klpoow
											     SET    otm='1'
											     WHERE  rowid=:sRowid")
								If nIndex > 0
									Call Message('Отбор (C) для ' || sSAB || ' (возвращенные документы) ...', TRUE, TRUE, 0)
									Set nRetW = MakeC2(0, sSAB, smMFOA, smNLSA, smMFOB, smNLSB, nmS, nmVOB, smND, nmKV, dmDADAD, smNAMA, smNAMB,
											    smNAZN, smD_rec, smKOKA, smKOKB, smPOND, dmDAOP, nmBis, smBis, dmDATb1, dmDATb2, dmDATOV, dmDATD, FALSE,
											    smKOKA)
									If nRetW = 216
										Call SqlRollback(hSqlAux3())
										Call SqlPrepareAndExecute(hSqlAux(), "
												     DELETE
												     FROM   klpoow
												     WHERE  otm='1' and sab=:sSAB and tip='W' and pond is not null")
										Call SqlCommit(hSqlAux())
										Return FALSE
									Else If nRetW = 0
										Call SqlCommit(hSqlAux3())
										Call SqlPrepareAndExecute(hSqlAux(), "
												     DELETE
												     FROM   klpoow
												     WHERE  otm='1' and sab=:sSAB and tip='W' and pond is not null")
										Call SqlCommit(hSqlAux())
										Call Message('Отбор (C) для ' || sSAB || ' (возвращенные документы) Ok', TRUE, TRUE, 0)
									Else
										Call SqlRollback(hSqlAux())
										Call SqlRollback(hSqlAux3())
										Call SalWaitCursor(FALSE)
										Return FALSE
									Call Message('', FALSE, FALSE, 0)
						Set nIW = nIW + 1
					! удаление возможного мусора (сторнированные документы НЕ Клиент-Банка)
					Call SqlPrepareAndExecute(hSqlAux(), "
							     DELETE
							     FROM   klpoow
							     WHERE  otm is null and (substr(nfia,1,1) not in ('D','%') or pond is null) and tip='W'")
					Call SqlCommit(hSqlAux())
					Call Message('', FALSE, FALSE, 0)
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: ShowInputPinCodeVEGA
				Description: ввод PIN-кода VEGA
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
				Actions
					Return SalModalDialog(dlg_InputPinCodeVEGA, hWndForm)
			Function: DecryptDesign
				Description:
				Returns
					Number:
				Parameters
					String: sFilNam
					Number: nLenFilNam
					Receive String: sOutFile
					Receive Number: nSignCode
				Static Variables
				Local variables
					String: sTempKey
					String: sZagolovok
					String: sTelo90ByAd
					String: sTelo90ByAdNoCrypt
					Number: nO
					String: sIdR
					String: sId
					String: sTelo
					String: sPdp90
					String: sNm
					Number: nC
					Number: nX
					Number: nL
					String: s256
					!
					Number: nErr
					!
					Number: nI
					String: sSig
					String: sDob
					String: snIdent
					Number: nIdent
					Number: nLenBSI
					String: sBSI
					String: sIdent
					!
					Boolean: bTempKey
				Actions
					Set nO = llopen(sFilNam, 0)
					Call lllseek(nO, -73, 2)
					Set sSig = Spac(5)
					Call llread(nO, sSig, 5)
					Set sDob = Right(sSig, 1)
					Set sSig = Left(sSig, 4)
					If sSig = 'VEGA'
						Set sTempKey = Spac(68)
						Set sZagolovok = Spac(5)
						Set nLenBSI = 73
						! Set sTelo90ByAd = Spac(nLenFilNam-68-5)
						Set sTelo90ByAd = Spac(nLenFilNam-nLenBSI)
						! Set nO = llopen(sFilNam, 0)
						Call lllseek(nO, 0, 0)
						! Call llread(nO, sTelo90ByAd, nLenFilNam-68-5)
						Call llread(nO, sTelo90ByAd, nLenFilNam-nLenBSI)
						Call llread(nO, sZagolovok, 5)
						Call llread(nO, sTempKey, 68)
						! Call llclose(nO)
						! Set sIdR = Spac(8)
						! Set sId = Spac(8)
						! Set sId = Left(GetOffset(sTempKey, 12), 8)
						! Set sIdR = Left(GetOffset(sTempKey, 20), 8)
						! Set nErr = VegaDecryptStart(sTempKey, 0, 0)
						! If nErr != 0
							             Call Message('DecryptDesign: function VegaDecryptStart error, код = ' || Str(nErr), TRUE, TRUE, COLOR_Salmon)
							            Return nErr
						! Call VegaDecryptStep(sTelo90ByAd, nLenFilNam-68-5, 0, 0)
						! Set sTelo90ByAdNoCrypt = Spac(nLenFilNam-68-5)
						! Set sTelo90ByAdNoCrypt = Spac(nLenFilNam-nLenBSI)
						! Set nX = nLenFilNam-68-5
						! Set nX = nLenFilNam-nLenBSI
						! Set nI = 0
						! While nX > 0
							                 Set nL = Min(256, nX)
							                 Set s256 = Spac(nL)
							                 Call InsertBuf(s256, 0, sTelo90ByAd, nI*256, nL)
							                 Call VegaDecryptStep(s256, nL, 0, 0)
							                 Call InsertBuf(sTelo90ByAdNoCrypt, nI*256, s256, 0, nL)
							                 Set nX = nX - 256
							                 Set nI = nI + 1
						! Call SalStrSetBufferLength(sTelo, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
						! Call SalStrSetBufferLength(sTelo, nLenFilNam-nLenBSI-90-Val(sDob))
						! Set sTelo = Spac(nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
						! Set sTelo = Spac(nLenFilNam-nLenBSI-90-Val(sDob))
						! Call InsertBuf(sTelo, 0, sTelo90ByAd, 0, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
						! Call InsertBuf(sTelo, 0, sTelo90ByAdNoCrypt, 0, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
						! Call InsertBuf(sTelo, 0, sTelo90ByAdNoCrypt, 0, nLenFilNam-nLenBSI-90-Val(sDob))
						! Set sPdp90 = Spac(90)
						! Call InsertBuf(sPdp90, 0, sTelo90ByAd, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)), 90)
						! Call InsertBuf(sPdp90, 0, sTelo90ByAdNoCrypt, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)), 90)
						! Call InsertBuf(sPdp90, 0, sTelo90ByAdNoCrypt, nLenFilNam-nLenBSI-90-Val(sDob), 90)
						! Set sNm = Spac(40)
						! Call Debug('sTelo = ' || sTelo)
						! Call VegaStart(0, 0)
						! Call VegaStep(sTelo, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)), 0, 0)
						! Call VegaStep(sTelo, nLenFilNam-nLenBSI-90-Val(sDob), 0, 0)
						! Set nX = nLenFilNam-68-5-90-Val(Right(sZagolovok, 1))
						! While nX > 0
							                 Set nL = Min(256, nX)
							                 Set s256 = Spac(nL)
							                 Call InsertBuf(s256, 0, sTelo, nI*256, nL)
							                 Call VegaStep(s256, nL, 0, 0)
							                 Set nX = nX - 256
							                 Set nI = nI + 1
						! Set nSignCode = VegaCheckGet(sPdp90, sIdR, sId, sNm, 0, 0)
						! If nSignCode = 0
							                 Set sOutFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
									    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
									    SalDateCurrent())), 3)
							                 Set nC = llcreat(sOutFile, 0)
							! Call llwrite(nC, sTelo, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
							                 Call llwrite(nC, sTelo, nLenFilNam-nLenBSI-90-Val(sDob))
							                 Call llclose(nC)
						! Return 0
					Else ! 'VEG2'
						Call lllseek(nO, -75, 2)
						Set snIdent = '  '
						Call llread(nO, snIdent, 2)
						Set nIdent = Val(snIdent)
						Set nLenBSI = nIdent*76+7
						Set sBSI = Spac(nLenBSI)
						Call lllseek(nO, -nLenBSI, 2)
						Call llread(nO, sBSI, nLenBSI)
						Set nI = 0
						Set bTempKey = FALSE
						While nI < nIdent
							Set sIdent = Spac(8)
							Call InsertBuf(sIdent, 0, sBSI, nI*76, 8)
							If sIdent = sIdVega
								Set sTempKey = Spac(68)
								Call InsertBuf(sTempKey, 0, sBSI, nI*76+8+IifN(nIdent=nI+1, 7, 0), 68)
								Set bTempKey = TRUE
								Break
							Set nI = nI + 1
						If not bTempKey
							Call llclose(nO)
							Call Message('DecryptDesign: не найден сеансовый ключ для ' || sIdVega, TRUE, TRUE, COLOR_Salmon)
							Return -1
						!
						Call lllseek(nO, 0, 0)
						Set sTelo90ByAd = Spac(nLenFilNam-nLenBSI)
						Call llread(nO, sTelo90ByAd, nLenFilNam-nLenBSI)
					! общая часть для VEGA и VEG2
					Call llclose(nO)
					Set sIdR = Spac(8)
					Set sId = Spac(8)
					Set sId = Left(GetOffset(sTempKey, 12), 8)
					Set sIdR = Left(GetOffset(sTempKey, 20), 8)
					! Set nErr = VegaDecryptStart(sTempKey, 0, 0)
					Set nErr = VegaDecryptStart(sTempKey, nNull, nNull)
					If nErr != 0
						Call Message('DecryptDesign: ошибка VegaDecryptStart, код = ' || Str(nErr), TRUE, TRUE, COLOR_Salmon)
						Return nErr
					! Call VegaDecryptStep(sTelo90ByAd, nLenFilNam-68-5, 0, 0)
					! Set sTelo90ByAdNoCrypt = Spac(nLenFilNam-68-5)
					Set sTelo90ByAdNoCrypt = Spac(nLenFilNam-nLenBSI)
					! Set nX = nLenFilNam-68-5
					Set nX = nLenFilNam-nLenBSI
					Set nI = 0
					While nX > 0
						Set nL = Min(256, nX)
						Set s256 = Spac(nL)
						Call InsertBuf(s256, 0, sTelo90ByAd, nI*256, nL)
						! Call VegaDecryptStep(s256, nL, 0, 0)
						Call VegaDecryptStep(s256, nL, nNull, nNull)
						Call InsertBuf(sTelo90ByAdNoCrypt, nI*256, s256, 0, nL)
						Set nX = nX - 256
						Set nI = nI + 1
					! Call SalStrSetBufferLength(sTelo, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
					! Call SalStrSetBufferLength(sTelo, nLenFilNam-nLenBSI-90-Val(sDob))
					! Set sTelo = Spac(nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
					Set sTelo = Spac(nLenFilNam-nLenBSI-90-Val(sDob))
					! Call InsertBuf(sTelo, 0, sTelo90ByAd, 0, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
					! Call InsertBuf(sTelo, 0, sTelo90ByAdNoCrypt, 0, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
					Call InsertBuf(sTelo, 0, sTelo90ByAdNoCrypt, 0, nLenFilNam-nLenBSI-90-Val(sDob))
					Set sPdp90 = Spac(90)
					! Call InsertBuf(sPdp90, 0, sTelo90ByAd, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)), 90)
					! Call InsertBuf(sPdp90, 0, sTelo90ByAdNoCrypt, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)), 90)
					Call InsertBuf(sPdp90, 0, sTelo90ByAdNoCrypt, nLenFilNam-nLenBSI-90-Val(sDob), 90)
					Set sNm = Spac(40)
					! Call Debug('sTelo = ' || sTelo)
					! Call VegaStart(0, 0)
					Call VegaStart(nNull, nNull)
					! Call VegaStep(sTelo, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)), 0, 0)
					! Call VegaStep(sTelo, nLenFilNam-nLenBSI-90-Val(sDob), 0, 0)
					Call VegaStep(sTelo, nLenFilNam-nLenBSI-90-Val(sDob), nNull, nNull)
					! Set nX = nLenFilNam-68-5-90-Val(Right(sZagolovok, 1))
					! While nX > 0
						                 Set nL = Min(256, nX)
						                 Set s256 = Spac(nL)
						                 Call InsertBuf(s256, 0, sTelo, nI*256, nL)
						                 Call VegaStep(s256, nL, 0, 0)
						                 Set nX = nX - 256
						                 Set nI = nI + 1
					! Set nSignCode = VegaCheckGet(sPdp90, sIdR, sId, sNm, 0, 0)
					Set nSignCode = VegaCheckGet(sPdp90, sIdR, sId, sNm, nNull, nNull)
					If nSignCode = 0
						Set sOutFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
								    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
								    SalDateCurrent())), 3)
						Set nC = llcreat(sOutFile, 0)
						! Call llwrite(nC, sTelo, nLenFilNam-68-5-90-Val(Right(sZagolovok, 1)))
						Call llwrite(nC, sTelo, nLenFilNam-nLenBSI-90-Val(sDob))
						Call llclose(nC)
					Return 0
			Function: FileSignCrypt
				Description: криптование файла,
						параметры: хандлер файла,
						           полное имя временного файла,
						           12 байт реального имени результирующего файла
				Returns
					Number:
				Parameters
					Number: nH
					String: sFname
					String: sKod12
				Static Variables
				Local variables
					Number: nLen
					Number: nDob
					String: sBuf
					! String: sBufCrypt
					String: sTempSign
					String: sIdR
					String: sDob
					String: sBuf8
					String: sBuf8Crypt
					String: sTempKey
					Number: nO
					Number: nRet
					Number: nX
					Number: nL
					String: s256
					!
					String: sVers
					String: sSab
					String: sAllIdent
					String: sTmp
					Number: nIdent
					String: sBSI
					String: sIdent
					String: sSig
					String: snIdent
					Number: nI
				Actions
					Set sSab = Subs(sKod12, 8, 1) || Right(sKod12, 3)
					Set sVers = smVERS[VisArrayFindString(smSAB, sSab)]
					!
					Set nLen = lllseek(nH, 0, 2)
					Call lllseek(nH, 0, 0)
					Set sBuf = Spac(nLen)
					Call llread(nH, sBuf, nLen)
					! Call VegaStart(0, 0)
					Call VegaStart(nNull, nNull)
					! Call VegaStep(sBuf, nLen, 0, 0)
					! Set sBufCrypt = Spac(nLen)
					Set nX = nLen
					Set nI = 0
					While nX > 0
						Set nL = Min(256, nX)
						Set s256 = Spac(nL)
						Call InsertBuf(s256, 0, sBuf, nI*256, nL)
						! Call VegaStep(s256, nL, 0, 0)
						Call VegaStep(s256, nL, nNull, nNull)
						! Call InsertBuf(sBufCrypt, nI*256, s256, 0, nL)
						Set nX = nX - 256
						Set nI = nI + 1
					Set sTempSign = Spac(90)
					! Call Debug(Subs(sKod12, 8, 1) || Right(sKod12, 3))
					! Call Debug(smSab[0])
					! Call Debug(smIds[0])
					! Call DebugN(VisArrayFindString(smSab, Subs(sKod12, 8, 1) || Right(sKod12, 3)))
					Set sIdR = Left(SalStrTrimX(smIds[VisArrayFindString(smSab, Subs(sKod12, 8, 1) || Right(sKod12, 3))]), 8)
					! Call Debug('sIdR(1) = ' || sIdR)
					! Call Debug('sIdVega = ' || sIdVega)
					! Set nRet = VegaEnsignGet(sTempSign, sIdR, sIdVega, 0, 0)
					! Set nRet = VegaEnsignGet(sTempSign, '', sIdVega, 0, 0)
					Set nRet = VegaEnsignGet(sTempSign, '', sIdVega, nNull, nNull)
					If nRet != 0
						Call Message('Ошибка получения подписи для файла ' || sKod12, TRUE, TRUE, COLOR_Salmon)
						Return nRet
					Set nDob = 8 - Mod(nLen+90, 8)
					Set sDob = Str(nDob)
					Set sBuf8 = Spac(nLen+90+nDob)
					! Call Debug('pered InsertBuf')
					Call InsertBuf(sBuf8, 0, sBuf, 0, nLen)
					Call InsertBuf(sBuf8, nLen, sTempSign, 0, 90)
					Call InsertBuf(sBuf8, nLen+90, sDob, 0, nDob)
					! Call Debug('posle InsertBuf')
					! Call VegaCryptStart(0, 0)
					Call VegaCryptStart(nNull, nNull)
					! Call Debug('posle VegaCryptStart')
					! Call Debug('nLen+90+nDob = ' || Str(nLen+90+nDob))
					! Call VegaCryptStep(sBuf8, nLen+90+nDob, 0, 0)
					Set sBuf8Crypt = Spac(nLen+90+nDob)
					Set nX = nLen+90+nDob
					Set nI = 0
					While nX > 0
						Set nL = Min(256, nX)
						Set s256 = Spac(nL)
						Call InsertBuf(s256, 0, sBuf8, nI*256, nL)
						! Call VegaCryptStep(s256, nL, 0, 0)
						Call VegaCryptStep(s256, nL, nNull, nNull)
						Call InsertBuf(sBuf8Crypt, nI*256, s256, 0, nL)
						Set nX = nX - 256
						Set nI = nI + 1
					! Call Debug('posle VegaCryptStep')
					If Left(sVers, 4) >= '1.63'
						! вычитываем ВСЕ идентификаторы получателей (ids,idb,idd,ido)
						Set sAllIdent = ''
						Set sTmp = VisStrSubstitute(VisStrSubstitute(SalStrTrimX(smIds[VisArrayFindString(smSab, sSab)]), ',', ''), ' ', '') ||
								    VisStrSubstitute(VisStrSubstitute(SalStrTrimX(smIdb[VisArrayFindString(smSab, sSab)]), ',', ''), ' ', '') ||
								    VisStrSubstitute(VisStrSubstitute(SalStrTrimX(smIdd[VisArrayFindString(smSab, sSab)]), ',', ''), ' ', '') ||
								    VisStrSubstitute(VisStrSubstitute(SalStrTrimX(smIdo[VisArrayFindString(smSab, sSab)]), ',', ''), ' ', '')
						While Len(sTmp) >= 8
							If At(Left(sTmp, 8), sAllIdent) = 0
								Set sAllIdent = sAllIdent || Left(sTmp, 8)
							Set sTmp = Right(sTmp, Len(sTmp)-8)
						Set nIdent = Len(sAllIdent) / 8
						Set snIdent = Right(Str(nIdent+100), 2)
						Set sBSI = Spac(76*nIdent+7)
						Set sSig = 'VEG2'
						Set nI = 1 ! порядковый номер идентификатора получателя
						! Call Debug('sAllIdent=' || sAllIdent)
						While Len(sAllIdent) >= 8
							Set sTempKey = Spac(68)
							Set sIdent = Left(sAllIdent, 8)
							! Set nRet = VegaGetTempKey(sTempKey, sIdent, sIdVega, 0, 0)
							Set nRet = VegaGetTempKey(sTempKey, sIdent, sIdVega, nNull, nNull)
							If nRet != 0
								Call Message('Ошибка (код=' ||  Str(nRet) || ') получения сеансового ключа для ' || sIdent, TRUE, TRUE, COLOR_Salmon)
								Return nRet
							If nIdent = 1
								! один идентификатор получателя
								Call InsertBuf(sBSI, 0, sIdent, 0, 8)
								Call InsertBuf(sBSI, 8, snIdent, 0, 2)
								Call InsertBuf(sBSI, 10, sSig, 0, 4)
								Call InsertBuf(sBSI, 14, sDob, 0, 1)
								Call InsertBuf(sBSI, 15, sTempKey, 0, 68)
							Else
								Call InsertBuf(sBSI, (nI-1)*76, sIdent, 0, 8)
								! больше одного идентификатора получателя
								If Len(sAllIdent) = 8 ! последний идентификатор
									Call InsertBuf(sBSI, (nI-1)*76+8, snIdent, 0, 2)
									Call InsertBuf(sBSI, (nI-1)*76+10, sSig, 0, 4)
									Call InsertBuf(sBSI, (nI-1)*76+14, sDob, 0, 1)
									Call InsertBuf(sBSI, (nI-1)*76+15, sTempKey, 0, 68)
								Else
									Call InsertBuf(sBSI, (nI-1)*76+8, sTempKey, 0, 68)
							Set sAllIdent = Subs(sAllIdent, 9, Len(sAllIdent)-8)
							Set nI = nI + 1
						Set nO = llcreat(sFname, 0)
						If nO < 0
							Call Message('Ошибка(2) создания файла - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return nO
						If llwrite(nO, sBuf8Crypt, nLen+90+nDob) != nLen+90+nDob
							Call llclose(nO)
							Call Message('Ошибка(4) записи в файл - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return -90
						If llwrite(nO, sBSI, 76*nIdent+7) != 76*nIdent+7
							Call llclose(nO)
							Call Message('Ошибка(5) записи в файл - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return -76
						Call llclose(nO)
					Else
						Set sTempKey = Spac(68)
						! Call Debug('sIdR(2) = ' || sIdR)
						! Call Debug('sIdVega = ' || sIdVega)
						! Set nRet = VegaGetTempKey(sTempKey, sIdR, sIdVega, 0, 0)
						Set nRet = VegaGetTempKey(sTempKey, sIdR, sIdVega, nNull, nNull)
						If nRet != 0
							Call Message('Ошибка (код=' ||  Str(nRet) || ') получения сеансового ключа для ' || sIdR, TRUE, TRUE, COLOR_Salmon)
							Return nRet
						Set nO = llcreat(sFname, 0)
						If nO < 0
							Call Message('Ошибка(1) создания файла - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return nO
						If llwrite(nO, sBuf8Crypt, nLen+90+nDob) != nLen+90+nDob
							Call llclose(nO)
							Call Message('Ошибка(1) записи в файл - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return -90
						If llwrite(nO, 'VEGA' || Str(nDob), 5) != 5
							Call llclose(nO)
							Call Message('Ошибка(2) записи в файл - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return -5
						If llwrite(nO, sTempKey, 68) != 68
							Call llclose(nO)
							Call Message('Ошибка(3) записи в файл - ' || sFname, TRUE, TRUE, COLOR_Salmon)
							Return -68
						Call llclose(nO)
					Return 0
			Function: ObrPismo
				Description: обработка входной информации КЛИЕНТ-БАНК
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					Number: nI
					Number: nС
					Number: nNf
					String: sKwoKomponen
					String: sLenNameKomponen
					String: sNaimKomponen
					String: sSizeKomponen9
					! String: sSoderjanie
					String: sTeloPisma
					String: sTempFile
					Number: nErrorSign
					Number: nLenPismo
					! String: sLenFileNamePisma
					! String: sFileNamePisma
					! String: sSizePisma2
					! String: sTeloZagol
					!
					String: smName[*]
					String: smLenT[*]
					Long String: smTelo[*]
					Number: nP
					Long String: sTeloKomponen
					Number: nF
					String: sTemaPisma
					String: sFileOut
					String: sTmp
					Boolean: bFl
					Number: nRet
					Number: nValue
					Number: nCode
				Actions
					Call SalWaitCursor(TRUE)
					Call SalArraySetUpperBound(sMass, 1, -1)
					Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '~C' || ddd(dBankDate) || '???.???',
							    FA_Standard, sMass)
					If nCount > 0
						Call Message('Обработка входных файлов ~', TRUE, TRUE, 0)
					Else
						Call SalWaitCursor(FALSE)
						Return FALSE
					Set nI = 0
					While nI <= nKLI
						Set sSAB = smSAB[nI]
						Set nRNK = nmRNK[nI]
						Set sNMK = smNMK[nI]
						Set sOKPO = smOKPO[nI]
						Set sTIMES = smTIMES[nI]
						Call SalArraySetUpperBound(sMass, 1, -1)
						Set nCount = VisDosEnumFiles(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || '~C' || ddd(dBankDate) || '??' ||
								    Left(sSAB, 1) || '.' || Right(sSAB, 3), FA_Standard, sMass)
						If nCount > 0 ! Обработка входных файлов
							! Call Message('Обработка входных файлов ~', TRUE, TRUE, 0)
							Set nNf = 0
							While nNf < nCount
								If VisDosExist(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									If sVegaSignOn = '2'
										Call VisDosEnumFileInfo(sDiskKataINS || sMass[nNf], FA_Standard, smFiles, nmSizes, dmDateTimes, nmAttributes)
										Set nCode = DecryptDesign(sDiskKataINS || sMass[nNf], nmSizes[0], sTempFile, nErrorSign)
										If nCode != 0
											Set nErrorSign = nCode
									Else
										Set sTempFile = sTempPath || ddd(SalDateCurrent()) || Right(Str(Int(100000+SalDateHour(SalDateCurrent())*3600+
												    SalDateMinute(SalDateCurrent())*60+SalDateSecond(SalDateCurrent()))), 5) || '.' || Right(Str(SalDateYear(
												    SalDateCurrent())), 3)
										Set nErrorSign = SalFileCopy(sDiskKataIN || sMass[nNf], sTempFile, TRUE)
									If nErrorSign = 0 ! расшифрован и проверена подпись
										Call Message('Поступило письмо от ' || sSAB || ' ...', TRUE, TRUE, COLOR_LightGreen)
										Call SalMessageBeep(-1)
										Call PlaySound('pismo.wav', 1, 1)
										Call SalWaitCursor(FALSE)
										Call MessageNoWait('Поступило письмо от ' || sSAB || ' ...', 'ВНИМАНИЕ!!!', 5, 1)
										Call SalWaitCursor(TRUE)
										Set nC = llopen(sTempFile, 0)
										Set nLenPismo = lllseek(nC, 0, 2)
										Call lllseek(nC, 0, 0)
										Set sKwoKomponen = '   '
										Call llread(nC, sKwoKomponen, 3)                        ! количество компонентов письма (3 байта)
										Set nP = 1
										While nP <= Val(sKwoKomponen)
											Call llread(nC, sLenNameKomponen, 3)                  ! длина наименования (3 байта)
											Set sNaimKomponen = Spac(Val(sLenNameKomponen))
											Call llread(nC, sNaimKomponen, Val(sLenNameKomponen)) ! наименование компонента (x байт)
											Set sSizeKomponen9 = Spac(9)
											Call llread(nC, sSizeKomponen9, 9)                    ! размер компонента (9 байт)
											Set smName[nP] = sNaimKomponen
											Set smLenT[nP] = sSizeKomponen9
											Set nP = nP + 1
										! чтение собственно тел писем
										Set nP = 1
										While nP <= Val(sKwoKomponen)
											Set sTeloKomponen = Spac(Val(smLenT[nP]))
											Call llread(nC, sTeloKomponen, Val(smLenT[nP]))       ! размер компонента (9 байт)
											Set smTelo[nP] = sTeloKomponen
											Set nP = nP + 1
										! запись писем в файлы
										Set nP = 1
										Set sTemaPisma = ''
										Set nValue = 0
										Set bFl = FALSE
										While nP <= Val(sKwoKomponen)
											If nP = 1 ! содержание письма
												Set sTemaPisma = StrDosToWinX(smTelo[nP])
												! Call Debug('sTemaPisma=' || sTemaPisma)
												If sTemaPisma = '\\.Документообіг - Заява на купівлю валюти./'
													Set nValue = 1
												Else
													If sTemaPisma = '\\.Документообіг - Заява на продаж валюти./'
														Set nValue = 2
													Else
														If sTemaPisma = '\\.Документообіг - Заява на конверсію валюти./'
															Set nValue = 3
														Else
															If sTemaPisma = '\\.Документообіг - SWІFT./'
																Set nValue = 4
															Else
																If sTemaPisma = '\\.Документообіг - Заява на відміну заяви./'
																	Set nValue = 5
											Else
												! Call Debug('0.nP='     || Str(nP))
												! Call Debug('0.nValue=' || Str(nValue))
												!
												If nValue != 0 ! валютный документ
													! записать тело в CLOB
													Set sTmp = sMass[nNf]
													If SqlPrepareAndExecute(hSql(),  "
															   DELETE
															   FROM   tmp_klp_clob") and SqlCommit(hSql())
														If SqlPrepareAndExecute(hSql(),  "
																   INSERT
																   INTO   tmp_klp_clob (namef)
																   VALUES (:sTmp)")
															! Call Debug('smTelo[nP]=' || smTelo[nP])
															If PutStringToClob(hSql(), sBeg || smTelo[nP] || sEnd, 'tmp_klp_clob', 'namef', 'c', NUMBER_Null,
																	   sTmp, STRING_Null, 0)
																! Call Debug(sTmp)
																! Call SqlPrepareAndExecute(hSql(), 'SELECT namef into :sTmp from tmp_klp_clob')
																! Call SqlFetchNext(hSql(), nFetchRes)
																Set nRet = 0
																If SqlPLSQLCommand(hSql(), "p_klpval(nValue,nRet)")
																	If nRet = 0
																		Call SqlCommit(hSql())
																		Set bFl = TRUE
																	Else
																		! Call Debug('No')
																		Call SqlRollback(hSql())
																		Set bFl = FALSE
																Else
																	Call SqlRollback(hSql())
																	Set bFl = FALSE
															Else
																Call SqlRollback(hSql())
																Set bFl = FALSE
														Else
															Call SqlRollback(hSql())
															Set bFl = FALSE
													Set nP = 999
													! Select Case nValue
														                                                                                                        Case 1 ! Заява на купівлю валюти
														                                                                                                        Case 2 ! Заява на продаж валюти
														                                                                                                        Case 3 ! Заява на конверсію валюти
														                                                                                                        Case 4 ! SWІFT
														                                                                                                        Case 5 ! Документообіг - Заява на відміну заяви
												Else
													! сохранить компонент в файл
													Call SalFileCreateDirectory(sDiskKataLETTER || sSAB || '\\' ||
															     SalFmtFormatDateTime(dBankDate, 'yyyyMMdd'))
													Set sFileOut = sDiskKataLETTER || sSAB || '\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
															    || smName[nP]
													Set nF = llcreat(sFileOut, 0)
													Call llwrite(nF, smTelo[nP], Val(smLenT[nP]))
													Call llclose(nF)
													Call Message('Принят файл (' || smName[nP] || ') от ' || sSAB || ' (' || sNMK || ')', TRUE, TRUE, 0)
											!
											! Call Debug('Z.nP='     || Str(nP))
											! Call Debug('Z.nValue=' || Str(nValue))
											Set nP = nP + 1
											If nP > Val(sKwoKomponen)
												! создать квитанцию
												! Call Debug('mi tyt')
												Call llclose(nC)
												If nValue != 0
													Call Message('Принят валютный документ от ' || sSAB || ' - ' || sTemaPisma, TRUE, TRUE, 0)
												! Call Debug('do MakeB')
												Call MakeB(sSAB, StrWinToDosX(IifS(nValue!=0, Left(sTemaPisma, 18) || 'квітанція на файл ' || sMass[nNf]
														     || '. Код ' || IifS(bFl, '0000', '9999') || './', sTemaPisma)))
												Call Message('Сформирована квитанция ~B на файл ' || sMass[nNf] || ' Ok', TRUE, TRUE, 0)
												! Call Debug('posle MakeB')
										!
										Set syyyyMMddPath = sArchPath || 'ADR\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(sTempFile, syyyyMMddPath || sMass[nNf], TRUE)
										Call VisFileDelete(sTempFile)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
									Else
										Call Message('Ошибка (код=' || Str(nErrorSign) || ') ' || IifS(sVegaSignOn='2', 'проверки подписи',
												     'копирования') || ' при обработке ' || sMass[nNf], TRUE, TRUE, COLOR_Salmon)
										Set syyyyMMddPath = sArchPath || 'NOT\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
										Call SalFileCreateDirectory(syyyyMMddPath)
										Call SalFileCopy(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf], syyyyMMddPath || sMass[nNf],
												     TRUE)
										Call VisFileDelete(IifS(sVegaSignOn='2', sDiskKataINS, sDiskKataIN) || sMass[nNf])
								Set nNf = nNf + 1
							Call SalSetWindowText(ml1, '')
						Set nI = nI + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: OtborLS
				Description: отбор ЛС "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					Number: nRNK
					String: sNMK
					Number: nFetchRes
					Number: nIndex
					Date/Time: dBaDa
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOA
					String: smOKPOA[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Number: nDOS
					Number: nmDOS[*]
					Number: nKOS
					Number: nmKOS[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					Date/Time: dPDAT
					Date/Time: dmPDAT[*]
					String: sNAZN
					String: smNAZN[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					!
					String: sOpenDay
					!
					Number: nUid
					Number: nKwo
					Boolean: bOk
					Number: nVal
					Number: nPosKwoBis
					String: sTempBis
					Number: nB
					Number: nRec
					Number: nLoop
					!
					Date/Time: dDATD
					!
					String: sYearBaDa
					!
					Number: nIL
				Actions
					Call SalWaitCursor(TRUE)
					! Set dBaDa = GetBankDate()
					Set dBaDa = GetParamBankDate()
					Set sYearBaDa = Str(SalDateYear(dBaDa))
					! Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
					Set sOpenDay = '0' ! как бы день закрыт
					Set nIL = 0
					While nIL <= nKLI
						Set sSAB = smSAB[nIL]
						Set nRNK = nmRNK[nIL]
						Set sNMK = smNMK[nIL]
						Set sOKPO = smOKPO[nIL]
						Set sTIMES = smTIMES[nIL]
						Set nUid = GetUserId()
						Set nVal = GetBaseVal()
						If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dBaDa,dBaDa,sSAB,nVal,'%','Z')")
							Call SqlCommit(hSql())
							Call SqlPrepareAndExecute(hSql(), "
									     SELECT count(*)
									     FROM   tmp_lics
									     INTO   :nKwo
									     WHERE  id=:nUid")
							Call SqlFetchNext(hSql(), nFetchRes)
							Set bOk = nKwo>0
						Else
							Call SqlRollback(hSql())
							Set bOk = FALSE
						If bOk and SqlPrepareAndExecute(hSql(), "
								   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
								          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,ref,okpoz
								   INTO   :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,
								          :nKOS,:dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nRec,
								          :dDATD,:dDATb1,:dDATb2,:dDATOV,:dDATbis,:nRef,:sOKPOZ
								   FROM   tmp_lics
								   WHERE  id=:nUid
								   ORDER BY nlsa,kv,dk,s")
							Set sMFOA = GetBankMfo()
							Set nIndex = 0
							Call SalArraySetUpperBound(smMFOA, 1, -1)
							Call SalArraySetUpperBound(smNLSA, 1, -1)
							Call SalArraySetUpperBound(smNAMA, 1, -1)
							Call SalArraySetUpperBound(smMFOB, 1, -1)
							Call SalArraySetUpperBound(smNLSB, 1, -1)
							Call SalArraySetUpperBound(smNAMB, 1, -1)
							Call SalArraySetUpperBound(smOKPOA, 1, -1)
							Call SalArraySetUpperBound(smOKPOZ, 1, -1)
							Call SalArraySetUpperBound(smOKPOB, 1, -1)
							Call SalArraySetUpperBound(nmDK, 1, -1)
							Call SalArraySetUpperBound(nmS, 1, -1)
							Call SalArraySetUpperBound(nmVOB, 1, -1)
							Call SalArraySetUpperBound(smND, 1, -1)
							Call SalArraySetUpperBound(nmISP, 1, -1)
							Call SalArraySetUpperBound(nmKV, 1, -1)
							Call SalArraySetUpperBound(dmDAOP, 1, -1)
							Call SalArraySetUpperBound(nmIOST, 1, -1)
							Call SalArraySetUpperBound(nmDOS, 1, -1)
							Call SalArraySetUpperBound(nmKOS, 1, -1)
							Call SalArraySetUpperBound(dmDAPP, 1, -1)
							Call SalArraySetUpperBound(dmPDAT, 1, -1)
							Call SalArraySetUpperBound(dmDATD, 1, -1)
							Call SalArraySetUpperBound(smNAZN, 1, -1)
							Call SalArraySetUpperBound(smPOND, 1, -1)
							Call SalArraySetUpperBound(nmSK, 1, -1)
							Call SalArraySetUpperBound(smNameFileA, 1, -1)
							Call SalArraySetUpperBound(nmBis, 1, -1)
							Call SalArraySetUpperBound(smBis, 1, -1)
							Call SalArraySetUpperBound(dmDATb1, 1, -1)
							Call SalArraySetUpperBound(dmDATb2, 1, -1)
							Call SalArraySetUpperBound(dmDATOV, 1, -1)
							While SqlFetchNext(hSql(), nFetchRes)
								Set smMFOA[nIndex] = sMFOA
								Set smNLSA[nIndex] = sNLSA
								Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
								Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
								Set smNLSB[nIndex] = sNLSB
								Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
								Set smOKPOA[nIndex] = sOKPOA
								Set smOKPOZ[nIndex] = sOKPOZ
								Set smOKPOB[nIndex] = sOKPOB
								Set nmDK[nIndex] = nDK
								Set nmS[nIndex] = nS
								! Set nmVOB[nIndex] = nVOB
								! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
								Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
								Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
								Set nmISP[nIndex] = nISP
								Set nmKV[nIndex] = nKV
								Set dmDAOP[nIndex] = dDAOP
								Set nmIOST[nIndex] = nIOST
								Set nmDOS[nIndex] = nDOS
								Set nmKOS[nIndex] = nKOS
								Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
								Set dmDATD[nIndex] = dDATD
								Set dmDAPP[nIndex] = dDAPP
								Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
								Set sD_rec = StrDosToWinX(sD_rec)
								Set smD_rec[nIndex] = sD_rec
								If nBis = NUMBER_Null or nBis = 0
									Set nmBis[nIndex] = 0
									Set smBis[nIndex] = ''
								If sNazns = '00'
									Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM   s_np
											    WHERE  k_np='" || sNaznk || "'"))
								If nBis > 0
									Set nPosKwoBis = SalStrScan(sD_rec, '#B')
									! внешние бисы
									If nPosKwoBis >= 0
										Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
										Set nB = SalStrScan(sTempBis, '#')
										Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
										Set sSQL = "SELECT nazn,d_rec
												            INTO   :sNaznBis,:sD_recBis
												            FROM   arc_rrp
												            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
												            ORDER BY rec_a,bis"
									! внутрение бисы
									Else
										Set nmBis[nIndex] = nBis
										Set sSQL = "
												    SELECT '#C'||value||'#','' as d_recbis
												    INTO   :sNaznBis,:sD_recBis
												    FROM   operw
												    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
												    ORDER BY tag"
									!
									Set nLoop = nmBis[nIndex]
									Set smBis[nIndex] = ''
									Set nmBis[nIndex] = 0
									Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
									While SqlFetchNext(hSqlAux3(), nFetchRes)
										If nLoop > 0
											Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
											Set nLenOdinBis = Len(sOdinBis)
											! ! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
											Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
											Set nmBis[nIndex] = nmBis[nIndex] + 1
											Set nLoop = nLoop - 1
									! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									If nmBis[nIndex] > 0
										If Len(smBis[nIndex]) = 0
											Set nmBis[nIndex] = 0
										Else
											Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									Else
										Set smBis[nIndex] = ''
								Set smPOND[nIndex] = sPOND
								Set nmSK[nIndex] = nSK
								Set smNameFileA[nIndex] = sNameFileA
								Set dmDATb1[nIndex] = dDATb1
								Set dmDATb2[nIndex] = dDATb2
								Set dmDATOV[nIndex] = dDATOV
								Set nIndex = nIndex + 1
							If nIndex > 0
								Call Message('Отбор выписки для клиента ' || sSAB || ' (' || sNMK || ') ...', TRUE, TRUE, 0)
								If MakeZ(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOA, smOKPOB, nmDK, nmS, nmVOB,
										   smND, nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK, smNameFileA,
										   nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
									Call Message('Отбор выписки для клиента ' || sSAB || ' (' || sNMK || ') Ok', TRUE, TRUE, 0)
						If cbK ! nKursi = 1
							Call Message('Отбор курсов валют для клиента ' || sSAB || ' (' || sNMK || ') ...', TRUE, TRUE, 0)
							If MakeK2(sSAB)
								Call Message('Отбор курсов валют для клиента ' || sSAB || ' (' || sNMK || ') Ok', TRUE, TRUE, 0)
							Else
								Call Message('Отбор курсов валют для клиента ' || sSAB || ' (' || sNMK || ') - курсы отсутствуют', TRUE, TRUE,
										     COLOR_Yellow)
						Set nIL = nIL + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: MakeK2
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Number: nKV
					Number: nBSUM
					Date/Time: dVDATE
					Number: nRATE_O
					Boolean: bFl
					String: sFile
					! File Handle: hF
					Boolean: b1
					String: sString
					String: s16t
					Number: nBaseVal
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set nBaseVal = GetBaseVal()
					Set b1 = SqlPLSQLCommand(hSql(), 'val_ku(dBankDate, nBaseVal)')
					If b1
						Call SqlCommit(hSql())
						Set bFl = TRUE
						Call SqlPrepareAndExecute(hSql(), "
								     SELECT kv,bsum,vdate1,rateo1
								     INTO   :nKV,:nBSUM,:dVDATE,:nRATE_O
								     FROM   tmp_valk
								     ORDER BY 1")
						While SqlFetchNext(hSql(), nFetchRes)
							If bFl
								Set bFl = FALSE
								Set sFile = sTempPath || 'K' || ddd(dBankDate) || Suffix(sSab, 'K') || Left(sSab, 1) || '.' || Right(sSab, 3)
								If File(sFile)
									Call VisFileDelete(sFile)
								! Call VisFileOpen(hF, sFile, OF_Create)
								Set nF = llcreat(sFile, 0)
								If nF < 0
									Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
									Return FALSE
							Set s16t = PadL(SalNumberToStrX(nRATE_O/nBSUM, 8), 16)
							Set sString = PadL(Str(nKV), 3) || SalFmtFormatDateTime(dVDATE, 'yyyyMMdd') || Left(s16t, 7) || '.' ||
									    Right(s16t, 8) || PutCrLf()
							! Call VisFileWrite(hF, sString, Len(sString))
							Call llwrite(nF, sString, Len(sString))
						! Call SqlCommit(hSqlAux2())
						If not bFl
							If sVegaSignOn = '2'
								Set dDateCurrent = SalDateCurrent()
								Set sTempCrypt = sTempPath || 'K' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
										    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
										    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
										    SalDateSecond(dDateCurrent)+100), 2)
								If FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
									Call llclose(nF)
									Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
									Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
									Call SalFileCreateDirectory(syyyyMMddPath)
									Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
									Call VisFileDelete(sTempCrypt)
									Call VisFileDelete(sFile)
									Call SqlCommit(hSqlAux2())
									Return TRUE
								Else
									Call llclose(nF)
									Call VisFileDelete(sFile)
									Call SqlRollback(hSqlAux2())
									Return FALSE
							Else
								Call llclose(nF)
								Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sFile)
								Call SqlCommit(hSqlAux2())
								Return TRUE
					Return FALSE
			Function: cbSet
				Description:
				Returns
					Boolean:
				Parameters
					Number: nId
					Boolean: bSet
				Static Variables
				Local variables
					Number: nSid
				Actions
					If bSet
						Set nSid = Val(GetValueStr("
								    select to_char(klp_check(" || Str(nId) ||"))
								    from   dual"))
						If nSid = 0
							If SqlPrepareAndExecute(hSql(), "
									   UPDATE tmp_klp_c
									   set    sid=:nMySid
									   where  id=:nId") and SqlCommit(hSql())
								Return TRUE
						Else
							If nSid = nMySid
								Return TRUE
							Else
								Return FALSE
					Else
						Return FALSE
			Function: GetMySid
				Description:
				Returns
					Number:
				Parameters
				Static Variables
				Local variables
				Actions
					Return Val(GetValueStr("
							       select to_char(f_get_sid)
							       from   dual"))
			!
			Function: V_OkpoKB
				Description:
				Returns
					String:
				Parameters
					String: sMfo
					String: sNls
					Number: nKv
					String: sOkpo
				Static Variables
				Local variables
					String: sOkpo1
				Actions
					If sMfo = GetBankMfo()
						! Set sOkpo1 = GetValueStr("
								    select to_char(count(*))
								    from   accounts
								    where  nls='" || sNls || "' and kv=" || Str(nKv))
						! If sOkpo1 = '1'
						Set sOkpo1 = GetValueStr("
								    select c.okpo
								    from   customer c, accounts a
								    where  a.nls='" || sNls || "' and a.kv=" || Str(nKv) || " and c.rnk=a.rnk and
								           a.nbs not in (select nbs
								                         from   nbs_print_bank)")
						If Len(sOkpo1) = 0
							Set sOkpo1 = CalcOKPO(sOkpo)
					Else
						Set sOkpo1 = CalcOKPO(sOkpo)
					Return sOkpo1
			Function: DopustNls
				Description:
				Returns
					Boolean:
				Parameters
					String: sMfo
					String: sNls
					Number: nKv
				Static Variables
				Local variables
					String: sOkpo1
				Actions
					If sMfo = GetBankMfo()
						Return '1' = GetValueStr("
								       select to_char(count(1))
								       from   accounts a
								       where  a.nls='" || sNls || "' and a.kv=" || Str(nKv))
					Else
						Return Vkrz2(sMfo, sNls) = sNls
		Window Parameters
		Window Variables
			String: sBankMfo
			String: sOpenDay
			Number: nI
			Number: nDubl
			!
			String: sNazns
			String: sNaznk
			String: sD_rec
			String: sFn_a
			String: sNaznBis
			String: sD_recBis
			!
			Number: nColor
			String: sTitle
			!
			Number: nUid
			Number: nVal
			Number: nKwo
			Boolean: bOk
			!
			Date/Time: dYes
			String: sValueCheck
			!
			String: sKOD4
			String: smKOD4[*]
			Number: nmPOND[*]
			String: sSAB1
			Number: nC
			! String: sPDPd
			! String: sPDPb
			String: sBIS
			String: sLenDopRek
			String: sBuffer2
			String: sVSPO
			!
			String: sMFOA
			String: smMFOA[*]
			String: sNLSA
			String: smNLSA[*]
			String: sNAMA
			String: smNAMA[*]
			String: sMFOB
			String: smMFOB[*]
			String: sNLSB
			String: smNLSB[*]
			String: sNAMB
			String: smNAMB[*]
			String: sOKPOA
			String: smOKPOA[*]
			String: sOKPOB
			String: smOKPOB[*]
			Number: nDK
			Number: nmDK[*]
			Number: nS
			Number: nmS[*]
			Number: nVOB
			Number: nmVOB[*]
			String: sND
			String: smND[*]
			Number: nISP
			Number: nmISP[*]
			Number: nKV
			Number: nmKV[*]
			Date/Time: dDAOP
			Date/Time: dmDAOP[*]
			Number: nIOST
			Number: nmIOST[*]
			Number: nDOS
			Number: nmDOS[*]
			Number: nKOS
			Number: nmKOS[*]
			Date/Time: dDAPP
			Date/Time: dmDAPP[*]
			Date/Time: dPDAT
			Date/Time: dmPDAT[*]
			String: sNAZN
			String: smNAZN[*]
			String: smD_rec[*]
			String: sPOND
			String: smPOND[*]
			Number: nSK
			Number: nmSK[*]
			String: sNameFileA
			String: smNameFileA[*]
			Number: nBis
			Number: nmBis[*]
			String: sBis
			String: smBis[*]
			Date/Time: dDATb1
			Date/Time: dmDATb1[*]
			Date/Time: dDATb2
			Date/Time: dmDATb2[*]
			Date/Time: dDATOV
			Date/Time: dmDATOV[*]
			!
			Number: nPosKwoBis
			String: sTempBis
			String: sOdinBis
			Number: nLenOdinBis
			Number: nB
			Number: nRec
			Number: nLoop
			!
			String: syyyyMMddPath
			!
			Number: nEmi
			Number: nKdi
			Number: nSdi
			!
			Date/Time: dDATD
			Date/Time: dmDATD[*]
			!
			String: sYearBaDa
			Number: nErr
			String: sVegaTableDir
			! String: sVegaKeyB
			String: sBufVega
			Date/Time: dDateCurrent
			!
			String: sVegaSignOn
			String: sErrorSign
			Number: nDaysLeft
			String: sText
			!
			String: strCurDir
			!
			Date/Time: dDATbis
			String: sSQL
			Number: nRef
			!
			String: sOst
			String: sDn
			!
			Boolean: bPismo
			Window Handle: hWin7
			!
			Number: nmSizes[*]
			String: smFiles[*]
			Date/Time: dmDateTimes[*]
			Number: nmAttributes[*]
			!
			String: sFiltIn[2]
			String: sFile
			Number: nFo
			Number: nFi
			String: sPathIn
			Number: nLenI
			String: sBuf
			Boolean: bFlag
			String: sNaim
			String: sFileSab
			Number: nF
			String: sTempCrypt
			String: sFileIn
			!
			String: sBeg
			String: sEnd
			!
			Number: nRowT
			!
			Boolean: bVi
			Boolean: bFl
			String: s16t
			String: sString
			Number: nRATE_O
			Date/Time: dVDATE
			Number: nBSUM
			!
			String: sVegaKDrv
			String: sExtApp1
			String: sExtApp2
			!
			String: sIgnoreErrDrec
			!
			Number: nMySid
			String: scbK
			String: scbD
			String: scb6
			String: scbP
			String: scbC
			String: scbO
			!
			Number: nNull
			!
			String: sZag
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
				Call SalGetWindowText(menu12, sTitle, 80)
				Call SetBankDate()
				! Call SqlPrepareAndExecute(hSql(), 'SET ROLE start1,tech_mom1')
				Call SetRole(hSql(),'start1')
				Call SetRole(hSql(),'tech_mom1')
				Call SalWaitCursor(TRUE)
				Set sUserid = Str(GetUserId())
				Set sBankMfo = GetBankMfo()
				Set nMySid = GetMySid()
				Set nKLI = -1
				! If SqlPrepareAndExecute(hSql(), "
						   SELECT c.sab,c.rnk,c.nmk,c.okpo,c.notes,nvl(k.VERSION,'0.0'),c2.sab
						   INTO   :sSAB,:nRNK,:sNMK,:sOKPO,:sTIMES,:sVERS,:sSABP
						   FROM   customer c, klp_version k, klp_top p, customer c2
						   WHERE  c.sab is not null and c.stmt=5 and c.rnk=k.rnk(+) and c.rnk=p.rnk(+) and c2.rnk(+)=p.rnkp
						   ORDER BY c.sab")
				If SqlPrepareAndExecute(hSql(), "
						   SELECT c.sab,c.rnk,c.nmk,c.okpo,c.notes,nvl(k.VERSION,'0.0')
						   INTO   :sSAB,:nRNK,:sNMK,:sOKPO,:sTIMES,:sVERS
						   FROM   customer c, klp_version k
						   WHERE  c.sab is not null and c.stmt=5 and c.rnk=k.rnk(+)
						   ORDER BY c.sab")
					Call SalArraySetUpperBound(smSAB, 1, -1)
					! Call SalArraySetUpperBound(smSABP, 1, -1)
					Call SalArraySetUpperBound(nmRNK, 1, -1)
					Call SalArraySetUpperBound(smNMK, 1, -1)
					Call SalArraySetUpperBound(smOKPO, 1, -1)
					Call SalArraySetUpperBound(smTIMES, 1, -1)
					Call SalArraySetUpperBound(smVERS, 1, -1)
					Set nKLI = -1
					While SqlFetchNext(hSql(), nFetchRes)
						Set nKLI = nKLI + 1
						Set smSAB[nKLI] = sSAB
						! Set smSABP[nKLI] = sSABP
						Set nmRNK[nKLI] = nRNK
						Set smNMK[nKLI] = SalStrTrimX(sNMK)
						Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
						Set smTIMES[nKLI] = SalStrTrimX(sTIMES)
						Set smVERS[nKLI] = SalStrTrimX(sVERS)
				If nKLI = -1
					Call SalSendMsg(menu12, SAM_Destroy, 0, 0)
				Call SalHideWindow(l1)
				Call SalHideWindow(cc1)
				Call SalHideWindow(pbLB)
				Call SalHideWindow(pbAll)
				Call SalHideWindow(pbFind)
				Call SalHideWindow(pbNoDate)
				Call SalHideWindow(pbRun)
				Call SalHideWindow(pbOtkaz)
				! Set nSEP = GetGlobalOptionEx('SEPNUM')
				Call SalWaitCursor(FALSE)
			On SAM_CreateComplete
				Call SalUseRegistry(TRUE, GetCompanyName())
				Call SalGetProfileString('CheckBoxesKB', 'Values', '011111', sValueCheck, '')
				Set cbK = Left(sValueCheck, 1)='1'
				Set cbD = Subs(sValueCheck, 2, 1)='1'
				Set cb6 = Subs(sValueCheck, 3, 1)='1'
				Set cbP = Subs(sValueCheck, 4, 1)='1'
				Set cbC = Subs(sValueCheck, 5, 1)='1'
				Set cbO = Subs(sValueCheck, 6, 1)='1'
				!
				! cbD, cb6, cbP, cbC, cbO из INI-файла
				!
				Call SalGetProfileString('CheckBoxKB', 'Value', '1', sValueCheck, '')
				Set cbK = sValueCheck='1'
				!
				Call SalUseRegistry(FALSE, '')
				Call SalGetProfileString('ElektroKlients', 'cbK', Str(cbK), scbK, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'cbD', Str(cbD), scbD, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'cb6', Str(cb6), scb6, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'cbP', Str(cbP), scbP, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'cbC', Str(cbC), scbC, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'cbO', Str(cbO), scbO, GetIniFileName())
				Set cbK = scbK='1'
				Set cbD = cbSet(1, scbD='1')
				Set cb6 = cbSet(2, scb6='1')
				Set cbP = cbSet(3, scbP='1')
				Set cbC = cbSet(4, scbC='1')
				Set cbO = cbSet(5, scbO='1')
				!
				If cbK
					Set cbK = cbO
				!
				Call SalGetProfileString('ElektroKlients', 'VegaSignOn', '0', sVegaSignOn, GetIniFileName())
				If sVegaSignOn > '2' or sVegaSignOn < '0'
					Set sVegaSignOn = '0'
				Set dfRab = sVegaSignOn || IifS(sVegaSignOn='0', ' - без шифрования', ' - c ' || IifS(sVegaSignOn='1',
						    'пров. подписи док.', 'шифрованием и подписью'))
				Call SalGetProfileString('ElektroKlients', 'VegaKDrv', 'a:', sVegaKDrv, GetIniFileName())
				If sVegaKDrv != 'TM' and sVegaKDrv != '@' and Right(sVegaKDrv, 1) != '\\'
					Set sVegaKDrv = sVegaKDrv || '\\'
				!
				Call SalGetProfileString('ElektroKlients', ' ExtApp1', '',  sExtApp1, GetIniFileName()) ! внешнее приложение1 (до цикла)
				Call SalGetProfileString('ElektroKlients', ' ExtApp2', '',  sExtApp2, GetIniFileName()) ! внешнее приложение2 (после)
				!
				Call SalFileGetCurrentDirectory(strCurDir)
				Call SalGetProfileString('ElektroKlients', 'SBB_INS', strCurDir, sDiskKataINS, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'SBB_OUTS', strCurDir, sDiskKataOUTS, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'SBB_OUTI', strCurDir, sDiskKataOUTI, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'SBB_LETTER', strCurDir, sDiskKataLETTER, GetIniFileName())
				If SalStrRightX(sDiskKataINS, 1)    != '\\' ! путь к INS    электронных клиентов (каталог входных    шифрованных файлов)
					Set sDiskKataINS = sDiskKataINS || '\\'
				If SalStrRightX(sDiskKataOUTS, 1)   != '\\' ! путь к OUTS   электронных клиентов (каталог выходных   шифрованных файлов)
					Set sDiskKataOUTS = sDiskKataOUTS || '\\'
				If SalStrRightX(sDiskKataOUTI, 1)   != '\\' ! путь к OUTI   электронных клиентов (каталог инсталл. НЕшифрованных файлов)
					Set sDiskKataOUTI = sDiskKataOUTI || '\\'
				If SalStrRightX(sDiskKataLETTER, 1) != '\\' ! путь к LETTER электронных клиентов (каталог сохранения входных файлов писем)
					Set sDiskKataLETTER = sDiskKataLETTER || '\\'
				Set sDiskKataIN  = GetElKDirIN()            ! путь к IN     электронных клиентов (каталог входных  НЕшифрованных файлов)
				Set sDiskKataOUT = GetElKDirOUT()           ! путь к OUT    электронных клиентов (каталог выходных НЕшифрованных файлов)
				Set sArchPath    = GetArchiv_KB()           ! путь к архиву файлов электронных клиентов
				Set sTempPath    = GetTempKPath()           ! путь временных файлов КЛИЕНТ-БАНК
				!
				Set sBeg = '<?xml version="1.0" encoding="windows-1251"?>' || Chr(13) || Chr(10) || '<ROOT>' || Chr(13) || Chr(10)
				Set sEnd = Chr(13) || Chr(10) || '</ROOT>'
				!
				Call SalGetProfileString('ElektroKlients', 'VegaKeyB', 'XXXXXXXX', sVegaKeyB, GetIniFileName())
				Call SalGetProfileString('ElektroKlients', 'IgnoreErrDrec', '0', sIgnoreErrDrec, GetIniFileName())
				If sIgnoreErrDrec != '0' and sIgnoreErrDrec != '1'
					Set sIgnoreErrDrec = '0'
				If sVegaSignOn = '2' or sVegaSignOn = '1'
					Set nNull = NUMBER_Null
					! вычитка идентификаторов для подписи и шифрования
					Call SalArraySetUpperBound(smSab, 1, -1)
					Call SalArraySetUpperBound(smIds, 1, -1)
					Call SalArraySetUpperBound(smIdb, 1, -1)
					Call SalArraySetUpperBound(smIdd, 1, -1)
					Call SalArraySetUpperBound(smIdo, 1, -1)
					If SqlPrepareAndExecute(hSql(), "
							   SELECT sab,ids,idb,idd,ido
							   INTO   :sSab,:sIds,:sIdb,:sIdd,:sIdo
							   FROM   klpsbb")
						Set nI = 0
						While SqlFetchNext(hSql(), nFetchRes)
							Set smSab[nI] = sSab
							Set smIds[nI] = sIds
							Set smIdb[nI] = sIdb
							Set smIdd[nI] = sIdd
							Set smIdo[nI] = sIdo
							Set nI = nI + 1
					!
					Call SalGetProfileString('ElektroKlients', 'VegaTable', GetPrnDir(), sVegaTableDir, GetIniFileName())
					Set sVegaTableDir = IifS(Right(sVegaTableDir, 1)='\\', sVegaTableDir, sVegaTableDir || '\\')
					Set bIni = FALSE
					Call SalStrSetBufferLength(sBufVega, 11024+4104+1)
					Set nErr = VegaSetBuf(sBufVega, 11024+4104)
					If nErr != 0
						Set sText = 'Ошибка (' || Str(nErr) || ') при установке буфера памяти для работы системы защиты. Аварийный выход.' 
						Call Message(sText, TRUE, TRUE, 0)
						Call MessageNoWait(sText, 'ОШИБКА!!!', 37, 1)
						Call SalQuit()
					Set nErr = VegaOpen(sVegaTableDir || 'Vega.cfg', sVegaTableDir, 0)
					If nErr != 0
						Set sErrorSign = Spac(129)
						Call VegaGetMsgAux(nErr, sErrorSign, 128)
						Set sText = 'Ошибка (' || Str(nErr) || ') при инициализации системы защиты (' || sErrorSign || '). Аварийный выход.'
						Call Message(sText, TRUE, TRUE, 0)
						Call MessageNoWait(sText, 'ОШИБКА!!!', 37, 1)
						Call SalQuit()
					! Call Debug(sVegaKeyB || '.key')
					Set sIdVega = Spac(8)
					If ShowInputPinCodeVEGA()
						If sVegaKDrv = '@'
							Set nErr = VegaLoadSecKeyCC(SalStrRightX('00' || GetGlobalOption('REGNCODE'), 2) || sVegaKeyB ||'.key',
									    PadR(strPinCodeVEGA, 32), sIdVega, 0, GetCardReaderName())
						Else If sVegaKDrv = 'TM' 
							Set nErr = DSig_ReadTM(sVegaKeyB)
							If nErr < 0 or nErr > 4
								Set sText = 'Ошибка (' || Str(nErr) || ') при инициализации системы защиты на TM. Аварийный выход.'
								Call Message(sText, TRUE, TRUE, 0)
								Call MessageNoWait(sText, 'ОШИБКА!!!', 37, 1)
								Call SalQuit()
							Call VegaSetFmode(1, 0)
							Set nErr = VegaLoadSecKey(g_lsSecretKey, PadR(strPinCodeVEGA, 32), sIdVega, 0)
							Call VegaSetFmode(0, 0)
						Else
							Set nErr = VegaLoadSecKey(sVegaKDrv || sVegaKeyB || '.key', PadR(strPinCodeVEGA, 32), sIdVega, 0)
					Else
						Set sText = 'Не введен PIN-код секретного ключа. Выход.'
						Call Message(sText, TRUE, TRUE, 0)
						Call MessageNoWait(sText, 'Ошибка!!!', 7, 1)
						Call SalQuit()
					If nErr != 0
						If nErr = 1 or nErr = 2 or nErr = 4
							Set nDaysLeft = VegaDaysLeft(0)
							If Mod(nDaysLeft, 10) = 1 and Mod(nDaysLeft, 100) != 11
								Set sOst = 'ся '
							Else
								Set sOst = 'ось '
							If Mod(nDaysLeft, 10) = 1 and Mod(nDaysLeft, 100) != 11
								Set sOst = 'день'
							Else If Mod(nDaysLeft, 10) >= 2 and Mod(nDaysLeft, 10) <= 4 and Mod(nDaysLeft, 100) != 12 and
									        Mod(nDaysLeft, 100) != 13 and Mod(nDaysLeft, 100) != 14
								Set sDn = ' дня'
							Else
								Set sDn = ' дней'
							Set sText = 'До окончания срока действия секретного ключа остал' || sOst || Str(nDaysLeft) || sDn
							Call Message(sText, TRUE, TRUE, 0)
							Call MessageNoWait(sText, 'Предупреждение!!!', 37, 0)
						Else
							Set sErrorSign = Spac(129)
							Call VegaGetMsgAux(nErr, sErrorSign, 128)
							Set sText = 'Ошибка (' || Str(nErr) || ') загрузки секретного ключа (' || sErrorSign || '). Аварийный выход.' 
							Call Message(sText, TRUE, TRUE, 0)
							Call MessageNoWait(sText, 'ОШИБКА!!!', 37, 1)
							Call SalQuit()
					Else
						Call Message('Ключ банка ' || sVegaKeyB || '.key' || ' загружен...', TRUE, TRUE, COLOR_LightGray)
				Set dfVers = 'v1.02.14'
				Call SalSetFocus(pb1)
			On SAM_Close
				If SalMessageBox("Вы намерены прекратить работу? ", "Внимание!", MB_YesNo) = IDYES
					If sVegaSignOn = '2' or sVegaSignOn = '1'
						! Call VegaClose(0)
						Call VegaClose(nNull)
					Call SalQuit()
				Else
					Return FALSE
			On SAM_Destroy
				Call SalUseRegistry(TRUE, GetCompanyName())
				Call SalSetProfileString('CheckBoxesKB', 'Values', IifS(cbK, '1', '0') || IifS(cbD, '1', '0') || IifS(cb6, '1', '0') ||
						     IifS(cbP, '1', '0') || IifS(cbC, '1', '0') || IifS(cbO, '1', '0'), '')
				!
				Call SalSetProfileString('CheckBoxKB', 'Value', IifS(cbK, '1', '0'), '')
	! Dialog Box: Pismo
.winattr
		Class:
		Property Template:
		Class DLL Name:
		Title: Просмотр письма
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   2.425"
				Top:    0.958"
				Width:  11.733"
				Width Editable? Yes
				Height: 5.726"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
.end
		                                                                                                                   Description: просмотр полученного письма
		                                                                                                                   Tool Bar 
			                                                                                                                   Contents 
		                                                                                                                   Contents 
			                                                                                                                   Multiline Field: mlPismo
				                                                                                                                   Message Actions 
			                                                                                                                   Pushbutton: pbEsc
				                                                                                                                   Message Actions 
					                                                                                                                   On SAM_Click
						                                                                                                                   Call SalSetWindowText(hWndForm, sText)
						                                                                                                                   Call SalEndDialog(hWndForm, 0)
		                                                                                                                   Functions 
		                                                                                                                   Window Parameters 
			                                                                                                                   String: sZagol
			                                                                                                                   String: sPismo
			                                                                                                                   String: sFile
		                                                                                                                   Window Variables 
			                                                                                                                   String: sText
			                                                                                                                   String: sTextF
		                                                                                                                   Message Actions 
			                                                                                                                   On SAM_Create
				                                                                                                                   Call SalCenterWindow(hWndForm)
				                                                                                                                   Call SalGetWindowText(hWndForm, sText, 15)
				                                                                                                                   Set sTextF = sText || ' (файл ' || sFile || ') ' || sZagol
				                                                                                                                   Call SalSetWindowText(hWndForm, sTextF)
				                                                                                                                   Set mlPismo = sPismo
				                                                                                                                   Call SalSetFocus(pbEsc)
			                                                                                                                   On SAM_Close
				                                                                                                                   Call SalSetWindowText(hWndForm, sText)
	! Dialog Box: Pokazat
.winattr
		Class:
		Property Template:
		Class DLL Name:
		Title: ЗАПРОС
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   4.25"
				Top:    2.969"
				Width:  5.9"
				Width Editable? Yes
				Height: 1.298"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Gray
.end
		                                                                                                                    Description: запрос о показе письма
		                                                                                                                    Tool Bar 
			                                                                                                                    Contents 
		                                                                                                                    Contents 
			                                                                                                                    Pushbutton: pbOk
				                                                                                                                    Message Actions 
					                                                                                                                    On SAM_Click
						                                                                                                                    Call SalTimerKill(pbCancel, 1)
						                                                                                                                    Call SalEndDialog(hWndForm, TRUE)
			                                                                                                                    Pushbutton: pbCancel
				                                                                                                                    Message Actions 
					                                                                                                                    On SAM_Create
						                                                                                                                    Call SalTimerSet(hWndItem, 1, nSek*1000)
					                                                                                                                    On SAM_Click
						                                                                                                                    Call SalTimerKill(pbCancel, 1)
						                                                                                                                    Call SalEndDialog(hWndForm, FALSE)
					                                                                                                                    On SAM_Timer
						                                                                                                                    Call SalSendMsg(hWndItem, SAM_Click, 0, 0)
			                                                                                                                    Pushbutton: pb2File
				                                                                                                                    Message Actions 
					                                                                                                                    On SAM_Click
						                                                                                                                    Set sFileSave = sFilePismo
						                                                                                                                    Set sPathSave = 'C:\\Temp'
						                                                                                                                    Call SalTimerKill(pbCancel, 1)
						                                                                                                                    If SalDlgSaveFile(hWndForm, 'Save File', sFilters, 2, nIndex, sFileSave, sPathSave)
							                                                                                                                    Set nP = llcreat(sPathSave, 0)
							                                                                                                                    Call llwrite(nP, sTeloPis, nLenPis)
							                                                                                                                    Call llclose(nP)
							! Call VisFileDelete(sPathPismo || sFilePismo)
						                                                                                                                    Call SalEndDialog(hWndForm, FALSE)
			                                                                                                                    Data Field: df1
				                                                                                                                    Message Actions 
		                                                                                                                    Functions 
		                                                                                                                    Window Parameters 
			                                                                                                                    String: sText
			                                                                                                                    String: sFilePismo
			                                                                                                                    String: sPathPismo
			                                                                                                                    String: sTeloZag
			                                                                                                                    String: sTeloPis
			                                                                                                                    Number: nLenPis
			                                                                                                                    Number: nSek
		                                                                                                                    Window Variables 
			                                                                                                                    String: sFilters[2]
			                                                                                                                    String: sFileSave
			                                                                                                                    String: sPathSave
			                                                                                                                    Number: nP
			                                                                                                                    String: sTextO
			                                                                                                                    String: sTextF
		                                                                                                                    Message Actions 
			                                                                                                                    On SAM_Create
				                                                                                                                    Call SalCenterWindow(hWndForm)
				                                                                                                                    Set df1 = sText || sFilePismo || ').'
				                                                                                                                    Set sFilters[0] = 'Text Files'
				                                                                                                                    Set sFilters[1] = '*.txt'
				                                                                                                                    Call SalGetWindowText(hWndForm, sTextO, 6)
				                                                                                                                    Set sTextF = sTextO || ' (' || sTeloZag || ')'
				                                                                                                                    Call SalSetWindowText(hWndForm, sTextF)
			                                                                                                                    On SAM_CreateComplete
				                                                                                                                    Call PlaySound('POOHWATE.WAV', 1, 1)
	Table Window: abonKB
		Class: cGenericTable
		Property Template:
		Class DLL Name:
		Title: Карточки (параметры) абонентов КЛИЕНТ-БАНК
		Icon File:
		Accesories Enabled? Class Default
		Visible? Yes
		Display Settings
			Visible at Design time? Yes
			Automatically Created at Runtime? Class Default
			Initial State: Normal
			Maximizable? Class Default
			Minimizable? Class Default
			System Menu? Class Default
			Resizable? Class Default
			Window Location and Size
				Left:   0.825"
				Top:    0.854"
				Width:  12.1"
				Width Editable? Class Default
				Height: 6.512"
				Height Editable? Class Default
			Font Name: Class Default
			Font Size: Class Default
			Font Enhancement: Bold
			Text Color: Class Default
			Background Color: Class Default
			View: Class Default
			Allow Row Sizing? Class Default
			Lines Per Row: Class Default
		Memory Settings
			Maximum Rows in Memory: 37110
			Discardable? Class Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Class Default
				Location? Class Default
				Visible? Class Default
				Size: Class Default
				Size Editable? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
			Contents
				Pushbutton: pbIns
					Class Child Ref Key: 33
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbDel
					Class Child Ref Key: 34
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbRefresh
					Class Child Ref Key: 35
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbUpdate
					Class Child Ref Key: 36
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Line
					Resource Id: 14668
					Class Child Ref Key: 37
					Class ChildKey: 0
					Class: cGenericTable
					Coordinates
						Begin X:  Class Default
						Begin Y:  Class Default
						End X:  Class Default
						End Y:  Class Default
					Visible? Class Default
					Line Style: Class Default
					Line Thickness: Class Default
					Line Color: Class Default
				Pushbutton: pbSearch
					Class Child Ref Key: 38
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbFilter
					Class Child Ref Key: 44
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbDetails
					Class Child Ref Key: 39
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
						On SAM_Create
							Set strTip = 'Создание инсталляционных пакетов'
						On SAM_Click
							Call SalWaitCursor(TRUE)
							! Call SalTblSetContext(abonKB, lParam)
							Set bA = MakeA(abonKB.colSab, abonKB.colRnk)
							Set bI = MakeI(abonKB.colSab, abonKB.colKod, abonKB.colIdb, abonKB.colIdd)
							Set bM = MakeM(abonKB.colSab)
							Set bW = MakeW(abonKB.colSab)
							Call SalWaitCursor(FALSE)
							If bA or bI or bM or bW
								Call MessageNoWait('Инсталляционные пакеты (' || IifS(bA, 'A', '') || IifS(bI, ' I', '') || IifS(bM, ' M', '') ||
										     IifS(bW, ' W', '') || ') для' || Repl(PutCrLf(), 2) || Spac(24) || abonKB.colNmk || ' (' || abonKB.colSab ||
										     ')' || Repl(PutCrLf(), 2) || 'созданы !', 'СООБЩЕНИЕ', 17, 0)
							Else
								Call MessageNoWait('Ошибка при создании инсталляционных пакетов (AIMW) для' || Repl(PutCrLf(), 2) || Spac(24) ||
										     abonKB.colNmk || ' (' || abonKB.colSab || ').', 'ВНИМАНИЕ !!!', 0, 1)
				Pushbutton: pbPrint
					Class Child Ref Key: 40
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Line
					Resource Id: 14669
					Class Child Ref Key: 41
					Class ChildKey: 0
					Class: cGenericTable
					Coordinates
						Begin X:  Class Default
						Begin Y:  Class Default
						End X:  Class Default
						End Y:  Class Default
					Visible? Class Default
					Line Style: Class Default
					Line Thickness: Class Default
					Line Color: Class Default
				Pushbutton: pbExit
					Class Child Ref Key: 42
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Esc
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Line
					Resource Id: 14670
					Class Child Ref Key: 43
					Class ChildKey: 0
					Class: cGenericTable
					Coordinates
						Begin X:  Class Default
						Begin Y:  Class Default
						End X:  Class Default
						End Y:  Class Default
					Visible? Class Default
					Line Style: Class Default
					Line Thickness: Class Default
					Line Color: Class Default
		Contents
			Column: colSab
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Код
				Visible? Yes
				Editable? No
				Maximum Data Length: 4
				Data Type: String
				Justify: Left
				Width:  0.6"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colNmk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Наименование клиента
				Visible? Yes
				Editable? No
				Maximum Data Length: 38
				Data Type: String
				Justify: Left
				Width:  4.829"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colRnk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Рег.номер
				Visible? No
				Editable? No
				Maximum Data Length: 38
				Data Type: Number
				Justify: Left
				Width:  3.586"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colKod
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Код ОКПО
				Visible? No
				Editable? No
				Maximum Data Length: 38
				Data Type: String
				Justify: Left
				Width:  3.586"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colTip
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: ЭЦП
				Visible? No
				Editable? Yes
				Maximum Data Length: 10
				Data Type: String
				Justify: Left
				Width:  Default
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
					On SAM_DoubleClick
			Column: colIdb
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ид.
						бухгалтера
				Visible? Yes
				Editable? Yes
				Maximum Data Length: 254
				Data Type: String
				Justify: Left
				Width:  2.0"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
					On SAM_DoubleClick
						! Set hWndFocus = SalGetFocus()
						! Call SalModalDialog(dlg_edit_id, hWndForm, 'b', colIdb, lParam, hWndFocus)
						Call SalModalDialog(dlg_edit_id, hWndForm, 'b', colIdb, lParam)
			Column: colIdd
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ид.
						директора
				Visible? Yes
				Editable? Yes
				Maximum Data Length: 254
				Data Type: String
				Justify: Left
				Width:  2.0"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
					On SAM_DoubleClick
						! Set hWndFocus = SalGetFocus()
						! Call SalModalDialog(dlg_edit_id, hWndForm, 'd', colIdb, lParam, hWndFocus)
						Call SalModalDialog(dlg_edit_id, hWndForm, 'd', colIdd, lParam)
			Column: colIdo
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ид.
						операциониста
				Visible? Yes
				Editable? Yes
				Maximum Data Length: 254
				Data Type: String
				Justify: Left
				Width:  2.0"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
					On SAM_DoubleClick
						! Set hWndFocus = SalGetFocus()
						! Call SalModalDialog(dlg_edit_id, hWndForm, 'o', colIdo, lParam, hWndFocus)
						Call SalModalDialog(dlg_edit_id, hWndForm, 'o', colIdo, lParam)
			Column: colIds
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ид.
						(шифрование)
				Visible? No
				Editable? Yes
				Maximum Data Length: 254
				Data Type: String
				Justify: Left
				Width:  2.0"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colBlk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Блоки-
						ровка
				Visible? No
				Editable? Yes
				Maximum Data Length: Default
				Data Type: String
				Justify: Left
				Width:  0.683"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Check Box
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value: 0
						Uncheck Value: 1
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colRowid
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Rowid
				Visible? No
				Editable? No
				Maximum Data Length: Default
				Data Type: String
				Justify: Left
				Width:  0.683"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Check Box
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value: 0
						Uncheck Value: 1
						Ignore Case? Yes
				List Values
				Message Actions
		Functions
			Function: MakeA
				Description:
				Returns
					Boolean:
				Parameters
					String: sSab
					Number: nRnk
				Static Variables
				Local variables
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					! Set nBaseVal = GetBaseVal()
					! Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT a.nls,a.kv,a.blkk,a.blkd,a.pap,a.nms,a.daos,a.dazs,a.ostc,a.dos,a.kos,a.acc
							     INTO   :sNls,:nKv,:nBlkk,:nBlkd,:nPap,:sNms,:dDaos,:dDazs,:nOstc,:nDos,:nKos,:nAcc
							     FROM   accounts a, customer c, cust_acc cu
							     WHERE  c.rnk=:nRnk and c.rnk=cu.rnk and cu.acc=a.acc and a.kv=:nBaseVal and a.acc in (SELECT acc
							                                                                                           FROM   acce)")
					! Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT nls,kv,blkk,blkd,pap,nms,daos,dazs,ostc,dos,kos,acc
							     INTO   :sNls,:nKv,:nBlkk,:nBlkd,:nPap,:sNms,:dDaos,:dDazs,:nOstc,:nDos,:nKos,:nAcc
							     FROM   accounts
							     WHERE  rnk=:nRnk and acc in (SELECT acc
							                                  FROM   acce
							                                  WHERE  nvl(pers,0)=1)")
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT nls,kv,blkk,blkd,pap,nms,daos,dazs,fost(acc,:dBankDateM1),fdos(acc,:dBankDate,:dBankDate),
							            fkos(acc,:dBankDate,:dBankDate),fost(acc,:dBankDate),acc
							     INTO   :sNls,:nKv,:nBlkk,:nBlkd,:nPap,:sNms,:dDaos,:dDazs,:nOsti,:nDos,:nKos,:nOstc,:nAcc
							     FROM   accounts
							     WHERE  rnk=:nRnk and (acc in (SELECT acc
							                                   FROM   acce
							                                   WHERE  nvl(pers,0)=1) or
							                           acc in (SELECT acc
							                                   FROM   accc
							                                   WHERE  nvl(pers,0)=1))
							     UNION ALL
							     SELECT a.nls,a.kv,a.blkk,a.blkd,a.pap,a.nms,a.daos,a.dazs,fost(a.acc,:dBankDateM1),
							            fdos(a.acc,:dBankDate,:dBankDate),fkos(a.acc,:dBankDate,:dBankDate),fost(a.acc,:dBankDate),a.acc
							     FROM   accounts a, klp_top c, customer r
							     WHERE  r.rnk=:nRnk and c.rnkp=r.rnk and c.rnk=a.rnk and (a.acc in (SELECT acc
							                                                                        FROM   acce
							                                                                        WHERE  nvl(high,0)=1) or
							                                                              a.acc in (SELECT acc
							                                                                        FROM   acce
							                                                                        WHERE  nvl(high,0)=1))")
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						! Call SqlPrepareAndExecute(hSqlAux2(), "
								     SELECT max(fdat)
								     INTO   :dDaep
								     FROM   opldok
								     WHERE  acc=:nAcc")
						Call SqlPrepareAndExecute(hSqlAux2(), "
								     SELECT max(fdat)
								     INTO   :dDaep
								     FROM   saldoa
								     WHERE  acc=:nAcc")
						Call SqlFetchNext(hSqlAux2(), nFetchRes)
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'A' || ddd(dBankDate) || menu12.Suffix(sSab, 'A') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
							If nF < 0
								Call SalWaitCursor(FALSE)
								Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
								Call SalWaitCursor(TRUE)
								Return FALSE
						Set sString = PadL(sNls, 14) || PadL(Str(nKv), 3) || Str(Min(nBlkk+nBlkd, 1)) || PadL(Str(IifN(nPap=3, 0, nPap)), 2)
								    || PadR(StrWinToDosX(sNms), 38) || SalFmtFormatDateTime(dDaos, 'yyyyMMdd') || PadL(
								    SalFmtFormatDateTime(dDazs, 'yyyyMMdd'), 8) || PadL(Str(nOsti), 16) || PadL(Str(nDos), 16) || PadL(Str(nKos), 16)
								    || PadL(Str(nOstc), 16) || PadL(SalFmtFormatDateTime(dDaep, 'yyyyMMdd'), 8) || PutCrLf()
						! Call VisFileWrite(hF, sString, Len(sString))
						Call llwrite(nF, sString, Len(sString))
					Call SqlCommit(hSqlAux2())
					If not bFl
						If FALSE ! menu12.sVegaSignOn = '2' - шифровать не надо, поэтому FALSE !!!
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'A' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If menu12.FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								If File(sDiskKataOUTS || Right(sFile, 12))
									Return TRUE
								Return FALSE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUTI || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Return TRUE
					Return FALSE
			Function: MakeI
				Description:
				Returns
				Parameters
					String: sSab
					String: sKod
					String: sIdb
					String: sIdd
				Static Variables
				Local variables
					String: sTempCrypt
				Actions
					Set sFile = sTempPath || 'I' || ddd(dBankDate) || menu12.Suffix(sSab, 'I') || Left(sSab, 1) || '.' || Right(sSab, 3)
					Call SqlCommit(hSqlAux2())
					If File(sFile)
						Call VisFileDelete(sFile)
					! Call VisFileOpen(hF, sFile, OF_Create)
					Set nF = llcreat(sFile, 0)
					If nF < 0
						Call SalWaitCursor(FALSE)
						Call MessageNoWait('Ошибка при создании файла ' || sFile, 'Аварийная ситуация', 3, 1)
						Call SalWaitCursor(TRUE)
						Return FALSE
					Set sString = PadR(sSab, 4) || PadR(sKod, 14) || PadR(SalStrTrimX(Left(SalStrTrimX(sIdb), 8)), 8) || PadR(SalStrTrimX(
							    Left(SalStrTrimX(sIdd), 8)), 8) || PadL(sBankMFO, 9) || PadR(VisStrSubstitute(sVegaKeyB, 'XXXXXXXX', Spac(8)), 8) ||
							    PutCrLf()
					! Call VisFileWrite(hF, sString, Len(sString))
					Call llwrite(nF, sString, Len(sString))
					If FALSE ! menu12.sVegaSignOn = '2' - шифровать не надо, поэтому FALSE !!!
						Set dDateCurrent = SalDateCurrent()
						Set sTempCrypt = sTempPath || 'I' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
								    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
								    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
								    SalDateSecond(dDateCurrent)+100), 2)
						If menu12.FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
							! Call VisFileClose(hF)
							Call llclose(nF)
							Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sTempCrypt)
							Call VisFileDelete(sFile)
							If File(sDiskKataOUT || Right(sFile, 12))
								Return TRUE
							Return FALSE
						Else
							Call llclose(nF)
							Call VisFileDelete(sFile)
							Return FALSE
					Else
						Call llclose(nF)
						Call VisFileCopy(sFile, sDiskKataOUTI || Right(sFile, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
						Call VisFileDelete(sFile)
						Return TRUE
			Function: MakeM
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					String: sMfo
					String: sNb
					Number: nBlk
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT mfo,nb,blk
							     INTO   :sMfo,:sNb,:nBlk
							     FROM   banks
							     WHERE  blk<>4")
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'M' || ddd(dBankDate) || menu12.Suffix(sSab, 'M') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
						Set sString = PadL(sMfo, 9) || PadR(StrWinToDosX2(sNb), 38) || IifS(nBlk=0, '0', '1') || PutCrLf()
						! Call VisFileWrite(hF, sString, Len(sString))
						Call llwrite(nF, sString, Len(sString))
					! Call SqlCommit(hSqlAux2())
					If not bFl
						If FALSE ! menu12.sVegaSignOn = '2' - шифровать не надо, поэтому FALSE !!!
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'M' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If menu12.FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUTI || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Return TRUE
					Return FALSE
			Function: MakeW
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Boolean: bFl
					String: sFile
					File Handle: hF
					String: sString
					Number: nKv
					String: sName
					String: sLcv
					!
					Number: nF
					String: sTempCrypt
				Actions
					Set bFl = TRUE
					Call SqlPrepareAndExecute(hSqlAux3(), "
							     SELECT kv,name,lcv
							     INTO   :nKv,:sName,:sLcv
							     FROM   tabval")
					While SqlFetchNext(hSqlAux3(), nFetchRes)
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'W' || ddd(dBankDate) || menu12.Suffix(sSab, 'W') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							! Call VisFileOpen(hF, sFile, OF_Create)
							Set nF = llcreat(sFile, 0)
						Set sString = PadL(Str(nKv), 3) || PadR(StrWinToDosX2(sName), 38) || PadR(sLcv, 3) || PutCrLf()
						! Call VisFileWrite(hF, sString, Len(sString))
						Call llwrite(nF, sString, Len(sString))
					! Call SqlCommit(hSqlAux2())
					If not bFl
						If FALSE ! menu12.sVegaSignOn = '2' - шифровать не надо, поэтому FALSE !!!
							Set dDateCurrent = SalDateCurrent()
							Set sTempCrypt = sTempPath || 'W' || Right(Str(SalDateMonth(dDateCurrent)+100), 2) || Right(Str(
									    SalDateDay(dDateCurrent)+100), 2) || Right(Str(SalDateHour(dDateCurrent)+100), 2) || Subs(Str(
									    SalDateMinute(dDateCurrent)+100), 2, 1) || '.' || Right(Str(SalDateMinute(dDateCurrent)), 1) || Right(Str(
									    SalDateSecond(dDateCurrent)+100), 2)
							If menu12.FileSignCrypt(nF, sTempCrypt, Right(sFile, 12)) = 0
								! Call VisFileClose(hF)
								Call llclose(nF)
								Call VisFileCopy(sTempCrypt, sDiskKataOUTS || Right(sFile, 12))
								Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
								Call SalFileCreateDirectory(syyyyMMddPath)
								Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
								Call VisFileDelete(sTempCrypt)
								Call VisFileDelete(sFile)
								Return TRUE
							Else
								Call llclose(nF)
								Call VisFileDelete(sFile)
								Return FALSE
						Else
							Call llclose(nF)
							Call VisFileCopy(sFile, sDiskKataOUTI || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							Call VisFileDelete(sFile)
							Return TRUE
					Return FALSE
		Window Parameters
		Window Variables
			String: sSAB
			String: sNMK
			String: smSAB[*]
			String: smNMK[*]
			Number: nI
			Number: nK
			String: sDiskKataOUT
			String: sTempPath
			String: sArchPath
			! String: sVegaKeyB
			Boolean: bFl
			! Number: nBaseVal
			String: sFile
			! File Handle: hF
			Number: nF
			Date/Time: dDateCurrent
			String: sTempCrypt
			String: sString
			String: sNls
			Number: nKv
			Number: nBlkk
			Number: nBlkd
			Number: nPap
			String: sNms
			Date/Time: dDaos
			Date/Time: dDazs
			Number: nOsti
			Number: nOstc
			Number: nDos
			Number: nKos
			Date/Time: dDaep
			Number: nAcc
			! Date/Time: dBankDate
			String: sBankMFO
			String: sMfo
			String: sNb
			Number: nBlk
			String: sName
			String: sLcv
			!
			String: syyyyMMddPath
			! Number: nSTMTValue
			Boolean: bA
			Boolean: bI
			Boolean: bM
			Boolean: bW
			!
			! Window Handle: hWndFocus
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
				! Call SetWindowFullSize(hWndForm)
				Call SalWaitCursor(TRUE)
				! Set dBankDate = GetBankDate()
				Set dBankDate = GetParamBankDate()
				Set dBankDateM1 = dBankDate - 1
				Set sBankMFO = GetBankMfo()
				Set sDiskKataOUT = GetElKDirOUT() ! получить путь к OUT электронных клиентов
				Set sTempPath = GetTempKPath()    ! получить путь временных файлов КЛИЕНТ-БАНК
				Set sArchPath = GetArchiv_KB()    ! получить путь к архиву файлов электронных клиентов
				! Call SalUseRegistry(FALSE, '')
				! Call SalGetProfileString('ElektroKlients', 'VegaKeyB', 'XXXXXXXX', sVegaKeyB, GetIniFileName())
				! Инициализация переменной nSTMTValue - тип выписки эл. клиента
				! Call InitStmt()
				!
				! Call SqlPrepareAndExecute(hSql(), "
						     SELECT sab,nmk
						     INTO   :sSAB,:sNMK
						     FROM   customer
						     WHERE  sab is not null and stmt=:nSTMTValue")
				Call SqlPrepareAndExecute(hSql(), "
						     SELECT sab,nmk
						     INTO   :sSAB,:sNMK
						     FROM   customer
						     WHERE  sab is not null and (stmt=5 or stmt=6)")
				Set nI = 0
				Call SalArraySetUpperBound(smSAB, 1, -1)
				Call SalArraySetUpperBound(smNMK, 1, -1)
				While SqlFetchNext(hSql(), nFetchRes)
					Set smSAB[nI] = sSAB
					Set smNMK[nI] = sNMK
					Set nI = nI + 1
				! 1. delete from klpsbb where sab not in (select sab from customer where (stmt=5 or stmt=6) and date_off is null)
				! 2. insert into klpsbb (sab) select sab from customer where (stmt=5 or stmt=6) and date_off is null and sab not in (select sab from klpsbb)
				If nI > 0
					! Call SqlPrepareAndExecute(hSql(), "
							     UPDATE klpsbb
							     SET flag='0'")
					! Set nK = nI - 1
					! Set nI = 0
					! While nI <= nK
						               Set sSAB = smSAB[nI]
						               Call SqlPrepareAndExecute(hSql(), "
								   SELECT sab
								   INTO   :sSAB
								   FROM   klpsbb
								   WHERE  sab=:sSAB")
						               If SqlFetchNext(hSql(), nFetchRes)
							               Call SqlPrepareAndExecute(hSql(), "
									     UPDATE klpsbb
									     SET    flag='1'
									     WHERE  sab=:sSAB")
						               Else 
							               Call SqlPrepareAndExecute(hSql(), "
									     INSERT
									     INTO   klpsbb (sab,flag)
									     VALUES (:sSAB,'1')")
						               Set nI = nI + 1
					! If SqlPrepareAndExecute(hSql(), "
							   DELETE
							   FROM   klpsbb
							   WHERE  flag='0'")
						               Call SqlCommit(hSql())
					!
					If SqlPrepareAndExecute(hSql(), "
							   DELETE
							   FROM   klpsbb
							   where  sab not in (select sab
							                      from   customer
							                      where  (stmt=5 or stmt=6) and date_off is null)")
						If SqlPrepareAndExecute(hSql(), "
								   insert
								   into   klpsbb (sab)
								   select sab 
								   from   customer 
								   where  (stmt=5 or stmt=6) and date_off is null and sab not in (select sab
								                                                                  from   klpsbb)")
							Call SqlCommit(hSql())
						Else
							Call SqlRollback(hSql())
					Else
						Call SqlRollback(hSql())
				! Call PrepareWindow(hWndForm)
				Set nFlags = GT_NoIns | GT_NoDel
				! Set abonKB.strSqlPopulate = "
						    SELECT k.sab,c.nmk,c.rnk,c.okpo,k.tip,k.idb,k.idd,k.ido,k.ids,k.blk,k.rowid
						    INTO   :abonKB.colSab,:abonKB.colNmk,:abonKB.colRnk,:abonKB.colKod,:abonKB.colTip,:abonKB.colIdb,:abonKB.colIdd,
						           :abonKB.colIdo,:abonKB.colIds,:abonKB.colBlk,:abonKB.colRowid
						    FROM   klpsbb k, customer c
						    WHERE  k.sab=c.sab and c.stmt in (5,6) and c.sab is not null
						    ORDER BY 1"
				Set abonKB.strSqlPopulate = "
						    SELECT k.sab,c.nmk,c.rnk,c.okpo,k.idb,k.idd,k.ido,k.rowid
						    INTO   :abonKB.colSab,:abonKB.colNmk,:abonKB.colRnk,:abonKB.colKod,:abonKB.colIdb,:abonKB.colIdd,:abonKB.colIdo,
						           :abonKB.colRowid
						    FROM   klpsbb k, customer c
						    WHERE  k.sab=c.sab and c.stmt in (5,6) and c.sab is not null
						    ORDER BY 1"
				! Set abonKB.strSqlUpdate = "
						    UPDATE klpsbb
						    SET    tip=:abonKB.colTip,idb=:abonKB.colIdb,idd=:abonKB.colIdd,ids=:abonKB.colIds,blk=:abonKB.colBlk
						    WHERE  rowid=:abonKB.colRowid"
				Set abonKB.strSqlUpdate = "
						    UPDATE klpsbb
						    SET    idb=:abonKB.colIdb,idd=:abonKB.colIdd,ido=:abonKB.colIdo
						    WHERE  rowid=:abonKB.colRowid"
				Call SalSendClassMessage(SAM_Create, 0, 0)
				Call SalSendMsg(hWndForm, UM_Populate, 0, 0)
				Call SalTblSetTableFlags(hWndForm, TBL_Flag_SingleSelection, TRUE)
				Call SalWaitCursor(FALSE)
			! On SAM_CreateComplete
				! вычитка идентификаторов для подписи и шифрования
				                      Call SalArraySetUpperBound(smSab, 1, -1)
				                      Call SalArraySetUpperBound(smIds, 1, -1)
				                      If SqlPrepareAndExecute(hSql(), "
						   SELECT sab,ids
						   INTO   :sSab,:sIds
						   FROM   klpsbb")
					                      While SqlFetchNext(hSql(), nFetchRes)
						                      Set smSab[nI] = sSab
						                      Set smIds[nI] = sIds
						                      Set nI = nI + 1
			On UM_Populate
				Call SalSendClassMessage(UM_Populate, 0, 0)
				! Call VisTblAutoSizeColumn(hWndForm, hWndNULL)
				Set nRow = TBL_MinRow
				Call SalTblFindNextRow(hWndForm, nRow, 0, 0)
				Call SalTblSetFocusRow(hWndForm, nRow)
				Call SalTblSetContext(hWndForm, nRow)
			On SAM_Close
				If SalTblAnyRows(abonKB, ROW_Edited | ROW_MarkDeleted | ROW_New, 0)
					Call SalMessageBeep(MB_IconQuestion)
					If SalMessageBox('В таблице присутствуют несохранённые изменения. Игнорировать их?', 'Внимание!',
							   MB_IconQuestion | MB_YesNo) != IDYES
						Return FALSE
				If menu12.sVegaSignOn = '2' or menu12.sVegaSignOn = '1'
					! перечитка идентификаторов для подписи и шифрования
					Call SalArraySetUpperBound(smSab, 1, -1)
					Call SalArraySetUpperBound(smIds, 1, -1)
					Call SalArraySetUpperBound(smIdb, 1, -1)
					Call SalArraySetUpperBound(smIdd, 1, -1)
					Call SalArraySetUpperBound(smIdo, 1, -1)
					If SqlPrepareAndExecute(hSql(), "
							   SELECT sab,ids,idb,idd,ido
							   INTO   :sSab,:sIds,:sIdb,:sIdd,:sIdo
							   FROM   klpsbb")
						While SqlFetchNext(hSql(), nFetchRes)
							Set smSab[nI] = sSab
							Set smIds[nI] = sIds
							Set smIdb[nI] = sIdb
							Set smIdd[nI] = sIdd
							Set smIdo[nI] = sIdo
							Set nI = nI + 1
				Call SalEnableWindow(menu12.pbEsc)
				Call SalEnableWindow(menu12.pb5)
				Call SalEnableWindow(menu12.pb4)
				Call SalEnableWindow(menu12.pb7)
				Call SalEnableWindow(menu12.pbPismo)
				Call SalEnableWindow(menu12.pb3)
				Call SalEnableWindow(menu12.pb1)
				Call SalEnableWindow(menu12.pbKartA)
			! On SAM_Destroy
				                                                                                                        Call SalEnableWindow(menu12.pbKartA)
			! On WM_NCMouseMove
				                                                           Call VisTblAutoSizeColumn(hWndForm, hWndNULL)
	Dialog Box: temaPisma
		Class:
		Property Template:
		Class DLL Name:
		Title: Введите тему письма
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   0.625"
				Top:    0.625"
				Width:  6.667"
				Width Editable? Yes
				Height: 1.262"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Data Field: df1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left:   0.083"
						Top:    0.071"
						Width:  6.4"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_Create
						Set df1 = sTemaPisma
			Pushbutton: pbOk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ok
				Window Location and Size
					Left:   3.983"
					Top:    0.405"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.5"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name: \Bars98\RESOURCE\BMP\Tomail.bmp
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Dark Green
				Background Color: Default
				Message Actions
					On SAM_Click
						Set sTemaPisma = df1
						Call SalEndDialog(hWndForm, 0)
			Pushbutton: pbCancel
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Cancel
				Window Location and Size
					Left:   1.483"
					Top:    0.405"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.5"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Picture File Name: \Bars98\RESOURCE\BMP\Discard.bmp
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Dark Red
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalEndDialog(hWndForm, -1)
		Functions
		Window Parameters
		Window Variables
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
	Dialog Box: dlg_edit_mess
		Class:
		Property Template:
		Class DLL Name:
		Title: Просмотр сообщений
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   2.888"
				Top:    1.042"
				Width:  8.657"
				Width Editable? Yes
				Height: 2.881"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description: Форма просмотра сообщений
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Background Text: Время
				Resource Id: 31939
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.15"
					Top:    0.048"
					Width:  0.917"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: 10
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: df_time
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? No
				Display Settings
					Window Location and Size
						Left:   1.0"
						Top:    0.06"
						Width:  1.2"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? No
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: 10
					Font Enhancement: Default
					Text Color: Default
					Background Color: 3D Face Color
					Input Mask: Unformatted
				Message Actions
			Multiline Field: ml_text
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					String Type: String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left:   0.133"
						Top:    0.333"
						Width:  8.3"
						Width Editable? Yes
						Height: 1.729"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: 10
					Font Enhancement: Default
					Text Color: Default
					Background Color: 3D Highlight Color
				Message Actions
			Pushbutton: pb_close
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left:   7.8"
					Top:    2.107"
					Width:  0.633"
					Width Editable? Yes
					Height: 0.4"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name: Q:\BARS98\RESOURCE\BMP\Discard.bmp
				Picture Transparent Color: Gray
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalEndDialog(hWndForm, 0)
					! On SAM_TooltipSetText
						                                                                                                         Return XSalTooltipSetText(lParam, 'Закрыть окно')
		Functions
		Window Parameters
			Number: nRow
		Window Variables
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
			On SAM_CreateComplete
				Set df_time = menu12.tblMessage.colTime
				Set ml_text = menu12.tblMessage.colText
				Call SalSetFocus(pb_close)
	Dialog Box: dlg_edit_id
		Class:
		Property Template:
		Class DLL Name:
		Title: Редактирование идентификаторов
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   2.888"
				Top:    1.042"
				Width:  3.917"
				Width Editable? Yes
				Height: 6.929"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description: Форма редактирования идентификаторов открытых ключей
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Pushbutton: pb_close
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left:   3.283"
					Top:    0.036"
					Width:  0.433"
					Width Editable? Yes
					Height: 0.321"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name: Q:\BARS98\RESOURCE\BMP\Discard.bmp
				Picture Transparent Color: Gray
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						! Call SalEndDialog(hWndForm, 0)
						! Call SalSetFocus(abonKB.pbUpdate)
						Call SalSendMsg(hWndForm, SAM_Close, 0, 0)
					On SAM_TooltipSetText
						Return XSalTooltipSetText(lParam, 'Выход')
			Pushbutton: pb_apply
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left:   1.217"
					Top:    0.036"
					Width:  0.433"
					Width Editable? Yes
					Height: 0.321"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name: E:\Bars98\RESOURCE\BMP\APPLY.BMP
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						If sBDO = 'b'
							Set abonKB.colIdb = fzap()
						If sBDO = 'd'
							Set abonKB.colIdd = fzap()
						If sBDO = 'o'
							Set abonKB.colIdo = fzap()
						If bIzm
							Call SalTblSetRowFlags(abonKB, nRow, ROW_Edited, TRUE)
						Call SalEndDialog(hWndForm, 0)
						Call SalSetFocus(abonKB.pbUpdate)
						! Call SalSetFocus(hCol)
					On SAM_TooltipSetText
						Return XSalTooltipSetText(lParam, 'Применить')
			Child Table: tbl1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Display Settings
					Window Location and Size
						Left:   0.05"
						Top:    0.381"
						Width:  3.667"
						Width Editable? Yes
						Height: 6.19"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Default
					Background Color: Default
					View: Table
					Allow Row Sizing? No
					Lines Per Row: Default
				Memory Settings
					Maximum Rows in Memory: Default
					Discardable? Yes
				Contents
					Column: col1
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Идентификатор
						Visible? Yes
						Editable? Yes
						Maximum Data Length: 8
						Data Type: String
						Justify: Left
						Width:  2.9"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
							On SAM_Validate
								If Len(col1) = 8 and ((Left(col1, 1) >= '0' and Left(col1, 1) <= '9') or
										   (Left(col1, 1) >= 'A' and Left(col1, 1) <= 'Z')) and
										   ((Subs(col1, 2, 1) >= '0' and Subs(col1, 2, 1) <= '9') or
										    (Subs(col1, 2, 1) >= 'A' and Subs(col1, 2, 1) <= 'Z')) and
										   ((Subs(col1, 3, 1) >= '0' and Subs(col1, 3, 1) <= '9') or
										    (Subs(col1, 3, 1) >= 'A' and Subs(col1, 3, 1) <= 'Z')) and
										   ((Subs(col1, 4, 1) >= '0' and Subs(col1, 4, 1) <= '9') or
										    (Subs(col1, 4, 1) >= 'A' and Subs(col1, 4, 1) <= 'Z')) and
										   ((Subs(col1, 5, 1) >= '0' and Subs(col1, 5, 1) <= '9') or
										    (Subs(col1, 5, 1) >= 'A' and Subs(col1, 5, 1) <= 'Z')) and
										   ((Subs(col1, 6, 1) >= '0' and Subs(col1, 6, 1) <= '9') or
										    (Subs(col1, 6, 1) >= 'A' and Subs(col1, 6, 1) <= 'Z')) and
										   ((Subs(col1, 7, 1) >= '0' and Subs(col1, 7, 1) <= '9') or
										    (Subs(col1, 7, 1) >= 'A' and Subs(col1, 7, 1) <= 'Z')) and
										   ((Right(col1, 1) >= '0' and Right(col1, 1) <= '9') or (Right(col1, 1) >= 'A' and Right(col1, 1) <= 'Z'))
									Set bIzm = TRUE
									Return VALIDATE_Ok
								Else
									Return VALIDATE_Cancel
				Functions
				Window Variables
					Number: nNumTokens
					Number: nRowNew
					String: smTokenArray[*]
					String: sTmp
				Message Actions
					On SAM_Create
						If sBDO = 'b'
							Set sTmp = abonKB.colIdb
						If sBDO = 'd'
							Set sTmp = abonKB.colIdd
						If sBDO = 'o'
							Set sTmp = abonKB.colIdo
						Set nNumTokens = SalStrTokenize(sTmp, ',', ',', smTokenArray)
						! Call DebugN(nNumTokens)
						If nNumTokens > 0
							Set nRowNew = 0
							While nRowNew < nNumTokens
								Call SalTblInsertRow(tbl1, nRowNew)
								Call SalTblSetContext(tbl1, nRowNew)
								Set col1 = smTokenArray[nRowNew]
								Call SalTblSetRowFlags(tbl1, nRowNew, ROW_New, FALSE)
								Set nRowNew = nRowNew + 1
							Call SalTblSetFocusRow(tbl1, 0)
							Call SalTblSetContext(tbl1, 0)
			Pushbutton: pbDelete
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: ctb_pbDelete
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left:   0.633"
					Top:    0.036"
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Message Actions
					On SAM_Click
						Call SalTblSetRowFlags(tbl1, SalTblQueryContext(tbl1), ROW_MarkDeleted, TRUE)
						Set bIzm = TRUE
					On SAM_TooltipSetText
						Return XSalTooltipSetText(lParam, 'Удалить')
			Pushbutton: pbInsert
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: ctb_pbInsert
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left:   0.05"
					Top:    0.036"
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Message Actions
					On SAM_Click
						Set nInsRow = SalTblInsertRow(tbl1, TBL_MaxRow)
						Call SalTblSetContext(tbl1, nInsRow)
						Set bIzm = TRUE
					On SAM_TooltipSetText
						Return XSalTooltipSetText(lParam, 'Вставить')
		Functions
			Function: fzap
				Description:
				Returns
					String:
				Parameters
				Static Variables
				Local variables
					Number: nCurrentRow
					String: sRes
				Actions
					Set nCurrentRow = TBL_MinRow
					Set sRes = ''
					While SalTblFindNextRow(tbl1, nCurrentRow, 0, ROW_MarkDeleted)
						Call SalTblSetContext(tbl1, nCurrentRow)
						If tbl1.col1 != STRING_Null
							Set sRes = sRes || IifS(Len(sRes)=0, '', ',') || tbl1.col1
					Return sRes
		Window Parameters
			String: sBDO
			String: sIdent
			Number: nRow
			! Window Handle: hCol
		Window Variables
			Number: nInsRow
			String: sTmp
			Boolean: bIzm
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
				If Len(sIdent) = 0
					Call SalEndDialog(hWndForm, 0)
			On SAM_CreateComplete
				Call SalSetFocus(pb_close)
				Call SalTblSetTableFlags(tbl1, TBL_Flag_SingleSelection, TRUE)
				Set bIzm = FALSE
			On SAM_Close
				If SalTblAnyRows(tbl1, ROW_Edited | ROW_MarkDeleted | ROW_New, 0)
					Call SalMessageBeep(MB_IconQuestion)
					If SalMessageBox('В таблице присутствуют несохранённые изменения. Игнорировать их?', 'Внимание!',
							   MB_IconQuestion | MB_YesNo) != IDYES
						Return FALSE
				Call SalSetFocus(abonKB.pbUpdate)
