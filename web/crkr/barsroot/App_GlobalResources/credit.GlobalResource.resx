<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="labBROpisanie" xml:space="preserve">
    <value>! &lt;br /&gt; Описание : </value>
  </data>
  <data name="labCKSDokumentN" xml:space="preserve">
    <value>CKS Документ №</value>
  </data>
  <data name="labClient" xml:space="preserve">
    <value>Клиент : </value>
  </data>
  <data name="labDa" xml:space="preserve">
    <value>Да</value>
  </data>
  <data name="labDogovorNaiden" xml:space="preserve">
    <value>Договор найден.</value>
  </data>
  <data name="labIstekloVremiaOgidaniaOtveta" xml:space="preserve">
    <value>Истекло время ожидания ответа.</value>
  </data>
  <data name="labNeOpla4en" xml:space="preserve">
    <value> не оплачен.</value>
  </data>
  <data name="labNet" xml:space="preserve">
    <value>Нет</value>
  </data>
  <data name="labNevernaiaSeriaPasporta" xml:space="preserve">
    <value>Неверная Серия Паспорта!</value>
  </data>
  <data name="labNevernaiaSumma" xml:space="preserve">
    <value>Неверная сумма!</value>
  </data>
  <data name="labNevernyiIdetifikacionyiKod" xml:space="preserve">
    <value>Неверный Идентификационный Код!</value>
  </data>
  <data name="labNeZadan" xml:space="preserve">
    <value>Не задан</value>
  </data>
  <data name="labOplataProwlaUspewnoBRReferensDoc" xml:space="preserve">
    <value>Оплата прошла успешно. &lt;br /&gt; Референс документа: </value>
  </data>
  <data name="labOstato4nyi" xml:space="preserve">
    <value>Остаточный</value>
  </data>
  <data name="labOt" xml:space="preserve">
    <value> от </value>
  </data>
  <data name="labOwibka" xml:space="preserve">
    <value>Ошибка: </value>
  </data>
  <data name="labPoleObiazatelnoDliaZapolnenia" xml:space="preserve">
    <value>Поле обязательно для заполнения!</value>
  </data>
  <data name="labPoto4nyi" xml:space="preserve">
    <value>Поточный</value>
  </data>
  <data name="labPriRegistrProizowlaOwibka" xml:space="preserve">
    <value>При регистрации произошла ошибка </value>
  </data>
  <data name="labProizowlaOwibka" xml:space="preserve">
    <value>Произошла ошибка</value>
  </data>
  <data name="labProwloVremeni" xml:space="preserve">
    <value>Прошло времени : </value>
  </data>
  <data name="labSek" xml:space="preserve">
    <value> сек.</value>
  </data>
  <data name="labStek" xml:space="preserve">
    <value> Стек: </value>
  </data>
  <data name="labUkazanyiDogovorNeNaisen" xml:space="preserve">
    <value>Указаный договор не найден</value>
  </data>
  <data name="labUplataDolgaPoKreditnomuDogovoru" xml:space="preserve">
    <value>Уплата долга по кредиту соггласно договору №</value>
  </data>
  <data name="labVydanyi" xml:space="preserve">
    <value> выданый </value>
  </data>
  <data name="labZapolniteDatu" xml:space="preserve">
    <value>Заполните дату!</value>
  </data>
  <data name="labZapolniteDatuRogdenia" xml:space="preserve">
    <value>Заполните дату рождения!</value>
  </data>
  <data name="labZapolnitePoleSummy" xml:space="preserve">
    <value>Заполните поле суммы!</value>
  </data>
  <data name="labZaprosPostavlenVO4ered" xml:space="preserve">
    <value>Запрос поставлен в очередь. </value>
  </data>
  <data name="lbBody" xml:space="preserve">
    <value>Тіло ({0}): {1} (з них прострочки {2})</value>
  </data>
  <data name="lbCommission" xml:space="preserve">
    <value>Комісія ({0}): {1} (з них прострочки {2})</value>
  </data>
  <data name="lbE" xml:space="preserve">
    <value>Еквівалент в ({0}): {1}</value>
  </data>
  <data name="lbPeny" xml:space="preserve">
    <value>Пеня ({0}): {1}</value>
  </data>
  <data name="lbPercents" xml:space="preserve">
    <value>Проценти ({0}): {1} (з них прострочки {2})</value>
  </data>
  <data name="lbP" xml:space="preserve">
    <value>Пеня ({0}) :</value>
  </data>
  <data name="lbS" xml:space="preserve">
    <value>Сума боргу ({0}) :</value>
  </data>
  <data name="lbSK" xml:space="preserve">
    <value>Комісія ({0}) :</value>
  </data>
</root>