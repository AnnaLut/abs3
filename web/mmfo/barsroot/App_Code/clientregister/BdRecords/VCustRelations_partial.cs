/*
    AUTOGENERATED! Do not modify this code.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Collections.Specialized;
using System.Data;
using System.Web.Configuration;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
using ibank.core;
using Bars.Classes;

namespace clientregister
{
    public partial class VCustRelations
    {
        public List<VCustRelationsRecord> SelectCustRelations(Decimal? RNK)
        {
            this.Filter.RNK.Equal(RNK);
            return Select();
        }
        public List<VCustRelationsRecord> SelectCustRelation(Decimal? RNK, Decimal? REL_INTEXT, Decimal? RELCUST_RNK, Decimal? RELEXT_ID)
        {
            this.Filter.RNK.Equal(RNK);
            this.Filter.REL_INTEXT.Equal(REL_INTEXT);

            if (RELCUST_RNK.HasValue)
                this.Filter.RELCUST_RNK.Equal(RELCUST_RNK);
            if (RELEXT_ID.HasValue)
                this.Filter.RELEXT_ID.Equal(RELEXT_ID);

            return Select();
        }
        public new void Update(VCustRelationsRecord Item)
        {
            // обрабатываем только реквизиты НЕ клиента
            if (Item.REL_INTEXT == 0)
            {
                Kl kl = new Kl(this.Connection);

                Decimal? EXT_ID = Item.RELEXT_ID;
                kl.SETCUSTOMEREXTERN(ref EXT_ID, Item.NAME, Item.DOC_TYPE, Item.DOC_SERIAL, Item.DOC_NUMBER,
                    Item.DOC_DATE, Item.DOC_ISSUER, Item.BIRTHDAY, Item.BIRTHPLACE, Item.SEX, Item.ADR, Item.TEL,
                    Item.EMAIL, Item.CUSTTYPE, Item.OKPO, Item.COUNTRY, Item.REGION, Item.FS, Item.VED, Item.SED,
                    Item.ISE, Item.NOTES, Item.DATE_PHOTO, Item.EDDR_ID, Item.ACTUAL_DATE);
            }
        }
        public new void Insert(VCustRelationsRecord Item)
        {
            Kl kl = new Kl(this.Connection);
            // тип связаности - Пусто
            Decimal? RELID = -1;

            if (Item.REL_INTEXT == 0)
            {
                // НЕ клиент

                Decimal? EXT_ID = Item.RELEXT_ID;
                kl.SETCUSTOMEREXTERN(ref EXT_ID, Item.NAME, Item.DOC_TYPE, Item.DOC_SERIAL, Item.DOC_NUMBER,
                    Item.DOC_DATE, Item.DOC_ISSUER, Item.BIRTHDAY, Item.BIRTHPLACE, Item.SEX, Item.ADR, Item.TEL,
                    Item.EMAIL, Item.CUSTTYPE, Item.OKPO, Item.COUNTRY, Item.REGION, Item.FS, Item.VED, Item.SED,
                    Item.ISE, Item.NOTES, Item.DATE_PHOTO, Item.EDDR_ID, Item.ACTUAL_DATE);
                kl.SETCUSTOMERREL(Item.RNK, RELID, EXT_ID, Item.REL_INTEXT, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            }
            else
            {
                // клиент

                Decimal? CUST_RNK = Item.RELCUST_RNK;
                kl.SETCUSTOMERELEMENT(CUST_RNK, "RCOMM", Item.NOTES);
                kl.SETCUSTOMERREL(Item.RNK, RELID, CUST_RNK, Item.REL_INTEXT, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            }
        }
        public new void Delete(VCustRelationsRecord Item)
        {
            Kl kl = new Kl(this.Connection);

            List<VCustRelationTypesRecord> lst = (new VCustRelationTypes(this.Connection)).SelectCustRelationTypes(Item.RNK, Item.REL_INTEXT, Item.RELCUST_RNK, Item.RELEXT_ID);
            foreach (VCustRelationTypesRecord rec in lst)
            {
                if (Item.REL_INTEXT == 0)
                {
                    // НЕ клиент
                    kl.DELCUSTOMERREL(Item.RNK, rec.REL_ID, Item.RELEXT_ID, Item.REL_INTEXT);
                }
                else
                {
                    // клиент
                    kl.DELCUSTOMERREL(Item.RNK, rec.REL_ID, Item.RELCUST_RNK, Item.REL_INTEXT);
                }
            }
        }
    }
}