@{
    Layout = null;
    ViewBag.Title = "";
}
@using Areas.Cash.Models
@model decimal
<script src="@Url.Content("~/lib/jsZip/jszip.min.js")"></script>
<div data-ng-controller="Cash.LimitsDistributionMfo">
    <h1>Протокол загрузки розподілу лімітів на рахунки</h1>
    @(Html.Kendo().Grid<V_CLIM_LOG_LOADXLS_ACCLIM>()
                          .Name("gridAccLimLoadLog")
                          .ToolBar(tools => tools.Excel())
                          .Excel(i => i.FileName("AccLimLoadLog.xlsx")
                              .AllPages(true)
                              .Filterable(true)
                              .ProxyURL(Url.Content("~/cash/Violations/ConvertBase64ToFile/"))
                          )
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.ACC_ID).Width("150px");
                              columns.Bound(c => c.ACC_BRANCH).Width("150px");
                              columns.Bound(c => c.KF).Width("80px");
                              columns.Bound(c => c.ACC_NUMBER).Width("150px");
                              columns.Bound(c => c.ACC_NAME).Width("200px");
                              columns.Bound(c => c.KV).Width("80px");
                              columns.Bound(c => c.BALANCE).Width("120px")
                                  .Format("{0:n2}")
                                  .HtmlAttributes(new { @class = "money badSum" });
                              columns.Bound(c => c.LIM_CURRENT).Width("120px")
                                  .Format("{0:n2}")
                                  .HtmlAttributes(new { @class = "money badSum" });
                              columns.Bound(c => c.LIM_MAX).Width("120px")
                                  .Format("{0:n2}")
                                  .HtmlAttributes(new { @class = "money badSum" });
                              columns.Bound(c => c.TYPE_ACC);
                              columns.Bound(c => c.ACC_CLOSE_DATE).Width("120px")
                                .Format("{0:dd.MM.yyyy}")
                                  .HtmlAttributes(new { @class = "money badSum" });
                              columns.Bound(c => c.LIM_START_DATE).Width("120px")
                                  .Format("{0:dd.MM.yyyy}");
                              columns.Bound(c => c.PROCESS_DATE).Width("120px")
                                  .Format("{0:dd.MM.yyyy hh:mm}"); 
                              columns.Bound(c => c.STATUS).Width("120px");
                              columns.Bound(c => c.TEXT).Width("300px");
                          })
                          .Resizable(resize => resize.Columns(true))
                          .Pageable(pager => pager
                              .PageSizes(new[] { 10, 20, 50, 100, 200 })
                              .Refresh(true))
                          .Sortable()
                          .Scrollable()
                          .Filterable()
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .Model(model =>
                              {
                                  model.Id(p => p.ID_ROW);

                                  model.Field(p => p.ID_SESSION).Editable(false);
                                  model.Field(p => p.ACC_ID).Editable(false);
                                  model.Field(p => p.ACC_BRANCH).Editable(false);
                                  model.Field(p => p.KF).Editable(false);
                                  model.Field(p => p.ACC_NUMBER).Editable(false);
                                  model.Field(p => p.ACC_NAME).Editable(false);
                                  model.Field(p => p.KV).Editable(false);
                                  model.Field(p => p.BALANCE).Editable(false);
                                  model.Field(p => p.LIM_CURRENT).Editable(false);
                                  model.Field(p => p.LIM_MAX).Editable(false);

                                  model.Field(p => p.TYPE_ACC).Editable(false);
                                  model.Field(p => p.ACC_CLOSE_DATE).Editable(false);
                                  model.Field(p => p.LIM_START_DATE).Editable(false);
                                  model.Field(p => p.PROCESS_DATE).Editable(false);
                                  model.Field(p => p.STATUS).Editable(false);
                                  model.Field(p => p.TEXT).Editable(false);
                              })
                              .Read(read => read.Action("GetAccProtocolData", "LimitsDistribution", new { id = Model }))
                          ))
</div>