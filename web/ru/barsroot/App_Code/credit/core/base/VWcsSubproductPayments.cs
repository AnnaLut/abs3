/*
    AUTOGENERATED! Do not modify this code.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Collections.Specialized;
using System.Data;
using System.Web.Configuration;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
using ibank.core;
using Bars.Classes;

namespace credit
{
    public sealed class VWcsSubproductPaymentsRecord : BbRecord
    {
        public VWcsSubproductPaymentsRecord(): base()
        {
            fillFields();
        }
        public VWcsSubproductPaymentsRecord(BbDataSource Parent) : base (Parent)
        {
            fillFields();
        }
        public VWcsSubproductPaymentsRecord(BbDataSource Parent, OracleDecimal RowScn, String SUBPRODUCT_ID, String PAYMENT_ID, String PAYMENT_NAME)
            : this(Parent)
        {
            this.SUBPRODUCT_ID = SUBPRODUCT_ID;
            this.PAYMENT_ID = PAYMENT_ID;
            this.PAYMENT_NAME = PAYMENT_NAME;
            this.RowScn = RowScn;
            this.IsRowscnSupported = false;
            this.ClearChanges();
        }
        private void fillFields()
        {
            Fields.Add( new BbField("SUBPRODUCT_ID", OracleDbType.Varchar2, false, false, false, false, false, "V_WCS_SUBPRODUCT_PAYMENTS", ObjectTypes.View, "Привязка типов выдачи к суб-продукту (Представление)", "Идентификатор субродукта"));
            Fields.Add( new BbField("PAYMENT_ID", OracleDbType.Varchar2, false, false, false, false, false, "V_WCS_SUBPRODUCT_PAYMENTS", ObjectTypes.View, "Привязка типов выдачи к суб-продукту (Представление)", "Идентификатор типа выдачи"));
            Fields.Add( new BbField("PAYMENT_NAME", OracleDbType.Varchar2, false, false, false, false, false, "V_WCS_SUBPRODUCT_PAYMENTS", ObjectTypes.View, "Привязка типов выдачи к суб-продукту (Представление)", "Наименование типа выдачи"));        
        }
        public String SUBPRODUCT_ID { get { return (String)FindField("SUBPRODUCT_ID").Value; } set {SetField("SUBPRODUCT_ID", value);} }
        public String PAYMENT_ID { get { return (String)FindField("PAYMENT_ID").Value; } set {SetField("PAYMENT_ID", value);} }
        public String PAYMENT_NAME { get { return (String)FindField("PAYMENT_NAME").Value; } set {SetField("PAYMENT_NAME", value);} }
    }

    public sealed class VWcsSubproductPaymentsFilters : BbFilters
    {
        public VWcsSubproductPaymentsFilters(BbDataSource Parent) : base (Parent)
        {
            SUBPRODUCT_ID = new BBVarchar2Filter(this, "SUBPRODUCT_ID");
            PAYMENT_ID = new BBVarchar2Filter(this, "PAYMENT_ID");
            PAYMENT_NAME = new BBVarchar2Filter(this, "PAYMENT_NAME");
        }
        public BBVarchar2Filter SUBPRODUCT_ID;
        public BBVarchar2Filter PAYMENT_ID;
        public BBVarchar2Filter PAYMENT_NAME;
    }

    public partial class VWcsSubproductPayments : BbTable<VWcsSubproductPaymentsRecord, VWcsSubproductPaymentsFilters>
    {
        public VWcsSubproductPayments() : base(new BbConnection())
        {
            // base.Connection.RoleName = "WR_WCS";
        }
        public VWcsSubproductPayments(BbConnection Connection)
            : base(Connection)
        {
        }
        public override List<VWcsSubproductPaymentsRecord> Select(VWcsSubproductPaymentsRecord Item)
        {
            List<VWcsSubproductPaymentsRecord> res = new List<VWcsSubproductPaymentsRecord>();
                        OracleDataReader rdr = null;
            ConnectionResult connectionResult = Connection.InitConnection();
            try
            {
                rdr = ExecuteReader(Item);
                while (rdr.Read())
                {
                    res.Add(new VWcsSubproductPaymentsRecord(
                        this,
                        rdr.IsDBNull(0) ? OracleDecimal.Null : rdr.GetOracleDecimal(0),
                        rdr.IsDBNull(1) ?  (String)null : Convert.ToString(rdr[1]), 
                        rdr.IsDBNull(2) ?  (String)null : Convert.ToString(rdr[2]), 
                        rdr.IsDBNull(3) ?  (String)null : Convert.ToString(rdr[3]))
                    );
                }
            }
                        finally
            {
                DisposeDataReader(rdr);
                if (ConnectionResult.New == connectionResult)
                    Connection.CloseConnection();
            }
            return res;
        }
    }
}