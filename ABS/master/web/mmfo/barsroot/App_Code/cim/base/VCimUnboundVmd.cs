/*
    AUTOGENERATED! Do not modify this code.
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Collections.Specialized;
using System.Data;
using System.Web.Configuration;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
using ibank.core;
using Bars.Classes;

namespace cim
{
    public sealed class VCimUnboundVmdRecord : BbRecord
    {
        public VCimUnboundVmdRecord(): base()
        {
            fillFields();
        }
        public VCimUnboundVmdRecord(BbDataSource Parent) : base (Parent)
        {
            fillFields();
        }
        public VCimUnboundVmdRecord(BbDataSource Parent, OracleDecimal RowScn, Decimal? VMD_ID, Decimal? VMD_TYPE, Decimal? VMD_KIND, Decimal? DIRECT, String NUM, String OKPO, String NMK, String BENEF_NAME, String BENEF_ADR, Decimal? COUNTRY, Decimal? KV, Decimal? S, Decimal? UNBOUND_S, DateTime? ALLOW_DATE, DateTime? DOC_DATE, String CONTRACT_NUM, DateTime? CONTRACT_DATE, String F_NAME, DateTime? F_DATE, Decimal? N, String BRANCH, String CIM_ORIGINAL)
            : this(Parent)
        {
            this.VMD_ID = VMD_ID;
            this.VMD_TYPE = VMD_TYPE;
            this.VMD_KIND = VMD_KIND;
            this.DIRECT = DIRECT;
            this.NUM = NUM;
            this.OKPO = OKPO;
            this.NMK = NMK;
            this.BENEF_NAME = BENEF_NAME;
            this.BENEF_ADR = BENEF_ADR;
            this.COUNTRY = COUNTRY;
            this.KV = KV;
            this.S = S;
            this.UNBOUND_S = UNBOUND_S;
            this.ALLOW_DATE = ALLOW_DATE;
            this.DOC_DATE = DOC_DATE;
            this.CONTRACT_NUM = CONTRACT_NUM;
            this.CONTRACT_DATE = CONTRACT_DATE;
            this.F_NAME = F_NAME;
            this.F_DATE = F_DATE;
            this.N = N;
            this.BRANCH = BRANCH;
            this.CIM_ORIGINAL = CIM_ORIGINAL;
            this.RowScn = RowScn;
            this.IsRowscnSupported = false;
            this.ClearChanges();
        }
        private void fillFields()
        {
            Fields.Add( new BbField("VMD_ID", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Код ТД у WEB-модулі Валютный контроль"));
            Fields.Add( new BbField("VMD_TYPE", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Тип ВМД"));
            Fields.Add( new BbField("VMD_KIND", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Вид ВМД"));
            Fields.Add( new BbField("DIRECT", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Напрямок"));
            Fields.Add( new BbField("NUM", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Номер документу"));
            Fields.Add( new BbField("OKPO", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "ОКПО резедента"));
            Fields.Add( new BbField("NMK", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Назва резедента"));
            Fields.Add( new BbField("BENEF_NAME", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Назва нерезедента"));
            Fields.Add( new BbField("BENEF_ADR", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Адреса нерезедента"));
            Fields.Add( new BbField("COUNTRY", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Країна"));
            Fields.Add( new BbField("KV", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Валюта товару"));
            Fields.Add( new BbField("S", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Сума у валюті товару"));
            Fields.Add( new BbField("UNBOUND_S", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Неприв`язана частина суми у валюті товару"));
            Fields.Add( new BbField("ALLOW_DATE", OracleDbType.Date, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Дата дозволу"));
            Fields.Add( new BbField("DOC_DATE", OracleDbType.Date, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Дата паперового носія"));
            Fields.Add( new BbField("CONTRACT_NUM", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "№ контракту"));
            Fields.Add( new BbField("CONTRACT_DATE", OracleDbType.Date, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Дата контракту"));
            Fields.Add( new BbField("F_NAME", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Назва файлу"));
            Fields.Add( new BbField("F_DATE", OracleDbType.Date, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Дата файлу"));
            Fields.Add( new BbField("N", OracleDbType.Decimal, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "№ ВМД"));
            Fields.Add( new BbField("BRANCH", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "Номер відділення"));
            Fields.Add( new BbField("CIM_ORIGINAL", OracleDbType.Varchar2, true, false, false, false, false, "V_CIM_UNBOUND_VMD", ObjectTypes.View, "Неприв`язані ВМД", "1 - Первинна МД (не дубль)"));        
        }
        public Decimal? VMD_ID { get { return (Decimal?)FindField("VMD_ID").Value; } set {SetField("VMD_ID", value);} }
        public Decimal? VMD_TYPE { get { return (Decimal?)FindField("VMD_TYPE").Value; } set {SetField("VMD_TYPE", value);} }
        public Decimal? VMD_KIND { get { return (Decimal?)FindField("VMD_KIND").Value; } set {SetField("VMD_KIND", value);} }
        public Decimal? DIRECT { get { return (Decimal?)FindField("DIRECT").Value; } set {SetField("DIRECT", value);} }
        public String NUM { get { return (String)FindField("NUM").Value; } set {SetField("NUM", value);} }
        public String OKPO { get { return (String)FindField("OKPO").Value; } set {SetField("OKPO", value);} }
        public String NMK { get { return (String)FindField("NMK").Value; } set {SetField("NMK", value);} }
        public String BENEF_NAME { get { return (String)FindField("BENEF_NAME").Value; } set {SetField("BENEF_NAME", value);} }
        public String BENEF_ADR { get { return (String)FindField("BENEF_ADR").Value; } set {SetField("BENEF_ADR", value);} }
        public Decimal? COUNTRY { get { return (Decimal?)FindField("COUNTRY").Value; } set {SetField("COUNTRY", value);} }
        public Decimal? KV { get { return (Decimal?)FindField("KV").Value; } set {SetField("KV", value);} }
        public Decimal? S { get { return (Decimal?)FindField("S").Value; } set {SetField("S", value);} }
        public Decimal? UNBOUND_S { get { return (Decimal?)FindField("UNBOUND_S").Value; } set {SetField("UNBOUND_S", value);} }
        public DateTime? ALLOW_DATE { get { return (DateTime?)FindField("ALLOW_DATE").Value; } set {SetField("ALLOW_DATE", value);} }
        public DateTime? DOC_DATE { get { return (DateTime?)FindField("DOC_DATE").Value; } set {SetField("DOC_DATE", value);} }
        public String CONTRACT_NUM { get { return (String)FindField("CONTRACT_NUM").Value; } set {SetField("CONTRACT_NUM", value);} }
        public DateTime? CONTRACT_DATE { get { return (DateTime?)FindField("CONTRACT_DATE").Value; } set {SetField("CONTRACT_DATE", value);} }
        public String F_NAME { get { return (String)FindField("F_NAME").Value; } set {SetField("F_NAME", value);} }
        public DateTime? F_DATE { get { return (DateTime?)FindField("F_DATE").Value; } set {SetField("F_DATE", value);} }
        public Decimal? N { get { return (Decimal?)FindField("N").Value; } set {SetField("N", value);} }
        public String BRANCH { get { return (String)FindField("BRANCH").Value; } set {SetField("BRANCH", value);} }
        public String CIM_ORIGINAL { get { return (String)FindField("CIM_ORIGINAL").Value; } set {SetField("CIM_ORIGINAL", value);} }
    }

    public sealed class VCimUnboundVmdFilters : BbFilters
    {
        public VCimUnboundVmdFilters(BbDataSource Parent) : base (Parent)
        {
            VMD_ID = new BBDecimalFilter(this, "VMD_ID");
            VMD_TYPE = new BBDecimalFilter(this, "VMD_TYPE");
            VMD_KIND = new BBDecimalFilter(this, "VMD_KIND");
            DIRECT = new BBDecimalFilter(this, "DIRECT");
            NUM = new BBVarchar2Filter(this, "NUM");
            OKPO = new BBVarchar2Filter(this, "OKPO");
            NMK = new BBVarchar2Filter(this, "NMK");
            BENEF_NAME = new BBVarchar2Filter(this, "BENEF_NAME");
            BENEF_ADR = new BBVarchar2Filter(this, "BENEF_ADR");
            COUNTRY = new BBDecimalFilter(this, "COUNTRY");
            KV = new BBDecimalFilter(this, "KV");
            S = new BBDecimalFilter(this, "S");
            UNBOUND_S = new BBDecimalFilter(this, "UNBOUND_S");
            ALLOW_DATE = new BBDateFilter(this, "ALLOW_DATE");
            DOC_DATE = new BBDateFilter(this, "DOC_DATE");
            CONTRACT_NUM = new BBVarchar2Filter(this, "CONTRACT_NUM");
            CONTRACT_DATE = new BBDateFilter(this, "CONTRACT_DATE");
            F_NAME = new BBVarchar2Filter(this, "F_NAME");
            F_DATE = new BBDateFilter(this, "F_DATE");
            N = new BBDecimalFilter(this, "N");
            BRANCH = new BBVarchar2Filter(this, "BRANCH");
            CIM_ORIGINAL = new BBVarchar2Filter(this, "CIM_ORIGINAL");
        }
        public BBDecimalFilter VMD_ID;
        public BBDecimalFilter VMD_TYPE;
        public BBDecimalFilter VMD_KIND;
        public BBDecimalFilter DIRECT;
        public BBVarchar2Filter NUM;
        public BBVarchar2Filter OKPO;
        public BBVarchar2Filter NMK;
        public BBVarchar2Filter BENEF_NAME;
        public BBVarchar2Filter BENEF_ADR;
        public BBDecimalFilter COUNTRY;
        public BBDecimalFilter KV;
        public BBDecimalFilter S;
        public BBDecimalFilter UNBOUND_S;
        public BBDateFilter ALLOW_DATE;
        public BBDateFilter DOC_DATE;
        public BBVarchar2Filter CONTRACT_NUM;
        public BBDateFilter CONTRACT_DATE;
        public BBVarchar2Filter F_NAME;
        public BBDateFilter F_DATE;
        public BBDecimalFilter N;
        public BBVarchar2Filter BRANCH;
        public BBVarchar2Filter CIM_ORIGINAL;
    }

    public partial class VCimUnboundVmd : BbTable<VCimUnboundVmdRecord, VCimUnboundVmdFilters>
    {
        public VCimUnboundVmd() : base(new BbConnection())
        {
            // base.Connection.RoleName = "WR_WCS";
        }
        public VCimUnboundVmd(BbConnection Connection)
            : base(Connection)
        {
        }
        public override List<VCimUnboundVmdRecord> Select(VCimUnboundVmdRecord Item)
        {
            List<VCimUnboundVmdRecord> res = new List<VCimUnboundVmdRecord>();
            OracleDataReader rdr = null;
            ConnectionResult connectionResult = Connection.InitConnection();
            try
            {
                rdr = ExecuteReader(Item);
                while (rdr.Read())
                {
                    res.Add(new VCimUnboundVmdRecord(
                        this,
                        rdr.IsDBNull(0) ? OracleDecimal.Null : rdr.GetOracleDecimal(0),
                        rdr.IsDBNull(1) ?  (Decimal?)null : Convert.ToDecimal(rdr[1]), 
                        rdr.IsDBNull(2) ?  (Decimal?)null : Convert.ToDecimal(rdr[2]), 
                        rdr.IsDBNull(3) ?  (Decimal?)null : Convert.ToDecimal(rdr[3]), 
                        rdr.IsDBNull(4) ?  (Decimal?)null : Convert.ToDecimal(rdr[4]), 
                        rdr.IsDBNull(5) ?  (String)null : Convert.ToString(rdr[5]), 
                        rdr.IsDBNull(6) ?  (String)null : Convert.ToString(rdr[6]), 
                        rdr.IsDBNull(7) ?  (String)null : Convert.ToString(rdr[7]), 
                        rdr.IsDBNull(8) ?  (String)null : Convert.ToString(rdr[8]), 
                        rdr.IsDBNull(9) ?  (String)null : Convert.ToString(rdr[9]), 
                        rdr.IsDBNull(10) ?  (Decimal?)null : Convert.ToDecimal(rdr[10]), 
                        rdr.IsDBNull(11) ?  (Decimal?)null : Convert.ToDecimal(rdr[11]), 
                        rdr.IsDBNull(12) ?  (Decimal?)null : Convert.ToDecimal(rdr[12]), 
                        rdr.IsDBNull(13) ?  (Decimal?)null : Convert.ToDecimal(rdr[13]), 
                        rdr.IsDBNull(14) ?  (DateTime?)null : Convert.ToDateTime(rdr[14]), 
                        rdr.IsDBNull(15) ?  (DateTime?)null : Convert.ToDateTime(rdr[15]), 
                        rdr.IsDBNull(16) ?  (String)null : Convert.ToString(rdr[16]), 
                        rdr.IsDBNull(17) ?  (DateTime?)null : Convert.ToDateTime(rdr[17]), 
                        rdr.IsDBNull(18) ?  (String)null : Convert.ToString(rdr[18]), 
                        rdr.IsDBNull(19) ?  (DateTime?)null : Convert.ToDateTime(rdr[19]), 
                        rdr.IsDBNull(20) ?  (Decimal?)null : Convert.ToDecimal(rdr[20]), 
                        rdr.IsDBNull(21) ?  (String)null : Convert.ToString(rdr[21]), 
                        rdr.IsDBNull(22) ?  (String)null : Convert.ToString(rdr[22]))
                    );
                }
            }
            finally
            {
                DisposeDataReader(rdr);
                if (ConnectionResult.New == connectionResult)
                    Connection.CloseConnection();
            }
            return res;
        }
    }
}