@using BarsWeb.Areas.Cash.ViewModels
@using Kendo.Mvc.UI

@{
    Layout = "~/Views/Shared/_LayoutKendo.cshtml";
    const string title = "Синхронізація";
    const string syncAccounts = "Синхронізувати рахунки";
    const string syncAccountsRest = "Синхронізувати архів рахунків";
    const string syncBranches = "Синхронізувати перелік відділень";
}

<h1>@title</h1>


<div id="tooltip-section">
    @(Html.Kendo().Tooltip()
        .For("#grid_Connections")
        .Filter(".k-grid-syncAccountsRowButton")
        .ContentHandler("getTooltipSyncAccounts")
    )

    @(Html.Kendo().Tooltip()
        .For("#grid_Connections")
        .Filter(".k-grid-syncAccountsRestRowButton")
        .ContentHandler("getTooltipSyncAccountsRest")
    )

    @(Html.Kendo().Tooltip()
        .For("#grid_Connections")
        .Filter(".k-grid-syncBranchesRowButton")
        .ContentHandler("getTooltipSyncBranches")
    )

    @(Html.Kendo().Tooltip()
        .For("#grid_Connections")
        .Filter(".k-grid-syncTransactionsRowButton")
        .ContentHandler("getTooltipSyncTransactions")
    )

    @(Html.Kendo().Tooltip()
        .For("#grid_Connections")
        .Filter(".statusField")
        .ContentHandler("gridConnections_getTooltipSyncStatus")
    )

    @(Html.Kendo().Tooltip()
        .For("#grid_Log")
        .Filter(".statusField")
            .ContentHandler("gridLog_getTooltipSyncStatus")
    )

    @(Html.Kendo().Tooltip()
        .For("#grid_Log")
            .Filter(".transferTypeField")
            .ContentHandler("gridLog_getTooltipTransferType")
    )

    <script type="text/javascript">
        function getDataItem(e, gridId) {
            var row = e.target.closest("tr");
            var grid = $("#" + gridId).getKendoGrid();
            var item = grid.dataItem(row);
            return item;
        }

        function getTooltipSyncAccounts(e) {
            return "@syncAccounts для МФО " + getDataItem(e, "grid_Connections").Mfo;
        }

        function getTooltipSyncAccountsRest(e) {
            return "@syncAccountsRest для МФО " + getDataItem(e, "grid_Connections").Mfo;
        }

        function getTooltipSyncBranches(e) {
            return "@syncBranches для МФО " + getDataItem(e, "grid_Connections").Mfo;
        }

        function getTooltipSyncTransactions(e) {
            return "Синхронізація транзакцій для МФО " + getDataItem(e, "grid_Connections").Mfo;
        }

        function gridConnections_getTooltipSyncStatus(e) {
            return getDataItem(e, "grid_Connections").StatusName;
        }

        function gridLog_getTooltipSyncStatus(e) {
            return getDataItem(e, "grid_Log").StatusName;
        }

        function gridLog_getTooltipTransferType(e) {
            return getDataItem(e, "grid_Log").TransferTypeName;
        }
    </script>

</div>

<div id="table">
    <div id="row">
        <div id="tabStrip">
            <div id="childRecordsLevel1">
                @*Шаблон дочерней строки протокола*@
                <script id="template_ChildLevel1" type="text/x-kendo-template">
                    @(Html.Kendo().TabStrip()
                              .Name("tabstripChildRowsLevel1_#=ID#")
                              .Items(tabstrip =>
                              {
                                  tabstrip.Add().Text("Деталі")
                                      .Selected(true)
                                      .Content(@<text>
                                        @(Html.Kendo().Grid<SyncResult>()
                                          .Name("grid_LogChildRowsLevel1_#=ID#")
                                          .Columns(columns =>
                                          {
                                              columns.Bound(c => c.Status)
                                                      .ClientTemplate("\\#= formatStatus(data) \\#");
                                              columns.Bound(c => c.ID);
                                              columns.Bound(c => c.Mfo);
                                              //columns.Bound(c => c.URL);
                                              columns.Bound(c => c.DateStart)
                                                  .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                              columns.Bound(c => c.DateEnd)
                                                  .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                              columns.Bound(c => c.Duration).Sortable(false).Filterable(false);
                                              columns.Bound(c => c.RowsTotal);
                                              columns.Bound(c => c.RowsSucceed);
                                              columns.Bound(c => c.BankDate)
                                                  .Format("{0:dd.MM.yyyy}");
                                              columns.Bound(c => c.TransferType).HtmlAttributes(new { @class = "transferTypeField" });
                                          })
                                             .ClientDetailTemplateId("template_Child")
                                          .DataSource(dataSource => dataSource
                                              .Ajax()
                                              .Sort(sort => sort.Add(p => p.ID).Descending())
                                              .PageSize(10)
                                              .Read(read => read.Action("GetLog", "Sync", new { parentId = "#=ID#" })
                                              )
                                              .Events(e => e.Error("onError"))
                                          )
                                          .Pageable(pager => pager
                                                      .PageSizes(new[] { 10, 20, 50, 100 })
                                              .Refresh(true))
                                          .Sortable()
                                          .Selectable()
                                          .Resizable(resize => resize.Columns(true))
                                          .Reorderable(reorder => reorder.Columns(true))
                                          .ToClientTemplate()
                                        )
                                    </text>);
                                  tabstrip.Add().Text("Опис")
                                                .Content(@<text>
                                        <div class='employee-details'>
                                            <ul>
                                                <li>#= Message #</li>
                                            </ul>
                                        </div>
                                                </text>);
                              }).ToClientTemplate()
                    )
                </script>
            </div>
            <div id="childRecordsTabStrip">
                @*Шаблон дочерней строки протокола*@
                <script id="template_Child" type="text/x-kendo-template">
                    @(Html.Kendo().TabStrip()
                              .Name("tabstripChildRows_#=ID#")
                              .Items(tabstrip =>
                              {
                                  tabstrip.Add().Text("Деталі")
                                      .Selected(true)
                                      .Content(@<text>
                                        @(Html.Kendo().Grid<SyncResult>()
                                          .Name("grid_LogChildRows_#=ID#")
                                          .Columns(columns =>
                                          {
                                              columns.Bound(c => c.Status)
                                                  .ClientTemplate("\\#= formatStatus(data) \\#");
                                              columns.Bound(c => c.ID);
                                              columns.Bound(c => c.URL);
                                              columns.Bound(c => c.DateStart)
                                                  .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                              columns.Bound(c => c.DateEnd)
                                                  .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                              columns.Bound(c => c.Duration).Sortable(false).Filterable(false);
                                              columns.Bound(c => c.RowsTotal);
                                              columns.Bound(c => c.RowsSucceed);
                                              columns.Bound(c => c.BankDate)
                                                  .Format("{0:dd.MM.yyyy}");
                                          })
                                          .ClientDetailTemplateId("template_ErrorDescription")
                                          .DataSource(dataSource => dataSource
                                              .Ajax()
                                              .Sort(sort => sort.Add(p => p.ID).Descending())
                                              .PageSize(10)
                                              .Read(read => read.Action("GetLog", "Sync", new { parentId = "#=ID#" })
                                              )
                                              .Events(e => e.Error("onError"))
                                          )
                                          .Pageable(pager => pager
                                                      .PageSizes(new[] { 10, 20, 50, 100 })
                                              .Refresh(true))
                                          .Sortable()
                                          .Selectable()
                                          .Resizable(resize => resize.Columns(true))
                                          .Reorderable(reorder => reorder.Columns(true))
                                          .ToClientTemplate()
                                        )
                                    </text>);
                                  tabstrip.Add().Text("Опис")
                                                .Content(@<text>
                                        <div class='employee-details'>
                                            <ul>
                                                <li>#= Message #</li>
                                            </ul>
                                        </div>
                                                </text>);
                              }).ToClientTemplate()
                    )
                </script>

                <script id="template_ErrorDescription" type="text/x-kendo-template">
                    <div class='employee-details'>
                        <ul>
                            <li><label>Детальний опис</label>#= Message #</li>
                        </ul>
                    </div>
                </script>
            </div>

            @(Html.Kendo().TabStrip()
                  .Name("tabstrip")
                  .Items(tabstrip =>
                  {
                      tabstrip.Add().Text("Журнал")
                          .Selected(true)
                          .Content(@<text>
                            @*Панель навигации*@
                            <div class="navigationBar">
                                <button id='buttonFilterAccounts' class='k-button nav-button'>Рахунки</button>
                                <button id='buttonFilterAccountsRest' class='k-button nav-button'>Архів рахунків</button>
                                <button id='buttonFilterTransactions' class='k-button nav-button'>Транзакції</button>
                                <button id='buttonFilterBranches' class='k-button nav-button'>Перелік відділень</button>
                                <button id='buttonFilterAll' class='k-button nav-button'>Усі</button>
                                <br>
                            </div>

                            @(Html.Kendo().Grid<SyncResult>
                                              ()
                                              .Name("grid_Log")
                                              .Columns(columns =>
                                              {
                                                  columns.Bound(c => c.Status)
                                                      .ClientTemplate("#= formatStatus(data) #");
                                                  columns.Bound(c => c.ID);
                                                  columns.Bound(c => c.DateStart)
                                                      .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                                  columns.Bound(c => c.DateEnd)
                                                      .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                                  columns.Bound(c => c.Duration).Sortable(false).Filterable(false);
                                                  columns.Bound(c => c.TransferType).HtmlAttributes(new { @class = "transferTypeField" });
                                              })
                                              .ClientDetailTemplateId("template_ChildLevel1")

                                              .Resizable(resize => resize.Columns(true))
                                              .Reorderable(reorder => reorder.Columns(true))
                                              .Pageable(pager => pager
                                                  .PageSizes(true)
                                                  .Refresh(true))
                                              .Selectable()
                                              .Sortable()
                                              .Filterable(ftb => ftb.Mode(GridFilterMode.Menu))
                                              //.Groupable()
                                              .DataSource(dataSource => dataSource
                                                  .Ajax()
                                                  .Sort(sort => sort.Add(p => p.ID).Descending())
                                                          .Read(read => read.Action("GetLog", "Sync").Data("getSyncTypeFilter"))
                                                  .Events(e => e.Error("onError"))
                                              ))
                        </text>);

                      tabstrip.Add().Text("Параметри підключення до регіональних серверів")
                          .Content(@<text>
                                       <div data-role="toolbar"
                                            id="SyncAllToolbar"
                                            class="k-toolbar k-widget k-toolbar-resizable">
                                           <button id='SyncAccounts' class='k-button'>
                                               <span class='pf-icon pf-16 pf-bank-account'></span> @syncAccounts
                                           </button>
                                           <button id='SyncAccountsRest' class='k-button'>
                                               <span class='pf-icon pf-16 pf-calendar-update'></span> @syncAccountsRest
                                           </button>
                                           <button id='SyncBranches' class='k-button'>
                                               <span class='pf-icon pf-16 pf-bank-update'></span> @syncBranches
                                           </button>
                                           <button id='SyncTransactions' class='k-button'>
                                               <span class='pf-icon pf-16 pf-money_banknote-server'></span> Синхронізувати транзакції
                                           </button>
                                       </div>
                                       @(Html.Kendo().Grid<ConnectionOption>
                                             ()
                                             .Name("grid_Connections")
                                             .ToolBar(toolbar => toolbar.Template(
                                                 @ViewBag.Mode == "admin" ?
                                                 "<button id='grid_Connections_AddRow' class='k-button'>" +
                                                 "<span class='pf-icon pf-16 pf-add_button'></span> Додати" +
                                                 "</button>" : ""
                                                 ))
                                             .Columns(columns =>
                                             {
                                                 columns.Command(command =>
                                                 {
                                                     command.Custom("syncAccountsRowButton")
                                                         .Text("<span class='pf-icon pf-16 pf-bank-account'></span>")
                                                         .Click("syncAccountsRowButtonClick")
                                                         .HtmlAttributes(new {@class = "sync-btn"});
                                                     command.Custom("syncAccountsRestRowButton")
                                                         .Text("<span class='pf-icon pf-16 pf-calendar-update'></span>")
                                                         .Click("syncAccountsRestRowButtonClick")
                                                         .HtmlAttributes(new {@class = "sync-btn"});
                                                     command.Custom("syncBranchesRowButton")
                                                         .Text("<span class='pf-icon pf-16 pf-bank-update'></span>")
                                                         .Click("syncBranchesRowButtonClick")
                                                         .HtmlAttributes(new {@class = "sync-btn"});
                                                     command.Custom("syncTransactionsRowButton")
                                                         .Text("<span class='pf-icon pf-16 pf-money_banknote-server'></span>")
                                                         .Click("syncTransactionsRowButtonClick")
                                                         .HtmlAttributes(new {@class = "sync-btn"});
                                                 });
                                                 columns.Bound(c => c.SyncEnabled)
                                                     .Title("Виконувати<br>синхронізацію")
                                                     .ClientTemplate("#= formatSyncEnabled(data) #");
                                                 columns.Bound(c => c.LastSyncStatus)
                                                     .Title("Статус останньої<br>синхронізації")
                                                     .ClientTemplate("#= formatLastSyncStatus(data) #");
                                                 columns.Bound(c => c.Mfo);
                                                 columns.Bound(c => c.Name);
                                                 columns.Bound(c => c.Url)
                                                     .ClientTemplate("<a target=\"_blank\" href=\"#= Url#\">#= Url#</a>").Visible(@ViewBag.Mode == "admin" ? true : false);
                                                 columns.Bound(c => c.Login).Visible(@ViewBag.Mode == "admin" ? true : false);
                                                 columns.Bound(c => c.Password)
                                                     .EditorTemplateName("Password")
                                                     .ClientTemplate("******")
                                                     .Sortable(false)
                                                     .Filterable(false).Visible(@ViewBag.Mode == "admin" ? true : false);
                                                 columns.Bound(c => c.LastSyncDate)
                                                     .Title("Дата останньої<br>синхронізації")
                                                     .Format("{0:dd.MM.yyyy hh:mm:ss}");
                                                 columns.Command(command =>
                                                 {
                                                     command.Edit();
                                                     command.Destroy();
                                                 }).Visible(@ViewBag.Mode == "admin" ? true : false).Width(250);
                                             })
                                             .Editable(editable => editable.Mode(GridEditMode.InLine))
                                             .Resizable(resize => resize.Columns(true))
                                             .Reorderable(reorder => reorder.Columns(true))

                                             .Pageable(pager => pager
                                                 .PageSizes(new[] {10, 20, 50, 100})
                                                 .Refresh(true))
                                             .Sortable()
                                             .Filterable(ftb => ftb.Mode(GridFilterMode.Menu))
                                             .DataSource(dataSource => dataSource
                                                 .Ajax()
                                                 .Sort(sort => sort.Add(p => p.LastSyncDate).Descending())
                                                 .Model(model =>
                                                 {
                                                     model.Id(p => p.Mfo);
                                                     model.Field(p => p.LastSyncDate).Editable(false);
                                                     model.Field(p => p.LastSyncStatus).Editable(false);
                                                 })
                                                 .Read(read => read.Action("GetConnectionOptions", "Sync"))
                                                 .Create(update => update.Action("CreateConnectionOption", "Sync"))
                                                 .Update(read => read.Action("UpdateConnectionOption", "Sync"))
                                                 .Destroy(read => read.Action("DeleteConnectionOption", "Sync"))
                                                 .Events(e => e.Error("onError"))

                                             ))
                                    </text>);

                      tabstrip.Add().Text("Параметри запуску")
                          .Visible(@ViewBag.Mode == "admin" ? true : false)
                          .Content(@<text>
                            @(Html.Kendo().Grid<Param>
                                              ()
                                              .Name("grid_Params")
                                              .ToolBar(toolbar => toolbar.Create())
                                              .Columns(columns =>
                                              {
                                                  columns.Bound(c => c.Name);
                                                  columns.Bound(c => c.Value);
                                                  columns.Bound(c => c.Comment);
                                                  columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
                                              })
                                              .Editable(editable => editable.Mode(GridEditMode.InLine))
                                              .Resizable(resize => resize.Columns(true))
                                              .Reorderable(reorder => reorder.Columns(true))

                                              .Pageable(pager => pager
                                                          .PageSizes(new[] { 10, 20, 50, 100 })
                                                  .Refresh(true))
                                              .Sortable()
                                              .Filterable(ftb => ftb.Mode(GridFilterMode.Menu))
                                              .DataSource(dataSource => dataSource
                                                  .Ajax()
                                                  .Sort(sort => sort.Add(p => p.Name).Ascending())
                                                  .Model(model =>
                                                  {
                                                      model.Id(p => p.Name);
                                                      model.Field(p=> p.Name).Editable(false);
                                                  })
                                                  .Read(read => read.Action("GetParams", "Sync"))
                                                  .Create(update => update.Action("CreateParam", "Sync"))
                                                  .Update(read => read.Action("UpdateParam", "Sync"))
                                                  .Destroy(read => read.Action("DeleteParam", "Sync"))
                                                  .Events(e => e.Error("onError")))
                            )
                        </text>);
                  })
            )
        </div>
    </div>
</div>
<div class="modal"><!-- Place at bottom of page --></div>

<script type="text/javascript">
    /* Хранит состояние страницы и позволяет задавать фильтр на тип синхронизации*/
    var model = {
        // перечитать грид
        rereadGrid: function (gridId) {
            var curGrid = $("#" + gridId);
            if (curGrid.length != 0) {
                curGrid.data("kendoGrid").dataSource.read();
            }
        },

        syncType: undefined,
        currentButtonId: undefined,
        setState: function (currentButtonId, syncType) {
            this.syncType = syncType;
            this.currentButtonId = currentButtonId;
            $(".nav-button").removeClass("k-primary");
            $("#" + currentButtonId).addClass("k-primary");
            this.rereadGrid("grid_Log");
        }
    };

    function getSyncTypeFilter() {
        return {
            syncType: model.syncType
        };
    }

    function formatStatus(item) {
        return formatStatusBase(item, "Status");
    }

    function formatLastSyncStatus(item) {
        return formatStatusBase(item, "LastSyncStatus");
    }

    function formatStatusBase(item, fieldName) {
        var statusClass;
        switch (item[fieldName]) {
            case "SUCCESS":
                statusClass = "success";
                break;
            case "ERROR":
                statusClass = "error";
                break;
            default:
                statusClass = "info";
        }
        return kendo.format("<div class='k-block k-{0}-colored statusField centerField' >{1}</div>", statusClass, item[fieldName]);
    }

    function formatSyncEnabled(item) {
        return item.SyncEnabled
            ? "<div class='k-block k-success-colored centerField'>Так</div>"
            : "<div class='k-block k-error-colored centerField'>Ні</div>";
    }

    function onError(e) {
        if (e.status === "customerror") {
            var exception = e.errors;
            showModalWindow(exception.message);
        }
        else {
            bars.ui.error({ text: "Generic server error." });
        }
    }

    function syncAccountsRowButtonClick(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var mfo = dataItem.Mfo;
        syncAccounts(mfo);
    }

    function syncAccountsRestRowButtonClick(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var mfo = dataItem.Mfo;
        syncAccountsRest(mfo);
    }

    function syncBranchesRowButtonClick(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var mfo = dataItem.Mfo;
        syncBranches(mfo);
    }

    function syncTransactionsRowButtonClick(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var mfo = dataItem.Mfo;
        syncTransactions(mfo);
    }

    function syncAccounts(mfo) {
        bars.ui.loader('body', true);
        $.ajax({
            type: "POST",
            url: bars.config.urlContent('/cash/Sync/SyncAccountsFromUI/'),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: kendo.stringify({ mfoCode: mfo }),
            success: successFunc,
            error: errorFunc
        });
    }

    function syncAccountsRest(mfo) {
        bars.ui.loader('body', true);
        $.ajax({
            type: "POST",
            url: bars.config.urlContent('/cash/Sync/SyncAccountsRestFromUI/'),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: kendo.stringify({ mfoCode: mfo }),
            success: successFunc,
            error: errorFunc
        });
    }

    function syncTransactions(mfo) {
        bars.ui.loader('body', true);
        $.ajax({
            type: "POST",
            url: bars.config.urlContent('/cash/Sync/SyncTransactionsFromUI/'),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: kendo.stringify({ mfoCode: mfo }),
            success: successFunc,
            error: errorFunc
        });
    }

    function syncBranches(mfo) {
        bars.ui.loader('body', true);
        $.ajax({
            type: "POST",
            url: bars.config.urlContent('/cash/Sync/SyncBranchesFromUI/'), 
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify({ mfoCode: mfo }),
            success: successFunc,
            error: errorFunc
        });
    }

    function successFunc(data, status) {
        bars.ui.loader('body', false);
        $("#grid_Connections").data("kendoGrid").dataSource.read();
        if (data.Success == true) {
            showSuccessNotification(data.Message);
        } else {
            showModalWindow(data.Message);
        }
    }

    function errorFunc(e) {
        bars.ui.loader('body', false);
        showModalWindow(e.responseText);
    }

    $(document).ready(function () {
        $("#buttonFilterAccounts").click(function () {
            model.setState(this.id, "ACC");
        });

        $("#buttonFilterAccountsRest").click(function () {
            model.setState(this.id, "ACC_ARC");
        });

        $("#buttonFilterTransactions").click(function () {
            model.setState(this.id, "TRANSACTIONS");
        });

        $("#buttonFilterBranches").click(function () {
            model.setState(this.id, "BRANCH");
        });

        
        $("#buttonFilterAll").click(function () {
            model.setState(this.id);
        });

        model.setState("buttonFilterAll");

        $("#grid_Connections_AddRow").click(function () {
            var grid = $("#grid_Connections").data("kendoGrid");
            grid.addRow();
        });

        $("#SyncAccounts").click(function () {
            syncAccounts();
        });

        $("#SyncAccountsRest").click(function () {
            syncAccountsRest();
        });

        $("#SyncBranches").click(function () {
            syncBranches();
        });
        $("#SyncTransactions").click(function () {
            syncTransactions();
        });
    });

    function showModalWindow(content) {
        bars.ui.error({ text: content });
    }

    function showSuccessNotification(message) {
        bars.ui.notify(message, '', 'success');
    }

</script>

<style>
    .k-grid-edit-row .sync-btn {
        display: none;
    }
     #table {
         display: table;
     }

    #row {
        display: table-row;
    }

    #tabstrip {
        padding: 5px;
        display: table-cell;
    }

    #section {
        padding: 5px;
        display: table-cell;
    }

    /* Start by setting display:none to make this hidden.
    Then we position it in relation to the viewport window
    with position:fixed. Width, height, top and left speak
    speak for themselves. Background we set to 80% white with
    our animation centered, and no-repeating */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: #ffffff url('/barsroot/content/spinners/ajax-loader.gif') 50% 50% no-repeat;
        background: rgba( 255, 255, 255, .8 ) url('/barsroot/content/spinners/ajax-loader.gif') 50% 50% no-repeat;
    }


    .k-notification {
        border: 0;
    }

    /* Success template */
    .k-notification-upload-success.k-group {
        background: #009900;
        background: rgba(0%,60%,0%,.7);
        color: #fff;
    }

    /*.k-notification-upload-success.k-group {
                    background: rgba(0%,0%,0%,.7);
                    color: #fff;
                }*/

    .upload-success {
        width: 300px;
        height: 100px;
        padding: 0 30px;
        line-height: 100px;
    }

    .upload-success h3 {
        font-size: 1.3em;
        font-weight: normal;
        display: inline-block;
        vertical-align: middle;
    }

    .upload-success img {
        display: inline-block;
        vertical-align: middle;
        margin-right: 10px;
    }


    /*details styles*/
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

    .employee-details ul li {
        margin: 0;
        line-height: 1.7em;
    }

    .employee-details label {
        display: inline-block;
        width: 150px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }

    .centerField {
        text-align: center;
    }

    .navigationBar {
        padding: 10px;
    }
</style>
