@using BarsWeb.HtmlHelpers
@inherits System.Web.Mvc.WebViewPage
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/Themes/Kendo/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/Themes/Kendo/kendo.Black.min.css" rel="stylesheet" />
<style>
    .dialog-button {
        width: 250px;
        margin: 0;
    }

    .dialog-controls {
        width: 150px;
        padding: 0;
        border-spacing: 0;
    }

    #window input {
        margin-bottom: 2px;
    }
</style>

<h1>Шаблони договорів</h1>
<div style="margin:5px 0 5px 0;" class="buttons tiptip">
    <a href="#" id="btnUpdate" onclick="return false;" title="Оновити дані" class="button hover"><span class="icon icon157"></span></a>
    @if (!ViewBag.DKBOEA_ON)
    {
        <a id="btnPrint" onclick="print(); return false;" class="button left" title="Друк"><span class="icon icon153"></span><span class="label">Друк</span></a>
    }
    <a id="btnFilter" onclick="filter();return false;" class="button middle hover" title="Фільтр"><span class="icon icon206"></span><span class="label">Фільтр</span></a>

    @*@using (Html.BeginForm("GetFile", "PrintContract"))
        {
            <input id="pdfEA" type="submit" value="Друк ЕА" class="button" style="height:28px" />
        }*@


    @if (ViewBag.DKBOEA_ON)
    {
        <a id="btnPrintEA" onclick="printEA(); return false;" class="button left" title="Друк"><span class="icon icon153"></span><span class="label">Друк ЕА</span></a>
    }


</div>
<div>

    @if (ViewBag.DKBOEA_ON)
    {
        @JGridView.Create(new List<JGridView.Column>
                             {
                               JGridView.Columns.Add("checkbox","",TypeCode.Boolean),
                               JGridView.Columns.Add("Код", "ID",TypeCode.String),
                               JGridView.Columns.Add("Назва шаблону", "NAME", TypeCode.String),
                               //JGridView.Columns.Add("Структурний код", "STRUCT_CODE",TypeCode.String),
                               JGridView.Columns.Add("Статус", "STATE", TypeCode.String)
                              },
                      tableId: "tableContracts")
    }
    else
    {
        @JGridView.Create(new List<JGridView.Column>
                             {
                               JGridView.Columns.Add("checkbox","",TypeCode.Boolean),
                               JGridView.Columns.Add("Код", "a.ID",TypeCode.String),
                               JGridView.Columns.Add("Назва шаблону", "a.NAME",TypeCode.String)
                              },
                      tableId: "tableContracts")
    }

</div>

<div class="jung-grid">
    <table id="tableSelContracts" class="jungGridView" cellpadding="0" cellspacing="0" style="margin-top: 10px ">
        <caption style="text-align: left">Вибрані шаблони</caption>
        <thead class="headerRow">
            <tr>
                <td></td>
                <td>Код</td>
                <td>Назва шаблону</td>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<div id="dialog-filter" title="Фільтр">
    <form>
        <select id="selAttr">
            <option value="id">Код шаблону</option>
            <option value="name">Назва шаблону</option>
        </select>
        <select id="selFilter">
            <option value="=">=</option>
            <option value="<="><=</option>
            <option value=">=">>=</option>
            <option value="<>"><></option>
            <option value="like">схожий на</option>
            <option value="not like">не схожий на</option>
            <option value="in">один з</option>
            <option value="not in">жоден з</option>
        </select>
        <input type="text" id="txtValue" />
    </form>
</div>
<div id="window">
    <p><label>Максимальна сума: <input id="maxSum" type="text" style="margin-left: 16px;" /></label></p>
    <p><label>Бажана сума: <input id="desiredSum" type="text" style="margin-left: 16px;" /></label></p>
    <p><label>Встановлений розмір кредиту: <input id="installedSum" type="text" style="margin-left: 16px;" /></label></p>
    <button id="saveBtn" style="float: right; margin-top: 20px;">Зберегти</button>
</div>



<script type="text/javascript" src="~/Scripts/kendo/kendo.all.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#window").kendoWindow({
            title: "Введіть опції кредиту",
            visible: false,
            width: "450px"
        });
        $("#window input").kendoNumericTextBox({
            decimals: 0,
            spinners: false,
            culture: "uk-UA"
        });
    });
</script>

<script type="text/javascript">

    //ID шаблона выбранной строки таблицы
    var selectedRows = new Array();
    var selectedStructCodes = new Array();
    //ширина первого столбца таблицы, нужна для одинакового отображения по ширине двух таблиц на странице
    var firstColWidth;

    $(document).ready(function() {



        $('.tiptip a.button, .tiptip button').tipTip();

        $('#tableContracts').jungGridView({
            updateTableUrl: '/barsroot/PrintContract/ContractList/',
            userUpdateParamFunc: tableParam,
            updateTableFunc: function() { refreshTableContracts(); },
            viewTfoot: true,
            viewFilter: true,
            buttonToUpdateId: 'btnUpdate',
            trClickFunk: function() {},
            //sort: 'a.ID',
            //sortDir: 'ASC',
            autoLoad: true
        });

        firstColWidth = "20px"; //$("#tableContracts tr").find("td:first").width();

        $("#dialog-filter").dialog({
            autoOpen: false,
            minHeight: 150,
            width: 520,
            modal: true,
            buttons: {
                "Застосувати фільтр": function() {
                    applyFilter();
                    $(this).dialog("close");
                },
                "Відмінити фільтр": function() {
                    cancelFilter();
                    $(this).dialog("close");
                }
            },
            close: function() {
            }
        });

        $("#tableContracts tr").find("th:first input").attr("disabled", true);

        //$("#tableContracts tr").find("th:first input").attr("onclick", "Test()");



    });

    //печать по выбранным шаблонам
    function print() {
        function getReportFile() {

            //формируем ссылку для вызова метода действия CreateReportFile, который вернет файл для скачивания
            $.post(url + "?" + idsUrlParams + templatesUrlParams + '&random=' + Math.random(), { }, function (data) {
                $('body').loader('remove');
                if (data)
                {
                    document.location.href = '@Url.Action("DownloadReportFile")';
                }
            });
        }

        if (selectedRows != null && selectedRows.length > 0) {
            //формируем url с нужными параметрами
            var url = '@Url.Action("CreateReportFile")';
            var idArray = @Html.Raw(Json.Encode(ViewBag.Id));
            //коды договоров
            var idsUrlParams = "";
            //коды шаблонов
            var templatesUrlParams = "";
            for (var i = 0; i < idArray.length; i++) {
                idsUrlParams += "&ids=" + idArray[i].toString();
            }
            for (var i = 0; i < selectedRows.length; i++) {
                templatesUrlParams += "&templates=" + selectedRows[i];
            }
            var oldData = null;
            //проверим нужно ли вскинуть диалог с запросом максимальной суммы кредита
            $.get('@Url.Action("ReadCreditOptions")' + "?" + templatesUrlParams + '&' + idsUrlParams + '&random=' + Math.random(), function(data) { oldData = data; })
                .done(function() {
                    if (oldData.maxSum < 0) {
                        getReportFile();
                    } else {
                        $("#maxSum").data("kendoNumericTextBox").value(oldData.maxSum);
                        $("#desiredSum").data("kendoNumericTextBox").value(oldData.desiredSum);
                        $("#installedSum").data("kendoNumericTextBox").value(oldData.installedSum);
                        $("#window button").unbind("click").on("click", function() {
                            $.get('@Url.Action("SetUpCreditOptions")' + "?" +
                                idsUrlParams +
                                "&maxSum=" + $("#maxSum").val() +
                                "&desiredSum=" + $("#desiredSum").val() +
                                "&installedSum=" + $("#installedSum").val()
                                )
                                .done(function() {
                                    $("#window").data("kendoWindow").close();
                                    getReportFile();
                                });
                        });
                        $("#window").data("kendoWindow").center().open();
                    };
                });


        } else {
            barsUiAlert("Не вибрано документи для друку", "Не вибрано документи", "warning");
        }
    };

    function filter() {
        $("#dialog-filter").dialog("open");
    };

    //пользовательский фильтр
    var userFilter = "";

    //применить пользовательский фильтр
    function applyFilter() {
        //считываем параметры из полей и формируем строку фильтра
        var attribute = $("#selAttr :selected").val();
        var operand = $("#selFilter :selected").val();
        var value = $("#txtValue").val();
        userFilter = getFilterString(attribute, operand, value);
        $('#tableContracts').jungGridView('refresh');
    };

    //отменить пользовательский фильтр
    function cancelFilter() {
        userFilter = "";
        $('#tableContracts').jungGridView('refresh');
    }

    function Test() {

        allchecked = $("#tableContracts tr").find("th:first input")[0].checked;



        var selected_rows = $("#tableContracts tbody tr").find("rowcheck");

        //var signed_check = $("#tableContracts tbody tr").find("signed");

        //(signed_check[i].disabled == false) ? signed_check[i].checked = true : signed_check[i].checked = false;


        if (selected_rows.length != 0)
        {
            for (var i = 0; i < selected_rows.length; i++)
            {
                if (allchecked)
                    selected_rows[i].checked = true;
                else
                    selected_rows[i].checked = false;

                selectedRow = $(selected_rows[i]).parent().parent();

                templateId = selectedRow.attr('id');
                templateName = selectedRow.attr('name');

                //если выбрали строку, то добавляем новую строку в таблицу выбранных строк
                if (selected_rows[i].checked) {
                    $('#tableSelContracts > tbody:last').append(
                        "<tr id = '" + templateId + "'>" +
                        "<td width = '" + firstColWidth + "px' align='center'>" +
                        "<img src='/common/themes/modernui/css/images/close12.gif' " +
                        "onclick='deleteSelectedRow($(this).parent().parent());'></img></td>" +
                        "<td>" + templateId + "</td>" +
                        "<td>" + templateName + "</td>" +
                        "</tr>"
                    );
                    selectedRows.push(templateId);
                    //иначе удаляем строку из выбранных
                } else {
                    rowForDel = $("#tableSelContracts tr[id=" + templateId + "]");
                    deleteSelectedRow(rowForDel);
                }

                $('#tableSelContracts').jungGridView({ pageSize: 1000000 });
                $('#tableSelContracts .infoRow').remove();

                $('#btnPrint').addClass('hover');
            }
        }
    }

    //При оновленні верхньої таблиці чистимо нижню
    function delAllSelectedRows() {
        var tableRows = $('#tableSelContracts tbody tr');
        tableRows.each(function() {
            var currentTableRow = $(this);
            selectedRows = new Array();
            currentTableRow.remove();
        });
    }



    //действия при checked или unchecked строки таблицы
    function selectRow(chkClicked) {
        var selectedRow = $(chkClicked).parent().parent();

        var templateId = selectedRow.attr('id');
        var templateName = selectedRow.attr('name');
        var structCode;

        if ('@ViewBag.DKBOEA_ON' == 'True') {
            structCode = selectedRow.attr('structcode');
        }



    //если выбрали строку, то добавляем новую строку в таблицу выбранных строк
        if (chkClicked.checked) {
        $('#tableSelContracts > tbody:last').append(
            "<tr id = '" + templateId + "'>" +
            "<td width = '" + firstColWidth + "px' align='center'>" +
            "<img src='/common/themes/modernui/css/images/close12.gif' " +
            "onclick='deleteSelectedRow($(this).parent().parent());'></img></td>" +
            "<td>" + templateId + "</td>" +
            "<td>" + templateName + "</td>" +
            "</tr>"
        );
        selectedRows.push(templateId);
        selectedStructCodes.push(structCode);
        //иначе удаляем строку из выбранных
    } else {
        var rowForDel = $("#tableSelContracts tr[id=" + templateId + "]");
        deleteSelectedRow(rowForDel);
    }

    $('#tableSelContracts').jungGridView({ pageSize: 1000000 });
    $('#tableSelContracts .infoRow').remove();

    $('#btnPrint').addClass('hover');
    }

    //удалить строку из таблицы выбранных строк и отменить check в основной таблице
    function deleteSelectedRow(tableRow) {
        var templateId = tableRow.attr('id');
        for (var i = 0; i < selectedRows.length; i++) {
            if (selectedRows[i] == templateId) {
                selectedRows.splice(i, 1);
                selectedStructCodes.splice(i, 1);
                break;
            }
        }
        tableRow.remove();

        var rowForUncheck = $("#tableContracts tr[id=" + templateId + "]");
        rowForUncheck.find("rowcheck").attr('checked', false);
    }

    //действия при обновлении основной таблицы: проставить check-и, если среди отобранных строк есть выбранные
    function refreshTableContracts() {

        var tableRows = $('#tableContracts tbody tr');
        tableRows.each(function() {
            var currentTableRow = $(this);
            for (var i = 0; i < selectedRows.length; i++) {
                if (selectedRows[i] == currentTableRow.attr('id')) {
                    currentTableRow.find("rowcheck").attr('checked', true);
                    break;
                }
            }
        });

        delAllSelectedRows();

        $('#btnPrint').removeClass('hover');
    }

    //параметры для передачи методу действия
    function tableParam(type, pageNum) {
        var param = {
            defaultFilter: @Html.Raw(Json.Encode(ViewBag.Filter)),
            userFilter: userFilter,
            multiSelection: true
        };
        return param;
    }

    //получить строку фильтра по переданным параметрам
    function getFilterString(attribute, operand, value) {

        var filter = "";
        switch (operand) {
            case "=":
            case "<=":
            case ">=":
            case "<>":
                filter = attribute + operand + "'" + value + "'";
                break;
            case "like":
            case "not like":
                filter = attribute + " " + operand + " " + "'%" + value + "%'";
                break;
            case "in":
            case "not in":
                var arrValues = value.split(",");
                var strValues = "";
                for (var i = 0; i < arrValues.length; i++) {
                    strValues += "'" + arrValues[i] + "'" + ",";
                }
                //обрезать последнюю запятую
                strValues = strValues.slice(0, -1);
                filter = attribute + " " + operand + "(" + strValues + ")";
                break;
        }
        return filter;
    }

    @*function PrintEA() {

        if (selectedRows != null && selectedRows.length > 0) {
            //document.location.href = '@Url.Action("GetFile", "PrintContract")';

            $.ajax({
                type: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                traditional: true,
                url: '@Url.Action("GetFile", "PrintContract")',
                data: JSON.stringify(selectedRows),
                success: function () {},
                error: function (e) { barsUiAlert("Помилка", "помилка", "warning") }
            });
        }
    }*@

    function printEA() {

        function getReportFileEA() {
            //формируем ссылку для вызова метода действия CreateReportFile, который вернет файл для скачивания
            $.post(url + "?" + idsUrlParams + templatesUrlParams + structCodeParams + '&random=' + Math.random(), { }, function (data) {
                $('body').loader('remove');
                if (data)
                {
                    document.location.href = '@Url.Action("DownloadReportFileEA")';
                }

                selectedStructCodes = new Array();
                $('#btnUpdate').click();
            });
        }

        if (selectedRows != null && selectedRows.length > 0) {
            //формируем url с нужными параметрами
            var url = '@Url.Action("CreateReportFileEA")';
            var idArray = @Html.Raw(Json.Encode(ViewBag.Id));
            //коды договоров
            var idsUrlParams = "";
            //коды шаблонов
            var templatesUrlParams = "";
            var structCodeParams = "";
            for (var i = 0; i < idArray.length; i++) {
                idsUrlParams += "&ids=" + idArray[i].toString();
            }
            for (var i = 0; i < selectedRows.length; i++) {
                templatesUrlParams += "&templates=" + selectedRows[i] /*+ "_FRX"*/;
            }

            for (var i = 0; i < selectedStructCodes.length; i++) {
                structCodeParams += "&structCodes=" + selectedStructCodes[i];
            }

            var oldData = null;
            //проверим нужно ли вскинуть диалог с запросом максимальной суммы кредита
            $.get('@Url.Action("ReadCreditOptions")' + "?" + templatesUrlParams + '&' + idsUrlParams + '&' + structCodeParams + '&random=' + Math.random(), function(data) { oldData = data; })
                .done(function() {

                    if (oldData.maxSum < 0) {
                        getReportFileEA();
                    } else {

                        $("#maxSum").data("kendoNumericTextBox").value(oldData.maxSum);
                        $("#desiredSum").data("kendoNumericTextBox").value(oldData.desiredSum);
                        $("#installedSum").data("kendoNumericTextBox").value(oldData.installedSum);
                        $("#window button").unbind("click").on("click", function() {
                            $.get('@Url.Action("SetUpCreditOptions")' + "?" +
                                idsUrlParams +
                                "&maxSum=" + $("#maxSum").val() +
                                "&desiredSum=" + $("#desiredSum").val() +
                                "&installedSum=" + $("#installedSum").val()
                                )
                                .done(function() {
                                    $("#window").data("kendoWindow").close();
                                    getReportFileEA();
                                });
                        });
                        $("#window").data("kendoWindow").center().open();
                    };
                });


        } else {
            alert("Не вибрано документи для друку", "Не вибрано документи", "warning");
        }
    };


    function SignDocument(State) {
        var DocID = Math.abs(State);
            $.ajax({
                type: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                traditional: true,
                url: '@Url.Action("SignDoc", "PrintContract")',
                data: JSON.stringify({DocID: DocID}),
                success: function () { alert("Документ підписано.", "Підписання документу", "message") },
                error: function () { alert("Підписання документу закінчилося помилкою!", "Підписання документу", "warning") }
            });

        $('#btnUpdate').click();

    }


    function UpdatePage() {
        $('#btnUpdate').click();
    }


    function EADocsView_ShowDialog(rnk, doc_id, modal) {

        modal = true;
		
        //var rnk = rnk.substring(0, rnk.length - 2);
        var eas_id = '';
        var agr_id = '';
        var req_id = '';

        //if (eas_id == '' || rnk == '') return false;

        var Url = '/barsroot/UserControls/dialogs/EADocsView.aspx?eas_id=' + eas_id + '&rnk=' + rnk + '&agr_id=' + agr_id + '&req_id=' + req_id + '&doc_id=' + doc_id + '&rnd=' + Math.random();

        //var Url = "/barsroot/UserControls/dialogs/EADocsView.aspx?rnk=" + rnk + "&rnd=" + Math.random();

        var WindowOptions = 'width=650, height=600, location=no, menubar=no, resizable=yes, scrollbars=yes';
        var DialogOptions = 'dialogWidth: 650px; dialogHeight: 600px; resizable: yes; scroll: yes';

        if (modal) {
            var result = window.showModalDialog(Url, window, DialogOptions);

            return true;
        }
        else {
            window.open(Url, '_blank', WindowOptions, false);
            return false;
        }
    }




</script>

