@using BarsWeb.Areas.CRSOUR.ViewModels
@using Kendo.Mvc.UI

@{
    Layout = "~/Views/Shared/_LayoutKendo.cshtml";
    const string title = "Спрощений список заявок для акцепту";

    const string contains = "містять";
    const string doesNotContains = "не містять";
}

<div id="table"> 
<div class="pageTitle">@title</div>

@*Панель навигации*@
<div id="navigationBar">
    <div id="navigationScope">
        <button id='currencyNotGrivna' class='k-button nav-button'>Валюта</button>
        <button id='currencyGrivna' class='k-button nav-button'>Гривня</button>
        <button id='currencyAll' class='k-button nav-button'>Усі</button>
    </div>
</div>
<br>

@(Html.Kendo().Notification()
    .Name("notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Stacking(NotificationStackingSettings.Down)
    .AutoHideAfter(1000)
    .Templates(t => t.Add().Type("upload-success").ClientTemplateID("successTemplate"))
)

@(Html.Kendo().Grid<SimpleClaim>
        ()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Command(command => command.Custom("submitClaim").Text("Підтвердити обробку").Click("submitClaim")).HeaderTemplate("Дії");
            columns.Bound(c => c.Id).Filterable(ftb => ftb.Cell(cell => cell.InputWidth(70)));
            columns.Bound(c => c.ClaimType)
                   .Filterable(filter => filter
                      .Operators(o => o.ForString(f => f.Clear()
                          .Contains(contains)
                          .DoesNotContain(doesNotContains)
                          )));
            columns.Bound(c => c.DealNumber).Filterable(ftb => ftb.Cell(cell => cell.InputWidth(90)))
                   .Filterable(filter => filter
                      .Operators(o => o.ForString(f => f.Clear()
                          .Contains(contains)
                          .DoesNotContain(doesNotContains)
                          )));
            columns.Bound(c => c.LenderCode).Filterable(ftb => ftb.Cell(cell => cell.InputWidth(90)))
                   .Filterable(filter => filter
                      .Operators(o => o.ForString(f => f.Clear()
                          .Contains(contains)
                          .DoesNotContain(doesNotContains)
                          )));
            columns.Bound(c => c.BorrowerCode).Filterable(ftb => ftb.Cell(cell => cell.InputWidth(90)))
                   .Filterable(filter => filter
                      .Operators(o => o.ForString(f => f.Clear()
                          .Contains(contains)
                          .DoesNotContain(doesNotContains)
                          )));
            columns.Bound(c => c.StartDate).Format("{0:dd.MM.yyyy}").Filterable(ftb => ftb.Cell(cell => cell.InputWidth(100)));
            columns.Bound(c => c.EndDate)
                .HtmlAttributes(new { @class = "EndDateFlag" })
                .Format("{0:dd.MM.yyyy}")
                .Filterable(ftb => ftb.Cell(cell => cell.InputWidth(100)));
            columns.Bound(c => c.Sum)
                .HtmlAttributes(new { @class = "SumFlag" })
                .Format("{0:n}")
                .Filterable(ftb => ftb.Cell(cell => cell.InputWidth(70)));
            columns.Bound(c => c.Currency).Filterable(ftb => ftb.Cell(cell => cell.InputWidth(70)))
                   .Filterable(filter => filter
                      .Operators(o => o.ForString(f => f.Clear()
                          .Contains(contains)
                          .DoesNotContain(doesNotContains)
                          )));
            columns.Bound(c => c.RateDate)
                .HtmlAttributes(new { @class = "RateDateFlag" })
                .Format("{0:dd.MM.yyyy}")
                .Filterable(ftb => ftb.Cell(cell => cell.InputWidth(100)));
            columns.Bound(c => c.Rate)
                .HtmlAttributes(new { @class = "RateFlag" })
                .Format("{0:n4}")
                .Filterable(ftb => ftb.Cell(cell => cell.InputWidth(70)));
            columns.Bound(c => c.Comment)
                   .Filterable(filter => filter
                      .Operators(o => o.ForString(f => f.Clear()
                          .Contains(contains)
                          .DoesNotContain(doesNotContains)
                          )));

            //columns.Bound(c => c.EndDateFlag);
            //columns.Bound(c => c.RateDateFlag);
            //columns.Bound(c => c.RateFlag);
            //columns.Bound(c => c.SumFlag);
        })
        .Resizable(resize => resize.Columns(true))
        .Reorderable(reorder => reorder.Columns(true))

        .Pageable(pager => pager
            .PageSizes(true))
        .Selectable()
        .Sortable()
         .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
             .AutoBind(false)
         .DataSource(dataSource => dataSource
            .Ajax()
            .Sort(sort => sort.Add("Id").Ascending())
            .Read(read => read.Action("GetSimpleClaims", "DealMonitor")
            .Data("getUserFilter")
            ).Events(e => e.Error("onError"))
              ).Events(e => e.DataBound("onDataBound")))

@(Html.Kendo().Window().Name("Details")
    .Title("Неуспішно")
    .Visible(false)
    .Modal(true)
    .Draggable(true)
    .Width(600)
      )

</div>

<script id="successTemplate" type="text/x-kendo-template">
    <div class="upload-success">
        <img src="/barsroot/content/images/notify/success-icon.png" />
        <h3>#= message #</h3>
    </div>
</script>


<script type="text/javascript">
    $(document).ready(function () {
        $("#currencyNotGrivna").click(function () {
            model.setState(this.id, 'UAH', true);
        });

        $("#currencyGrivna").click(function () {
            model.setState(this.id, 'UAH', false);
        });

        $("#currencyAll").click(function () {
            model.setState(this.id);
        });

        model.setState("currencyAll");
    });


    /* Хранит состояние страницы*/
    var model = {
        currencyCode: undefined,
        exceptThisCode: undefined,
        currentButtonId: undefined,
        setState: function (currentButtonId, currencyCode, exceptThisCode) {
            this.currencyCode = currencyCode;
            this.exceptThisCode = exceptThisCode;
            this.currentButtonId = currentButtonId;
            $(".nav-button").removeClass("k-primary");
            $("#" + currentButtonId).addClass("k-primary");
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }

    function getUserFilter() {
        return {
            currencyCode: model.currencyCode,
            exceptThisCode: model.exceptThisCode
        }
    }

    function onError(e) {
        if (e.status == "customerror") {
            var exception = e.errors;
            showModalWindow(exception.message);
        }
        else {
            alert("Generic server error.");
        }
    }

    function onDataBound() {
        var data = this._data;

        for (var i = 0; i < data.length; i++) {
            var dataItem = data[i];
            var tr = $("#Grid").find("[data-uid='" + dataItem.uid + "']");
            if (dataItem.EndDateFlag == 1) {
                tr.find(".EndDateFlag").css({ "font-style": "italic", "font-weight": "bold" });
                //tr.find(".EndDateFlag").addClass("k-state-selected");
            }
            if (dataItem.RateDateFlag == 1) {
                tr.find(".RateDateFlag").css({ "font-style": "italic", "font-weight": "bold" });
                // tr.find(".RateDateFlag").addClass("k-state-selected");
            }
            if (dataItem.RateFlag == 1) {
                tr.find(".RateFlag").css({ "font-style": "italic", "font-weight": "bold" });
                // tr.find(".RateFlag").addClass("k-state-selected");
            }
            if (dataItem.SumFlag == 1) {
                tr.find(".SumFlag").css({ "font-style": "italic", "font-weight": "bold" });
                //tr.find(".SumFlag").addClass("k-state-selected");
            }
        }
    }

    function submitClaim(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        $.ajax({
            type: "POST",
            url: '@Url.Action("SubmitClaim", "DealMonitor")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ claimId: dataItem.Id }),
            dataType: "json",
            success: successFunc,
            error: errorFunc
        });

        function successFunc(data, status) {
            if (data.success == true) {
                $("#grid").data("kendoGrid").dataSource.read();
                showSuccessNotification(data.message);
            } else {
                showModalWindow(data.message);
            }
        }

        function errorFunc() {
            showModalWindow('<b>Неуспішно</b>');
        }
    }

    function showModalWindow(content) {
        var wnd = $("#Details").data("kendoWindow");
        wnd.content(content);
        wnd.center().open();
    }

    function showSuccessNotification(message) {
        var notification = $("#notification").data("kendoNotification");
        notification.show({
            message: message
        }, "upload-success");
    }
</script>

<style scoped>
    #table {
        display: table;
    }

    .pageTitle {
        font-size: 1.5em;
        margin-bottom: 30px;
        margin-top: 30px;
        margin-left: 30px;
    }

    .k-notification {
        border: 0;
    }

    /* Success template */
    .k-notification-upload-success.k-group {
        background: #009900;
        background: rgba(0%,60%,0%,.7);
        color: #fff;
    }

    /*.k-notification-upload-success.k-group {
                    background: rgba(0%,0%,0%,.7);
                    color: #fff;
                }*/

    .upload-success {
        width: 300px;
        height: 100px;
        padding: 0 30px;
        line-height: 100px;
    }

        .upload-success h3 {
            font-size: 1.3em;
            font-weight: normal;
            display: inline-block;
            vertical-align: middle;
        }

        .upload-success img {
            display: inline-block;
            vertical-align: middle;
            margin-right: 10px;
        }
</style>
