.head 0 +  Application Description: Общие функции АБС БАРС
***********************************
* (C) Унити-БАРС, 1997-2004       *
*********************************** 
.head 1 -  Outline Version - 4.0.26
.head 1 +  Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000C10000 002C000000030000 00030000004B0000 00C6000000FCFFFF
0040: FFE2FFFFFFFCFFFF FFFEFFFFFF720200 00C3010000010000 0000000000010000
0060: 000F4170706C6963 6174696F6E497465 6D01000000075769 6E646F7773
.enddata
.data DT_MAKERUNDLG
0000: 0200000000001C51 3A5C424152533938 5C4C494252415259 5C4162736170692E
0020: 646C6C1C513A5C42 41525339385C4C49 42524152595C4162 736170692E617063
0040: 00000101011C513A 5C4241525339385C 4C4942524152595C 4162736170692E72
0060: 756E1C513A5C4241 525339385C4C4942 524152595C416273 6170692E646C6C1C
0080: 513A5C4241525339 385C4C4942524152 595C416273617069 2E61706300000101
00A0: 01165C4261727339 385C42696E5C4162 736170692E617064 165C426172733938
00C0: 5C42696E5C416273 6170692E646C6C16 5C4261727339385C 42696E5C41627361
00E0: 70692E6170630000 010101001C513A5C 4241525339385C4C 4942524152595C41
0100: 62736170692E646C 6C1C513A5C424152 5339385C4C494252 4152595C41627361
0120: 70692E6170630000 010101
.enddata
.head 2 -  Outline Window State: Normal
.head 2 +  Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
.head 3 -  Left:   -0.013"
.head 3 -  Top:    0.0"
.head 3 -  Width:  8.013"
.head 3 -  Height: 4.969"
.head 2 +  Options Box Location
.data VIEWINFO
0000: 0218B80BB80B2500
.enddata
.data VIEWSIZE
0000: 0800
.enddata
.head 3 -  Visible? Yes
.head 3 -  Left:   4.15"
.head 3 -  Top:    1.885"
.head 3 -  Width:  3.8"
.head 3 -  Height: 2.073"
.head 2 +  Class Editor Location
.head 3 -  Visible? No
.head 3 -  Left:   0.575"
.head 3 -  Top:    0.094"
.head 3 -  Width:  5.063"
.head 3 -  Height: 2.719"
.head 2 +  Tool Palette Location
.head 3 -  Visible? No
.head 3 -  Left:   6.388"
.head 3 -  Top:    0.729"
.head 2 -  Fully Qualified External References? Yes
.head 2 -  Reject Multiple Window Instances? No
.head 2 -  Enable Runtime Checks Of External References? Yes
.head 2 -  Use Release 4.0 Scope Rules? No
.head 1 +  Libraries
.head 2 -  Dynalib: Message.apd
.head 2 -  Dynalib: Global.apd
.head 2 -  ! Dynalib: Service.apd
.head 2 -  ! Export 
.head 2 -  Dynalib: Msoffice.apd
.head 2 -  !
.head 2 -  File Include: Winbars2.apl
.head 2 -  File Include: Winapi.apl
.head 2 -  File Include: Constant.apl
.head 2 -  File Include: Genfcls.apl
.head 2 -  File Include: Genbutn.apl
.head 2 -  File Include: GENLABEL.APL
.head 2 -  File Include: XSALIMG.APL
.head 2 -  File Include: Watchdog.apc
.head 2 -  File Include: Vtfile.apl
.head 2 -  File Include: Vtstr.apl
.head 2 -  File Include: Vtcomm.apl
.head 2 -  File Include: vtmeter.apl
.head 2 -  File Include: Sqlnsi.apl
.head 2 -  File Include: Vtdos.apl
.head 2 -  File Include: Vtmisc.apl
.head 2 -  File Include: VTFONTNM.APL
.head 2 -  File Include: Vtarray.apl
.head 1 +  Global Declarations
.head 2 +  Window Defaults
.head 3 +  Tool Bar
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Form Window
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Dialog Box
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Top Level Table Window
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Data Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Multiline Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Spin Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Background Text
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Pushbutton
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Radio Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Check Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Option Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Group Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Child Table Window
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  List Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Combo Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Line
.head 4 -  Line Color: Use Parent
.head 3 +  Frame
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: 3D Face Color
.head 3 +  Picture
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 2 +  Formats
.head 3 -  Number: 0'%'
.head 3 -  Number: #0
.head 3 -  Number: ###000
.head 3 -  Number: ###000;'($'###000')'
.head 3 -  Date/Time: hh:mm:ss AMPM
.head 3 -  Date/Time: M/d/yy
.head 3 -  Date/Time: MM-dd-yy
.head 3 -  Date/Time: dd-MMM-yyyy
.head 3 -  Date/Time: MMM d, yyyy
.head 3 -  Date/Time: MMM d, yyyy hh:mm AMPM
.head 3 -  Date/Time: MMMM d, yyyy hh:mm AMPM
.head 2 +  External Functions
.head 3 +  Library name: DSGBVC4.DLL
.head 4 -  ! DSGBVC4.DLL - экспортируемые функции
.head 4 +  Function: nsignInitGBSign
.head 5 -  Description: int GLOBAL nsignInitGBSign(char *dbDir,
                           char *secKeyDisk,
                           char *pin,
                           char *mfo,
                           int mode)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  Number: INT
.head 4 +  Function: nsignExitGBSign
.head 5 -  Description: int GLOBAL nsignExitGBSign(void)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 -  Parameters
.head 4 +  Function: nsignInitOPSign
.head 5 -  Description: int GLOBAL nsignInitOPSign(char *dbDir,
                           char *secKeyDisk,
                           char *pin,
                           char *mfo)
int DSGBEXT nsignInitOPSign(char* dbDir,
                            char* secKeyDisk,
                            char* pin,
                            char* mfo,
                            const char* cszUID)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  ! String: LPCSTR
.head 4 +  Function: nsignExitOPSign
.head 5 -  Description: int GLOBAL nsignExitOPSign(void)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 -  Parameters
.head 4 +  Function: nsignMapError2Text
.head 5 -  Description: void GLOBAL nsignMapError2Text(char *buffer,
                               int errorCode)
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  Receive String: LPSTR
.head 6 -  Number: INT
.head 4 +  Function: nsignPutOPSignOnMemory
.head 5 -  Description: int GLOBAL nsignPutOPSignOnMemory(void* data,
    unsigned short size, void* signPtr)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPVOID
.head 6 -  Number: SHORT
.head 6 -  Receive String: LPVOID
.head 3 +  Library name: RSAC.DLL
.head 4 -  ! //  RSAC.DLL - экспортируемые функции //////////////////////////////////////////////////////////////////////
.head 4 -  !
.head 4 +  Function: INIT_ZAH
.head 5 -  Description: int InitSign(char *szPathOpenKey,
             char *szPathSecKey,
             char *szIdOper, char *szUxDateTme,
             char *szPasword)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 6 -  String: LPCSTR
.head 4 +  Function: CLOSE_ZAH
.head 5 -  Description: int CloseRsa(void)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 -  Parameters
.head 4 +  Function: RSA_ZAH
.head 5 -  Description: int RSA_ZAH(char cMode, int iHandler,
            dword dwCountPart, dword dwOffset,
            dword dwLength,
            dword dwOffsetSecond, char *szSign,
            char *szIdOpen)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Number: INT
.head 5 +  Parameters
.head 6 -  Number: CHAR
.head 6 -  Number: INT
.head 6 -  Number: DWORD
.head 6 -  String: LPCSTR
.head 6 -  Number: DWORD
.head 6 -  Number: DWORD
.head 6 -  String: LPSTR
.head 6 -  String: LPCSTR
.head 4 -  !
.head 3 +  Library name: NUM2WORD.DLL
.head 4 +  Function: SummInWords
.head 5 -  Description: Преобразование суммы числовой в сумму прописью
.head 5 -  Export Ordinal: 1
.head 5 +  Returns
.head 6 -  String: LPSTR
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 3 +  Library name: HARAKIRI.DLL
.head 4 +  Function: DeleteBadSymbols
.head 5 -  Description: Удаляет из файла отчета ненужные символы
и добавляет в него Esc-последовательности
Параметры:
	Имя файла,
	Строка Esc-последовательностей
	Флаг удаления символа с кодом 12
	Флаг удаления пустых строк (3 и более пустых строки заменяются одной)
.head 5 -  Export Ordinal: 0
.head 5 +  Returns
.head 6 -  Boolean: BOOL
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 6 -  String: LPSTR
.head 6 -  Boolean: BOOL
.head 6 -  Boolean: BOOL
.head 3 +  Library name: hex2bin.dll
.head 4 +  Function: ConcatBufs
.head 5 -  Description: char* ConcatBufs(char* szResult,
         const char* szBuf1,
	 unsigned long nSize1,
	 const char* szBuf2,
	 unsigned long nSize2)
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  String: LPSTR
.head 6 -  String: LPCSTR
.head 6 -  Number: LONG
.head 6 -  String: LPCSTR
.head 6 -  Number: LONG
.head 4 +  Function: InsertBuf
.head 5 -  Description: void InsertBuf(
char*szTarget,       // результирующий BLOB
longnTargetOffset,   // смещение в результирующем BLOBе
const char*szSource, // исходный сырой BLOB
longnSourceOffset,   // смещение в исходном BLOBеlong
nCopySize            // размер копируемого буфера)
.head 5 -  Export Ordinal: 0
.head 5 -  Returns
.head 5 +  Parameters
.head 6 -  Receive String: LPVOID
.head 6 -  Number: LONG
.head 6 -  String: LPVOID
.head 6 -  Number: LONG
.head 6 -  Number: LONG
.head 2 +  Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
.head 3 +  System
.head 3 +  User
.head 4 -  ! // SQLAPI - Константы //////////////////////////////////////////////////////////////////////////////////////
.head 4 -  String: SQL_ERROR         = '>> SQL-ошибка (Centura): '
.head 4 -  String: SQL_QUERY         = '>> SQL-запрос: '
.head 4 -  String: RECORD_IS_LOCKED  = 'Запись в таблице БЛОКИРОВАНА другим процессом! '
.head 4 -  !
.head 4 -  String: GOTO_ADMIN        = 'Обратитесь, пожайлуста, к Администратору базы данных! '
.head 4 -  String: GOTO_DEVELOPER    = 'Обратитесь к разработчику программного обеспечения!'
.head 4 -  !
.head 4 -  String: NO_RIGHT_FOR_OPER = 'У Вас не прав для выполнения этой операции! '
.head 4 -  !
.head 4 -  String: MSG_ErrorCommit   = '>> Ошибка выполнения SQL-оператора COMMIT! '
.head 4 -  String: MSG_ErrorRollback = '>> Ошибка выполнения SQL-оператора ROLLBACK! '
.head 4 -  !
.head 4 -  ! // PRINTAPI - Константы
.head 4 -  String: PSG_TL = '-'
.head 4 -  String: PSG_TR = '-'
.head 4 -  String: PSG_BL = '-'
.head 4 -  String: PSG_BR = '-'
.head 4 -  String: PSG_HR = '-'
.head 4 -  String: PSG_VR = '|'
.head 4 -  !
.head 4 -  String: PSG_HRUP = '+'
.head 4 -  String: PSG_HRDN = '+'
.head 4 -  String: PSG_VRLT = '-'
.head 4 -  String: PSG_VRRT = '-'
.head 4 -  String: PSG_CROS = '+'
.head 4 -  !
.head 4 -  ! String: PSG_TL = 'Ъ'
.head 4 -  ! String: PSG_TR = 'ї'
.head 4 -  ! String: PSG_BL = 'А'
.head 4 -  ! String: PSG_BR = 'Щ'
.head 4 -  ! String: PSG_HR = 'Д'
.head 4 -  ! String: PSG_VR = 'і'
.head 4 -  ! !
.head 4 -  ! String: PSG_HRUP = 'Б'
.head 4 -  ! String: PSG_HRDN = 'В'
.head 4 -  ! String: PSG_VRLT = 'ґ'
.head 4 -  ! String: PSG_VRRT = 'Г'
.head 4 -  ! String: PSG_CROS = 'Е'
.head 4 -  !
.head 4 -  Number: CPI_RATIO = 10
.head 4 -  !
.head 4 -  Number: LINE_TopHeader	= 1001
.head 4 -  Number: LINE_BotHeader	= 1002
.head 4 -  Number: LINE_BotTable	= 1003
.head 4 -  Number: LINE_BotLine	= 1004
.head 4 -  Number: LINE_BlankLine	= 1005
.head 4 -  !
.head 4 -  Number: TextLEFT 	= 0
.head 4 -  Number: TextCENTER 	= 1
.head 4 -  Number: TextRIGHT 	= 2
.head 4 -  !
.head 4 -  Number: PRINT_MODE_ALL		= 1	! Печатать таблицу
.head 4 -  Number: PRINT_MODE_SELECTED 	= 2	! Печатать документы отмеченные
.head 4 -  !
.head 4 -  String: MSG_DOC_PrintHeader = 'Печать документов: '
.head 4 -  String: MSG_DOC_UnKnownVOB  = 'Отсутствует алгоритм обработки документов данного вида. '
.head 4 -  String: MSG_DOC_PrintVerb   = 'Печатается документ '
.head 4 -  !
.head 4 -  String: MSG_BDP_Id              = 'Барс DirectPrint: '
.head 4 -  String: MSG_BDP_IOErrorTemplate = 'Невозможно открыть файл шаблона '
.head 4 -  String: MSG_BDP_IOErrorReport   = 'Невозможно открыть файл отчета '
.head 4 -  String: MSG_BDP_IOErrorText     = 'Ошибка ввода-вывода'
.head 4 -  String: MSG_BDP_ParValMismatch  = 'Несоответсвие количества имен переменных и их значений!'
.head 4 -  String: MSG_BDP_ParErrorText    = 'Ошибка параметров'
.head 2 +  Resources
.head 2 +  Variables
.data RESOURCE 0 0 1 642500369
0000: CA00000062000000 0000000000000000 02000007000000E2 00000000010D0000
0020: 000100003E000400 D8000001001B0400 E600300000010D00 01FA0000640D0000
0040: 01006F0D00C0EA00 0000010DFE00FF83 F700000001FB00FF 8F040100E8020400
0060: 00FF3F0801BA0002 00FFFFE80C010002 FE00FF03
.enddata
.head 3 -  Boolean: bApdInited
.head 3 -  ! // SECURAPI - Переменные ///////////////////////////////////////////////////////
.head 3 -  !
.head 3 -  Number: nUserId
.head 3 -  !
.head 3 -  String: strUserLogin
.head 3 -  String: strLogName
.head 3 -  !
.head 3 -  Number: nFetchRes
.head 3 -  !
.head 3 -  ! !
.head 3 -  String: strBars98ini			!   Имя INI-файла
.head 3 -  ! !
.head 3 -  ! ! // SQLAPI.APL - Переменные //////////////////////////////////////////////////
.head 3 -  ! !
.head 3 -  Boolean: bRollback
.head 3 -  ! !
.head 3 -  Number: nLastSerial
.head 3 -  ! !
.head 3 -  ! ! // PRINTAPI - Переменные //////////////////////////////////////////////////////
.head 3 -  ! !
.head 3 -  ! ! // для печати таблиц
.head 3 -  ! !
.head 3 -  String: strColumnHeader[*]
.head 3 -  Number: nColumnWidth[*]
.head 3 -  Number: nColumnID[*]
.head 3 -  Number: nColumnJustify[*]
.head 3 -  Boolean: bColumnSum[*]
.head 3 -  Number: nColumns
.head 3 -  ! !
.head 3 -  ! ! // для печати документов
.head 3 -  ! !
.head 3 -  Long String: szVArray[*,2]
.head 3 -  Number: nVarNum
.head 3 -  ! !
.head 3 -  Number: nLeftMargin
.head 3 -  Number: nRightMargin
.head 3 -  Number: nTextWidth
.head 3 -  Number: nCenterMode
.head 3 -  Number: nActualWidth
.head 3 -  ! !
.head 2 +  Internal Functions
.head 3 -  ! New Function
.head 3 +  Function: IniAbsapi
.head 4 -  Description: инициализация библиотеки
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strPathToLangResources
.head 5 -  String: strLangId
.head 5 -  String: strFileName
.head 4 +  Actions
.head 5 +  If not bApdInited
.head 6 -  Set bStaticsAsWindows = TRUE
.head 6 -  Set strPathToLangResources = GetLangPath()
.head 6 -  Set strLangId = GetLang()
.head 6 -  Set strFileName = strPathToLangResources || "\\" || strLangId || "\\absapi.lng"
.head 6 +  If (NOT strLangId) OR (NOT CurrentLangTable.InitFromFile(strFileName, strLangId))
.head 7 -  Call CurrentLangTable.Init()
.head 7 -  ! ====================================================
.head 7 -  Call CurrentLangTable.AddAtom('cTWndTitleError','АБС "БАРС98" - Ошибка')
.head 7 -  ! ====================================================
.head 7 -  ! dlg_SqlError
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlError.pbContinue','Продолжить')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlError.pbAdvanced','Подробно')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlError.pbStop','Стоп!')
.head 7 -  ! message text
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlError.cTMess1','Закончить работу приложения?')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlError.cTMess2','Подтверждение...')
.head 7 -  ! constants
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlError.cTExit','Выход из обработчика SQL-ошибки')
.head 7 -  ! ====================================================
.head 7 -  ! dlg_SqlErrorExt
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.pbStop','Закрыть')
.head 7 -  ! BG
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.bgInfo','Расширенная информация')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.bgModCode','Модуль:')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.bgAppErrText','Текст ошибки:')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.bgCurrAction','Текущее действие:')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.bgCurrStack','Содержимое стека:')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_SqlErrorExt.bgSrcErrText','Исходная ошибка:')
.head 7 -  ! ====================================================
.head 7 -  ! dlg_GetClue
.head 7 -  Call CurrentLangTable.AddAtom('dlg_GetClue.cTWndTitle','Что печатать?')
.head 7 -  !
.head 7 -  Call CurrentLangTable.AddAtom('dlg_GetClue.pbOk','Печатать')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_GetClue.pbCancel','Отменить')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_GetClue.rbAll','Всю таблицу')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_GetClue.rbChecked','Отмеченные документы')
.head 7 -  ! ====================================================
.head 7 -  ! dlg_MessageBox
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBox.pbYes','Да')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBox.pbNo','Нет')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBox.pbContinue','Продолжить')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBox.pbCancel','Завершить')
.head 7 -  ! ====================================================
.head 7 -  ! dlg_MessageBoxEx
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBoxEx.pbYes','Да')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBoxEx.pbNo','Нет')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBoxEx.pbYes2All','Все!')
.head 7 -  Call CurrentLangTable.AddAtom('dlg_MessageBoxEx.pbCancel','Отменить')
.head 7 -  ! ====================================================
.head 6 -  Set bApdInited = TRUE
.head 5 -  Return bApdInited
.head 3 +  ! Function: GetIniSection			! __exported
.head 4 -  Description: возвращает количество элементов в массиве
ПЕРВЫЙ параметр - наименование секции в INI-файле АБС
ВТОРОЙ параметр - принимающий двумерный массив [*,3]
.head 4 +  Returns 
.head 5 -  Number: 
.head 4 +  Parameters 
.head 5 -  String: sSection
.head 5 -  Receive String: smTVC[*,3]
.head 4 -  Static Variables 
.head 4 +  Local variables 
.head 5 -  String: sFind
.head 5 -  String: sBuffer
.head 5 -  Number: nI
.head 5 -  Number: nJ
.head 5 -  File Handle: hF
.head 5 -  String: sTag
.head 5 -  String: sValue
.head 5 -  String: sComm
.head 5 -  Boolean: bY
.head 5 -  Number: nZ
.head 4 +  Actions 
.head 5 -  Set nI = GetUserId()
.head 5 +  If SqlPrepareAndExecute(hSql(), '
   UPDATE staff
   SET tobo=null
   WHERE id=:nI')
.head 6 -  Call SqlCommit(hSql())
.head 5 -  Set nZ = 0
.head 5 -  Set sFind = '[' || sSection || ']'
.head 5 -  Call SalFileOpen(hF, GetIniFileName(), OF_Read)
.head 5 -  Set nJ = 0
.head 5 +  Loop 
.head 6 -  Set sBuffer = Spac(512)
.head 6 +  If not SalFileGetStr(hF, sBuffer, 512)
.head 7 -  Break 
.head 6 +  If Left(sBuffer, 1) != ';'
.head 7 +  If bY
.head 8 +  If At('[', sBuffer) > 0 and At(']', sBuffer) > At('[', sBuffer)
.head 9 -  Break 
.head 8 +  Else 
.head 9 -  ! разобрать на три(две) части
.head 9 -  Set nI = At('=', sBuffer)
.head 9 +  If nI > 0
.head 10 -  Set sTag = StrDosToWinX(SalStrTrimX(Left(sBuffer, nI-1)))
.head 10 -  Set sBuffer = Right(sBuffer, Len(sBuffer)-nI)
.head 10 -  Set nI = At(';', sBuffer)
.head 10 +  If nI > 0
.head 11 -  Set sValue = StrDosToWinX(SalStrTrimX(Left(sBuffer, nI-1)))
.head 11 -  Set sComm = StrDosToWinX(SalStrTrimX(Right(sBuffer, Len(sBuffer)-nI)))
.head 10 +  Else 
.head 11 -  Set sValue = StrDosToWinX(SalStrTrimX(sBuffer))
.head 11 -  Set sComm = ''
.head 10 -  Set smTVC[nJ,1] = sTag
.head 10 -  Set smTVC[nJ,2] = sValue
.head 10 -  Set smTVC[nJ,3] = sComm
.head 10 -  Set nJ = nJ + 1
.head 10 -  Set nZ = nJ
.head 7 +  Else 
.head 8 +  If At(sFind, sBuffer) > 0
.head 9 -  Set bY = TRUE
.head 5 -  Call SalFileClose(hF)
.head 5 -  ! Call DebugN(nZ)
.head 5 -  Return nZ
.head 3 +  Function: GetIniSection			! __exported
.head 4 -  Description: возвращает количество элементов в массиве
ПЕРВЫЙ параметр - наименование секции в INI-файле АБС
ВТОРОЙ параметр - принимающий двумерный массив [*,3]
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sSection
.head 5 -  Receive String: smTVC[*,3]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFind
.head 5 -  String: sBuffer
.head 5 -  Number: nI
.head 5 -  Number: nJ
.head 5 -  File Handle: hF
.head 5 -  String: sTag
.head 5 -  String: sValue
.head 5 -  String: sComm
.head 5 -  Boolean: bY
.head 5 -  Number: nZ
.head 4 +  Actions
.head 5 -  Set nZ = 0
.head 5 -  Set sFind = '[' || sSection || ']'
.head 5 -  Call SalFileOpen(hF, GetIniFileName(), OF_Read)
.head 5 -  Set nJ = 0
.head 5 +  Loop
.head 6 -  Set sBuffer = Spac(512)
.head 6 +  If not SalFileGetStr(hF, sBuffer, 512)
.head 7 -  Break
.head 6 +  If Left(sBuffer, 1) != ';'
.head 7 +  If bY
.head 8 +  If At('[', sBuffer) > 0 and At(']', sBuffer) > At('[', sBuffer)
.head 9 -  Break
.head 8 +  Else
.head 9 -  ! разобрать на три(две) части
.head 9 -  Set nI = At('=', sBuffer)
.head 9 +  If nI > 0
.head 10 -  Set sTag = StrDosToWinX(SalStrTrimX(Left(sBuffer, nI-1)))
.head 10 -  Set sBuffer = Right(sBuffer, Len(sBuffer)-nI)
.head 10 -  Set nI = At(';', sBuffer)
.head 10 +  If nI > 0
.head 11 -  Set sValue = StrDosToWinX(SalStrTrimX(Left(sBuffer, nI-1)))
.head 11 -  Set sComm = StrDosToWinX(SalStrTrimX(Right(sBuffer, Len(sBuffer)-nI)))
.head 10 +  Else
.head 11 -  Set sValue = StrDosToWinX(SalStrTrimX(sBuffer))
.head 11 -  Set sComm = ''
.head 10 -  Set smTVC[nJ,1] = sTag
.head 10 -  Set smTVC[nJ,2] = sValue
.head 10 -  Set smTVC[nJ,3] = sComm
.head 10 -  Set nJ = nJ + 1
.head 10 -  Set nZ = nJ
.head 7 +  Else
.head 8 +  If At(sFind, sBuffer) > 0
.head 9 -  Set bY = TRUE
.head 5 -  Call SalFileClose(hF)
.head 5 -  ! Call DebugN(nZ)
.head 5 -  Return nZ
.head 3 +  Function: SetToboStart			! __exported
.head 4 -  Description: устанавливает стартовое значение ('0' - головной банк) TOBO в таблице STAFF
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nI
.head 4 +  Actions
.head 5 -  Set nI = GetUserId()
.head 5 +  If SqlPrepareAndExecute(hSql(), "
   UPDATE staff
   SET tobo='0'
   WHERE id=:nI")
.head 6 -  Call SqlCommit(hSql())
.head 5 +  Else
.head 6 -  Call SalQuit()
.head 5 -  Return TRUE
.head 3 +  Function: IniCRCvalid			! __exported
.head 4 -  Description: проверяет CRC INI-файла
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFind
.head 5 -  String: sBuffer
.head 5 -  Number: nI
.head 5 -  Number: nJ
.head 5 -  File Handle: hF
.head 5 -  String: sTag
.head 5 -  String: sValue
.head 5 -  String: sComm
.head 5 -  Boolean: bY
.head 5 -  Number: nZ
.head 5 -  String: sCalcCRC
.head 5 -  String: sFileCRC
.head 5 -  String: smSecParVal[*] ! 32+32+192 - дополнено все пробелами
.head 5 -  String: sSection
.head 5 -  String: sParametr
.head 5 -  Number: nNumItems
.head 5 -  Number: nCRC
.head 4 +  Actions
.head 5 -  Set sSection = '[]'
.head 5 -  Set sFileCRC = '-1'
.head 5 -  Set sParametr = ''
.head 5 -  Call SalFileOpen(hF, GetIniFileName(), OF_Read)
.head 5 -  Set nJ = 0
.head 5 +  Loop
.head 6 -  Set sBuffer = Spac(512)
.head 6 +  If not SalFileGetStr(hF, sBuffer, 512)
.head 7 -  Break
.head 6 +  If Left(sBuffer, 1) != ';' and Len(VisStrTrim(sBuffer)) > 0
.head 7 +  If Left(sBuffer, 1) = '[' and At(']', sBuffer) > 0
.head 8 -  ! секция
.head 8 -  Set sSection = Right(sBuffer, Len(sBuffer)-1)
.head 8 -  Set nI = At(']', sSection)
.head 8 -  Set sSection = Left(sSection, nI-1)
.head 8 -  Set sParametr = ''
.head 7 +  Else If At('=', sBuffer) > 0
.head 8 -  ! параметр
.head 8 -  Set nI = At('=', sBuffer)
.head 8 -  Set sParametr = VisStrRightTrim(Left(sBuffer, nI-1))
.head 8 -  Set sValue = VisStrRightTrim(Right(sBuffer, Len(sBuffer)-nI))
.head 7 +  Else
.head 8 -  Set sParametr = '' 
.head 7 +  If sSection = 'CRC' and sParametr = 'Value'
.head 8 -  Set sFileCRC = sValue
.head 7 +  Else If sSection != '[]' and Len(sParametr) > 0
.head 8 -  Set smSecParVal[nJ] = PadR(sSection, 32) || PadR(sParametr, 32) ||
    PadR(sValue, 192) 
.head 8 -  Set nJ = nJ + 1
.head 5 -  Call SalFileClose(hF)
.head 5 -  ! посортировать массив
.head 5 -  Set nNumItems = VisArraySort(smSecParVal, SORT_Ascending, DT_String)
.head 5 +  If nNumItems > 0
.head 6 -  Set nI = 0
.head 6 -  Set nCRC = 0
.head 6 +  While nI < nNumItems
.head 7 -  ! Call Debug('smSecParVal[nI]=' || smSecParVal[nI])
.head 7 -  Set nJ = 1
.head 7 +  Loop
.head 8 +  If nJ > 256
.head 9 -  Break
.head 8 -  Set nCRC = nCRC + Int(Asc(Subs(smSecParVal[nI], nJ, 1)) * 
    SalNumberExponent(nJ / 10))
.head 8 -  Set nJ = nJ + 1
.head 7 -  Set nI = nI + 1
.head 6 -  Set sCalcCRC = Str(nCRC)
.head 5 +  Else
.head 6 -  Set sCalcCRC = ''
.head 5 -  ! Call Debug('sCalcCRC=' || sCalcCRC || PutCrLf() || 'sFileCRC=' || sFileCRC)
.head 5 -  Return sCalcCRC=sFileCRC
.head 3 -  ! Redefined Function
.head 3 +  Function: GetRatesNBU			! __exported
.head 4 -  Description: Прием курсов НБУ из текстовых файлов
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  String: SIMV
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hFile
.head 5 -  String: sDat
.head 5 -  Number: nkv
.head 5 -  Number: nbsum
.head 5 -  Number: nrate_o
.head 5 -  String: srab
.head 5 -  Boolean: byn
.head 5 -  Boolean: bpovtor
.head 5 -  Number: naa
.head 5 -  Number: nFetchRes
.head 5 -  String: sFA
.head 5 -  String: ss
.head 5 -  String: sFileSimv[*]
.head 5 -  Number: nNumFiles
.head 5 -  Number: nPosSlash
.head 5 -  Number: nPosSpace
.head 5 -  Number: nI
.head 5 -  String: sDD
.head 5 -  Boolean: bYa
.head 5 -  String: sDirs[*]
.head 5 -  Number: nCount
.head 5 -  Number: nD
.head 5 -  String: sMesU[*]
.head 5 -  String: sMesUkr
.head 5 -  String: sMesNum
.head 5 -  Number: n0
.head 5 -  ! String: sNaimValUUU
.head 5 -  Number: nrate_b
.head 5 -  Number: nrate_s
.head 5 -  Date/Time: dZMR
.head 5 -  String: sdatZMR
.head 5 -  Number: nbsumugo
.head 4 +  Actions
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 -  Call SalArraySetUpperBound(sFileSimv, 1, -1)
.head 5 -  Call SalUseRegistry(FALSE, '')
.head 5 -  Call SalGetProfileString('common parameters', 'curratesdir', '\\BARS98\\RATES', ss,
     GetIniFileName())
.head 5 -  Call SalGetProfileString('common parameters', 'curratesmes', '\\BARS\\Mes_Ukr.Ini',
     sMesUkr, GetIniFileName())
.head 5 +  ! If SIMV = 'G'
.head 6 -  ! золото и другие металлы
.head 6 -          Set sFA = ss || '\\GOLD' || '????'
.head 6 -          Set nNumFiles = VisDosEnumFiles(sFA, FA_Standard,
    sFileSimv)
.head 6 +          If nNumFiles > 0
.head 7 -          Set nI = 0
.head 7 +          While nI < nNumFiles
.head 8 -          Set sFA = ss || '\\' || sFileSimv[nI]
.head 8 -          Set byn = FALSE
.head 8 -          Set bpovtor = FALSE
.head 8 -  ! Call Debug('sFA=' || sFA)
.head 8 -          Set sDD = ''
.head 8 +          If SalFileOpen(hFile, sFA, 0)
.head 9 +          Loop 
.head 10 +          If not SalFileGetStr(hFile, srab, 80) ! конец
                                      ! файла
.head 11 -          Break 
.head 10 +          If Len(srab) > 10
.head 11 -  ! Call Debug(srab)
.head 11 +          If Len(sDD) != 10
.head 12 -          Set nPosSlash = At('рок', StrDosToWinX(srab))
.head 12 +          If nPosSlash > 48
.head 13 -          Set sDD = Subs(sFileSimv[nI], 5, 2) || '/'
    || Subs(sFileSimv[nI], 7, 2) || '/' ||
    Subs(srab, nPosSlash-5, 4)
.head 13 +          If Len(sDD) = 10 and
   SalStrIsValidDateTime(sDD)
.head 14 -          Set sDat = Subs(sDD, 4, 3) || Left(sDD, 3)
    || Right(sDD, 4)
.head 13 +          Else 
.head 14 -          Set sDD = ''
.head 11 -          Set nkv = Val(Subs(srab, 2, 3))
.head 11 +          If nkv > 900 and Len(sDD) = 10
.head 12 -          Set nbsum = 0
.head 12 +          If SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM tabval
     WHERE kv=:nkv
     INTO :nbsum"))
.head 13 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 12 +          If nbsum > 0
.head 13 -          Set naa = 0
.head 13 +          If SqlPrepareAndExecute(hSql(), T("
     SELECT count(*)
     FROM cur_rates
     WHERE kv=:nkv and vdate= :sDat
     INTO :naa"))
.head 14 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 13 +          If naa > 0 and not bpovtor
.head 14 -          Set bpovtor = TRUE
.head 14 -          Call SalWaitCursor(FALSE)
.head 14 +          If SalMessageBox("ЗАМЕНИТЬ ?", "Файл " ||
   sFA || " Принимается повторно !",
   MB_YesNo | MB_IconHand) = IDNO
.head 15 -          Call SalWaitCursor(TRUE)
.head 15 -          Break 
.head 14 -          Call SalWaitCursor(TRUE)
.head 13 -          Set nbsum = Val(Subs(srab, 9, 7))
.head 13 -          Set nrate_o = Val(Subs(srab, 48, 5) ||
    Subs(srab, 54, 2)) / 100
.head 13 -          Call SalUpdateWindow(hWndForm)
.head 13 +          If naa = 0
.head 14 +          If SqlPrepareAndExecute(hSql(), T("
   INSERT
   INTO cur_rates (kv,vdate,bsum,rate_o)
   VALUES (:nkv, :sDat ,:nbsum,
           :nrate_o)"))
.head 15 -          Call SqlCommit(hSql())
.head 15 -          Call SaveFInfoToLog('Добавлен курс: ' ||
     Str(nkv) || '-' || sDat || '-' ||
     Str(nbsum) || '-' || Str(nrate_o))
.head 14 +          Else 
.head 15 -          Call SqlRollback(hSql())
.head 15 -          Call SaveErrorToLog(
     'Не удалось добавить курс: ' ||
     Str(nkv) || '-' || sDat || '-' ||
     Str(nbsum) || '-' || Str(nrate_o))
.head 15 -          Call SalWaitCursor(FALSE)
.head 15 -          Call MessageNoWait(
     'Не удалось добавить курс: ' ||
     Str(nkv) || '-' || sDat || '-' ||
     Str(nbsum) || '-' || Str(nrate_o),
     'ОШИБКА !', 7, 1)
.head 15 -          Call SalWaitCursor(TRUE)
.head 13 +          Else 
.head 14 +          If SqlPrepareAndExecute(hSql(), T("
   UPDATE cur_rates
   SET bsum=:nbsum,rate_o=:nrate_o
   WHERE kv=:nkv and vdate= :sDat "))
.head 15 -          Call SqlCommit(hSql())
.head 15 -          Call SaveFInfoToLog('Изменен курс: ' ||
     Str(nkv) || '-' || sDat || '-' ||
     Str(nbsum) || '-' || Str(nrate_o))
.head 14 +          Else 
.head 15 -          Call SqlRollback(hSql())
.head 15 -          Call SaveErrorToLog(
     'Не удалось изменить курс: ' ||
     Str(nkv) || '-' || sDat || '-' ||
     Str(nbsum) || '-' || Str(nrate_o))
.head 15 -          Call SalWaitCursor(FALSE)
.head 15 -          Call MessageNoWait(
     'Не удалось изменить курс: ' ||
     Str(nkv) || '-' || sDat || '-' ||
     Str(nbsum) || '-' || Str(nrate_o),
     'ОШИБКА !', 7, 1)
.head 15 -          Call SalWaitCursor(TRUE)
.head 13 -          Set byn = TRUE
.head 13 -          Call SalStatusSetText(hWndForm,
     sFileSimv[nI] || ': ' || GetLcv(nkv) ||
     '(' || Right(Str(nkv+1000), 3) ||
     ') дата ' || sDD || ' ' ||
     SalStrTrimX(Subs(srab, 48, 8)) ||
     ' (за ' || Str(nbsum) || ')')
.head 13 -          Call SalUpdateWindow(hWndForm)
.head 9 +          If byn
.head 10 -  ! Call SqlCommit(hSql())
.head 10 -          Call SalWaitCursor(FALSE)
.head 10 -          Call MessageNoWait('Курсы (' || SIMV || ') за ' ||
     sDD || ' - приняты.', 'Сообщение', 3, 0)
.head 10 -          Call SalWaitCursor(TRUE)
.head 10 -          Set bYa = FALSE
.head 10 -          Call SalArraySetUpperBound(sDirs, 1, -1)
.head 10 -          Set nCount = VisDosEnumDirs(ss, sDirs)
.head 10 +          If nCount > 0
.head 11 -          Set nD = 0
.head 11 +          While nD < nCount
.head 12 +          If SalStrUpperX(sDirs[nD]) = 'BACKUP'
.head 13 -          Set bYa = TRUE
.head 13 -          Break 
.head 12 -          Set nD = nD + 1
.head 10 +          If not bYa
.head 11 -          Call SalFileCreateDirectory(ss || '\\BACKUP')
.head 10 +          If File(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 11 -          Call VisFileDelete(ss || '\\BACKUP\\' ||
     sFileSimv[nI])
.head 10 -          Set nD = VisFileRename(sFA, ss || '\\BACKUP\\' ||
    sFileSimv[nI])
.head 9 +          Else 
.head 10 -          Call SalWaitCursor(FALSE)
.head 10 -          Call MessageNoWait('Курсы (' || SIMV || ') за ' ||
     sDD || ' - НЕ приняты.', 'Сообщение', 0, 1)
.head 10 -          Call SalWaitCursor(TRUE)
.head 9 -          Call SalFileClose(hFile)
.head 8 +          Else 
.head 9 -          Call SalWaitCursor(FALSE)
.head 9 -          Call MessageNoWait('Файл курсов ' || sFA ||
     ' не найден или занят другим пользователем !',
     'Предупреждение', 0, 1)
.head 9 -          Call SalWaitCursor(TRUE)
.head 8 -          Set nI = nI + 1
.head 7 -          Call SalStatusSetText(hWndForm, 'Курсы (' || SIMV ||
     ') приняты.')
.head 6 +          Else 
.head 7 -          Call SalWaitCursor(FALSE)
.head 7 -          Call MessageNoWait('Файлы курсов ' || ss || '\\GOLD' ||
     '???? не найдены !', 'ВНИМАНИЕ !', 0, 1)
.head 7 -          Call SalWaitCursor(TRUE)
.head 5 +  If SIMV = 'G'
.head 6 -  ! золото и другие металлы
.head 6 -  Set sFA = ss || '\\GOLD' || '????'
.head 6 -  Set nNumFiles = VisDosEnumFiles(sFA, FA_Standard, sFileSimv)
.head 6 +  If nNumFiles > 0
.head 7 -  Set nI = 0
.head 7 +  While nI < nNumFiles
.head 8 -  Set sFA = ss || '\\' || sFileSimv[nI]
.head 8 -  Set byn = FALSE
.head 8 -  Set bpovtor = FALSE
.head 8 -  ! Call Debug('sFA=' || sFA)
.head 8 -  Set sDD = ''
.head 8 +  If SalFileOpen(hFile, sFA, 0)
.head 9 +  Loop
.head 10 +  If not SalFileGetStr(hFile, srab, 80) ! конец файла
.head 11 -  Break
.head 10 +  If Len(srab) > 10
.head 11 +  If Len(sDD) != 10
.head 12 -  Set nPosSlash = At('/', srab)
.head 12 +  If nPosSlash > 2
.head 13 -  Set sDD = Subs(srab, nPosSlash-2, 10)
.head 13 -  Set nPosSpace = At(' ', sDD)
.head 13 +  If nPosSpace > 0
.head 14 -  Set sDD = Left(sDD, nPosSpace-1)
.head 14 -  ! Call Debug('(1)sDD=' || sDD)
.head 14 +  If Len(sDD) = 8
.head 15 -  Set sDD = Stuff(sDD, 7, 0, IifS(Val(
    Right(sDD, 2))<80, '20', '19'))
.head 14 -  ! Call Debug('(2)sDD=' || sDD)
.head 13 -  ! Call Debug('sDD=' || sDD || ', Len(sDD)=' || Str(Len(sDD)))
.head 13 +  If Len(sDD) = 10 and  SalStrIsValidDateTime(sDD)
.head 14 -  Set sDat = Subs(sDD, 4, 3) || Left(sDD, 3) || Right(sDD, 4)
.head 13 +  Else
.head 14 -  Set sDD = ''
.head 11 -  Set nkv = Val(Subs(srab, 2, 3))
.head 11 +  If nkv > 0 and Len(sDD) = 10
.head 12 -  Set nbsum = 0
.head 12 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT count(*)
   FROM tabval
   WHERE kv=:nkv
   INTO :nbsum"))
.head 13 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 12 +  If nbsum > 0
.head 13 -  Set naa = 0
.head 13 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT count(*)
   FROM cur_rates
   WHERE kv=:nkv and vdate= :sDat
   INTO :naa"))
.head 14 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 13 +  If naa > 0 and not bpovtor
.head 14 -  Set bpovtor = TRUE
.head 14 -  Call SalWaitCursor(FALSE)
.head 14 +  If SalMessageBox("ЗАМЕНИТЬ ?", "Файл " || sFA ||
   " Принимается повторно !", MB_YesNo | MB_IconHand) = IDNO
.head 15 -  Call SalWaitCursor(TRUE)
.head 15 -  Break
.head 14 -  Call SalWaitCursor(TRUE)
.head 13 -  Set nbsum = Val(Subs(srab, 11, 5))
.head 13 -  Set nrate_o = Val(Subs(srab, 46, 7) || Subs(srab, 54, 2)) / 100
.head 13 -  Call SalUpdateWindow(hWndForm)
.head 13 +  If naa = 0
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   INSERT
   INTO cur_rates (kv,vdate,bsum,rate_o)
   VALUES (:nkv, :sDat ,:nbsum,:nrate_o)"))
.head 15 -  Call SqlCommit(hSql())
.head 15 -  Call SaveFInfoToLog('Добавлен курс: ' || Str(nkv) || '-' || sDat ||
     '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 14 +  Else
.head 15 -  Call SqlRollback(hSql())
.head 15 -  Call SaveErrorToLog('Не удалось добавить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 15 -  Call SalWaitCursor(FALSE)
.head 15 -  Call MessageNoWait('Не удалось добавить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o),
     'ОШИБКА !', 7, 1)
.head 15 -  Call SalWaitCursor(TRUE)
.head 13 +  Else
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   UPDATE cur_rates
   SET bsum=:nbsum,rate_o=:nrate_o
   WHERE kv=:nkv and vdate= :sDat "))
.head 15 -  Call SqlCommit(hSql())
.head 15 -  Call SaveFInfoToLog('Изменен курс: ' || Str(nkv) || '-' || sDat ||
     '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 14 +  Else
.head 15 -  Call SqlRollback(hSql())
.head 15 -  Call SaveErrorToLog('Не удалось изменить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 15 -  Call SalWaitCursor(FALSE)
.head 15 -  Call MessageNoWait('Не удалось изменить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o),
     'ОШИБКА !', 7, 1)
.head 15 -  Call SalWaitCursor(TRUE)
.head 13 -  Set byn = TRUE
.head 13 -  Call SalStatusSetText(hWndForm, sFileSimv[nI] || ': ' || GetLcv(nkv) ||
     '(' || Right(Str(nkv+1000), 3) || ') дата ' || sDD || ' ' ||
     SalStrTrimX(Subs(srab, 52, 9)) || ' (за ' || Str(nbsum) || ')')
.head 13 -  Call SalUpdateWindow(hWndForm)
.head 9 -  Call SalFileClose(hFile)
.head 9 +  If byn
.head 10 -  ! Call SqlCommit(hSql())
.head 10 -  Call SalWaitCursor(FALSE)
.head 10 -  Call MessageNoWait('Курсы (' || SIMV || ') за ' || sDD || ' - приняты.',
     'СООБЩЕНИЕ', 3, 0)
.head 10 -  Call SalWaitCursor(TRUE)
.head 10 -  Set bYa = FALSE
.head 10 -  Call SalArraySetUpperBound(sDirs, 1, -1)
.head 10 -  Set nCount = VisDosEnumDirs(ss, sDirs)
.head 10 +  If nCount > 0
.head 11 -  Set nD = 0
.head 11 +  While nD < nCount
.head 12 +  If SalStrUpperX(sDirs[nD]) = 'BACKUP'
.head 13 -  Set bYa = TRUE
.head 13 -  Break
.head 12 -  Set nD = nD + 1
.head 10 +  If not bYa
.head 11 -  Call SalFileCreateDirectory(ss || '\\BACKUP')
.head 10 +  If File(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 11 -  Call VisFileDelete(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 10 -  Set nD = VisFileRename(sFA, ss || '\\BACKUP\\' || sFileSimv[nI])
.head 10 +  If nD < 0 
.head 11 -  Call SalMessageBox('Не удалось перенести в BACKUP файл ' || ss || '\\' ||
     sFileSimv[nI], 'Ошибка !', MB_Ok)
.head 9 +  Else
.head 10 -  Call SalWaitCursor(FALSE)
.head 10 -  Call MessageNoWait('Курсы (' || SIMV || ') за ' || sDD || ' - НЕ приняты.',
     'ВНИМАНИЕ !', 0, 1)
.head 10 -  Call SalWaitCursor(TRUE)
.head 8 +  Else
.head 9 -  Call SalWaitCursor(FALSE)
.head 9 -  Call MessageNoWait('Файл курсов ' || sFA ||
     ' не найден или занят другим пользователем !', 'Предупреждение', 0, 1)
.head 9 -  Call SalWaitCursor(TRUE)
.head 8 -  Set nI = nI + 1
.head 7 -  Call SalStatusSetText(hWndForm, 'Курсы (' || SIMV || ') приняты.')
.head 6 +  Else
.head 7 -  Call SalWaitCursor(FALSE)
.head 7 -  Call MessageNoWait('Файлы курсов ' || ss || '\\GOLD' || '???? не найдены !',
     'ВНИМАНИЕ !', 0, 1)
.head 7 -  Call SalWaitCursor(TRUE)
.head 5 +  Else If SIMV = 'Z'
.head 6 -  ! ZMR
.head 6 -  ! прочитать текстовый файл (Mes_Ukr.Ini)
.head 6 -  Set sMesU[0]  = StrWinToDosX('січня')
.head 6 -  Set sMesU[1]  = StrWinToDosX('лютого')
.head 6 -  Set sMesU[2]  = StrWinToDosX('березня')
.head 6 -  Set sMesU[3]  = StrWinToDosX('квітня')
.head 6 -  Set sMesU[4]  = StrWinToDosX('травня')
.head 6 -  Set sMesU[5]  = StrWinToDosX('червня')
.head 6 -  Set sMesU[6]  = StrWinToDosX('липня')
.head 6 -  Set sMesU[7]  = StrWinToDosX('серпня')
.head 6 -  Set sMesU[8]  = StrWinToDosX('вересня')
.head 6 -  Set sMesU[9]  = StrWinToDosX('жовтня')
.head 6 -  Set sMesU[10] = StrWinToDosX('листопада')
.head 6 -  Set sMesU[11] = StrWinToDosX('грудня')
.head 6 +  If SalFileOpen(hFile, sMesUkr, 0)
.head 7 -  Set nI = 0
.head 7 +  Loop
.head 8 +  If not SalFileGetStr(hFile, srab, 80) ! конец файла
.head 9 -  Break
.head 8 +  If nI > 11
.head 9 -  Break
.head 8 -  ! Set sMesU[nI] = StrWinToDosX(SalStrTrimX(srab))
.head 8 -  Set sMesU[nI] = SalStrTrimX(srab)
.head 8 -  Set nI = nI + 1
.head 7 -  Call SalFileClose(hFile)
.head 6 -  Set sFA = ss || '\\ZMR' || '????'
.head 6 -  Set nNumFiles = VisDosEnumFiles(sFA, FA_Standard, sFileSimv)
.head 6 +  If nNumFiles > 0
.head 7 -  Set nI = 0
.head 7 +  While nI < nNumFiles
.head 8 -  Set sFA = ss || '\\' || sFileSimv[nI]
.head 8 -  Set byn = FALSE
.head 8 -  Set sDD = ''
.head 8 -  Set sMesNum = '00' 
.head 8 +  If SalFileOpen(hFile, sFA, 0)
.head 9 +  Loop
.head 10 +  If not SalFileGetStr(hFile, srab, 80) ! конец файла
.head 11 -  Break
.head 10 +  If Len(srab) > 10
.head 11 +  If Len(sDD) != 10
.head 12 -  Set n0 = 0
.head 12 +  While n0 < 12
.head 13 -  Set nPosSlash = At(' ' || sMesU[n0] || ' ', srab)
.head 13 -  Set n0 = n0 + 1
.head 13 +  If nPosSlash > 2
.head 14 -  Set sMesNum = Right(Str(n0+100), 2)
.head 14 -  Break
.head 12 +  If Val(sMesNum) > 0
.head 13 -  Set sDD = Right('0' || SalStrTrimX(Subs(srab, nPosSlash-2, 2)), 2) ||
    '/' || sMesNum || '/' || SalStrTrimX(
    Subs(srab, nPosSlash+1+Len(sMesU[n0-1]), 6))
.head 13 +  If Len(sDD) = 10 and SalStrIsValidDateTime(sDD)
.head 14 -  Set sDat = Subs(sDD, 4, 3) || Left(sDD, 3) || Right(sDD, 4)
.head 13 +  Else
.head 14 -  Set sDD = ''
.head 11 -  ! Set sNaimValUUU = StrDosToWinX(SalStrTrimX(Subs(srab, 6, 31)))
.head 11 -  Set nkv = Val(Left(srab, 3))
.head 11 +  ! If SqlPrepareAndExecute(hSql(), T("
   SELECT kv
   INTO :nkv
   FROM TABVAL
   WHERE for_zmr=:sNaimValUUU"))
.head 12 +          If not SqlFetchNext(hSql(), nFetchRes)
.head 13 -          Set nkv = 0
.head 11 +  ! Else
.head 12 -          Set nkv = 0
.head 11 +  If nkv > 0 and Len(sDD) = 10 and Len(srab) > 12
.head 12 -  Set nbsum = 0
.head 12 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT count(*)
   FROM tabval
   WHERE kv=:nkv
   INTO :nbsum"))
.head 13 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 12 +  If nbsum > 0
.head 13 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT count(*)
   FROM cur_rates
   WHERE kv=:nkv
   INTO :naa"))
.head 14 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 15 -  Set naa = 0
.head 13 +  Else
.head 14 -  Set naa = 0
.head 13 +  If naa > 0
.head 14 -  Set nbsum = Val(Subs(srab, 5, 5))
.head 14 -  Set nrate_b = Val(Subs(srab, 40, 4) || Subs(srab, 45, 4)) / 10000
.head 14 -  Set nrate_s = Val(Subs(srab, 51, 4) || Subs(srab, 56, 4)) / 10000
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT max(vdate)
   INTO :dZMR
   FROM cur_rates
   WHERE kv=:nkv and vdate<= :sDat "))
.head 15 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 16 -  Set dZMR = DATETIME_Null
.head 14 +  Else
.head 15 -  Set dZMR = DATETIME_Null
.head 13 +  If dZMR != DATETIME_Null
.head 14 -  Set sdatZMR = SalFmtFormatDateTime(dZMR, 'MM/dd/yyyy')
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT bsum
   INTO :nbsumugo
   FROM cur_rates
   WHERE kv=:nkv and vdate= :sdatZMR "))
.head 15 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 16 -  Set nbsumugo = 0
.head 14 +  Else
.head 15 -  Set nbsumugo = 0
.head 13 +  If nbsumugo > 0
.head 14 -  Set nrate_b = nrate_b * nbsumugo / nbsum
.head 14 -  Set nrate_s = nrate_s * nbsumugo / nbsum
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   UPDATE cur_rates
   SET rate_b=:nrate_b,rate_s=:nrate_s
   WHERE kv=:nkv and vdate= :sdatZMR "))
.head 15 -  Call SqlCommit(hSql())
.head 15 -  Call SaveFInfoToLog('Изменен курс покупки: ' || Str(nkv) || '-' ||
     sdatZMR || '-' || Str(nbsumugo) || '-' || Str(nrate_b))
.head 15 -  Call SaveFInfoToLog('Изменен курс продажи: ' || Str(nkv) || '-' ||
     sdatZMR || '-' || Str(nbsumugo) || '-' || Str(nrate_s))
.head 14 +  Else
.head 15 -  Call SqlRollback(hSql())
.head 15 -  Call SaveErrorToLog('Не удалось изменить курс покупки: ' || Str(nkv)
     || '-' || sdatZMR || '-' || Str(nbsumugo) || '-' ||
     Str(nrate_b))
.head 15 -  Call SaveErrorToLog('Не удалось изменить курс продажи: ' || Str(nkv)
     || '-' || sdatZMR || '-' || Str(nbsumugo) || '-' ||
     Str(nrate_s))
.head 15 -  Call SalWaitCursor(FALSE)
.head 15 -  Call MessageNoWait('Не удалось изменить курсы покупки и продажи: '
     || Str(nkv) || '-' || sdatZMR || '-' || Str(nbsumugo) || '-' ||
      Str(nrate_b) || '-' || Str(nrate_s), 'ОШИБКА !', 7, 1)
.head 15 -  Call SalWaitCursor(TRUE)
.head 13 -  Call SalUpdateWindow(hWndForm)
.head 13 -  Set byn = TRUE
.head 13 -  Call SalStatusSetText(hWndForm, sFileSimv[nI] || ': ' || GetLcv(nkv) ||
     '(' || Right(Str(nkv+1000), 3) || ') дата ' || sdatZMR || ' ' ||
     SalStrTrimX(Subs(srab, 40, 9)) || ' - ' || SalStrTrimX(
     Subs(srab, 51, 9)) || ' (за ' || Str(nbsum) || ')')
.head 13 -  Call SalUpdateWindow(hWndForm)
.head 9 -  Call SalFileClose(hFile)
.head 9 +  If byn
.head 10 -  ! Call SqlCommit(hSql())
.head 10 -  Call SalWaitCursor(FALSE)
.head 10 -  Call MessageNoWait('Курсы (' || SIMV || ') за ' ||  sDD || ' - приняты.',
     'СООБЩЕНИЕ', 3, 0)
.head 10 -  Call SalWaitCursor(TRUE)
.head 10 -  Set bYa = FALSE
.head 10 -  Call SalArraySetUpperBound(sDirs, 1, -1)
.head 10 -  Set nCount = VisDosEnumDirs(ss, sDirs)
.head 10 +  If nCount > 0
.head 11 -  Set nD = 0
.head 11 +  While nD < nCount
.head 12 +  If SalStrUpperX(sDirs[nD]) = 'BACKUP'
.head 13 -  Set bYa = TRUE
.head 13 -  Break
.head 12 -  Set nD = nD + 1
.head 10 +  If not bYa
.head 11 -  Call SalFileCreateDirectory(ss || '\\BACKUP')
.head 10 +  If File(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 11 -  Call VisFileDelete(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 10 -  Set nD = VisFileRename(sFA, ss || '\\BACKUP\\' || sFileSimv[nI])
.head 10 +  If nD < 0 
.head 11 -  Call SalMessageBox('Не удалось перенести в BACKUP файл ' || ss || '\\' ||
     sFileSimv[nI], 'Ошибка !', MB_Ok)
.head 9 +  Else
.head 10 -  Call SalWaitCursor(FALSE)
.head 10 -  Call MessageNoWait('Курсы (' || SIMV || ') за ' || sDD || ' - НЕ приняты.',
     'ВНИМАНИЕ !', 0, 1)
.head 10 -  Call SalWaitCursor(TRUE)
.head 8 +  Else
.head 9 -  Call SalWaitCursor(FALSE)
.head 9 -  Call MessageNoWait('Файл курсов ' || sFA ||
     ' не найден или занят другим пользователем !', 'Предупреждение', 0, 1)
.head 9 -  Call SalWaitCursor(TRUE)
.head 8 -  Set nI = nI + 1
.head 7 -  Call SalStatusSetText(hWndForm, 'Курсы (' || SIMV || ') приняты.')
.head 6 +  Else
.head 7 -  Call SalWaitCursor(FALSE)
.head 7 -  Call MessageNoWait('Файлы курсов ' || ss || '\\ZMR' || '???? не найдены !',
     'ВНИМАНИЕ !', 0, 1)
.head 7 -  Call SalWaitCursor(TRUE)
.head 5 +  Else
.head 6 -  Set sFA = ss || '\\VAL' || SIMV || '????'
.head 6 -  Set nNumFiles = VisDosEnumFiles(sFA, FA_Standard, sFileSimv)
.head 6 -  ! Call Debug('nNumFiles=' || Str(nNumFiles))
.head 6 +  If nNumFiles > 0
.head 7 -  Set nI = 0
.head 7 +  While nI < nNumFiles
.head 8 -  Set sFA = ss || '\\' || sFileSimv[nI]
.head 8 -  Set byn = FALSE
.head 8 -  Set bpovtor = FALSE
.head 8 -  ! Call Debug('sFA=' || sFA)
.head 8 -  Set sDD = ''
.head 8 +  If SalFileOpen(hFile, sFA, 0)
.head 9 +  Loop
.head 10 +  If not SalFileGetStr(hFile, srab, 80) ! конец файла
.head 11 -  Break
.head 10 +  If Len(srab) > 10
.head 11 +  If Len(sDD) != 10
.head 12 -  Set nPosSlash = At('/', srab)
.head 12 +  If nPosSlash > 2
.head 13 -  Set sDD = Subs(srab, nPosSlash-2, 10)
.head 13 -  Set nPosSpace = At(' ', sDD)
.head 13 +  If nPosSpace > 0
.head 14 -  Set sDD = Left(sDD, nPosSpace-1)
.head 14 -  ! Call Debug('(1)sDD=' || sDD)
.head 14 +  If Len(sDD) = 8
.head 15 -  Set sDD = Stuff(sDD, 7, 0, IifS(Val(Right(sDD, 2))<80, '20', '19'))
.head 14 -  ! Call Debug('(2)sDD=' || sDD)
.head 13 -  ! Call Debug('sDD=' || sDD || ', Len(sDD)='
  || Str(Len(sDD)))
.head 13 +  If Len(sDD) = 10 and SalStrIsValidDateTime(sDD)
.head 14 -  Set sDat = Subs(sDD, 4, 3) || Left(sDD, 3) || Right(sDD, 4)
.head 13 +  Else
.head 14 -  Set sDD = ''
.head 11 -  Set nkv = Val(Subs(srab, 4, 3))
.head 11 +  If nkv > 0 and Len(sDD) = 10
.head 12 -  Set nbsum = 0
.head 12 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT count(*)
   FROM tabval
   WHERE kv=:nkv
   INTO :nbsum"))
.head 13 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 12 +  If nbsum > 0
.head 13 -  Set naa = 0
.head 13 +  If SqlPrepareAndExecute(hSql(), T("
   SELECT count(*)
   FROM cur_rates
   WHERE kv=:nkv and vdate= :sDat
   INTO :naa"))
.head 14 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 13 +  If naa > 0 and not bpovtor
.head 14 -  Set bpovtor = TRUE
.head 14 -  Call SalWaitCursor(FALSE)
.head 14 +  If SalMessageBox("ЗАМЕНИТЬ ?", "Файл " || sFA ||
   " Принимается повторно !", MB_YesNo | MB_IconHand) = IDNO
.head 15 -  Call SalWaitCursor(TRUE)
.head 15 -  Break
.head 14 -  Call SalWaitCursor(TRUE)
.head 13 -  Set nbsum = Val(Subs(srab, 15, 6))
.head 13 -  Set nrate_o = Val(Subs(srab, 52, 4) || Subs(srab, 57, 4)) / 10000
.head 13 -  Call SalUpdateWindow(hWndForm)
.head 13 +  If naa = 0
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   INSERT
   INTO cur_rates (kv,vdate,bsum,rate_o)
   VALUES (:nkv, :sDat ,:nbsum,:nrate_o)"))
.head 15 -  Call SqlCommit(hSql())
.head 15 -  Call SaveFInfoToLog('Добавлен курс: ' || Str(nkv) || '-' || sDat ||
     '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 14 +  Else
.head 15 -  Call SqlRollback(hSql())
.head 15 -  Call SaveErrorToLog('Не удалось добавить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 15 -  Call SalWaitCursor(FALSE)
.head 15 -  Call MessageNoWait('Не удалось добавить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o),
     'ОШИБКА !', 7, 1)
.head 15 -  Call SalWaitCursor(TRUE)
.head 13 +  Else
.head 14 +  If SqlPrepareAndExecute(hSql(), T("
   UPDATE cur_rates
   SET bsum=:nbsum,rate_o=:nrate_o
   WHERE kv=:nkv and vdate= :sDat "))
.head 15 -  Call SqlCommit(hSql())
.head 15 -  Call SaveFInfoToLog('Изменен курс: ' || Str(nkv) || '-' || sDat ||
     '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 14 +  Else
.head 15 -  Call SqlRollback(hSql())
.head 15 -  Call SaveErrorToLog('Не удалось изменить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o))
.head 15 -  Call SalWaitCursor(FALSE)
.head 15 -  Call MessageNoWait('Не удалось изменить курс: ' || Str(nkv) || '-'
     || sDat || '-' || Str(nbsum) || '-' || Str(nrate_o),
     'ОШИБКА !', 7, 1)
.head 15 -  Call SalWaitCursor(TRUE)
.head 13 -  Set byn = TRUE
.head 13 -  Call SalStatusSetText(hWndForm, sFileSimv[nI] || ': ' || GetLcv(nkv) ||
     '(' || Right(Str(nkv+1000), 3) || ') дата ' || sDD || ' ' ||
     SalStrTrimX(Subs(srab, 52, 9)) || ' (за ' || Str(nbsum) || ')')
.head 13 -  Call SalUpdateWindow(hWndForm)
.head 9 -  Call SalFileClose(hFile)
.head 9 +  If byn
.head 10 -  ! Call SqlCommit(hSql())
.head 10 -  Call SalWaitCursor(FALSE)
.head 10 -  Call MessageNoWait('Курсы (' || SIMV || ') за ' || sDD || ' - приняты.',
     'СООБЩЕНИЕ', 3, 0)
.head 10 -  Call SalWaitCursor(TRUE)
.head 10 -  Set bYa = FALSE
.head 10 -  Call SalArraySetUpperBound(sDirs, 1, -1)
.head 10 -  Set nCount = VisDosEnumDirs(ss, sDirs)
.head 10 +  If nCount > 0
.head 11 -  Set nD = 0
.head 11 +  While nD < nCount
.head 12 +  If SalStrUpperX(sDirs[nD]) = 'BACKUP'
.head 13 -  Set bYa = TRUE
.head 13 -  Break
.head 12 -  Set nD = nD + 1
.head 10 +  If not bYa
.head 11 -  Call SalFileCreateDirectory(ss || '\\BACKUP')
.head 10 +  If File(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 11 -  Call VisFileDelete(ss || '\\BACKUP\\' || sFileSimv[nI])
.head 10 -  Set nD = VisFileRename(sFA, ss || '\\BACKUP\\' || sFileSimv[nI])
.head 10 +  If nD < 0 
.head 11 -  Call SalMessageBox('Не удалось перенести в BACKUP файл ' || ss || '\\' ||
     sFileSimv[nI], 'Ошибка !', MB_Ok)
.head 9 +  Else
.head 10 -  Call SalWaitCursor(FALSE)
.head 10 -  Call MessageNoWait('Курсы (' || SIMV || ') за ' || sDD || ' - НЕ приняты.',
     'ВНИМАНИЕ !', 0, 1)
.head 10 -  Call SalWaitCursor(TRUE)
.head 8 +  Else
.head 9 -  Call SalWaitCursor(FALSE)
.head 9 -  Call MessageNoWait('Файл курсов ' || sFA ||
     ' не найден или занят другим пользователем !', 'Предупреждение', 0, 1)
.head 9 -  Call SalWaitCursor(TRUE)
.head 8 -  Set nI = nI + 1
.head 7 -  Call SalStatusSetText(hWndForm, 'Курсы (' || SIMV || ') приняты.')
.head 6 +  Else
.head 7 -  Call SalWaitCursor(FALSE)
.head 7 -  Call MessageNoWait('Файлы курсов ' || ss || '\\VAL' || SIMV || '???? не найдены !',
     'ВНИМАНИЕ !', 0, 1)
.head 7 -  Call SalWaitCursor(TRUE)
.head 5 -  Call SalWaitCursor(FALSE)
.head 3 +  Function: CorrectDate			! __exported
.head 4 -  Description: Вычисление ближайшей рабочей даты 
.head 4 +  Returns
.head 5 -  Date/Time: dtNewDate
.head 4 +  Parameters
.head 5 -  Number: nKV
.head 5 -  Date/Time: dtOldDate
.head 5 -  Date/Time: dtEndDate
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dDat
.head 5 -  Number: n1
.head 5 -  Number: nn
.head 5 -  Number: ed
.head 4 +  Actions
.head 5 -  Set dDat = dtOldDate
.head 5 -  Set ed = IifN(dtOldDate < dtEndDate, 1, -1)
.head 5 +  While TRUE
.head 6 -  Call SqlPrepareAndExecute(hSql(), "
     SELECT kv
     INTO :nn
     FROM holiday
     WHERE (kv=980 or kv=" || Str(nKV) || ") and
           holiday=" || DateInQuery(
           SalFmtFormatDateTime(dDat, 'MM/dd/yyyy')))
.head 6 +  If SqlFetchNext(hSql(), n1)
.head 7 -  Set dDat = dDat + ed
.head 6 +  Else
.head 7 -  Return dDat
.head 3 -  !
.head 3 +  Function: Abs				! __exported
.head 4 -  Description: Возвращает абсолютную величину числа
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberAbs(nNumber)
.head 3 +  Function: Asc				! __exported
.head 4 -  Description: Преобразует символ в его код ASCII
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sIn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTemp
.head 4 +  Actions
.head 5 -  Set sTemp = sIn
.head 5 -  Return SalStrLop(sTemp)
.head 3 +  Function: At				! __exported
.head 4 -  Description: Возвращает позицию подстроки в символьной
строке
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sStringFind
.head 5 -  String: sString
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrScan(sString, sStringFind) + 1
.head 3 +  Function: Chr				! __exported
.head 4 -  Description: Преобразует код ASCII
в его символьное значение
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberToChar(nNumber)
.head 3 +  Function: Date				! __exported
.head 4 -  Description: Возвращает системную дату
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalDateCurrent()
.head 3 +  Function: Day				! __exported
.head 4 -  Description: Возвращает номер дня в виде числа
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Date/Time: dDate
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalDateDay(dDate)
.head 3 +  Function: Dow				! __exported
.head 4 -  Description: Преобразует значение даты
в числовое значение дня недели
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Date/Time: dDate
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalDateWeekday(dDate)
.head 3 +  Function: DtoC				! __exported
.head 4 -  Description: Преобразует значение даты
в строку символов формата дд/мм/гггг
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDate
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalFmtFormatDateTime(dDate, 'dd/MM/yyyy')
.head 3 +  Function: DtoS				! __exported
.head 4 -  Description: Преобразует значение даты
в строку символов формата ггггммдд
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDate
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalFmtFormatDateTime(dDate, 'yyyyMMdd')
.head 3 +  Function: Exp				! __exported
.head 4 -  Description: Вычисляет e в степени x (параметр)
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nX
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberExponent(nX)
.head 3 +  Function: File				! __exported
.head 4 -  Description: Определяет наличие файла
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFileName
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return VisFileFind(sFileName) != ''
.head 3 +  Function: IifD				! __exported
.head 4 -  Description: Дата Iif (как в Clipper)
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 +  Parameters
.head 5 -  Boolean: bUsl
.head 5 -  Date/Time: d1
.head 5 -  Date/Time: d2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If bUsl
.head 6 -  Return d1
.head 5 +  Else
.head 6 -  Return d2
.head 3 +  Function: IifN				! __exported
.head 4 -  Description: Числовой Iif (как в Clipper)
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Boolean: bUsl
.head 5 -  Number: n1
.head 5 -  Number: n2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If bUsl
.head 6 -  Return n1
.head 5 +  Else
.head 6 -  Return n2
.head 3 +  Function: IifS				! __exported
.head 4 -  Description: Символьный Iif (как в Clipper)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Boolean: bUsl
.head 5 -  String: s1
.head 5 -  String: s2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If bUsl
.head 6 -  Return s1
.head 5 +  Else
.head 6 -  Return s2
.head 3 +  Function: IifW				! __exported
.head 4 -  Description: hW Iif 
.head 4 +  Returns
.head 5 -  Window Handle:
.head 4 +  Parameters
.head 5 -  Boolean: bUsl
.head 5 -  Window Handle: s1
.head 5 -  Window Handle: s2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If bUsl
.head 6 -  Return s1
.head 5 +  Else
.head 6 -  Return s2
.head 3 +  Function: Int				! __exported
.head 4 -  Description: Возвращает целую часть от деления
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sI
.head 4 +  Actions
.head 5 -  Set sI = SalNumberToStrX(nNumber, 9)
.head 5 -  Return Val(Left(sI, Len(sI)-10))
.head 3 +  Function: Left				! __exported
.head 4 -  Description: Возвращает указанное количество
левых символов строки
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sS
.head 5 -  Number: nK
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrLeftX(sS, nK)
.head 3 +  Function: Len				! __exported
.head 4 -  Description: Возвращает длину строки
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sString
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrLength(sString)
.head 3 +  Function: Max				! __exported
.head 4 -  Description: Возвращает максимальное из двух чисел
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: n1
.head 5 -  Number: n2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberMax(n1, n2)
.head 3 +  Function: Min				! __exported
.head 4 -  Description: Возвращает минимальное из двух чисел
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: n1
.head 5 -  Number: n2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberMin(n1, n2)
.head 3 +  Function: Mod				! __exported
.head 4 -  Description: Возвращает остаток от деления
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nNumber1
.head 5 -  Number: nNumber2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberMod(nNumber1, nNumber2)
.head 3 +  Function: PadL				! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: s
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return Right(Spac(n) || s, n)
.head 3 +  Function: PadR				! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: s
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return Left(s || Spac(n), n)
.head 3 +  Function: Repl				! __exported
.head 4 -  Description: Размножает строку
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sS
.head 5 -  Number: nK
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrRepeatX(sS, nK)
.head 3 +  Function: Right				! __exported
.head 4 -  Description: Возвращает указанное количество
правых символов строки
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sS
.head 5 -  Number: nK
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrRightX(sS, nK)
.head 3 +  Function: Spac				! __exported
.head 4 -  Description: Возвращает указанное количество пробелов
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nK
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrRepeatX(' ', nK)
.head 3 +  Function: Str				! __exported
.head 4 -  Description: Преобразует число в строку
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sX
.head 5 -  Number: nAfterPoints
.head 5 -  Number: nX
.head 4 +  Actions
.head 5 -  Set nAfterPoints = SalStrToNumber(SalNumberToStrX(nNumber, 9)) - SalStrToNumber(
    SalNumberToStrX(nNumber, 0))
.head 5 +  If nAfterPoints = 0
.head 6 -  Return SalNumberToStrX(nNumber, 0)
.head 5 +  Else
.head 6 -  Set sX = SalStrMidX(SalNumberToStrX(nAfterPoints, 9), 2, 9)
.head 6 +  Loop
.head 7 +  If SalStrRightX(sX, 1) = '0'
.head 8 -  Set sX = SalStrLeftX(sX, SalStrLength(sX) - 1)
.head 7 +  Else
.head 8 -  Break
.head 6 -  Set nX = SalStrLength(sX)
.head 6 +  Loop
.head 7 +  If Right(SalNumberToStrX(nNumber, nX), 1) = '0'
.head 8 -  Set nX = nX - 1
.head 8 +  If nX = 0
.head 9 -  Break
.head 7 +  Else
.head 8 -  Break
.head 6 -  Return SalNumberToStrX(nNumber, nX)
.head 3 +  Function: Stuff				! __exported
.head 4 -  Description: Заменяет подстроку в строке
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sSource
.head 5 -  Number: nStartPos
.head 5 -  Number: nLength
.head 5 -  String: sReplace
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrReplaceX(sSource, nStartPos-1, nLength,
       sReplace)
.head 3 +  Function: Subs				! __exported
.head 4 -  Description: Substr (Clipper)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sS
.head 5 -  Number: nK1
.head 5 -  Number: nK2
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrMidX(sS, nK1-1, nK2)
.head 3 +  Function: Val				! __exported
.head 4 -  Description: Преобразует число в символьной форме
в числовой тип
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sString
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalStrToNumber(sString)
.head 3 +  Function: UserIdTo2DigitId		! __exported
.head 4 -  Description: Преобразует числовой идентификатор пользователя
в двухсимвольный по технологии старого "Барс"а
(Для АЖИО)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nId
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nHighBit
.head 5 -  Number: nLowBit
.head 4 +  Actions
.head 5 +  If nId < 100
.head 6 -  Return SalStrRightX( '00' || SalNumberToStrX(nId, 0), 2 )
.head 5 +  If nId > 25*27 + 100
.head 6 -  Return ''
.head 5 -  Set nId = nId - 100
.head 5 -  Set nHighBit = Int (nId/26)
.head 5 -  Set nLowBit  = Mod (nId, 26)
.head 5 -  Return SalNumberToChar(65 + nHighBit) ||
       SalNumberToChar(65 + nLowBit)
.head 3 +  Function: User2DigitIdToId		! __exported
.head 4 -  Description: Получить из 2символьного ид пользователя
нормальный цифровой (из старого "Барс"а 
для "АЖИО")
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: strId
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nId
.head 5 -  Number: nHighBit
.head 5 -  Number: nLowBit
.head 4 +  Actions
.head 5 -  Call SalStrTrim(strId, strId)
.head 5 -  Call SalStrUpper(strId, strId)
.head 5 -  !
.head 5 +  If SalStrLength(strId) > 2
.head 6 -  Return 0
.head 5 +  If SalStrIsValidNumber(strId)
.head 6 -  Return SalStrToNumber(strId)
.head 5 -  !
.head 5 -  Call SalStrFirstC( strId, nHighBit )
.head 5 -  Call SalStrFirstC( strId, nLowBit )
.head 5 -  Set nHighBit = nHighBit - 64
.head 5 -  Set nLowBit = nLowBit - 64
.head 5 -  !
.head 5 -  Return nHighBit*26+nLowBit
.head 3 -  !
.head 3 +  Function: T				! __exported
.head 4 -  Description: Матозаменитель!
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: strSql
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  Number: j
.head 5 -  Number: k
.head 5 -  String: sL
.head 5 -  String: sM
.head 5 -  String: sR
.head 4 +  Actions
.head 5 -  ! Call Debug('ДО=' || strSql)
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! OUTER = ' '
.head 7 -  Set i = SalStrScan(strSql, "OUTER")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrLeftX(strSql, i+5)
.head 8 -  Set sR = SalStrRightX(strSql,
    SalStrLength(strSql)-i-5)
.head 8 -  Set strSql = SalStrReplaceX(sL, i, 5, " ") || 
    SalStrReplaceX(sR, SalStrScan(sR, ' '), 1,
    " ")
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! TRIM
.head 7 -  Set i = SalStrScan(strSql, " TRIM(")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrLeftX(strSql, i+6) 
.head 8 -  Set sR = SalStrRightX(strSql,
    SalStrLength(strSql)-i-6) 
.head 8 -  Set strSql = SalStrReplaceX(sL, i, 6,
    " LTRIM(RTRIM(") || SalStrReplaceX(sR,
    SalStrScan(sR, ')'), 1, "))")
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! [ ]
.head 7 -  Set i = SalStrScan(strSql, "[")
.head 7 +  If i > 0
.head 8 -  Set j = i - 1
.head 8 +  While SalStrScan(' ,|(',
      SalStrMidX(strSql, j, 1)) < 0
.head 9 -  Set j = j - 1
.head 8 -  Set sL = SalStrReplaceX(SalStrLeftX(strSql, i),
    j+1, 0, ' SUBSTR(')
.head 8 -  ! Call Debug(sL)
.head 8 -  Set j = i
.head 8 +  While SalStrScan('],',
      SalStrMidX(strSql, j, 1)) < 0
.head 9 -  Set j = j + 1
.head 8 -  Set sM = SalStrMidX(strSql, i+1, j-i-1)
.head 8 +  If SalStrMidX(strSql, j, 1) = ']'
.head 9 -  Set sM = sM || ',1'
.head 8 +  Else
.head 9 -  Set i = j
.head 9 -  Set k = SalStrToNumber(sM)
.head 9 +  While SalStrScan(']',
      SalStrMidX(strSql, j, 1)) < 0
.head 10 -  Set j = j + 1
.head 9 -  Set sM = SalNumberToStrX(k, 0) || ',' ||
    SalNumberToStrX(SalStrToNumber(
    SalStrMidX(strSql, i+1, j-i-1)) - k + 1, 0)
.head 8 -  ! Call Debug('***' || sM)
.head 8 -  Set sR =')' || SalStrRightX(strSql,
    SalStrLength(strSql)-j-1) 
.head 8 -  Set strSql = sL || ',' || sM || sR
.head 8 -  ! Call Debug(strSql)
.head 8 -  ! Break
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! DATE
.head 7 -  Set i = SalStrScan(strSql, " DATE(")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrLeftX(strSql, i+6) 
.head 8 -  Set sR = SalStrRightX(strSql,
    SalStrLength(strSql)-i-6)
.head 8 -  Set strSql = SalStrReplaceX(sL, i, 6, " TRUNC(")
    || SalStrReplaceX(sR, SalStrScan(sR, ')'), 1,
    ")")
.head 8 -  ! Call Debug(strSql)
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! TODAY = SYSDATE
.head 7 -  Set i = SalStrScan(strSql, " TODAY")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrLeftX(strSql, i+6) 
.head 8 -  Set sR = SalStrRightX(strSql,
    SalStrLength(strSql)-i-6)
.head 8 -  Set strSql = SalStrReplaceX(sL, i, 6, " SYSDATE")
    || SalStrReplaceX(sR, SalStrScan(sR, ' '), 1,
    " ")
.head 6 -  Set i = 1
.head 6 -  Set j = 0
.head 6 +  While i > 0 ! :sDat
.head 7 -  Set i = SalStrScan(strSql, ":sDat")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrReplaceX(
    SalStrLeftX(strSql, i), i, 9, ' TO_DATE(')
.head 8 -  Set j = i
.head 8 +  While SalStrScan(' ,',
      SalStrMidX(strSql || ' ', j, 1)) < 0
.head 9 -  Set j = j + 1
.head 8 -  Set sM = '~' || SalStrMidX(strSql, i+1, j-i-1)
.head 8 -  Set sR = ',\'MM-DD-YYYY\')' ||
    SalStrRightX(strSql, SalStrLength(strSql)-j-1)
.head 8 -  Set strSql = sL || sM || sR
.head 7 +  Else
.head 8 +  If j > 0
.head 9 +  While SalStrScan(strSql, '~') > 0
.head 10 -  Set strSql = SalStrReplaceX(strSql,
    SalStrScan(strSql, '~'), 1, ":")
.head 6 -  Set i = 1
.head 6 -  Set j = 0
.head 6 +  While i > 0 ! data(INF) -> datd(ORA)
.head 7 -  Set i = SalStrScan(strSql, "data")
.head 7 +  If i > 0
.head 8 -  Set j = i
.head 8 -  Set sL = SalStrMidX(strSql, i-1,1)
.head 8 -  Set sR = SalStrMidX(strSql, i+4,1)
.head 8 +  If SalStrScan(' .,(', sL) >= 0 and
   SalStrScan(' ,)', sR) >= 0 and sL != '_' and
   sR != '_'
.head 9 -  Set strSql = SalStrReplaceX(strSql, i, 4, "~")
.head 8 +  Else
.head 9 -  Set strSql = SalStrReplaceX(strSql, i, 4, "|")
.head 7 +  Else
.head 8 +  If j > 0
.head 9 +  While SalStrScan(strSql, '|') > 0 
.head 10 -  Set strSql = SalStrReplaceX(strSql,
    SalStrScan(strSql, '|'), 1, "data")
.head 9 +  While SalStrScan(strSql, '~') > 0 
.head 10 -  Set strSql = SalStrReplaceX(strSql,
    SalStrScan(strSql, '~'), 1, "datd")
.head 5 +  Else
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! (+) = ' '
.head 7 -  Set i = SalStrScan(strSql, " (+) ")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrLeftX(strSql, i+5) 
.head 8 -  Set sR = SalStrRightX(strSql,
    SalStrLength(strSql)-i-5) 
.head 8 -  Set strSql = SalStrReplaceX(sL, i, 5, " ") ||
    SalStrReplaceX(sR, SalStrScan(sR, ' '), 1,
    " ")
.head 6 -  Set i = 1
.head 6 +  While i > 0 ! GL. = ' '
.head 7 -  Set i = SalStrScan(strSql, " GL.")
.head 7 +  If i > 0
.head 8 -  Set sL = SalStrLeftX(strSql, i+4)
.head 8 -  Set sR = SalStrRightX(strSql,
    SalStrLength(strSql)-i-4)
.head 8 -  Set strSql = SalStrReplaceX(sL, i, 4, " ") || 
    SalStrReplaceX(sR, SalStrScan(sR, ' '), 1,
    " ")
.head 5 -  ! Call Debug('POSLE=' || strSql)
.head 5 -  Return strSql
.head 3 +  Function: DateInQuery			! __exported
.head 4 -  Description: Формирует подстроку с датой из строковой
константы для запросов. Подразумевается что
строковая дата передеается в виде MM/dd/yyyy
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sDate
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strDQuery
.head 4 +  Actions
.head 5 -  Call SalStrTrim(sDate, sDate)
.head 5 -  Set strDQuery =  '\'' || sDate || '\''
.head 5 +  If SalStrUpperX(SalStrTrimX(GetDBMS())) = 'ORACLE'
.head 6 -  Set strDQuery = 'TO_DATE(\'' || sDate || '\', \'MM/dd/yyyy\')'
.head 5 -  Return strDQuery
.head 3 +  Function: CRCstring			! __exported
.head 4 -  Description: Вычисление некоего CRC строки
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Long String: sStroka
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  Number: j
.head 4 +  Actions
.head 5 -  Set i = 0
.head 5 -  Set j = 0
.head 5 +  While SalStrLength(sStroka) > 0
.head 6 -  Set j = j + SalNumberSqrt(SalStrLop(sStroka)+i)
.head 6 -  Set i = i + 1
.head 5 -  Return j
.head 3 +  Function: Vkrz2				! __exported
.head 4 -  Description: Вычисление контрольного разряда счета
(параметры: 1-МФО, 2-Счет)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sMFO
.head 5 -  String: sNLS
.head 4 +  Static Variables
.head 5 -  Number: m1[5]
.head 5 -  Number: m2[14]
.head 4 +  Local variables
.head 5 -  String: sj
.head 5 -  String: sw
.head 5 -  Number: i
.head 5 -  Number: j
.head 4 +  Actions
.head 5 -  Return KeyAccount( sMFO, sNLS )
.head 3 +  Function: V_Okpo		        ! __exported
.head 4 -  Description: Вычисление контрольного разряда OKPO
(параметры: 1-OKPO)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sOkpo
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sOkpo1
.head 4 +  Actions
.head 5 +  If SalStrLength( GetBankMfo() ) != 6	! Не украинский банк
.head 6 -  Set sOkpo1 = sOkpo
.head 5 +  Else
.head 6 -  Set sOkpo1 = CalcOKPO( sOkpo )
.head 5 -  Return sOkpo1
.head 3 +  Function: KeyAccount            	! __exported
.head 4 -  Description: рссчитать КР счета и подставить его обратно
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: strMFO
.head 5 -  String: strAcc
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strNewAcc
.head 5 -  String: strCtrlDigit
.head 5 -  Number: nTmp
.head 5 -  Number: nKPos
.head 5 -  Number: nFormula
.head 4 +  Actions
.head 5 -  Call SalStrTrim(strMFO, strMFO)
.head 5 +  If SalStrLength(strMFO) = 9
.head 6 -  Set strMFO = '00' || SalStrRightX(strMFO, 3) || '0'
.head 5 -  Call SalStrTrim(strAcc, strAcc)
.head 5 -  Set nFormula = GetAccountStructure(nTmp, nTmp, nTmp, nKPos)
.head 5 -  Set strCtrlDigit = SalNumberToChar(GetChecksumDigit(strMFO, strAcc, nFormula))
.head 5 +  If nFormula
.head 6 -  Set strNewAcc = SalStrLeftX(strAcc,
      SalStrLength(strAcc)-nKPos) || strCtrlDigit ||
      SalStrRightX(strAcc, nKPos-1)
.head 5 +  Else
.head 6 -  Set strNewAcc = SalStrLeftX(strAcc, nKPos-1) || strCtrlDigit ||
      SalStrRightX(strAcc, SalStrLength(strAcc)-nKPos)
.head 5 -  Return strNewAcc
.head 3 +  Function: IsValidMFO			! __exported
.head 4 -  Description: Проверка контрольной суммы для кода МФО
.head 4 +  Returns
.head 5 -  Boolean: fValidMFO
.head 4 +  Parameters
.head 5 -  String: sMFO
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  Number: nSumDigits
.head 5 -  Number: nWeight[ 5 ]
.head 5 -  Number: nMFO
.head 4 +  Actions
.head 5 -  Call SalStrTrim(sMFO, sMFO)
.head 5 +  If SalStrLength(sMFO) = 9
.head 6 -  Return TRUE
.head 5 -  Set nMFO = SalStrToNumber(sMFO)
.head 5 -  Set nWeight[ 0 ] = 1
.head 5 -  Set nWeight[ 1 ] = 3
.head 5 -  Set nWeight[ 2 ] = 7
.head 5 -  Set nWeight[ 3 ] = 1
.head 5 -  Set nWeight[ 4 ] = 3
.head 5 -  Set i = 0
.head 5 -  Set nSumDigits = 0
.head 5 +  While i < 5
.head 6 -  Set nSumDigits = nSumDigits +
    GetLastDigit(nWeight[ i ] * GetDigit(nMFO, i))
.head 6 -  Set i = i + 1
.head 5 -  Set nSumDigits = GetLastDigit(nSumDigits * 7)
.head 5 -  ! Call SalMessageBox('Последняя цифра = ' ||
     SalNumberToStrX(nSumDigits, 0), 'Контрольный разряд',
     MB_Ok)
.head 5 -  Return GetLastDigit(nMFO) = nSumDigits
.head 3 -  ! Старая версия 
.head 3 +  Function: zarez12			! __exported
.head 4 -  Description: Выбрасывает код 12h из файла и т.д.
Обработка файла происходит в DLL'ке
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFile
.head 5 -  Number: nId
.head 5 -  String: sDevice
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return zarez12Del(sFile, nId, sDevice, TRUE)
.head 3 +  Function: zarez12Del			! __exported
.head 4 -  Description: Выбрасывает код 12h из файла и т.д.
Обработка файла происходит в DLL'ке
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sFile
.head 5 -  Number: nId
.head 5 -  String: sDevice
.head 5 -  Boolean: bDeleteNullString
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nL
.head 5 -  Number: nE
.head 5 -  String: sESC
.head 5 -  String: sC12
.head 4 +  Actions
.head 5 -  ! Достаем Esc-последовательности
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 -  Set sC12 = ''
.head 5 -  Set sESC = ''
.head 5 +  If SqlPrepareAndExecute(hSql(), T('
     SELECT cse,chr12
     INTO :sESC,:sC12
     FROM reprint
     WHERE id=:nId and dvc=:sDevice'))
.head 6 +  If SqlFetchNext(hSql(), nE)
.head 7 -  ! Call Debug(sESC)
.head 7 +  If Len(sESC) > 0
.head 8 +  Loop
.head 9 -  Set nL = At('<Esc>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(27))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<esc>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(27))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<ESC>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(27))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<Si>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(15))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<si>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(15))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<SI>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(15))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<So>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(14))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<so>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(14))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<SO>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(14))
.head 9 +  Else
.head 10 -  Break
.head 8 +  ! Loop
.head 9 -          Set nL = At('<0>', sESC)
.head 9 +          If nL > 0
.head 10 -          Set sESC = Stuff(sESC, nL, 3, Chr(0))
.head 9 +          Else 
.head 10 -          Break 
.head 8 +  Loop
.head 9 -  Set nL = At('<1>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 3, Chr(1))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<2>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 3, Chr(2))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<4>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 3, Chr(4))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<ff>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(12))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<Ff>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(12))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<FF>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 4, Chr(12))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<Bel>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(7))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<bel>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(7))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<BEL>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(7))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<dc2>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(18))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<Dc2>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(18))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<DC2>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(18))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<dc4>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(20))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<Dc4>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(20))
.head 9 +  Else
.head 10 -  Break
.head 8 +  Loop
.head 9 -  Set nL = At('<DC4>', sESC)
.head 9 +  If nL > 0
.head 10 -  Set sESC = Stuff(sESC, nL, 5, Chr(20))
.head 9 +  Else
.head 10 -  Break
.head 8 -  ! Call Debug(sESC)
.head 5 -  Call DeleteBadSymbols(sFile, sESC, TRUE, bDeleteNullString)
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return TRUE
.head 3 -  !
.head 3 +  Function: WriteNumericMem		! __exported
.head 4 -  Description: Записывает числовую переменную в MEM-файл
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sPrgName		! имя Clipper-программы
			! (по умолчанию ClippMem.Exe)
.head 5 -  Number: nVar		! число, которое нужно
			! записать в MEM-файл
.head 5 -  Number: nDecimal		! количество знаков после
			! десятиной точки в nVar
.head 5 -  String: sVarName		! наименование переменной
			! в MEM-файле
.head 5 -  String: sMemFileName	! полное (с путем) имя
			! MEM-файла
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFilePrg
.head 5 -  Number: nRet
.head 4 +  Actions
.head 5 +  If sPrgName != STRING_Null
.head 6 +  If VisFileGetSize(sPrgName) < 0
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sFilePrg = sPrgName
.head 5 +  Else
.head 6 -  Set sFilePrg = 'ClippMem.Exe'
.head 5 -  Call VisFileDelete(sMemFileName)
.head 5 +  If VisFileGetSize(sMemFileName) > 0
.head 6 -  Return FALSE
.head 5 -  Call SalLoadAppAndWait(sFilePrg || ' ' ||
       SalNumberToStrX(nVar, nDecimal) || ' ' || sVarName || ' ' ||
       sMemFileName, Window_NotVisible, nRet)
.head 5 +  If VisFileGetSize(sMemFileName) < 0
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: VerifyNumericMem		! __exported
.head 4 -  Description: Cверяет числовую переменную в MEM-файле
с заданным значением
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sPrgName		! имя Clipper-программы
			! (по умолчанию ClVerify.Exe)
.head 5 -  Number: nVar		! число, которое нужно
			! проверить в MEM-файле
.head 5 -  ! Number: nDecimal	! количество знаков после
			! десятиной точки в nVar
.head 5 -  String: sVarName		! наименование переменной
			! в MEM-файле
.head 5 -  String: sMemFileName	! полное (с путем) имя
			! MEM-файла
.head 5 -  String: sTempFileName	! полное (с путем) имя
			! временного файла
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sFilePrg
.head 5 -  String: sLine
.head 5 -  Number: nRet
.head 5 -  File Handle: hT
.head 4 +  Actions
.head 5 +  If VisFileGetSize(sMemFileName) < 1
.head 6 -  Return FALSE
.head 5 +  If sPrgName != STRING_Null
.head 6 +  If VisFileGetSize(sPrgName) < 0
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 -  Set sFilePrg = sPrgName
.head 5 +  Else
.head 6 -  Set sFilePrg = 'ClVerify.Exe'
.head 5 -  Call VisFileDelete(sTempFileName)
.head 5 -  Call SalLoadAppAndWait(sFilePrg || ' ' || sVarName || ' ' ||
       sMemFileName || ' ' || sTempFileName, Window_NotVisible,
       nRet)
.head 5 +  If VisFileGetSize(sTempFileName) < 0
.head 6 -  Return FALSE
.head 5 +  If VisFileOpen(hT, sTempFileName, OF_Read) = VTERR_Ok
.head 6 +  If VisFileReadString(hT, sLine) = VTERR_Ok
.head 7 -  Call VisFileClose(hT)
.head 7 -  Call VisFileDelete(sTempFileName)
.head 7 +  If SalStrToNumber(sLine) = nVar
.head 8 -  Return TRUE
.head 5 -  Return FALSE
.head 3 -  !
.head 3 +  Function: GetValueStr			! __exported
.head 4 -  Description: Получить значение SELECT (возвращает строку)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: sSqlSelect
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTemp
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSqlAux3(), T(sSqlSelect ||
     " INTO :sTemp"))
.head 5 +  If not SqlFetchNext(hSqlAux3(), nFetchRes)
.head 6 -  Set sTemp = ''
.head 5 -  Return sTemp
.head 3 -  !
.head 3 -  ! ORACLE - INFORMIX (Сухова)
.head 3 -  !
.head 3 +  ! Function: p_int	 		! __exported
.head 4 -          Description: Вычисление % по любому счету за интервал
.head 4 +          Returns 
.head 5 -          Number: 
.head 4 +          Parameters 
.head 5 -          Number: nAcc    ! внутренний номер счета
.head 5 -          Date/Time: dDat1
.head 5 -          Date/Time: dDat2
.head 5 -          Number: nOst
.head 5 -          Number: nMode   ! режим  Play/Real
.head 4 -          Static Variables 
.head 4 +          Local variables 
.head 5 -          Number: nInt
.head 5 -          String: sDat1
.head 5 -          String: sDat2
.head 4 +          Actions 
.head 5 +          If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 +          If SqlPLSQLCommand(hSql(),
   "acr.p_int(nAcc,dDat1,dDat2,nInt,nOst,nMode)")
.head 7 -          Return nInt
.head 5 +          Else 
.head 6 -          Set sDat1 = SalFmtFormatDateTime(dDat1, 'MM-dd-yyyy')
.head 6 -          Set sDat2 = SalFmtFormatDateTime(dDat2, 'MM-dd-yyyy')
.head 6 +          If SqlRetrieve(hSql(), "informix.p_int",
   ':nAcc,:sDat1,:sDat2,:nOst,:nMode', ':nInt')
.head 7 +          If SqlExecute(hSql())
.head 8 +          If SqlFetchNext(hSql(), nFetchRes)
.head 9 -          Return nInt
.head 5 -          Call SqlRollback(hSql())
.head 5 -          Return 0
.head 3 +  Function: p_intN 			! __exported
.head 4 -  Description: Вычисление % по любому счету за интервал (новое)
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nAcc    ! внутренний номер счета
.head 5 -  Number: nId     ! ид начисления
.head 5 -  Date/Time: dDat1
.head 5 -  Date/Time: dDat2
.head 5 -  Number: nOst
.head 5 -  Number: nMode   ! режим  Play/Real
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nInt
.head 5 -  String: sDat1
.head 5 -  String: sDat2
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 +  If SqlPLSQLCommand(hSql(),
   "acrn.p_int(nAcc,nId,dDat1,dDat2,nInt,nOst,nMode)")
.head 7 -  Return nInt
.head 5 +  Else
.head 6 -  Set sDat1 = SalFmtFormatDateTime(dDat1, 'MM-dd-yyyy')
.head 6 -  Set sDat2 = SalFmtFormatDateTime(dDat2, 'MM-dd-yyyy')
.head 6 +  If SqlRetrieve(hSql(), "informix.p_int",
   ':nAcc,:sDat1,:sDat2,:nOst,:nMode', ':nInt')
.head 7 +  If SqlExecute(hSql())
.head 8 +  If SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Return nInt
.head 5 -  Call SqlRollback(hSql())
.head 5 -  Return 0
.head 3 +  Function: pn_grc			! __exported
.head 4 -  Description: Переформирование файлов процессинга в новый день
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strMfoTmp
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Return SqlPLSQLCommand(hSql(), "sep.pn_grc(strMfoTmp)")
.head 5 +  Else
.head 6 -  Call SqlRetrieve(hSql(), "informix.pn_grc", ':strMfoTmp',
     '')
.head 6 -  Return SqlExecute(hSql())
.head 3 +  Function: Pl_dat			! __exported
.head 4 -  Description: Установка локальной банковской даты
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Date/Time: df2dat
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Return SqlPLSQLCommand(hSql(), "gl.pl_dat(df2dat)")
.head 5 +  Else
.head 6 -  Call SqlRetrieve(hSql(), "informix.pl_dat",":df2dat","")
.head 6 -  Return SqlExecute(hSql())
.head 3 +  Function: P0_ACR			! __exported
.head 4 -  Description: для МИШИ 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Date/Time: df2dat
.head 5 -  Number: nAcc
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Return SqlPLSQLCommand(hSql(), "acr.p0_acr(df2dat,nAcc)")
.head 5 +  Else
.head 6 -  Call SqlRetrieve(hSql(), "informix.p0_acr",":df2dat","")
.head 6 -  Return SqlExecute(hSql())
.head 3 +  Function: P0_rat			! __exported
.head 4 -  Description: для МИШИ 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sParDat
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dTmpDat
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set dTmpDat = MMddyyyyToDate(sParDat)
.head 6 -  Return SqlPLSQLCommand(hSql(), "acr.p0_rat (dTmpDat)")
.head 5 +  Else
.head 6 -  Call SqlRetrieve(hSql(), "informix.p0_rat", ":sParDat",
     "")
.head 6 -  Return SqlExecute(hSql())
.head 3 +  Function: Get_SQ			! __exported
.head 4 -  Description: Получить текущий SERIAL
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: strSQ
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRab
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 +  If SalStrUpperX( strSQ ) = 'S_CUSTOMER' AND GetGlobalOptionEx( 'FILLHOLE' )
.head 7 +  If SqlPrepareAndExecute(hSql(), "SELECT f_s_customer('NEXT') INTO :nRab FROM dual")
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 6 +  Else
.head 7 +  If SqlPrepareAndExecute(hSql(), "
     SELECT " || SalStrTrimX(strSQ) || ".nextval
     INTO :nRab
     FROM dual")
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 +  Else
.head 6 -  Set nRab=0
.head 5 -  Return nRab
.head 3 +  Function: Set_SQ			! __exported
.head 4 -  Description: Установиьть SERIAL
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strSQ
.head 5 -  Number: nSQ
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 6 -  Return SqlPrepareAndExecute(hSql(), "
       CREATE SEQUENCE " || strSQ || "
       START WITH " || SalNumberToStrX(nSQ, 0))
.head 5 -  Return TRUE
.head 3 +  Function: Del_SQ			! __exported
.head 4 -  Description: Удалить Serial
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strSQ
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Return (SqlPrepareAndExecute(hSql(), "
       DROP SEQUENCE " || strSQ))
.head 5 -  Return TRUE
.head 3 +  Function: Read_SQ			! __exported
.head 4 -  Description: Прочитать SERIAL для INFORMIX
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  ! Sql Handle: hSqlHandle
.head 5 -  Number: nRab
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRab1
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set nRab1 = nRab
.head 5 +  Else
.head 6 -  Call SqlPrepareAndExecute(hSql(), '
     SELECT last_serial()
     FROM Dk
     INTO :nRab1
     WHERE dk=1')
.head 6 -  Call SqlFetchNext(hSql(), nFetchRes) 
.head 5 -  Return nRab1
.head 3 +  Function: Read_SQ2			! __exported
.head 4 -  Description: Прочитать текущий SERIAL или SEQUENCE
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: strSQ
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRab
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 +  If SalStrUpperX( strSQ ) = 'S_CUSTOMER' AND GetGlobalOptionEx( 'FILLHOLE' )
.head 7 -  Call SqlPrepareAndExecute(hSql(), "SELECT f_s_customer('CURRENT') INTO :nRab FROM dual")
.head 6 +  Else
.head 7 -  Call SqlPrepareAndExecute(hSql(), "
     SELECT " || strSQ || ".currval
     INTO :nRab
     FROM dual")
.head 5 +  Else
.head 6 -  Call SqlPrepareAndExecute(hSql(), '
     SELECT last_serial()
     FROM Dk
     INTO :nRab
     WHERE dk=1')
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  Return nRab
.head 3 +  Function: Proverka_DAT			! __exported
.head 4 -  Description: Проверка даты на сервере и банковской
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dtRabS
.head 5 -  Date/Time: dtRabB
.head 5 -  String: strRabS
.head 5 -  String: strRabB
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Call SqlPrepareAndExecute(hSql(),
 "select  SYSDATE  from dual into :dtRabS")
.head 5 +  Else
.head 6 -  Call SqlPrepareAndExecute(hSql(),
"select TODAY from params  into :dtRabS")
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  Set dtRabB = GetBankDate()
.head 5 -  Call SalDateToStr(dtRabB, strRabB)
.head 5 -  Call SalDateToStr(dtRabS, strRabS)
.head 5 -  Set strRabB=SalStrLeftX(strRabB, 10)
.head 5 -  Set strRabS=SalStrLeftX(strRabS, 10)
.head 5 +  If strRabS  !=  strRabB
.head 6 -  Call SalMessageBox('Текущая(серверная)=' || strRabS ||
     ',  Банковская (в БД)=' || strRabB,
     'Несовпадение ДАТ !', 0)
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: p_ovr 			! __exported
.head 4 -  Description: Перенос остатков на overdraft
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nMode    ! 0 - на overdraft,1 - обратно
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nSuma
.head 5 -  String: sErr_P_Ovr
.head 5 -  String: sErr_P_Ovr1
.head 5 -  Number: nFlag
.head 5 -  String: sNls
.head 5 -  Long String: sErr
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 +  If SqlPLSQLCommand(hSql(), "p_ovr(nMode)")
.head 7 -  Call SqlCommitEx(hSql(), "Выполнено " || IifS(nMode=0,
     "От", "За") || "крытие ночного овердрафта")
.head 6 +  Else
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call MessageNoWait( 'Ошибка при выполнении овердрафта!', 'OVERDRAFT', 30, 1 )
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 -  Call SqlRetrieve(hSql(), "informix.p_ovr", ":nMode", "")
.head 6 -  Return SqlExecute(hSql())
.head 5 -  Set sErr_P_Ovr = 'Выполнение овердрафта завершено !'
.head 5 +  ! If SqlPrepareAndExecute(hSql() , "select flag, s, nls,err into :nFlag, :nSuma, :sNls, :sErr
                                      from P_ovr_err 
                                      order by flag desc")
.head 6 +          While SqlFetchNext( hSql(), nFetchRes )
.head 7 +          If nFlag = 0
.head 8 -          Set sErr_P_Ovr = sErr_P_Ovr || PutCrLf() || "Помилкa:  " || sNls ||' - '|| sErr
.head 7 +          Else 
.head 8 -          Set sErr_P_Ovr = sErr_P_Ovr || PutCrLf() ||'Перераховано - '|| SalNumberToStrX( (nSuma/100), 2 ) || 
                 ' на рах. ' || sNls
.head 5 -  Call MessageNoWait( sErr_P_Ovr, 'OVERDRAFT', 60, 0 )
.head 5 -  ! Call SqlPrepareAndExecute(hSql() , 'delete from P_ovr_err')
.head 5 -  Return TRUE
.head 3 +  Function: Pereocenka_VP			! __exported
.head 4 -  Description: Переоценка счетов ВАЛ ПОЗ и Внеб ВАЛ ПОЗ
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 +  Static Variables
.head 5 -  Boolean: LL
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 -  ! Call Debug('НАЧАЛО')
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set LL = SqlPrepareAndExecute(hSql(),
    "begin gl.p_pvp; end;")
.head 5 +  Else
.head 6 -  Set LL = SqlRetrieve(hSql(), "informix.p_pvp", '', '')
.head 6 +  If LL
.head 7 -  Set LL = SqlExecute(hSql())
.head 5 +  If LL
.head 6 -  Call SqlCommitEx(hSql(),
     'Принудительная переоценка счетов ВП')
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return LL
.head 3 +  Function: Podgot_BALS			! __exported
.head 4 -  Description: Подготовка во временной таблице TMP_BAL сводного баланса через вызов фун
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strDA
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dRab
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set dRab=MMddyyyyToDate(strDA)
.head 6 +  If not SqlPLSQLCommand(hSql(), "BAL_EQV (dRab)")
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 +  If not  SqlRetrieve(hSql(), 'informix.bal_eqv', ':strDA', '')
.head 7 -  Return FALSE
.head 6 +  If not  SqlExecute(hSql())
.head 7 -  Return FALSE
.head 5 +  If not SqlCommitEx(hSql(), 'Подготовка для печати сводного баланса')
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: DKU_F6  		        ! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strDA
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dRab
.head 4 +  Actions
.head 5 -  Set dRab=MMddyyyyToDate(strDA)
.head 5 +  If dRab !=GetBankDate()
.head 6 -  Return TRUE
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 6 +  If not SqlPLSQLCommand(hSql(), "DKU_F6(dRab)") or not SqlCommit(hSql())
.head 7 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: Podgot_VPOZ			! __exported
.head 4 -  Description: Подготовка во временной таблице TMP
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: para
.head 5 -  String: strDA
.head 5 -  String: sid
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dRab
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 6 -  Set dRab=MMddyyyyToDate(strDA)
.head 6 +  If not SqlPLSQLCommand(hSql(), "VPOZ (para,dRab,sid)")
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 +  If not  SqlRetrieve(hSql(), 'informix.VPOZ',':para,:strDA', '')
.head 7 -  Return FALSE
.head 6 +  If not  SqlExecute(hSql())
.head 7 -  Return FALSE
.head 5 +  If not SqlCommitEx(hSql(), 'Подготовка для печати ВАЛ ПОЗ')
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: Ek_Pok_Day			! __exported
.head 4 -  Description: Подготовка економич.пок за день
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strDA
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dRab
.head 5 -  Boolean: bFl
.head 4 +  Actions
.head 5 -  Set bFl = FALSE !! флаг возврата
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 +  Loop
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 7 -  Set dRab = MMddyyyyToDate(strDA)
.head 7 +  If not SqlPLSQLCommand(hSql(),  "ek.P_EK_POK_DAY(dRab)")
.head 8 -  Break
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(),
   'informix.p_ek_pok_day', ':strDA', '')
.head 8 -  Break
.head 7 +  If not SqlExecute(hSql())
.head 8 -  Break
.head 6 +  If not SqlCommitEx(hSql(),
   'Запоминание ек.пок. за день')
.head 7 -  Break
.head 6 -  Set bFl = TRUE
.head 6 -  Break
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return bFl
.head 3 +  Function: F_otcn			! __exported
.head 4 -  Description: Подготовка во временной таблице TMP_NBU jnxtnf
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: FA
.head 5 -  String: strDA
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: ss
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 6 -  Set FA = SalStrUpperX(FA)
.head 6 +  If SqlPrepareAndExecute(hSql(), "SELECT status INTO :ss FROM all_objects WHERE owner='BARS' AND object_name = :FA ")
.head 7 -  Call SqlFetchNext(hSql(), nFetchRes) 
.head 6 +  If SalStrTrimX(ss) = 'INVALID'
.head 7 -  Call SqlPrepareAndExecute(hSql(), "ALTER  PROCEDURE " || FA || " COMPILE")
.head 6 -  !
.head 6 -  Set ss = GetGlobalOption( 'RNBURBCK' )
.head 6 +  If ss 
.head 7 -  ! Make end of transaction and start new
.head 7 -  Call SqlCommit( hSql() )
.head 7 -  ! to avoid error with set transaction...
.head 7 -  Call SqlPrepareAndExecute(hSql(), "SET TRANSACTION USE ROLLBACK SEGMENT " || SalStrUpperX( ss ) )
.head 6 +  If not SqlPrepareAndExecute(hSql(), "BEGIN " || FA || "(TO_DATE('" || strDA || "','MM/DD/YYYY')); END;")
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 +  If not  SqlRetrieve( hSql(), 'informix.' || FA, ':strDA', '')
.head 7 -  Return FALSE
.head 6 +  If not  SqlExecute( hSql())
.head 7 -  Return FALSE
.head 5 +  If not SqlCommitEx(hSql(), 'Подготовка для формирования отчета')
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: Podgot_MES			! __exported
.head 4 -  Description: Подготовка во временной таблице TMP_MES
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strDAB
.head 5 -  String: strDAE
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dRabB
.head 5 -  Date/Time: dRabE
.head 4 +  Actions
.head 5 -  ! Call Debug(strDAB || ' ' || strDAE)
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 6 -  Set dRabB=MMddyyyyToDate(strDAB)
.head 6 -  Set dRabE=MMddyyyyToDate(strDAE)
.head 6 -  Call SqlPrepareAndExecute(hSql(), "delete from TMP_MES")
.head 6 -  Call SqlPrepareAndExecute(hSql(), "  INSERT INTO tmp_mes
 SELECT a.nbs,0,0, sum(p_icurval(a.kv,b.dos,:dRabE)), sum(p_icurval(a.kv,b.kos,:dRabE)),0,0
 FROM accounts a, Saldoa b
 WHERE a.acc=b.acc AND b.fdat>=:dRabB AND b.fdat<=:dRabE GROUP BY a.nbs             
UNION
 SELECT a.nbs,-SUM(p_icurval(a.kv,b.ostf-b.dos+b.kos,:dRabE)),0,0,0,0,0
 FROM accounts a, saldoa b
 WHERE b.ostf-b.dos+b.kos<0 AND a.acc=b.acc AND  b.fdat IN 
    (select max(fdat) from saldoa where acc=a.acc and fdat< :dRabB) GROUP BY a.nbs
UNION 
 SELECT a.nbs,0,SUM(p_icurval(a.kv,b.ostf-b.dos+b.kos,:dRabE)),0,0,0,0
 FROM accounts a, Saldoa b
 WHERE b.ostf-b.dos+b.kos>0 AND a.acc=b.acc AND  b.fdat IN 
    (select max(fdat) from saldoa where acc=a.acc and fdat<:dRabB)  GROUP BY a.nbs
UNION 
 SELECT a.nbs,0,0,0,0,-SUM(p_icurval(a.kv,b.ostf-b.dos+b.kos,:dRabE)),0
 FROM accounts a,saldoa b
 WHERE  b.ostf-b.dos+b.kos<0 and a.acc=b.acc and  b.fdat in 
     (select max(fdat) from saldoa where acc=a.acc and fdat<=:dRabE)  group by a.nbs 
UNION 
SELECT a.nbs,0,0,0,0,0,SUM(p_icurval(a.kv,b.ostf-b.dos+b.kos,:dRabE))
FROM  accounts a,saldoa b
 WHERE  b.ostf-b.dos+b.kos>0 and a.acc=b.acc and  b.fdat in 
   (select  max(fdat) from saldoa where acc=a.acc and fdat <=:dRabE)  group by a.nbs")                                                    
.head 5 +  Else
.head 6 +  If not  SqlRetrieve(hSql(), 'informix.bal_mes', ':strDAB,:strDAE', '')
.head 7 -  Return FALSE
.head 6 +  If not  SqlExecute(hSql())
.head 7 -  Return FALSE
.head 5 +  If not SqlCommitEx(hSql(), 'Подготовка для печати сводного баланса')
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 5 -  Call SalWaitCursor(FALSE)
.head 3 +  Function: Podgot_LICS			! __exported
.head 4 -  Description: Подготовка во временных таблицах
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: ID
.head 5 -  String: strDA
.head 5 -  String: strDA2
.head 5 -  String: maska
.head 5 -  Number: para
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dRab
.head 5 -  Date/Time: dRab2
.head 5 -  String: ppp
.head 5 -  String: strRBSName
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set dRab = MMddyyyyToDate(strDA)
.head 6 -  Set dRab2 = MMddyyyyToDate(strDA2)
.head 6 -  Set ID = GetUserId()
.head 6 -  Set strRBSName = GetGlobalOption('RNBURBCK')
.head 6 +  If strRBSName
.head 7 -  ! Make end of transaction and start new
.head 7 -  Call SqlCommit( hSql() )
.head 7 -  ! to avoid error with set transaction...
.head 7 -  Call SqlPrepareAndExecute(hSql(), 'SET TRANSACTION USE ROLLBACK SEGMENT ' || SalStrUpperX( strRBSName ))
.head 6 +  If not SqlPLSQLCommand(hSql(), "P_LIC" || Str(para) || " (ID,dRab,dRab2,maska)")
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 -  Set ppp = 'informix.p_lic' || Str(para)
.head 6 -  ! Call Debug(ppp)
.head 6 -  ! Call DebugN(ID)
.head 6 -  ! Call Debug(strDA)
.head 6 -  ! Call Debug(strDA2)
.head 6 -  ! Call Debug(maska)
.head 6 +  If not SqlRetrieve(hSql(), ppp,
   ':ID,:strDA,:strDA2,:maska', '')
.head 7 -  Return FALSE
.head 6 +  If not  SqlExecute(hSql())
.head 7 -  Return FALSE
.head 5 +  If not SqlCommitEx(hSql(), 'Подготовка для печати лицевых')
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 5 -  Call SalWaitCursor(FALSE)
.head 3 +  Function: InterestAccrualN       	! __exported
.head 4 -  Description: Начисление %% на старте дня и не только (MIK) (NEW!!!)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nMode        ! 0 / 1   все - не все
.head 5 -  Date/Time: dDat      ! дата "по"
.head 5 -  String: sFilt        ! фильтр (если надо)
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dDat1
.head 5 -  Date/Time: dDat2
.head 5 -  Date/Time: dDaos
.head 5 -  Number: nAcc
.head 5 -  Number: nCount
.head 5 -  Number: nFetchRes
.head 5 -  Number: nFreq
.head 5 -  Number: nKv
.head 5 -  Number: nId
.head 5 -  String: sNls
.head 5 -  String: sTmp
.head 4 +  Actions
.head 5 -  Call SalMessageBox('Функция InterestAccrualN перенесена в BARS010.apd', 'Внимание !', MB_Ok)
.head 5 -  Return FALSE
.head 5 +  ! If nMode=1   ! по отдельным счетам юзера
.head 6 -          Set sTmp="SELECT i.acc,i.id,i.freq,
                 i.acr_dat+1 dat,i.stp_dat,s.kv,s.daos-1,s.nls
       INTO :nAcc,:nId,:nFreq,:dDat1,:dDat2,:nKv,:dDaos,:sNls
       FROM int_accN i, saldo s, tabval t, customer k, cust_acc c
       WHERE i.metr IN (0,1,2,4) and i.acc=s.acc and c.acc=s.acc and k.rnk=c.rnk and s.kv=t.kv "||sFilt
.head 5 +  ! Else ! по всем счетам на старте дня
.head 6 -          Set sTmp="SELECT i.acc,i.id,i.freq,i.acr_dat+1 dat,i.stp_dat,a.kv,a.daos,a.nls
       INTO :nAcc,:nId,:nFreq,:dDat1,:dDat2,:nKv,:dDaos,:sNls
       FROM int_accN i,accounts a WHERE i.metr IN (0,1,2,4) and i.acc=a.acc "||sFilt
.head 5 -  ! Call SqlPrepareAndExecute(hSql(),
    "SELECT count(*) INTO :nCount FROM int_accN")
.head 5 +  ! If SqlFetchNext(hSql(),nFetchRes)
.head 6 -          Call SalCreateWindow(win_meter, hWndForm,'Начисление %%', nCount+1)
.head 6 -          Call SqlPrepareAndExecute(hSqlAux(),sTmp)
.head 6 -          Set nCount = 0
.head 6 +          While SqlFetchNext(hSqlAux(),nFetchRes)
.head 7 +          If dDat1=DATETIME_Null
.head 8 -          Set dDat1=dDaos
.head 7 +          If dDat2=DATETIME_Null
.head 8 -          Set dDat2=dDat
.head 7 +          If dDat < dDat2  
.head 8 -          Set dDat2=dDat
.head 7 +          If nFreq=1 or
   nFreq=3 and dDat2-dDat1>=7 or
   nFreq=5 and dDat2>=AddMonths(dDat1,1) or
   nFreq=7 and dDat2>=AddMonths(dDat1,3) or 
   nFreq=180 and dDat2>=AddMonths(dDat1,6) or
   nFreq=360 and dDat2>=AddMonths(dDat1,12)
.head 8 -  ! Call Debug('я тута!')
.head 8 -          Call p_intN(nAcc,nId,dDat1,dDat2,NUMBER_Null,1)
.head 8 -          Call SalStatusSetText(hWndForm, "Счет №"||sNls)
.head 7 -          Set nCount=nCount + 1
.head 7 -          Call SalSendMsg(win_meter, UM_Populate,0,nCount)
.head 6 -          Call SqlCommit(hSql())
.head 6 -          Call SalStatusSetText(hWndForm, "Готово")
.head 5 -  ! Call SalDestroyWindow(win_meter)
.head 3 +  Function: BDateNotify			!__exported
.head 4 -  Description: Оповестить о статусе банковского дня
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Date/Time: dtBDate
.head 5 -  Number: nOpen
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strStatus
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 +  Select Case nOpen
.head 7 +  Case 0	! Закрыт
.head 8 -  Set strStatus = 'CLOSED'
.head 8 -  Break
.head 7 +  Case 1	! Открыт
.head 8 -  Set strStatus = 'OPENED'
.head 8 -  Break
.head 7 +  Case 9	! Блокирован
.head 8 -  Set strStatus = 'PROHIBITED'
.head 8 -  Break
.head 7 +  Case 10	! Переключился
.head 8 -  Set strStatus = 'SWITCHED'
.head 8 -  Break
.head 7 +  Default
.head 8 -  Call SalMessageBeep( MB_IconStop )
.head 8 -  Call SalMessageBox('Internal Error! Invalid BankDay status!', 'BankDay Notifier', MB_Ok )
.head 8 -  Return FALSE
.head 8 -  Break
.head 6 -  Call SqlPLSQLCommand(hSql(), "bars_notifier_send(dtBDate, strStatus)")
.head 5 -  Return TRUE
.head 3 -  !
.head 3 -  ! // SECURAPI - Функции
.head 3 -  !
.head 3 +  Function: SqlGetLastSerial		! __exported
.head 4 -  Description: Получить последнее 'значение SERIAL' после INSERT-а в таблицу
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: TT
.head 4 +  Actions
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 6 -  Set TT= 'SELECT s_customer.currval from dual  INTO :nLastSerial '
.head 5 +  Else
.head 6 -  Set TT=  'SELECT last_serial() FROM Dk INTO :nLastSerial WHERE dk=1' 
.head 5 -  ! Call Debug(TT)
.head 5 +  If not SqlPrepareAndExecute(hSql(), TT ) 
.head 6 -  Return FALSE
.head 5 +  If not SqlFetchNext(hSql(), nFetchRes) 
.head 6 -  Return FALSE
.head 5 -  ! Call Debug(SalNumberToStrX(nLastSerial, 0))
.head 5 -  Return TRUE
.head 3 -  !
.head 3 +  Function: SaveInfoToLog			! __exported
.head 4 -  Description: Сохранить информацию в LOG-файле
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strLogInfoTxt
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! File Handle: hLogFile
.head 5 -  ! String: strLogFile
.head 5 -  ! String: strCheckSum
.head 5 -  String: sTxt
.head 4 +  Actions
.head 5 -  ! Return DBSpy_Report(GetUserId(), GetBankDate(), strLogInfoTxt, DBSpy_Info, GetDBMS())
.head 5 -  ! Return SqlPLSQLCommand(hSqlAud(), "bars_audit.info(strLogInfoTxt)")
.head 5 -  Set sTxt = VisStrSubstitute(strLogInfoTxt, Chr(39), Chr(39)||Chr(39))
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.info('"||VisStrSubstitute(strLogInfoTxt,Chr(39),Chr(39)||Chr(39))||"');
       end;")
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.info(:sTxt);
       end;")
.head 5 +  If SqlOraPLSQLPrepare(hSqlAud(), "
   begin
     bars_audit.info(:sTxt);
   end;")
.head 6 -  Return SqlOraPLSQLExecute(hSqlAud())
.head 5 +  Else
.head 6 -  Return FALSE
.head 5 -  ! Call SqlClose(hSqlAud())
.head 3 +  Function: SaveErrorToLog		! __exported
.head 4 -  Description: Сохранить информацию о ошибке в LOG-файле
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strLogInfoTxt
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTxt
.head 4 +  Actions
.head 5 -  ! Return DBSpy_Report(GetUserId(), GetBankDate(), strLogInfoTxt, DBSpy_Error, GetDBMS())
.head 5 -  ! Return SqlPLSQLCommand(hSqlAud(), "bars_audit.error(strLogInfoTxt)")
.head 5 -  Set sTxt = VisStrSubstitute(strLogInfoTxt, Chr(39), Chr(39)||Chr(39))
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.error('"||VisStrSubstitute(strLogInfoTxt,Chr(39),Chr(39)||Chr(39))||"');
       end;")
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.error(:sTxt);
       end;")
.head 5 +  If SqlOraPLSQLPrepare(hSqlAud(), "
   begin
     bars_audit.info(:sTxt);
   end;")
.head 6 -  Return SqlOraPLSQLExecute(hSqlAud())
.head 5 +  Else
.head 6 -  Return FALSE
.head 3 +  Function: SaveFInfoToLog		! __exported
.head 4 -  Description: Сохранить финансовую информацию в LOG-файле
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strLogInfoTxt
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTxt
.head 4 +  Actions
.head 5 -  ! Return DBSpy_Report(GetUserId(), GetBankDate(), strLogInfoTxt, DBSpy_FinInfo, GetDBMS())
.head 5 -  ! Return SqlPLSQLCommand(hSqlAud(), "bars_audit.financial(strLogInfoTxt)")
.head 5 -  Set sTxt = VisStrSubstitute(strLogInfoTxt, Chr(39), Chr(39)||Chr(39))
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.financial('"||VisStrSubstitute(strLogInfoTxt,Chr(39),Chr(39)||Chr(39))||"');
       end;")
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.financial(:sTxt);
       end;")
.head 5 +  If SqlOraPLSQLPrepare(hSqlAud(), "
   begin
     bars_audit.info(:sTxt);
   end;")
.head 6 -  Return SqlOraPLSQLExecute(hSqlAud())
.head 5 +  Else
.head 6 -  Return FALSE
.head 3 +  Function: SaveWarningToLog		! __exported
.head 4 -  Description: Сохранить предупреждающую информацию в LOG-файле
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strLogInfoTxt
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sTxt
.head 4 +  Actions
.head 5 -  ! Return DBSpy_Report(GetUserId(), GetBankDate(), strLogInfoTxt, DBSpy_FinInfo, GetDBMS())
.head 5 -  ! Return SqlPLSQLCommand(hSqlAud(), "bars_audit.warning(strLogInfoTxt)")
.head 5 -  Set sTxt = VisStrSubstitute(strLogInfoTxt, Chr(39), Chr(39)||Chr(39))
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.warning('"||VisStrSubstitute(strLogInfoTxt,Chr(39),Chr(39)||Chr(39))||"');
       end;")
.head 5 -  ! Return SqlPrepareAndExecute(hSqlAud(), "
       begin
         bars_audit.warning(:sTxt);
       end;")
.head 5 +  If SqlOraPLSQLPrepare(hSqlAud(), "
   begin
     bars_audit.info(:sTxt);
   end;")
.head 6 -  Return SqlOraPLSQLExecute(hSqlAud())
.head 5 +  Else
.head 6 -  Return FALSE
.head 3 -  !
.head 3 -  ! // MSGAPI - Функции
.head 3 -  !
.head 3 +  ! Function: MessageNoWait			! __exported
.head 4 -          Description: Информационное сообщение с заданным
ожиданием (Марийко Б.Г.)
.head 4 +          Returns 
.head 5 -          Boolean: 
.head 4 +          Parameters 
.head 5 -          String: sTex	! Текст сообщения
.head 5 -          String: sZagol	! Заголовок сообщения
.head 5 -          Number: nKs	! К-во секунд задержки
		! (0 - с остановкой)
.head 5 -          Number: nMode	! Режим сообщения
		! 0 - обычное сообщение
		! 1 - аварийное сообщение
.head 4 +          Static Variables 
.head 5 -          Boolean: bUgoYes
.head 5 -          Boolean: bUgoYes2
.head 5 -          Boolean: bUgoYes3
.head 5 -          Boolean: bUgoYes4
.head 5 -          Boolean: bUgoYes5
.head 5 -          Boolean: bUgoYes6
.head 5 -          Boolean: bUgoYes7
.head 4 +          Local variables 
.head 5 -          Number: nKo
.head 4 +          Actions 
.head 5 -          Set nKo = Min(Abs(nMode), 1)
.head 5 +          If nKo = 1
.head 6 -          Call SaveErrorToLog(sZagol || ': ' || sTex)
.head 5 +          Else 
.head 6 -          Call SaveInfoToLog(sZagol || ': ' || sTex)
.head 5 +          If not bUgoYes
.head 6 -          Set bUgoYes = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait, hWndForm, sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes = FALSE
.head 5 +          Else If not bUgoYes2
.head 6 -          Set bUgoYes2 = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait2, hWndForm,
    sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes2 = FALSE
.head 5 +          Else If not bUgoYes3
.head 6 -          Set bUgoYes3 = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait3, hWndForm,
    sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes3 = FALSE
.head 5 +          Else If not bUgoYes4
.head 6 -          Set bUgoYes4 = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait4, hWndForm,
    sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes4 = FALSE
.head 5 +          Else If not bUgoYes5
.head 6 -          Set bUgoYes5 = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait5, hWndForm,
    sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes5 = FALSE
.head 5 +          Else If not bUgoYes6
.head 6 -          Set bUgoYes6 = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait6, hWndForm,
    sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes6 = FALSE
.head 5 +          Else If not bUgoYes7
.head 6 -          Set bUgoYes7 = TRUE
.head 6 -          Set nKo = SalModalDialog(dlg_MessageNoWait7, hWndForm,
    sTex, sZagol, nKs, nKo)
.head 6 -          Set bUgoYes7 = FALSE
.head 5 +          Else 
.head 6 +  ! If nKo = 0
.head 7 -          Call SalMessageBox(sTex, sZagol, MB_Ok)
.head 6 +  ! Else
.head 7 -          Call SalMessageBox(sTex, sZagol, MB_Ok | MB_IconStop)
.head 6 -          Call SalMessageBox(sTex, sZagol, IifN(nKo=0, MB_Ok,
     MB_Ok | MB_IconStop))
.head 5 -          Return nKo = 1
.head 3 +  Function: MessageNoWait			! __exported
.head 4 -  Description: Информационное сообщение с заданным
ожиданием (Марийко Б.Г.)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sTex	! Текст сообщения
.head 5 -  String: sZagol	! Заголовок сообщения
.head 5 -  Number: nKs	! К-во секунд задержки
		! (0 - с остановкой)
.head 5 -  Number: nMode	! Режим сообщения
		! 0 - обычное сообщение
		! 1 - аварийное сообщение
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nKo
.head 4 +  Actions
.head 5 -  Set nKo = Min(Abs(nMode), 1)
.head 5 +  If nKo = 1
.head 6 -  Call SaveErrorToLog(sZagol || ': ' || sTex)
.head 5 +  Else
.head 6 -  Call SaveInfoToLog(sZagol || ': ' || sTex)
.head 5 -  Set nKo = SalModalDialog(dlg_MessageNoWait, hWndForm, sTex, sZagol, nKs, nKo)
.head 5 -  Return nKo = 1
.head 3 +  Function: MessageInfo			! __exported
.head 4 -  Description: Информационное сообщение
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strInfoText
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strInfoText)
.head 5 -  Return SalModalDialog(dlg_MessageBox, hWndForm,
       strInfoText, MSG_Information(), PRINT_DOC, 0)
.head 3 +  Function: MessageInfoEx			! __exported
.head 4 -  Description: Информационное сообщение
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strInfoText
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalModalDialog(dlg_MessageBox, hWndForm,
       strInfoText, MSG_Information(), FALSE, 0)
.head 3 +  Function: MessageAttention		! __exported
.head 4 -  Description: Предупреждающее сообщение
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  String: strAttentionText
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strAttentionText)
.head 5 -  Call SalModalDialog(dlg_MessageBox, hWndForm,
     strAttentionText, MSG_Attention(), FALSE, 0)
.head 5 -  Return TRUE
.head 3 +  Function: MessageError			! __exported
.head 4 -  Description: Сообщение ошибки
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  String: strErrorText
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strErrorText)
.head 5 -  Call SalModalDialog(dlg_MessageBox, hWndForm,
     strErrorText, MSG_Error(), FALSE, 0)
.head 5 -  Return FALSE
.head 3 +  Function: MessageErrorEx		! __exported
.head 4 -  Description: Информационное сообщение ОШИБКИ оплаты
Банковского документа
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strErrorText
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strErrorText)
.head 5 -  Call SalModalDialog(dlg_MessageBox, hWndForm,
     strErrorText, MSG_Information(), 4, 0)
.head 3 +  Function: MessageErrorInput		! __exported
.head 4 -  Description: Сообщение ошибки при вводе
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strErrorText
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalModalDialog(dlg_MessageBox, hWndForm,
     strErrorText, 'Ошибка заполнения реквизита!',
     FALSE, 0)
.head 5 -  Return VALIDATE_Cancel
.head 3 +  Function: MessageWarning		! __exported
.head 4 -  Description: Предупреждающее сообщение
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  String: strWarningText
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strWarningText)
.head 5 -  Call SalModalDialog(dlg_MessageBox, hWndForm,
     strWarningText, MSG_Warning(), FALSE, 0)
.head 5 -  Return TRUE
.head 3 +  Function: MessageQuestion		! __exported
.head 4 -  Description: Вопросительное сообщение
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  String: strQuestionText
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nButton
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strQuestionText)
.head 5 -  Set nButton = SalModalDialog(dlg_MessageBox, hWndForm,
    strQuestionText, MSG_Attention(), TRUE, 0)
.head 5 +  If nButton = IDYES
.head 6 -  Call SaveInfoToLog('Пользователь выбрал кнопку YES/ДА')
.head 5 +  Else
.head 6 -  Call SaveInfoToLog('Пользователь выбрал кнопку NO/НЕТ')
.head 5 -  Return nButton
.head 3 +  Function: MessageReglament		! __exported
.head 4 -  Description: Информационное сообщение
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  String: strInfoText
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strInfoText)
.head 5 -  Call SalModalDialog(dlg_MessageBox, hWndForm,
     strInfoText, MSG_Reglament(), FALSE, 0)
.head 5 -  Return TRUE
.head 3 +  Function: MessageActionConfirm 		! __exported
.head 4 -  Description: Подтвержедение действия
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  String: strMBHeader
.head 5 -  String: strInfoText
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 +  Static Variables
.head 5 -  Boolean: fYes2All
.head 4 +  Local variables
.head 5 -  Number: nRet
.head 4 +  Actions
.head 5 +  If strMBHeader = MBEx_Clear
.head 6 -  Set fYes2All = FALSE
.head 6 -  Return MBEx_Cancel
.head 5 +  If fYes2All
.head 6 -  Return MBEx_Yes
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Set nRet =  SalModalDialog(dlg_MessageBoxEx, hWndForm,
    strMBHeader, strInfoText)
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 +  If nRet = MBEx_YesToAll
.head 6 -  Set fYes2All = TRUE
.head 6 -  Set nRet = MBEx_Yes
.head 5 -  Return nRet
.head 3 +  Function: MessageDebug			! __exported
.head 4 -  Description: Отладочное сообщение
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strInfoText
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalModalDialog(dlg_MessageBox, hWndForm, strInfoText, MSG_Debug(), FALSE, 0)
.head 3 -  !
.head 3 -  ! //  RTAPI - Функции
.head 3 -  !
.head 3 +  Function: Debug				! __exported
.head 4 -  Description: Вывод отладочного сообщения
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  String: strDebugText
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SaveInfoToLog(strDebugText)
.head 5 -  ! Call SalMessageBox(strDebugText, MSG_Debug(), MB_Ok)
.head 5 -  Call MessageDebug(strDebugText)
.head 3 +  Function: DebugN			! __exported
.head 4 -  Description: Вывод отладочного сообщения (numeric)
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nDebugN
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! Call SalMessageBox(Str(nDebugN), MSG_Debug(), MB_Ok)
.head 5 -  Call SaveInfoToLog(Str(nDebugN))
.head 5 -  Call MessageDebug(Str(nDebugN))
.head 3 +  Function: WaitCursorOn			! __exported
.head 4 -  Description: Показать Курсор-ожидание
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalWaitCursor(TRUE)
.head 3 +  Function: WaitCursorOff			! __exported
.head 4 -  Description: Удалить Курсор-ожидание
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalWaitCursor(FALSE)
.head 3 +  Function: GetDigit			! __exported
.head 4 -  Description: Получение N-ой цифры числа.
.head 4 +  Returns
.head 5 -  Number: nDigit
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 5 -  Number: nPos
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: szNumber
.head 4 +  Actions
.head 5 -  Set szNumber = SalNumberToStrX(nNumber, 0)
.head 5 -  Return SalStrToNumber(SalStrMidX(szNumber, nPos, 1))
.head 3 +  Function: GetLastDigit			! __exported
.head 4 -  Description: Получение последней цифры числа.
.head 4 +  Returns
.head 5 -  Number: nDigit
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: szNumber
.head 4 +  Actions
.head 5 -  Set szNumber = SalNumberToStrX(nNumber, 0)
.head 5 -  Return SalStrToNumber(SalStrRightX(szNumber, 1))
.head 3 +  Function: GetCharForDigit		! __exported
.head 4 -  Description: Возвращает символ соответствующий номеру от 0 до 35
.head 4 +  Returns
.head 5 -  String: strChar
.head 4 +  Parameters
.head 5 -  Number: nDigit
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strRetVal
.head 4 +  Actions
.head 5 -  ! /////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 +  If nDigit < 0 OR nDigit > 35
.head 6 -  Set strRetVal = '?'
.head 5 +  Else If nDigit <= 9
.head 6 -  Set strRetVal = SalNumberToChar(nDigit + 48)
.head 5 +  Else
.head 6 -  Set strRetVal = SalNumberToChar(nDigit + 55)
.head 5 -  !
.head 5 -  Return strRetVal
.head 5 -  !
.head 5 -  ! /////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: GetCurrentMmDd		! __exported
.head 4 -  Description: Возвращает код текущего месяца и дня в формате MMDD
.head 4 +  Returns
.head 5 -  String: strChar
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! /////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Return GetCharForDigit(SalDateMonth(SalDateCurrent())) || GetCharForDigit(SalDateDay (SalDateCurrent()))
.head 5 -  !
.head 5 -  ! /////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: GetCurrentHmm			! __exported
.head 4 -  Description: Возвращает код часы-минуты в формате HMM
.head 4 +  Returns
.head 5 -  String: strChar
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strHour
.head 5 -  String: strMinute
.head 4 +  Actions
.head 5 -  ! /////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Set strHour=GetCharForDigit(SalDateHour(SalDateCurrent()))
.head 5 -  Set strMinute=SalStrRightX('00' || SalNumberToStrX(SalDateMinute(SalDateCurrent()), 0), 2)
.head 5 -  !
.head 5 -  Return strHour || strMinute
.head 5 -  !
.head 5 -  ! /////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 -  !
.head 3 +  Function: Sep98md			! __exported
.head 4 -  Description: Возвращает строку формата СЭП месяц-день
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDat
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: d1
.head 5 -  Number: d2
.head 4 +  Actions
.head 5 -  Set d1 = SalDateMonth(dDat)
.head 5 -  Set d2 = SalDateDay(dDat)
.head 5 +  ! If d1 < 10
.head 6 -          Set d1 = d1 + 48
.head 5 +  ! Else
.head 6 -          Set d1 = d1 + 55
.head 5 -  Set d1 = d1 + IifN(d1<10, 48, 55)
.head 5 +  ! If d2 < 10
.head 6 -          Set d2 = d2 + 48
.head 5 +  ! Else
.head 6 -          Set d2 = d2 + 55
.head 5 -  Set d2 = d2 + IifN(d2<10, 48, 55)
.head 5 -  Return SalNumberToChar(d1) || SalNumberToChar(d2)
.head 3 +  Function: ddd				! __exported
.head 4 -  Description: Возвращает порядковый номер дня в году для
указанной даты (три знака), например, для
03.01.2001 возвращаемое значение 003
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dDat
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return Right(Str(SalDateConstruct(SalDateYear(dDat),
       SalDateMonth(dDat), SalDateDay(dDat), 0, 0, 0) -
       SalDateYearBegin(dDat) + 1001), 3)
.head 3 -  !
.head 3 +  Function: PrepareWindow			! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWnd
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strWndName
.head 4 +  Actions
.head 5 -  Call WaitCursorOn()
.head 5 -  Call SalCenterWindow(hWnd)
.head 5 -  Call SetWindowFont(hWnd)
.head 5 -  Call SalGetWindowText(hWnd, strWndName, 128)
.head 5 -  Call SaveInfoToLog(MSG_Invoke() || strWndName)
.head 3 +  Function: PrepareWindowEx		! __exported
.head 4 -  Description: Без курсора ожидания
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWnd
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strWndName
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Call SalCenterWindow(hWnd)
.head 5 -  Call SetWindowFont(hWnd)
.head 5 -  Call SalGetWindowText(hWnd, strWndName, 128)
.head 5 -  Call SaveInfoToLog(MSG_Invoke() || strWndName)
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: SetWindowFont			! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWnd
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Window Handle: hWndObject
.head 5 -  Window Handle: hWndChild
.head 5 -  Number: nObjectType
.head 5 -  String: strFontName
.head 5 -  Number: nFontSize
.head 5 -  Number: nFontEnh
.head 4 +  Actions
.head 5 +  If UseCustomFonts()
.head 6 -  ! Получаем тип окна
.head 6 -  Set nObjectType = SalGetType(hWnd)
.head 6 -  ! Устанавливаем фонт окна
.head 6 +  If NOT SalSendMsg(hWnd, UM_NoFontChange, 0, 0)
.head 7 +  Select Case nObjectType
.head 8 -  Case TYPE_ChildTable
.head 8 +  Case TYPE_TableWindow
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 9 -  Break
.head 8 -  Case TYPE_DialogBox
.head 8 -  Case TYPE_FormWindow
.head 8 +  Case TYPE_MDIWindow
.head 9 -  Call SalFontGet(hWnd, strFontName, nFontSize, nFontEnh)
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontGeneral()), nFontSize, GetFontEnhancement(GetFontGeneral()))
.head 9 -  Break
.head 8 +  Default
.head 9 -  Break
.head 6 -  ! Получаем хэндл ToolBar'а
.head 6 -  Set hWndObject = SalGetFirstChild(hWnd, TYPE_FormToolBar)
.head 6 -  ! Устанавливаем фонт детей ToolBar'а
.head 6 +  If hWndObject != hWndNULL
.head 7 -  Set hWndChild = SalGetFirstChild(hWndObject, TYPE_Any)
.head 7 +  While hWndChild != hWndNULL
.head 8 +  If NOT SalSendMsg(hWndChild, UM_NoFontChange, 0, 0)
.head 9 -  Set nObjectType = SalGetType(hWndChild)
.head 9 +  Select Case nObjectType
.head 10 -  Case TYPE_MultilineText
.head 10 +  Case TYPE_DataField
.head 11 +  If SalSendMsg(hWndChild, UM_IsFieldLabel, 0, 0)
.head 12 -  Call SalFontSet(hWndChild, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 11 +  Else
.head 12 -  Call SalFontSet(hWndChild, GetFontName(GetFontDataFields()), GetFontSize(GetFontDataFields()), GetFontEnhancement(GetFontDataFields()))
.head 11 -  Break
.head 10 -  Case TYPE_OptButton
.head 10 -  Case TYPE_RadioButton
.head 10 +  Case TYPE_PushButton
.head 11 -  Call SalFontSet(hWndChild, GetFontName(GetFontButtons()), GetFontSize(GetFontButtons()), GetFontEnhancement(GetFontButtons()))
.head 11 -  Break
.head 10 -  Case TYPE_ComboBox
.head 10 +  Case TYPE_ListBox
.head 11 -  Call SalFontSet(hWndChild, GetFontName(GetFontListBoxes()), GetFontSize(GetFontListBoxes()), GetFontEnhancement(GetFontListBoxes()))
.head 11 -  Break
.head 10 +  Case TYPE_TableColumn
.head 11 -  Call SalFontSet(hWndChild, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 11 -  Break
.head 10 -  Case TYPE_ChildTable
.head 10 +  Case TYPE_TableWindow
.head 11 -  Call SalFontSet(hWndChild, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 11 -  Call SetWindowFont(hWndChild)
.head 11 -  Break
.head 10 -  Case TYPE_DialogBox
.head 10 -  Case TYPE_FormWindow
.head 10 +  Case TYPE_MDIWindow
.head 11 -  Call SalFontSet(hWndChild, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 11 -  Call SetWindowFont(hWndChild)
.head 11 -  Break
.head 10 +  Default
.head 11 -  Call SalFontSet(hWndChild, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 11 -  Break
.head 8 -  Set hWndChild=SalGetNextChild(hWndChild, TYPE_Any)
.head 6 -  ! Получаем хэндл первого ребенка окна
.head 6 -  Set hWndObject = SalGetFirstChild(hWnd, TYPE_Any)
.head 6 -  ! Устанавливаем фонт детей окна
.head 6 +  While hWndObject != hWndNULL
.head 7 +  If NOT SalSendMsg(hWndObject, UM_NoFontChange, 0, 0)
.head 8 -  Set nObjectType = SalGetType(hWndObject)
.head 8 +  Select Case nObjectType
.head 9 -  Case TYPE_MultilineText
.head 9 +  Case TYPE_DataField
.head 10 +  If SalSendMsg(hWndObject, UM_IsFieldLabel, 0, 0)
.head 11 -  Call SalFontSet(hWndObject, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 10 +  Else
.head 11 -  Call SalFontSet(hWndObject, GetFontName(GetFontDataFields()), GetFontSize(GetFontDataFields()), GetFontEnhancement(GetFontDataFields()))
.head 10 -  Break
.head 9 -  Case TYPE_OptButton
.head 9 -  Case TYPE_RadioButton
.head 9 +  Case TYPE_PushButton
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontButtons()), GetFontSize(GetFontButtons()), GetFontEnhancement(GetFontButtons()))
.head 10 -  Break
.head 9 -  Case TYPE_ComboBox
.head 9 +  Case TYPE_ListBox
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontListBoxes()), GetFontSize(GetFontListBoxes()), GetFontEnhancement(GetFontListBoxes()))
.head 10 -  Break
.head 9 +  Case TYPE_TableColumn
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 10 -  Break
.head 9 -  Case TYPE_ChildTable
.head 9 +  Case TYPE_TableWindow
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 10 -  Call SetWindowFont(hWndObject)
.head 10 -  Break
.head 9 -  Case TYPE_DialogBox
.head 9 -  Case TYPE_FormWindow
.head 9 +  Case TYPE_MDIWindow
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 10 -  Call SetWindowFont(hWndObject)
.head 10 -  Break
.head 9 +  Default
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 10 -  Break
.head 7 -  Set hWndObject=SalGetNextChild(hWndObject, TYPE_Any)
.head 6 -  ! Устанавливаем фонт ToolTip'ов
.head 6 -  Call XSalTooltipSetFont( VisFontLoad(
  GetFontName(GetFontGeneral()),
  GetFontSize(GetFontGeneral()),
  GetFontEnhancement(GetFontGeneral()) ) )
.head 5 +  Else
.head 6 -  Call XSalTooltipSetFont( VisFontLoad(
  "MS Sans Serif", 8, FONT_EnhDefault) )
.head 3 +  Function: SetWindowFontEx		! __exported
.head 4 -  Description: с назначеным типом
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWnd
.head 5 -  Number: nWndType
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Window Handle: hWndObject
.head 5 -  Number: nObjectType
.head 4 +  Actions
.head 5 +  If UseCustomFonts()
.head 6 +  If NOT SalSendMsg(hWnd, UM_NoFontChange, 0, 0)
.head 7 +  Select Case nWndType
.head 8 -  Case TYPE_MultilineText
.head 8 +  Case TYPE_DataField
.head 9 +  If SalSendMsg(hWnd, UM_IsFieldLabel, 0, 0)
.head 10 -  Call SalFontSet(hWndObject, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 9 +  Else
.head 10 -  Call SalFontSet(hWnd, GetFontName(GetFontDataFields()), GetFontSize(GetFontDataFields()), GetFontEnhancement(GetFontDataFields()))
.head 9 -  Break
.head 8 -  Case TYPE_OptButton
.head 8 -  Case TYPE_RadioButton
.head 8 +  Case TYPE_PushButton
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontButtons()), GetFontSize(GetFontButtons()), GetFontEnhancement(GetFontButtons()))
.head 9 -  Break
.head 8 -  Case TYPE_ComboBox
.head 8 +  Case TYPE_ListBox
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontListBoxes()), GetFontSize(GetFontListBoxes()), GetFontEnhancement(GetFontListBoxes()))
.head 9 -  Break
.head 8 +  Case TYPE_TableColumn
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 9 -  Break
.head 8 -  Case TYPE_ChildTable
.head 8 +  Case TYPE_TableWindow
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontTables()), GetFontSize(GetFontTables()), GetFontEnhancement(GetFontTables()))
.head 9 -  Call SetWindowFont(hWnd)
.head 9 -  Break
.head 8 -  Case TYPE_DialogBox
.head 8 -  Case TYPE_FormWindow
.head 8 +  Case TYPE_MDIWindow
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 9 -  Call SetWindowFont(hWnd)
.head 9 -  Break
.head 8 +  Default
.head 9 -  Call SalFontSet(hWnd, GetFontName(GetFontGeneral()), GetFontSize(GetFontGeneral()), GetFontEnhancement(GetFontGeneral()))
.head 9 -  Break
.head 6 +  Else
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 -  Return FALSE
.head 3 +  Function: SetWindowFullSize		! __exported
.head 4 -  Description: Установить максимальный размер окна в пределах
материнского
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWindow
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nX0
.head 5 -  Number: nX1
.head 5 -  Number: nY0
.head 5 -  Number: nY1
.head 4 +  Actions
.head 5 +  If SalParentWindow(hWindow) = hWndNULL OR SalGetWindowState(hWindow) = Window_Minimized
.head 6 -  Return FALSE
.head 5 -  Call GetClientRect(SalParentWindow(hWindow), nX0, nY0, nX1, nY1)
.head 5 -  Call SalSetWindowLoc(hWindow, 
	SalPixelsToFormUnits(SalParentWindow(hWindow), nX0, FALSE), 
	SalPixelsToFormUnits(SalParentWindow(hWindow), nY0, TRUE))
.head 5 -  Call SalSetWindowSize(hWindow, 
	SalPixelsToFormUnits(hWindow, nX1-nX0-5, FALSE), 
	SalPixelsToFormUnits(hWindow, nY1-nY0-30, TRUE))
.head 5 -  ! Call XSalSetWindowPosAndSize( hWindow, nX0, nY0, nX1-nX0, nY1-nY0 )
.head 5 -  Return TRUE
.head 3 +  Function: PutCrLf			! __exported
.head 4 -  Description: Возвращает последовательность символов
возврата каретки и перевода строки
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Return SalNumberToChar(13) || SalNumberToChar(10)
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: PutLf				! __exported
.head 4 -  Description: Возвращает последовательность символов
перевода строки
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Return SalNumberToChar(10)
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 -  !
.head 3 +  Function: GetIdRnk      		! __exported
.head 4 -  Description: Получить код клиента - пользователя АБС
.head 4 +  Returns
.head 5 -  Number:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  Number: nRnk
.head 5 -  Number: nId
.head 4 +  Actions
.head 5 -  Set nId=GetUserId()
.head 5 -  Call SqlPrepareAndExecute(hSql(), 
T('SELECT rnk FROM staff_rnk INTO :nRnk WHERE id=:nId'))
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  Return nRnk
.head 3 -  !
.head 3 +  Function: GetLcv			! __exported
.head 4 -  Description: Получить литерный код валюты
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nKv
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  String: strLcv
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSql(), T('
       SELECT lcv
       FROM tabval
       INTO :strLcv
       WHERE kv=:nKv'))
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  Return strLcv
.head 3 +  Function: GetKv				! __exported
.head 4 -  Description: Получить числовой код валюты
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: sLcv
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  Number: nKv
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSql(), T('
       SELECT kv
       FROM tabval
       INTO :nKv
       WHERE lcv=:sLcv'))
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  Return nKv
.head 3 +  Function: GetUnitVal			! __exported
.head 4 -  Description: Получить единицы валюты
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nKv
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  String: strUnit
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Call SqlPrepareAndExecute(hSql(), T('SELECT unit FROM Tabval INTO :strUnit WHERE kv=:nKv'))
.head 5 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  !
.head 5 -  Return strUnit
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: GetEQVal			! __exported
.head 4 -  Description: Возвращает эквивалент валюты на нужную дату
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nKv
.head 5 -  Date/Time: dtRateDate
.head 5 -  Number: nNominal
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Date/Time: dtFixedDate
.head 5 -  Number: nValue
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Set dtFixedDate=SalDateConstruct(SalDateYear(dtRateDate), SalDateMonth(dtRateDate), SalDateDay(dtRateDate), 0, 0, 0)
.head 5 -  !
.head 5 -  ! Call SqlRetrieve (hSql(), 'GL.p_icurval', ' :nKv, :nNominal, :dtFixedDate, 0, 1', ':nValue')
.head 5 +  If SqlPrepareAndExecute (hSql(), 'SELECT GL.p_icurval(:nKv, :nNominal, :dtFixedDate) INTO :nValue FROM DUAL')
.head 6 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 5 -  !
.head 5 +  If nValue < 0 OR nValue = NUMBER_Null
.head 6 -  Return -1
.head 5 +  Else
.head 6 -  Return nValue
.head 3 +  Function: GetEQTurn			! __exported
.head 4 -  Description: Вычисляет экв оборотов с учетом изменения курса
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nKv		! Код валюты
.head 5 -  Date/Time: dtDate		! Дата
.head 5 -  Number: nIS		! Исходящее сальдо
.head 5 -  Number: nDOS		! Обороты Дебет
.head 5 -  Number: nKOS		! Обороты Кредит
.head 5 -  ! !
.head 5 -  Receive Number: nNIS	! Исходящее сальдо	(экв) возвращаемое
.head 5 -  Receive Number: nNDOS	! Обороты Дебет	(экв) возвращаемое
.head 5 -  Receive Number: nNKOS	! Обороты Кредит 	(экв) возвращаемое
.head 5 -  Receive Number: nNVS	! Входящий остаток 	(экв) возвращаемое
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nVS
.head 5 -  Number: nDelta
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Set nVS   = nIS+nDOS-nKOS
.head 5 -  Set nNVS  = GetEQVal(nKv, dtDate-1, nVS)
.head 5 -  Set nNDOS = GetEQVal(nKv, dtDate, nDOS)
.head 5 -  Set nNKOS = GetEQVal(nKv, dtDate, nKOS)
.head 5 -  Set nNIS  = GetEQVal(nKv, dtDate, nIS)
.head 5 -  !
.head 5 -  Set nDelta = nNIS-nNVS-nNDOS+nNKOS
.head 5 -  !
.head 5 +  If nDelta > 0
.head 6 -  Set nNKOS = nNKOS + nDelta
.head 5 +  Else
.head 6 -  Set nNDOS = nNDOS - nDelta
.head 5 -  !
.head 5 -  Return TRUE
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: GetDigVal			! __exported
.head 4 -  Description: Получить размерность валюты
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: nKv
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nDig
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSqlAux(), T('
       SELECT dig
       FROM Tabval
       INTO :nDig
       WHERE kv=:nKv'))
.head 5 +  If not SqlFetchNext(hSqlAux(), nFetchRes)
.head 6 -  Set nDig = -1
.head 6 -  Call SalMessageBox(
      'Неопределено значение размерность валюты '
      || SalNumberToStrX(nKv, 0) ||
      ' в справочнике TABVAL', 'Внимание!',
      MB_IconAsterisk | MB_Ok)
.head 5 -  Return nDig
.head 3 -  !
.head 3 +  Function: NumberToStr			! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nValue
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalNumberToStrX(nValue, 0)
.head 3 +  Function: NumberToHexSX			! __exported
.head 4 -  Description: Преобразует число в строку шестнадцетиричных
кодов
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strHex
.head 5 -  Number: nRmd
.head 5 -  Number: nDvd
.head 4 +  Actions
.head 5 -  Set nDvd = nNumber
.head 5 -  Set nRmd = 0
.head 5 -  Set strHex = ''
.head 5 +  Loop
.head 6 +  If nDvd = 0
.head 7 -  Break
.head 6 -  Set nRmd = SalNumberMod(nDvd, 16)
.head 6 -  Set nDvd = SalNumberTruncate(nDvd / 16, 10, 0)
.head 6 +  If nRmd < 10
.head 7 -  Set strHex =  SalNumberToChar(nRmd+48) || strHex
.head 6 +  Else
.head 7 -  Set strHex = SalNumberToChar(nRmd+55) || strHex
.head 5 +  If SalNumberMod(SalStrLength(strHex), 2) != 0
.head 6 -  Set strHex = '0' || strHex
.head 5 -  Return strHex
.head 3 +  Function: NumberToHexSX36	        ! __exported
.head 4 -  Description: Преобразует число в строку 36ричных
кодов
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nNumber
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strHex
.head 5 -  Number: nRmd
.head 5 -  Number: nDvd
.head 4 +  Actions
.head 5 -  Set nDvd = nNumber
.head 5 -  Set nRmd = 0
.head 5 -  Set strHex = ''
.head 5 +  Loop
.head 6 +  If nDvd = 0
.head 7 -  Break
.head 6 -  Set nRmd = SalNumberMod(nDvd, 36)
.head 6 -  Set nDvd = SalNumberTruncate(nDvd / 36, 10, 0)
.head 6 +  If nRmd < 10
.head 7 -  Set strHex =  SalNumberToChar(nRmd+48) || strHex
.head 6 +  Else
.head 7 -  Set strHex = SalNumberToChar(nRmd+55) || strHex
.head 5 +  If SalNumberMod(SalStrLength(strHex), 2) != 0
.head 6 -  Set strHex = '0' || strHex
.head 5 -  Return strHex
.head 3 +  Function: HexSToNumber			! __exported
.head 4 -  Description: Преобразует строку шестнадцетиричных кодов
в число (Dec)
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: strHex
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strHexT
.head 5 -  String: strChar
.head 5 -  Number: nPow
.head 5 -  Number: nBit
.head 5 -  Number: nRet
.head 5 -  Number: nDig
.head 4 +  Actions
.head 5 -  Set strHexT = SalStrUpperX(SalStrTrimX(strHex))
.head 5 -  Set nPow = 0
.head 5 -  Set nRet = 0
.head 5 +  While strHexT != ''
.head 6 -  Set strChar = SalStrRightX(strHexT, 1)
.head 6 -  Set strHexT = SalStrLeftX(strHexT, SalStrLength(strHexT)-1)
.head 6 -  Set nDig = SalStrLop(strChar)
.head 6 +  If nDig <=57
.head 7 -  Set nBit = nDig - 48
.head 6 +  Else
.head 7 -  Set nBit = nDig - 55
.head 6 -  Set nRet = nRet + nBit * SalNumberPower(16, nPow)
.head 6 -  Set nPow = nPow + 1
.head 5 -  Return nRet
.head 3 +  Function: HexSToNumber36		! __exported
.head 4 -  Description: Преобразует строку 36ричных кодов
в число (Dec)
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  String: strHex
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strHexT
.head 5 -  String: strChar
.head 5 -  Number: nPow
.head 5 -  Number: nBit
.head 5 -  Number: nRet
.head 5 -  Number: nDig
.head 4 +  Actions
.head 5 -  Set strHexT = SalStrUpperX(SalStrTrimX(strHex))
.head 5 -  Set nPow = 0
.head 5 -  Set nRet = 0
.head 5 +  While strHexT != ''
.head 6 -  Set strChar = SalStrRightX(strHexT, 1)
.head 6 -  Set strHexT = SalStrLeftX(strHexT, SalStrLength(strHexT)-1)
.head 6 -  Set nDig = SalStrLop(strChar)
.head 6 +  If nDig <=57
.head 7 -  Set nBit = nDig - 48
.head 6 +  Else
.head 7 -  Set nBit = nDig - 55
.head 6 -  Set nRet = nRet + nBit * SalNumberPower(36, nPow)
.head 6 -  Set nPow = nPow + 1
.head 5 -  Return nRet
.head 3 +  ! Function: SumPr				! __exported
.head 4 -          Description: Получение суммы прописью
.head 4 +          Returns 
.head 5 -          String: ss
.head 4 +          Parameters 
.head 5 -          Number: S
.head 5 -          String: Rd
.head 5 -          String: Krb
.head 5 -          String: Kop
.head 4 -          Static Variables 
.head 4 +          Local variables 
.head 5 -  ! ////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -          Number: nFetchRes
.head 5 -          Number: nRc
.head 5 -  !
.head 5 -          String: SumP
.head 5 -          String: QQa
.head 5 -          String: sKop
.head 5 -          Number: QQs
.head 5 -          String: SSs
.head 5 -          Number: QQd
.head 5 -          String: SSd
.head 5 -          Number: QQc
.head 5 -          Number: QQt
.head 5 -          String: SSt
.head 5 -          Number: exp
.head 5 -          Number: i
.head 5 -          String: lRd
.head 5 -          String: lDes
.head 5 -  !
.head 5 -  ! ////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 +          Actions 
.head 5 -  ! Максимальное обрабатываемое значение:
  999 триллионов 999 миллиардов 999 миллионов
  999 тысяч 999.99
.head 5 -          Set QQa  = SalFmtFormatNumber(S,'00000000000000000')
.head 5 -          Set SumP = SummInWords(QQa, Rd, Krb, Kop)
.head 5 +          If SumP = STRING_Null
.head 6 -          Set SSt = ''
.head 6 -          Set QQt = 0
.head 6 -          Set exp = 12
.head 6 -          Set i = 0
.head 6 -  !
.head 6 +          While i < 5
.head 7 -          Set QQt = QQt + SalStrToNumber(SalStrMidX(QQa, i*3, 3))
.head 7 -          Set QQs = SalStrToNumber(SalStrMidX(QQa, i*3, 1))
.head 7 -          Set QQd = SalStrToNumber(SalStrMidX(QQa, i*3+1, 2))
.head 7 -          Set QQc = QQd
.head 7 -  ! Определяем род квалификатора (M/F)
.head 7 +          Select Case i
.head 8 +          Case 0
.head 9 -          Set lRd = 'M'
.head 9 -          Break 
.head 8 +          Case 1
.head 9 -          Set lRd = 'M'
.head 9 -          Break 
.head 8 +          Case 2
.head 9 -          Set lRd = 'M'
.head 9 -          Break 
.head 8 +          Case 3
.head 9 -          Set lRd = 'F'
.head 9 -          Break 
.head 8 +          Case 4
.head 9 -          Set lRd = Rd
.head 7 -  ! Обрабатываем СОТНИ
.head 7 +          If QQs >0
.head 8 +          If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSs WHERE
   i=:QQs and e=2 and rod=:lRd'))
.head 9 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -          Set SSt = SSt || SSs || ' '
.head 7 -  ! Обрабатываем ДЕСЯТКИ
.head 7 +          If QQd >19
.head 8 -          Set nRc = SalNumberTruncate(QQd/10, 1, 0)
.head 8 +          If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:nRc and e=1 and rod= :lRd'))
.head 9 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -          Set SSt = SSt || SSd || ' '
.head 9 -          Set QQc = SalNumberMod(QQd, 10)
.head 7 -  ! Обрабатываем ЕДИНИЦЫ
.head 7 +          If QQc >0
.head 8 +          If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:QQc and e=0 and rod=:lRd'))
.head 9 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -          Set SSt = SSt || SSd || ' '
.head 7 -  ! добавляем квалификатор ("тысяч", "миллионов" ...)
.head 7 +          If i < 4 AND QQs+QQd+QQc > 0
.head 8 +          If QQc = 1
.head 9 -          Set lDes='des2'
.head 8 +          Else If QQc < 5 and QQc != 0
.head 9 -          Set lDes='des3'
.head 8 +          Else 
.head 9 -          Set lDes='des'
.head 8 +          If SqlPrepareAndExecute(hSql(), T("SELECT " ||
   lDes || " FROM Sumpr  INTO :SSd WHERE
   i=1 and e=:exp and rod= :lRd"))
.head 9 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -          Set SSt = SSt || SSd || ' '
.head 7 -          Set i=i+1
.head 7 -          Set exp = exp - 3
.head 6 -  !
.head 6 -  ! Обработка НУЛЯ
.head 6 +          If QQt = 0
.head 7 +          If SqlPrepareAndExecute(hSql(), T("SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:QQd and e=0 and rod= :Rd"))
.head 8 -          Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -          Set SSt = SSt || SSd || ' '
.head 6 -  !
.head 6 -          Set sKop= SalFmtFormatNumber(SalNumberMod(S, 100), '00') || ' ' || Kop
.head 6 -          Call SalStrReplaceX(SSt, 0, 1, SalStrUpperX(SalStrLeftX(SSt, 1)))
.head 6 -          Set SumP = SalStrUpperX(SalStrLeftX(SSt, 1)) ||
      SalStrRightX(SSt, SalStrLength(SSt)-1) || ' ' || Krb ||
      ' '  || sKop
.head 5 -          Return SalStrTrimX(SumP)
.head 3 +  Function: SumPr                         ! __exported
.head 4 -  Description: Получение суммы прописью
.head 4 +  Returns
.head 5 -  String: ss
.head 4 +  Parameters
.head 5 -  Number: S
.head 5 -  String: Rd
.head 5 -  String: Krb
.head 5 -  String: Kop
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! ////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 5 -  Number: nRc
.head 5 -  !
.head 5 -  String: SumP
.head 5 -  String: QQa
.head 5 -  String: sKop
.head 5 -  Number: QQs
.head 5 -  String: SSs
.head 5 -  Number: QQd
.head 5 -  String: SSd
.head 5 -  Number: QQc
.head 5 -  Number: QQt
.head 5 -  String: SSt
.head 5 -  Number: exp
.head 5 -  Number: i
.head 5 -  String: lRd
.head 5 -  String: lDes
.head 5 -  !
.head 5 -  Number: nDig
.head 5 -  ! ////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 +  Actions
.head 5 -  ! Максимальное обрабатываемое значение:
  999 триллионов 999 миллиардов 999 миллионов
  999 тысяч 999.99
.head 5 -  ! вычисляем dig
.head 5 +  If not SqlPrepareAndExecute( hSql(), '
   SELECT dig INTO :nDig FROM tabval
   WHERE lcv=Upper(:Krb) ' ) or not SqlFetchNext( hSql(), nFetchRes )
.head 6 -  Set nDig=2
.head 5 -  ! By Eve
.head 5 -  ! Функции в DLL передается просто строка суммы и она должна знать количество знаков
после запятой в числе - поэтому сумма передается дробной и форматируется с дес. точкой
.head 5 -  Set QQa  = SalFmtFormatNumber(
  S/SalNumberPower( 10, nDig ),
  SalStrRepeatX( '###', 5 ) || '.' || SalStrRepeatX( '0', nDig ))
.head 5 -  Set SumP = SummInWords(QQa, Rd, Krb, Kop)
.head 5 -  Set QQa  = SalFmtFormatNumber(S,SalStrRepeatX( '000', 5 )||SalStrRepeatX( '0', nDig ))
.head 5 +  If SumP = STRING_Null
.head 6 -  Set SSt = ''
.head 6 -  Set QQt = 0
.head 6 -  Set exp = 12
.head 6 -  Set i = 0
.head 6 -  !
.head 6 +  While i < 5
.head 7 -  Set QQt = QQt + SalStrToNumber(SalStrMidX(QQa, i*3, 3))
.head 7 -  Set QQs = SalStrToNumber(SalStrMidX(QQa, i*3, 1))
.head 7 -  Set QQd = SalStrToNumber(SalStrMidX(QQa, i*3+1, 2))
.head 7 -  Set QQc = QQd
.head 7 -  ! Определяем род квалификатора (M/F)
.head 7 +  Select Case i
.head 8 +  Case 0
.head 9 -  Set lRd = 'M'
.head 9 -  Break
.head 8 +  Case 1
.head 9 -  Set lRd = 'M'
.head 9 -  Break
.head 8 +  Case 2
.head 9 -  Set lRd = 'M'
.head 9 -  Break
.head 8 +  Case 3
.head 9 -  Set lRd = 'F'
.head 9 -  Break
.head 8 +  Case 4
.head 9 -  Set lRd = Rd
.head 7 -  ! Обрабатываем СОТНИ
.head 7 +  If QQs >0
.head 8 +  If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSs
   WHERE i=:QQs and e=2 and rod=:lRd'))
.head 9 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set SSt = SSt || SSs || ' '
.head 7 -  ! Обрабатываем ДЕСЯТКИ
.head 7 +  If QQd >19
.head 8 -  Set nRc = SalNumberTruncate(QQd/10, 1, 0)
.head 8 +  If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:nRc and e=1 and rod= :lRd'))
.head 9 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set SSt = SSt || SSd || ' '
.head 9 -  Set QQc = SalNumberMod(QQd, 10)
.head 7 -  ! Обрабатываем ЕДИНИЦЫ
.head 7 +  If QQc >0
.head 8 +  If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:QQc and e=0 and rod=:lRd'))
.head 9 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set SSt = SSt || SSd || ' '
.head 7 -  ! добавляем квалификатор ("тысяч", "миллионов" ...)
.head 7 +  If i < 4 AND QQs+QQd+QQc > 0
.head 8 +  If QQc = 1
.head 9 -  Set lDes='des2'
.head 8 +  Else If QQc < 5 and QQc != 0
.head 9 -  Set lDes='des3'
.head 8 +  Else
.head 9 -  Set lDes='des'
.head 8 +  If SqlPrepareAndExecute(hSql(), T("SELECT " ||
   lDes || " FROM Sumpr  INTO :SSd WHERE
   i=1 and e=:exp and rod= :lRd"))
.head 9 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set SSt = SSt || SSd || ' '
.head 7 -  Set i=i+1
.head 7 -  Set exp = exp - 3
.head 6 -  !
.head 6 -  ! Обработка НУЛЯ
.head 6 +  If QQt = 0
.head 7 +  If SqlPrepareAndExecute(hSql(), T("SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:QQd and e=0 and rod= :Rd"))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set SSt = SSt || SSd || ' '
.head 6 -  !
.head 6 -  ! Вставляем обязательные точки после названий нацвалюты.
.head 6 +  If SalStrUpperX( Krb ) = 'ГРН' and SalStrScan( Krb, '.' ) = -1
.head 7 -  Set Krb = Krb || '.'
.head 6 +  If SalStrUpperX( Kop ) = 'КОП' and SalStrScan( Kop, '.' ) = -1
.head 7 -  Set Kop = Kop || '.'
.head 6 -  !
.head 6 -  Set sKop= SalFmtFormatNumber(SalNumberMod(S, SalNumberPower( 10, nDig )), SalStrRepeatX('0',nDig)) || ' ' || Kop
.head 6 -  Call SalStrReplaceX(SSt, 0, 1, SalStrUpperX(SalStrLeftX(SSt, 1)))
.head 6 -  Set SumP = SalStrUpperX(SalStrLeftX(SSt, 1)) ||
      SalStrRightX(SSt, SalStrLength(SSt)-1) || ' ' || Krb ||
      ' '  || sKop
.head 5 -  Return SalStrTrimX(SumP)
.head 3 +  Function: NumberPr                      ! __exported
.head 4 -  Description: Получение целого числа прописью
(переделано Иваном)
.head 4 +  Returns
.head 5 -  String: ss
.head 4 +  Parameters
.head 5 -  Number: S
.head 5 -  String: Rd
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! ////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 5 -  Number: nRc
.head 5 -  !
.head 5 -  String: SumP
.head 5 -  String: QQa
.head 5 -  String: sKop
.head 5 -  Number: QQs
.head 5 -  String: SSs
.head 5 -  Number: QQd
.head 5 -  String: SSd
.head 5 -  Number: QQc
.head 5 -  Number: QQt
.head 5 -  String: SSt
.head 5 -  Number: exp
.head 5 -  Number: i
.head 5 -  String: lRd
.head 5 -  String: lDes
.head 5 -  !
.head 5 -  Number: nDig
.head 5 -  ! ////////////////////////////////////////////////////////////////////////////////////////////////
.head 4 +  Actions
.head 5 -  ! Максимальное обрабатываемое значение:
  999 триллионов 999 миллиардов 999 миллионов
  999 тысяч 999
.head 5 -  Set S=SalNumberRound( S ) *100
.head 5 -  ! вычисляем dig
.head 5 -  Set nDig=2
.head 5 -  Set QQa  = SalFmtFormatNumber(S,SalStrRepeatX( '000', 5 )||SalStrRepeatX( '0', nDig ))
.head 5 -  Set SSt = ''
.head 5 -  Set QQt = 0
.head 5 -  Set exp = 12
.head 5 -  Set i = 0
.head 5 -  !
.head 5 +  While i < 5
.head 6 -  Set QQt = QQt + SalStrToNumber(SalStrMidX(QQa, i*3, 3))
.head 6 -  Set QQs = SalStrToNumber(SalStrMidX(QQa, i*3, 1))
.head 6 -  Set QQd = SalStrToNumber(SalStrMidX(QQa, i*3+1, 2))
.head 6 -  Set QQc = QQd
.head 6 -  ! Определяем род квалификатора (M/F)
.head 6 +  Select Case i
.head 7 +  Case 0
.head 8 -  Set lRd = 'M'
.head 8 -  Break
.head 7 +  Case 1
.head 8 -  Set lRd = 'M'
.head 8 -  Break
.head 7 +  Case 2
.head 8 -  Set lRd = 'M'
.head 8 -  Break
.head 7 +  Case 3
.head 8 -  Set lRd = 'F'
.head 8 -  Break
.head 7 +  Case 4
.head 8 -  Set lRd = Rd
.head 6 -  ! Обрабатываем СОТНИ
.head 6 +  If QQs >0
.head 7 +  If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSs
   WHERE i=:QQs and e=2 and rod=:lRd'))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set SSt = SSt || SSs || ' '
.head 6 -  ! Обрабатываем ДЕСЯТКИ
.head 6 +  If QQd >19
.head 7 -  Set nRc = SalNumberTruncate(QQd/10, 1, 0)
.head 7 +  If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:nRc and e=1 and rod= :lRd'))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set SSt = SSt || SSd || ' '
.head 8 -  Set QQc = SalNumberMod(QQd, 10)
.head 6 -  ! Обрабатываем ЕДИНИЦЫ
.head 6 +  If QQc >0
.head 7 +  If SqlPrepareAndExecute(hSql(), T('SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:QQc and e=0 and rod=:lRd'))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set SSt = SSt || SSd || ' '
.head 6 -  ! добавляем квалификатор ("тысяч", "миллионов" ...)
.head 6 +  If i < 4 AND QQs+QQd+QQc > 0
.head 7 +  If QQc = 1
.head 8 -  Set lDes='des2'
.head 7 +  Else If QQc < 5 and QQc != 0
.head 8 -  Set lDes='des3'
.head 7 +  Else
.head 8 -  Set lDes='des'
.head 7 +  If SqlPrepareAndExecute(hSql(), T("SELECT " ||
   lDes || " FROM Sumpr  INTO :SSd WHERE
   i=1 and e=:exp and rod= :lRd"))
.head 8 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set SSt = SSt || SSd || ' '
.head 6 -  Set i=i+1
.head 6 -  Set exp = exp - 3
.head 5 -  !
.head 5 -  ! Обработка НУЛЯ
.head 5 +  If QQt = 0
.head 6 +  If SqlPrepareAndExecute(hSql(), T("SELECT des
   FROM Sumpr  INTO :SSd WHERE
   i=:QQd and e=0 and rod= :Rd"))
.head 7 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Set SSt = SSt || SSd || ' '
.head 5 -  !
.head 5 -  Call SalStrReplaceX(SSt, 0, 1, SalStrUpperX(SalStrLeftX(SSt, 1)))
.head 5 -  Set SumP = SSt
.head 5 -  Return SalStrTrimX(SumP)
.head 3 -  !
.head 3 +  Function: SetMapEnterToTab		! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Boolean: bValue
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalMapEnterToTab(GetGlobalOptionEx(CFG_TABENTER()))
.head 3 +  Function: StrMatches2Like		! __exported
.head 4 -  Description: Конвертировать маску поиска
в маску LIKE (ansi compatible)
.head 4 +  Returns
.head 5 -  String: szLikeMask
.head 4 +  Parameters
.head 5 -  String: szMatchMask
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nOffset
.head 5 -  String: szLikeMask
.head 4 +  Actions
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Set szLikeMask = szMatchMask
.head 5 -  Set nOffset = SalStrScan(szLikeMask, '*')
.head 5 +  While nOffset != -1
.head 6 -  Set szLikeMask = SalStrReplaceX(szLikeMask, nOffset, 1, '%')
.head 6 -  Set nOffset = SalStrScan(szLikeMask, '*')
.head 5 -  Set nOffset = SalStrScan(szLikeMask, '?')
.head 5 +  While nOffset != -1
.head 6 -  Set szLikeMask = SalStrReplaceX(szLikeMask, nOffset, 1, '_')
.head 6 -  Set nOffset = SalStrScan(szLikeMask, '?')
.head 5 -  Return szLikeMask
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: SetTblRowColor		! __exported
.head 4 -  Description: Устанавливает цвет текста контекстной _СТРОКИ_ таблицы
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTbl
.head 5 -  Number: nColor
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Window Handle: hWndCol
.head 5 -  Boolean: fRet
.head 4 +  Actions
.head 5 -  Set fRet = FALSE
.head 5 +  If hWndTbl != hWndNULL
.head 6 -  Set hWndCol = SalGetFirstChild(hWndTbl, TYPE_TableColumn)
.head 6 +  While hWndCol != hWndNULL
.head 7 -  Call SalTblSetCellTextColor(hWndCol, nColor, TRUE)
.head 7 -  Set hWndCol = SalGetNextChild(hWndCol, TYPE_TableColumn)
.head 6 -  Set fRet = TRUE
.head 5 -  Return fRet
.head 3 -  !
.head 3 +  Function: DopustMfo			! __exported
.head 4 -  Description: проверка МФО банка на допустимость
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sMfo
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFEcode
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSqlAux(), 'SELECT nb FROM banks WHERE mfo=:sMfo')
.head 5 -  Call SqlFetchNext(hSqlAux(), nFEcode)
.head 5 +  If nFEcode=0
.head 6 -  Return TRUE
.head 5 +  Else
.head 6 -  Return FALSE
.head 3 +  Function: GetSubstListId		! __exported
.head 4 -  Description: Получить список идентификаторв пользователей,
которых замещает текущий.
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nUserId
.head 5 -  Boolean: fAddOurId
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strList
.head 5 -  String: strNextId
.head 4 +  Actions
.head 5 -  Set strList = ''
.head 5 -  Call SqlPrepareAndExecute(hSqlAux(), 
'SELECT id_whom INTO :strNextId FROM staff_substitute 
 WHERE id_who=:nUserId AND date_is_valid(date_start, date_finish, NULL, NULL)=1')
.head 5 +  While SqlFetchNext(hSqlAux(), nFetchRes)
.head 6 +  If strList != ''
.head 7 -  Set strList = strList || ', '
.head 6 -  Set strList = strList || strNextId
.head 5 +  If fAddOurId
.head 6 +  If strList != ''
.head 7 -  Set strList = strList || ', '
.head 6 -  Set strList = strList || SalNumberToStrX(nUserId,0)
.head 5 -  Return strList
.head 3 -  !
.head 3 +  Function: CFG_ADMN			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'ADMN'
.head 3 +  Function: CFG_MFO			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'MFO'
.head 3 +  Function: CFG_MFOP			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'MFOP'
.head 3 +  Function: CFG_BANKNAME			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'NAME'
.head 3 +  Function: CFG_BANKOKPO			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'OKPO'
.head 3 +  Function: CFG_BANKDATE			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'BANKDATE'
.head 3 +  Function: CFG_ARCHDATE			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'ARCHDATE'
.head 3 +  Function: CFG_BANKDAY			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'RRPDAY'
.head 3 +  Function: CFG_RULESBLK			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'RULESBLK'
.head 3 +  Function: CFG_SOFTSIGN			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'SOFTSIGN'
.head 3 +  Function: CFG_RBDTTS			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'RBDTTS'
.head 3 +  Function: CFG_BASEVAL			! __exported
.head 4 -  Description: Возвращает значение константы глобального
параметра ...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'BASEVAL'
.head 3 +  Function: CFG_TABENTER			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'TABENTER'
.head 3 +  Function: CFG_PHONES			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'PHONES'
.head 3 +  Function: CFG_ADDRESS			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'ADDRESS'
.head 3 +  Function: CFG_KORRACC			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'KORRACC'
.head 3 +  Function: CFG_BOSS			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'BOSS'
.head 3 +  Function: CFG_ACCMAN			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'ACCMAN'
.head 3 +  Function: CFG_BICCODE			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'BICCODE'
.head 3 +  Function: CFG_NUMMODEL			! __exported
.head 4 -  Description: Возвращает значение константы глобального параметра...
.head 4 +  Returns
.head 5 -  String:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return 'NUMMODEL'
.head 3 -  !
.head 3 -  ! //  SQLAPI.APL - Функции
.head 3 -  !
.head 3 +  Function: SqlIsolationNormal		! __exported
.head 4 -  Description: Устанавливает уровень изоляции DIRTY READ
.head 4 +  Returns
.head 5 -  Boolean: fRetCode
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 +  When SqlError
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Return SqlPrepareAndExecute(hSqlHandle, 'SET ISOLATION TO DIRTY READ')
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: SqlIsolationExclusive		! __exported
.head 4 -  Description: Устанавливает уровень изоляции REPEATABLE READ
.head 4 +  Returns
.head 5 -  Boolean: fRetCode
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 +  When SqlError
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Return SqlPrepareAndExecute(hSqlHandle, T('SET ISOLATION TO REPEATABLE READ'))
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: SqlLockMode			! __exported
.head 4 -  Description: Установить время ожидания при блокировках записей таблиц
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 6 -  Return TRUE
.head 5 +  Else
.head 6 -  Return SqlPrepareAndExecute(hSqlHandle, T('SET LOCK MODE TO WAIT 30'))
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 -  !
.head 3 +  Function: SqlCommitEx			! __exported
.head 4 -  Description: Выполнить 'фиксацию' операции (COMMIT)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  String: strAuditMessage
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  !
.head 5 +  While TRUE
.head 6 +  When SqlError
.head 7 -  Call SaveInfoToLog('>>ERROR COMMIT. Операция: ' || strAuditMessage)
.head 7 -  Break
.head 6 -  !
.head 6 +  If NOT SqlCommit(hSqlHandle)
.head 7 -  Break
.head 6 -  !
.head 6 -  Call SaveInfoToLog('>> COMMIT. Операция: ' || strAuditMessage)
.head 6 -  !
.head 6 -  Return TRUE
.head 5 -  !
.head 5 -  Call SqlRollback(hSqlHandle)
.head 5 -  Return MessageError(MSG_ErrorCommit || ' Операция: ' || strAuditMessage)
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: SqlRollback			! __exported
.head 4 -  Description: Выполнить 'откат' операции (ROLLBACK)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 +  When SqlError
.head 6 -  Call MessageError(MSG_ErrorRollback)
.head 6 -  Call SalQuit()
.head 5 +  If not SqlPrepareAndExecute(hSqlHandle, 'RollBack')
.head 6 -  Call MessageError(MSG_ErrorRollback)
.head 6 -  Call SalQuit()
.head 5 -  ! Call SaveInfoToLog(
       '>> ROLLBACK. Ошибка выполнения SQL-оператора.')
.head 5 -  Return FALSE
.head 3 +  Function: SqlRollbackEx			! __exported
.head 4 -  Description: Выполнить 'откат' операции (ROLLBACK)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  String: strAuditMessage
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 +  When SqlError
.head 6 -  Call MessageError(MSG_ErrorRollback)
.head 6 -  Call SalQuit()
.head 5 +  If not SqlPrepareAndExecute(hSqlHandle, T('RollBack'))
.head 6 -  Call MessageError(MSG_ErrorRollback)
.head 6 -  Call SalQuit()
.head 5 -  Call SaveInfoToLog('>> ROLLBACK. Операция: ' ||
     strAuditMessage)
.head 5 -  Return FALSE
.head 3 -  !
.head 3 +  Function: SqlCheckErrorCodeEx		! __exported
.head 4 -  Description: Проверим коды ошибок для внешенго вызова
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nwParam
.head 5 -  Number: nlParam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Sql Handle: hSqlEr
.head 5 -  Number: nENum
.head 5 -  Number: nEPos
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Call SqlExtractArgs(nwParam, nlParam, hSqlEr, nENum, nEPos)
.head 5 -  ! Call SqlGetErrorText(nErrorNum, strErrorText)
.head 5 -  !
.head 5 -  ! Set strCurrentSql=SqlGetLastStatement()
.head 5 -  Call SqlRollback(hSqlEr)
.head 5 -  Call SqlIsolationNormal(hSqlEr)
.head 5 -  !
.head 5 -  Call SaveErrorToLog(SQL_ERROR || SalNumberToStrX(nENum, 0))
.head 5 -  !
.head 5 +  ! If nErrorNum=20206
.head 6 -                       Set strErrorAbs='Таблица, указанная в SQL-запросе не найдена в Базе данных! ' || GOTO_ADMIN
.head 6 -  ! Call MessageAttention('Таблица, указанная в SQL-запросе не найдена в Базе данных! ' || GOTO_ADMIN)
.head 6 -  ! Return FALSE
.head 5 +  If nENum=20243 Or nENum=20271 Or nENum=20346
.head 6 -  Call MessageAttention(RECORD_IS_LOCKED || ' Повторите, пожайлуста, операцию!')
.head 6 -  Return FALSE
.head 5 -  !
.head 5 +  If nENum=20211
.head 6 -  Call MessageAttention('Системная таблица SYSTABLES блокирована в монопольном режиме доступа другим процессом!')
.head 6 -  Return FALSE
.head 5 +  ! If nENum=20217
.head 6 -                       Set strErrorAbs='Имя поля таблицы, указанное в SQL-запросе, не найдено в таблице! ' || GOTO_DEVELOPER
.head 6 -  ! Call MessageAttention('Имя поля таблицы, указанное в SQL-запросе, не найдено в таблице! ' || GOTO_DEVELOPER)
.head 6 -  ! Return FALSE
.head 5 +  ! If nENum=20232
.head 6 -                       Set strErrorAbs='Поле таблицы типа SERIAL, указанное в SQL-запросе, не может быть изменено! ' || GOTO_DEVELOPER
.head 6 -  ! Call MessageAttention('Поле таблицы типа SERIAL, указанное в SQL-запросе, не может быть изменено! ' || GOTO_DEVELOPER)
.head 6 -  ! Return FALSE
.head 5 +  If nENum=20239
.head 6 -  Call MessageAttention('Попытка вернуть документ СЭП второй раз!')
.head 6 -  Return FALSE
.head 5 -  !
.head 5 +  ! If nENum=20268
.head 6 -                       Set strErrorAbs='Попытка сохранить в таблице новую запись с значением ключевого поля, которое уже есть в таблице!'
.head 6 -  ! Call MessageAttention('Попытка сохранить в таблице новую запись с значением ключевого поля, которое уже есть в таблице!')
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20272
.head 6 -                       Set strErrorAbs='Доступ к данным таблицы запрещен! ' || GOTO_ADMIN
.head 6 -  ! Call MessageAttention('Доступ к данным таблицы запрещен! ' || GOTO_ADMIN)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20273 Or nErrorNum=20274 Or nErrorNum=20275
.head 6 -                       Set strErrorAbs='У Вас нет прав на обновление/удаление/сохранение данных в таблице! ' || GOTO_ADMIN
.head 6 -  ! Call MessageAttention('У Вас нет прав на обновление/удаление/сохранение данных в таблице! ' || GOTO_ADMIN)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20309
.head 6 -                       Set strErrorAbs='Поле таблицы, указанное в ORDER BY, не выбранно в SQL-запросе! ' || GOTO_DEVELOPER
.head 6 -  ! Call MessageAttention('Поле таблицы, указанное в ORDER BY, не выбранно в SQL-запросе! ' || GOTO_DEVELOPER)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20329
.head 6 -                       Set strErrorAbs='База данных не найдена или Вам запрещен доступ к выбранной базе данных! ' || GOTO_ADMIN
.head 6 -  ! Call MessageAttention('База данных не найдена или Вам запрещен доступ к выбранной базе данных! ' || GOTO_ADMIN)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20391
.head 6 -                       Set strErrorAbs='Недопустимо сохранение NULL-значения в поле таблицы!'
.head 6 -  ! Call MessageAttention('Недопустимо сохранение NULL-значения в поле таблицы!')
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20608
.head 6 -          Set strErrorAbs='Ошибка преобразования данных типа BLOB ((yte, text ) другой тип данных! ' || GOTO_DEVELOPER
.head 6 -  ! Call MessageAttention('Ошибка преобразования данных типа BLOB (byte, text) в другой тип данных! ' || GOTO_DEVELOPER)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20618
.head 6 -                       Set strErrorAbs=NO_RIGHT_FOR_OPER || GOTO_ADMIN
.head 6 -  ! Call MessageAttention(NO_RIGHT_FOR_OPER || GOTO_ADMIN)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20691
.head 6 -                       Set strErrorAbs='Значение внешного ключевого поля таблицы не найдено в соответствующем справочнике!'
.head 6 -  ! Call MessageAttention('Значение внешного ключевого поля таблицы не найдено в соответствующем справочнике!')
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20692
.head 6 -                       Set strErrorAbs='Запись таблицы, помечанная на удаление, не может быть удалена! ' ||
                         'Существует ссылка на значение ключевого поля этой записи в другой таблице!'
.head 6 -  ! Call MessageAttention('Запись таблицы, помечанная на удаление, не может быть удалена! ' ||
                                     'Существует ссылка на значение ключевого поля этой записи в другой таблице!')
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=20703
.head 6 -                       Set strErrorAbs='Невозможно сохранить запись с NULL-значением в поле таблицы, которое является первичным ключем!'
.head 6 -  ! Call MessageAttention('Невозможно сохранить запись с NULL-значением в поле таблицы, которое является первичным ключем!')
.head 6 -  ! Return FALSE
.head 5 +  Else If nENum=20710
.head 6 -  Call MessageAttention('Обнаружено несоответствие описания таблиц Базы данных с системной Базой данных SYSMASTER! ' ||
                                     'Необходимо выполнить SQL-оператор UPDATE STATISTICS. ' || GOTO_ADMIN)
.head 6 -  Return FALSE
.head 5 +  Else If nENum=20951
.head 6 -  Call MessageAttention('Пользователь ' || GetUserLoginName() || ' неизвестен Серверу базы данных! ' || GOTO_ADMIN)
.head 6 -  Return FALSE
.head 5 -  !
.head 5 +  ! If nENum=104
.head 6 -                       Set strErrorAbs='Попытка получить значение не числового поля таблицы базы данных в числовое поле оконной таблицы!'
.head 6 -  ! Call MessageAttention('Попытка получить значение не числового поля таблицы базы данных в числовое поле оконной таблицы!')
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=113
.head 6 -                       Set strErrorAbs=NO_RIGHT_FOR_OPER || GOTO_ADMIN
.head 6 -  ! Call MessageAttention(NO_RIGHT_FOR_OPER || GOTO_ADMIN)
.head 6 -  ! Return FALSE
.head 5 +  ! Else If nENum=201
.head 6 -                       Set strErrorAbs='Ошибка синтаксиса SQL-запроса! ' || GOTO_DEVELOPER
.head 6 -  ! Call MessageAttention('Ошибка синтаксиса SQL-запроса! ' || GOTO_DEVELOPER)
.head 6 -  ! Return FALSE
.head 5 +  Else If nENum=202
.head 6 -  Return FALSE
.head 5 +  Else If nENum=203
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Return TRUE
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  ! 27001, 27002, 20908, 909
.head 3 -  !
.head 3 +  Function: ShowSqlError			! __exported
.head 4 -  Description: Показать диалог с SQL-ошибкой
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nwParam
.head 5 -  Number: nlParam
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Sql Handle: hSqlErrorHandle
.head 5 -  ! !
.head 5 -  Number: nErrorNum
.head 5 -  Number: nErrorPos
.head 5 -  ! !
.head 5 -  String: strCurrentSql
.head 5 -  String: strErrorText
.head 5 -  String: strErrorAbs
.head 5 -  !
.head 5 -  Boolean: fInProgress
.head 4 +  Actions
.head 5 +  If fInProgress
.head 6 -  Return FALSE
.head 5 -  Set fInProgress = TRUE
.head 5 -  Set strCurrentSql = SqlGetLastStatement()
.head 5 -  !
.head 5 -  Call SqlExtractArgs(nwParam, nlParam, hSqlErrorHandle, nErrorNum, nErrorPos)
.head 5 -  Set strErrorText = SqlGetErrorTextX (nErrorNum)
.head 5 -  !
.head 5 -  Call SaveErrorToLog(SQL_ERROR || SalNumberToStrX(nErrorNum, 0))
.head 5 -  !
.head 5 +  When SqlError
.head 6 -  Call MessageError(MSG_ErrorRollback)
.head 6 -  Call SalQuit()
.head 5 -  Call SqlRollback(hSqlErrorHandle)
.head 5 -  !
.head 5 -  Call SqlIsolationNormal(hSqlErrorHandle)
.head 5 -  !
.head 5 +  If Left(strErrorText, 23) != 'Invalid isolation level'
.head 6 -  Call SalModalDialog(dlg_SqlError, hWndForm, hSqlErrorHandle, nErrorNum, strErrorText, strCurrentSql, nErrorPos, '')
.head 5 -  !
.head 5 -  Set fInProgress = FALSE
.head 3 +  Function: GetLastSerial			! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Return nLastSerial
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 -  !
.head 3 +  Function: ExecuteParams			! __exported
.head 4 -  Description: Инициализация глобальных переменных используемых процедурами на сервере БД
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS())) = 'ORACLE'
.head 7 +  If not SqlPrepareAndExecute(hSql(),"begin gl.param; end;")
.head 8 -  Break
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(),
   "informix.params", '', '')
.head 8 -  Break
.head 7 +  If not SqlExecute(hSql())
.head 8 -  Break
.head 6 -  Return TRUE
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return FALSE
.head 3 +  Function: ExecuteBalans			! __exported
.head 4 -  Description: Вызов процедуры BALANS
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nRetCode
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If not SqlRetrieve(hSql(),
   "informix.balans", '', ':nRetCode')
.head 7 -  Break
.head 6 +  If not SqlExecute(hSql())
.head 7 -  Break
.head 6 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Break
.head 6 +  If nRetCode != 0
.head 7 -  Break
.head 6 -  Return TRUE
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return FALSE
.head 3 +  Function: ExecuteInDoc			! __exported
.head 4 -  Description: Вызов процедуры IN_DOC
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Receive Number: nRef
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If not SqlRetrieve(hSql(),
   "informix.in_doc", '', ':nRef')
.head 7 -  Break
.head 6 +  If not SqlExecute(hSql())
.head 7 -  Break
.head 6 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 7 -  Break
.head 6 +  If nRef = 0 Or nRef = NUMBER_Null
.head 7 -  Break
.head 6 -  Return TRUE
.head 5 -  Set nRef = NUMBER_Null
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return FALSE
.head 3 -  !
.head 3 -  ! // PRINTAPI.APL - Функции
.head 3 -  !
.head 3 +  Function: TablePrint			! __exported
.head 4 -  Description: Печатает содержимое таблицы в выбираемый формат:
Word, Excel, *.TXT, *.DBF
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable
.head 5 -  String: strTableHeader
.head 5 -  String: strFileName
.head 5 -  String: strSumColumn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nAT
.head 5 -  Number: nPrinterType
.head 5 -  Boolean: nRes
.head 5 -  Window Handle: hWndObject
.head 5 -  String: sColTypesTmp[*]
.head 5 -  String: sColTypes[*]
.head 5 -  Number: nColType
.head 5 -  Number: nPos
.head 5 -  Number: nCount
.head 5 -  Number: i
.head 5 -  Number: j
.head 4 +  Actions
.head 5 -  ! == старая версия == ! 
.head 5 -  Call SalUseRegistry(TRUE, INI_CompanyName)
.head 5 -  Set nPrinterType = SalGetProfileInt(INI_Print, 'SelectPrinter', 2, INI_ProductName)
.head 5 -  !
.head 5 +  If nPrinterType = 1
.head 6 -  Set nAT = PromptForAT(SalParentWindow(hWndTable))
.head 6 -  Set nRes = FALSE
.head 6 -  Call SalWaitCursor(TRUE)
.head 6 +  If nAT=1	! Word
.head 7 -  Call wrdExportTable(hWndTable, strTableHeader, strSumColumn)
.head 7 -  Set nRes = TRUE
.head 6 +  If nAT=2	! Excel
.head 7 -  Set nCount = 0
.head 7 -  Call SalArraySetUpperBound(sColTypesTmp, 1, -1)
.head 7 -  Set hWndObject = SalGetFirstChild(hWndTable, TYPE_TableColumn)
.head 7 +  While hWndObject != hWndNULL
.head 8 +  If SalIsWindowVisible(hWndObject)
.head 9 -  Set nPos = SalTblQueryColumnPos(hWndObject)
.head 9 -  Set nColType = SalGetDataType(hWndObject)
.head 9 -  Set sColTypesTmp[nPos-1] = 
    IifS(nColType=DT_Boolean or nColType=DT_Number, 'N', 
    IifS(nColType=DT_DateTime, 'D', 'S'))
.head 8 -  Set hWndObject = SalGetNextChild(hWndObject, TYPE_TableColumn)
.head 7 -  Call SalArrayGetUpperBound(sColTypesTmp, 1, nCount)
.head 7 -  Set i = 0
.head 7 -  Set j = 0
.head 7 +  While i <= nCount
.head 8 +  If sColTypesTmp[i] != STRING_Null
.head 9 -  Set sColTypes[j] = sColTypesTmp[i]
.head 9 -  Set j = j + 1
.head 8 -  Set i = i + 1
.head 7 -  Call xlsExportTable(hWndTable, strTableHeader, strSumColumn, sColTypes)
.head 7 -  Set nRes = TRUE
.head 6 +  If nAT=3	! Txt
.head 7 -  Set nRes = TableToTextEx(hWndTable, strTableHeader,'', strFileName, strSumColumn, FALSE)
.head 6 +  If nAT=4	! Txt&Print
.head 7 -  Set nRes = TableToTextEx(hWndTable, strTableHeader,'', strFileName, strSumColumn, TRUE)
.head 6 +  If nAT=5	! Dbf
.head 7 -  Set nRes =  TableToDBF(hWndTable, strTableHeader, strFileName, strSumColumn)
.head 6 -  Call SalWaitCursor(FALSE)
.head 5 -  ! == новая  версия == ! 
.head 5 +  Else
.head 6 -  Set nRes = ExportTable(hWndTable, strTableHeader, strFileName, strSumColumn)
.head 5 -  Return nRes
.head 3 +  Function: PromptForAT
.head 4 -  Description: Пазать диалоговое окно выбора типа целевого приложения
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Window Handle: hParentWin
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalModalDialog(dlgPrmptForAT, hParentWin)
.head 3 -  ! Не используется
.head 3 +  Function: TableToText			! __exported
.head 4 -  Description: Экспортирует содержимое таблицы в текстовый файл
Устарела - используйте TableToTextEx
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable
.head 5 -  Long String: strTableHeader
.head 5 -  Long String: strTableFooter
.head 5 -  String: strFileName
.head 5 -  String: strSumColumn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hOutFile
.head 5 -  !
.head 5 -  Boolean: fLineComplite
.head 5 -  Boolean: fLineFirst
.head 5 -  Window Handle: hWndChild
.head 5 -  String: strTmp
.head 5 -  String: strH
.head 5 -  String: strLineInLine[*, 10]
.head 5 -  !
.head 5 -  Number: nCnt
.head 5 -  Number: nLines
.head 5 -  Number: nl00
.head 5 -  Number: nCntSubLine
.head 5 -  Number: nWings
.head 5 -  !
.head 5 -  Number: nRow
.head 4 +  Actions
.head 5 -  Return TableToTextEx(hWndTable, strTableHeader, strTableFooter, strFileName, strSumColumn, FALSE )
.head 3 +  Function: TableToTextEx			! __exported
.head 4 -  Description: Экспортирует содержимое таблицы в текстовый файл
печать в файл управляется флагом
(by Ivan)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable
.head 5 -  Long String: strTableHeader
.head 5 -  Long String: strTableFooter
.head 5 -  String: strFileName
.head 5 -  String: strSumColumn
.head 5 -  Boolean: fImmediatePrint
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hOutFile
.head 5 -  !
.head 5 -  Boolean: fLineComplite
.head 5 -  Boolean: fLineFirst
.head 5 -  Window Handle: hWndChild
.head 5 -  String: strTmp
.head 5 -  String: strH
.head 5 -  String: strLineInLine[*, 10]
.head 5 -  !
.head 5 -  Number: nCnt
.head 5 -  Number: nLines
.head 5 -  Number: nl00
.head 5 -  Number: nCntSubLine
.head 5 -  Number: nWings
.head 5 -  !
.head 5 -  Number: nRow
.head 5 -  Number: nFileCreationFlag
.head 4 +  Actions
.head 5 +  If hWndTable = hWndNULL
.head 6 -  Return FALSE
.head 5 -  Set nColumns = 1
.head 5 -  Set nCnt = 0
.head 5 -  Set nFileCreationFlag = OF_Create
.head 5 -  ! Заполняем массив информации о колонках
.head 5 -  Set hWndChild = SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 +  While hWndChild != hWndNULL
.head 6 +  If SalIsWindowVisible(hWndChild)
.head 7 -  Call SalTblGetColumnTitle(hWndChild, strColumnHeader[nCnt], 254)
.head 7 -  Set strColumnHeader[nCnt] = StrPlain( SalStrTrimX(strColumnHeader[nCnt]))
.head 7 -  Call SalTblQueryColumnWidth(hWndChild, nColumnWidth[nCnt])
.head 7 -  Set nColumnWidth[nCnt] = SalNumberRound(nColumnWidth[nCnt]*CPI_RATIO)
.head 7 -  Set nColumnID[nCnt] = SalTblQueryColumnID(hWndChild)
.head 7 -  Set bColumnSum[nCnt] = SalStrScan(strSumColumn || ',', SalNumberToStrX(nColumnID[nCnt], 0) || ',') != -1
.head 7 +  If SalTblQueryColumnFlags( hWndChild, COL_RightJustify )
.head 8 -  Set nColumnJustify[nCnt] = 2
.head 7 +  Else If SalTblQueryColumnFlags ( hWndChild, COL_CenterJustify )
.head 8 -  Set nColumnJustify[nCnt] = 1
.head 7 +  Else
.head 8 -  Set nColumnJustify[nCnt] = 0
.head 7 -  Set nCnt = nCnt + 1
.head 6 -  Set nColumns = nColumns + 1
.head 6 -  Set hWndChild = SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 -  Set nColumns = nCnt
.head 5 +  If strFileName = ''
.head 6 -  Set strFileName = GetPrnDir() || '\\ld'  !! префикс ld - список документов СЭП
.head 6 -  Set strFileName = strFileName || SalFmtFormatDateTime(
    SalDateCurrent() ,'hhhmmss') || '.D' ||
    SalStrRightX('0' || SalNumberToStrX(SalDateDay(
    SalDateCurrent()), 0), 2)
.head 5 +  If SalStrLeftX( strFileName, 1 ) = '>'
.head 6 -  Set strFileName = SalStrMidX( strFileName, 1, SalStrLength( strFileName )-1)
.head 6 -  Set nFileCreationFlag = OF_Append
.head 5 -  ! Открываем выходной файл отчета
.head 5 +  If not SalFileOpen(hOutFile, strFileName, nFileCreationFlag | OF_Text | OF_Write)
.head 6 -  Return MessageError('Невозможно создать файл отчета '
       || strFileName)
.head 5 -  ! Формируем время и место формирования отчета
.head 5 -  Call SalFilePutStr(hOutFile, GetBankName() || 
     '  [Надруковано: ' || SalFmtFormatDateTime(
     SalDateCurrent(), 'dd/MM/yyyy hhhh:mm:ss') || ']')
.head 5 -  Call SalFilePutStr(hOutFile, '')
.head 5 -  ! Формируем заголовок отчета
.head 5 +  If strTableHeader
.head 6 -  Call SalFilePutStr(hOutFile, strTableHeader)
.head 6 -  Call SalFilePutStr(hOutFile, '')
.head 5 -  ! Формируем заголовок таблицы
.head 5 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_TopHeader))
.head 5 +  If nColumns > 0
.head 6 -  Set fLineComplite = FALSE
.head 6 +  While not fLineComplite
.head 7 -  Set strTmp = PSG_VR
.head 7 -  Set fLineComplite = TRUE
.head 7 -  Set nCnt = 0
.head 7 +  Loop
.head 8 -  Set strTmp = strTmp ||
    ColumnFit(strColumnHeader[nCnt],
    nColumnWidth[nCnt], fLineComplite)
.head 8 -  Set nCnt = nCnt + 1
.head 8 -  Set strTmp = strTmp || PSG_VR
.head 8 +  If nCnt > nColumns-1
.head 9 -  Break
.head 7 -  Call SalFilePutStr(hOutFile, strTmp)
.head 5 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_BotHeader))
.head 5 -  ! Печатаем содержание строк таблицы
.head 5 -  Set nRow = TBL_MinRow  
.head 5 -  ! Set nRow = 0
.head 5 +  If nColumns > 0
.head 6 -  Set fLineFirst = TRUE
.head 6 +  While SalTblFindNextRow(hWndTable, nRow, 0, 0)
.head 7 -  Call SalTblFetchRow(hWndTable, nRow)
.head 7 -  Set nLines = 1
.head 7 -  Set nCnt = 0
.head 7 +  Loop
.head 8 -  Set nl00 = 0
.head 8 +  Loop
.head 9 +  If nl00 >= 10
.head 10 -  Break
.head 9 -  Set strLineInLine[nCnt, nl00] = ''
.head 9 -  Set nl00 = nl00 + 1
.head 8 -  Set nCntSubLine = 0
.head 8 -  Call SalTblGetColumnText(hWndTable,  nColumnID[nCnt], strH)
.head 8 +  While strH != '' and nCntSubLine < 10
.head 9 -  Set strLineInLine[nCnt, nCntSubLine] = SalStrLeftX(strH, nColumnWidth[nCnt])
.head 9 -  Set strH = SalStrTrimX(SalStrMidX(strH, SalStrLength(strLineInLine[nCnt, nCntSubLine]), SalStrLength(strH)))
.head 9 +  If SalStrLength(strLineInLine[nCnt, nCntSubLine]) < nColumnWidth[nCnt]
.head 10 +  If strH = '' and nCntSubLine = 0
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    ColumnJustify( strLineInLine[nCnt, nCntSubLine], nColumnWidth[nCnt], nColumnJustify[nCnt] )
.head 10 +  Else
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    ColumnJustify( strLineInLine[nCnt, nCntSubLine], nColumnWidth[nCnt], 0 )
.head 9 +  If strH != ''
.head 10 -  Set nCntSubLine = nCntSubLine + 1
.head 9 +  If nCntSubLine > nLines-1
.head 10 -  Set nLines = nLines + 1
.head 8 -  Set nCnt = nCnt + 1
.head 8 +  If nCnt > nColumns-1
.head 9 -  Break
.head 7 -  Set nCntSubLine = 0
.head 7 +  Loop
.head 8 +  If nCntSubLine > nLines-1
.head 9 -  Break
.head 8 -  Set nCnt = 0
.head 8 -  Set strTmp = PSG_VR
.head 8 +  Loop
.head 9 +  If nCnt > nColumns-1
.head 10 -  Break
.head 9 +  If strLineInLine[nCnt, nCntSubLine] = ''
.head 10 -  Set strTmp = strTmp || Spac(nColumnWidth[nCnt])
.head 9 +  Else
.head 10 -  Set strTmp = strTmp || strLineInLine[nCnt, nCntSubLine]
.head 9 -  Set strTmp = strTmp || PSG_VR
.head 9 -  Set nCnt = nCnt + 1
.head 8 -  Set nCntSubLine = nCntSubLine + 1
.head 8 -  Call SalFilePutStr(hOutFile, strTmp)
.head 6 +  If strSumColumn != ''
.head 7 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_BotLine))
.head 7 -  Set nLines = 1
.head 7 -  Set nCnt = 0
.head 7 +  Loop
.head 8 -  Set nl00 = 0
.head 8 +  Loop
.head 9 +  If nl00 >= 10
.head 10 -  Break
.head 9 -  Set strLineInLine[nCnt, nl00] = ''
.head 9 -  Set nl00 = nl00 + 1
.head 8 -  Set nCntSubLine = 0
.head 8 +  If bColumnSum[nCnt]
.head 9 -  Set strH = SalNumberToStrX(
    SalTblColumnSum(hWndTable, nColumnID[nCnt],
    0, 0), 2)
.head 8 +  Else
.head 9 -  Set strH = ''
.head 8 +  While strH != '' and nCntSubLine < 10
.head 9 -  Set strLineInLine[nCnt, nCntSubLine] =
    SalStrLeftX(strH, nColumnWidth[nCnt])
.head 9 -  Set strH = SalStrTrimX(SalStrMidX(strH,
    SalStrLength(strLineInLine[nCnt,
    nCntSubLine]), SalStrLength(strH)))
.head 9 +  If SalStrLength(strLineInLine[nCnt,
   nCntSubLine]) < nColumnWidth[nCnt]
.head 10 +  If strH = '' and nCntSubLine = 0
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    Spac(nColumnWidth[nCnt] -
    Len(strLineInLine[nCnt, nCntSubLine])) ||
    strLineInLine[nCnt, nCntSubLine]
.head 10 +  Else
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    strLineInLine[nCnt, nCntSubLine] ||
    Spac(nColumnWidth[nCnt] -
    Len(strLineInLine[nCnt, nCntSubLine]))
.head 9 +  If strH != ''
.head 10 -  Set nCntSubLine = nCntSubLine + 1
.head 9 +  If nCntSubLine > nLines-1
.head 10 -  Set nLines = nLines + 1
.head 8 -  Set nCnt = nCnt + 1
.head 8 +  If nCnt > nColumns-1
.head 9 -  Break
.head 7 -  Set nCntSubLine = 0
.head 7 +  Loop
.head 8 +  If nCntSubLine > nLines-1
.head 9 -  Break
.head 8 -  Set nCnt = 0
.head 8 -  Set strTmp = PSG_VR
.head 8 +  Loop
.head 9 +  If nCnt > nColumns-1
.head 10 -  Break
.head 9 +  If strLineInLine[nCnt, nCntSubLine] = ''
.head 10 -  Set strTmp = strTmp || Spac(nColumnWidth[nCnt])
.head 9 +  Else
.head 10 -  Set strTmp = strTmp || strLineInLine[nCnt, nCntSubLine]
.head 9 -  Set strTmp = strTmp || PSG_VR
.head 9 -  Set nCnt = nCnt + 1
.head 8 -  Set nCntSubLine = nCntSubLine + 1
.head 8 -  Call SalFilePutStr(hOutFile, strTmp)
.head 6 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_BotTable))
.head 5 +  If strTableFooter
.head 6 -  Call SalFilePutStr(hOutFile, strTableFooter)
.head 5 -  Call SalFileClose(hOutFile)
.head 5 +  If fImmediatePrint
.head 6 -  Call DosDirectPrint(strFileName)
.head 5 +  If nFileCreationFlag = OF_Create
.head 6 -  Call MessageInfo('Информация сохранена в файле: ' || strFileName)
.head 5 -  Return TRUE
.head 3 +  Function: TableToTextEx2                ! __exported
.head 4 -  Description: Экспортирует содержимое таблицы в текстовый файл
печать в файл управляется флагом
(by Ivan) + modyfied by Anny
(Для печати строк из распличеной части таблицы)
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable
.head 5 -  Long String: strTableHeader
.head 5 -  Long String: strTableFooter
.head 5 -  String: strFileName
.head 5 -  String: strSumColumn
.head 5 -  Boolean: fImmediatePrint
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hOutFile
.head 5 -  !
.head 5 -  Boolean: fLineComplite
.head 5 -  Boolean: fLineFirst
.head 5 -  Window Handle: hWndChild
.head 5 -  String: strTmp
.head 5 -  String: strH
.head 5 -  String: strLineInLine[*, 10]
.head 5 -  !
.head 5 -  Number: nCnt
.head 5 -  Number: nLines
.head 5 -  Number: nl00
.head 5 -  Number: nCntSubLine
.head 5 -  Number: nWings
.head 5 -  !
.head 5 -  Number: nRow
.head 5 -  Number: nFileCreationFlag
.head 4 +  Actions
.head 5 +  If hWndTable = hWndNULL
.head 6 -  Return FALSE
.head 5 -  Set nColumns = 1
.head 5 -  Set nCnt = 0
.head 5 -  Set nFileCreationFlag = OF_Create
.head 5 -  ! Заполняем массив информации о колонках
.head 5 -  Set hWndChild = SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 +  While hWndChild != hWndNULL
.head 6 +  If SalIsWindowVisible(hWndChild)
.head 7 -  Call SalTblGetColumnTitle(hWndChild,strColumnHeader[nCnt], 254)
.head 7 -  Set strColumnHeader[nCnt] = StrPlain(SalStrTrimX(strColumnHeader[nCnt]))
.head 7 -  Call SalTblQueryColumnWidth(hWndChild, nColumnWidth[nCnt])
.head 7 -  Set nColumnWidth[nCnt] = SalNumberRound(nColumnWidth[nCnt]*CPI_RATIO)
.head 7 -  Set nColumnID[nCnt] = SalTblQueryColumnID(hWndChild)
.head 7 -  Set bColumnSum[nCnt] = SalStrScan(strSumColumn || ',', SalNumberToStrX(nColumnID[nCnt], 0) || ',') != -1
.head 7 +  If SalTblQueryColumnFlags( hWndChild, COL_RightJustify )
.head 8 -  Set nColumnJustify[nCnt] = 2
.head 7 +  Else If SalTblQueryColumnFlags ( hWndChild, COL_CenterJustify )
.head 8 -  Set nColumnJustify[nCnt] = 1
.head 7 +  Else
.head 8 -  Set nColumnJustify[nCnt] = 0
.head 7 -  Set nCnt = nCnt + 1
.head 6 -  Set nColumns = nColumns + 1
.head 6 -  Set hWndChild = SalTblGetColumnWindow(hWndTable,
    nColumns, COL_GetPos)
.head 5 -  Set nColumns = nCnt
.head 5 +  If strFileName = ''
.head 6 -  Set strFileName = GetPrnDir() || '\\ld'
 !! префикс ld - список документов СЭП
.head 6 -  Set strFileName = strFileName || SalFmtFormatDateTime(
    SalDateCurrent() ,'hhhmmss') || '.D' ||
    SalStrRightX('0' || SalNumberToStrX(SalDateDay(
    SalDateCurrent()), 0), 2)
.head 5 +  If SalStrLeftX( strFileName, 1 ) = '>'
.head 6 -  Set strFileName = SalStrMidX( strFileName, 1, SalStrLength( strFileName )-1)
.head 6 -  Set nFileCreationFlag = OF_Append
.head 5 -  ! Открываем выходной файл отчета
.head 5 +  If not SalFileOpen(hOutFile, strFileName, OF_Create | OF_Text | OF_Write)
.head 6 -  Return MessageError('Невозможно создать файл отчета '
       || strFileName)
.head 5 -  ! Формируем время и место формирования отчета
.head 5 -  Call SalFilePutStr(hOutFile, GetBankName() ||
     '  [Надруковано: ' || SalFmtFormatDateTime(
     SalDateCurrent(), 'dd/MM/yyyy hhhh:mm:ss') || ']')
.head 5 -  Call SalFilePutStr(hOutFile, '')
.head 5 -  ! Формируем заголовок отчета
.head 5 +  If strTableHeader
.head 6 -  Call SalFilePutStr(hOutFile, strTableHeader)
.head 6 -  Call SalFilePutStr(hOutFile, '')
.head 5 -  ! Формируем заголовок таблицы
.head 5 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_TopHeader))
.head 5 +  If nColumns > 0
.head 6 -  Set fLineComplite = FALSE
.head 6 +  While not fLineComplite
.head 7 -  Set strTmp = PSG_VR
.head 7 -  Set fLineComplite = TRUE
.head 7 -  Set nCnt = 0
.head 7 +  Loop
.head 8 -  Set strTmp = strTmp || ColumnFit(strColumnHeader[nCnt], nColumnWidth[nCnt], fLineComplite)
.head 8 -  Set nCnt = nCnt + 1
.head 8 -  Set strTmp = strTmp || PSG_VR
.head 8 +  If nCnt > nColumns-1
.head 9 -  Break
.head 7 -  Call SalFilePutStr(hOutFile, strTmp)
.head 5 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_BotHeader))
.head 5 -  ! Печатаем содержание строк таблицы
.head 5 -  ! Set nRow = TBL_MinRow  
.head 5 -  Set nRow = -1
.head 5 +  If nColumns > 0
.head 6 -  Set fLineFirst = TRUE
.head 6 +  While SalTblFindNextRow(hWndTable, nRow, 0, 0)
.head 7 -  Call SalTblFetchRow(hWndTable, nRow)
.head 7 -  Set nLines = 1
.head 7 -  Set nCnt = 0
.head 7 +  Loop
.head 8 -  Set nl00 = 0
.head 8 +  Loop
.head 9 +  If nl00 >= 10
.head 10 -  Break
.head 9 -  Set strLineInLine[nCnt, nl00] = ''
.head 9 -  Set nl00 = nl00 + 1
.head 8 -  Set nCntSubLine = 0
.head 8 -  Call SalTblGetColumnText(hWndTable,
     nColumnID[nCnt], strH)
.head 8 +  While strH != '' and nCntSubLine < 10
.head 9 -  Set strLineInLine[nCnt, nCntSubLine] =
    SalStrLeftX(strH, nColumnWidth[nCnt])
.head 9 -  Set strH = SalStrTrimX(SalStrMidX(strH,
    SalStrLength(strLineInLine[nCnt,
    nCntSubLine]), SalStrLength(strH)))
.head 9 +  If SalStrLength(strLineInLine[nCnt,
   nCntSubLine]) < nColumnWidth[nCnt]
.head 10 +  If strH = '' and nCntSubLine = 0
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
Spac(nColumnWidth[nCnt] -
Len(strLineInLine[nCnt, nCntSubLine])) ||
strLineInLine[nCnt, nCntSubLine]
.head 10 +  Else
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    strLineInLine[nCnt, nCntSubLine] ||
    Spac(nColumnWidth[nCnt] -
    Len(strLineInLine[nCnt, nCntSubLine]))
.head 9 +  If strH != ''
.head 10 -  Set nCntSubLine = nCntSubLine + 1
.head 9 +  If nCntSubLine > nLines-1
.head 10 -  Set nLines = nLines + 1
.head 8 -  Set nCnt = nCnt + 1
.head 8 +  If nCnt > nColumns-1
.head 9 -  Break
.head 7 -  Set nCntSubLine = 0
.head 7 +  Loop
.head 8 +  If nCntSubLine > nLines-1
.head 9 -  Break
.head 8 -  Set nCnt = 0
.head 8 -  Set strTmp = PSG_VR
.head 8 +  Loop
.head 9 +  If nCnt > nColumns-1
.head 10 -  Break
.head 9 +  If strLineInLine[nCnt, nCntSubLine] = ''
.head 10 -  Set strTmp = strTmp || Spac(nColumnWidth[nCnt])
.head 9 +  Else
.head 10 -  Set strTmp = strTmp || strLineInLine[nCnt,
    nCntSubLine]
.head 9 -  Set strTmp = strTmp || PSG_VR
.head 9 -  Set nCnt = nCnt + 1
.head 8 -  Set nCntSubLine = nCntSubLine + 1
.head 8 -  Call SalFilePutStr(hOutFile, strTmp)
.head 6 +  If strSumColumn != ''
.head 7 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_BotLine))
.head 7 -  Set nLines = 1
.head 7 -  Set nCnt = 0
.head 7 +  Loop
.head 8 -  Set nl00 = 0
.head 8 +  Loop
.head 9 +  If nl00 >= 10
.head 10 -  Break
.head 9 -  Set strLineInLine[nCnt, nl00] = ''
.head 9 -  Set nl00 = nl00 + 1
.head 8 -  Set nCntSubLine = 0
.head 8 +  If bColumnSum[nCnt]
.head 9 -  Set strH = SalNumberToStrX(
    SalTblColumnSum(hWndTable, nColumnID[nCnt],
    0, 0), 2)
.head 8 +  Else
.head 9 -  Set strH = ''
.head 8 +  While strH != '' and nCntSubLine < 10
.head 9 -  Set strLineInLine[nCnt, nCntSubLine] =  SalStrLeftX(strH, nColumnWidth[nCnt])
.head 9 -  Set strH = SalStrTrimX(SalStrMidX(strH, SalStrLength(strLineInLine[nCnt,nCntSubLine]), SalStrLength(strH)))
.head 9 +  If SalStrLength(strLineInLine[nCnt, nCntSubLine]) < nColumnWidth[nCnt]
.head 10 +  If strH = '' and nCntSubLine = 0
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    ColumnJustify( strLineInLine[nCnt, nCntSubLine], nColumnWidth[nCnt], nColumnJustify[nCnt] )
.head 10 +  Else
.head 11 -  Set strLineInLine[nCnt, nCntSubLine] =
    ColumnJustify( strLineInLine[nCnt, nCntSubLine], nColumnWidth[nCnt], 0 )
.head 9 +  If strH != ''
.head 10 -  Set nCntSubLine = nCntSubLine + 1
.head 9 +  If nCntSubLine > nLines-1
.head 10 -  Set nLines = nLines + 1
.head 8 -  Set nCnt = nCnt + 1
.head 8 +  If nCnt > nColumns-1
.head 9 -  Break
.head 7 -  Set nCntSubLine = 0
.head 7 +  Loop
.head 8 +  If nCntSubLine > nLines-1
.head 9 -  Break
.head 8 -  Set nCnt = 0
.head 8 -  Set strTmp = PSG_VR
.head 8 +  Loop
.head 9 +  If nCnt > nColumns-1
.head 10 -  Break
.head 9 +  If strLineInLine[nCnt, nCntSubLine] = ''
.head 10 -  Set strTmp = strTmp || Spac(nColumnWidth[nCnt])
.head 9 +  Else
.head 10 -  Set strTmp = strTmp || strLineInLine[nCnt,
    nCntSubLine]
.head 9 -  Set strTmp = strTmp || PSG_VR
.head 9 -  Set nCnt = nCnt + 1
.head 8 -  Set nCntSubLine = nCntSubLine + 1
.head 8 -  Call SalFilePutStr(hOutFile, strTmp)
.head 6 -  Call SalFilePutStr(hOutFile, FormFrameLine(LINE_BotTable))
.head 5 +  If strTableFooter
.head 6 -  Call SalFilePutStr(hOutFile, strTableFooter)
.head 5 -  Call SalFileClose(hOutFile)
.head 5 +  If fImmediatePrint
.head 6 -  Call DosDirectPrint(strFileName)
.head 5 +  If nFileCreationFlag = OF_Create
.head 6 -  Call MessageInfo('Информация сохранена в файле: ' ||  strFileName)
.head 5 -  Return TRUE
.head 3 +  Function: TableToDBF			! __exported
.head 4 -  Description: Экспорт таблицы в *.dbf файл
Допущения: все целые числа Number [22],
все десятичные числа Number [22,4],
все строки Char[255].
Если заголовки таблицы на русском то имена
колонок 'COL_XXX'.
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable
.head 5 -  String: strTableHeader
.head 5 -  String: strFileName
.head 5 -  String: strSumColumn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Директория назначения
.head 5 -  String: sODBCDir
.head 5 -  ! Выбор
.head 5 -  Number: YNC
.head 5 -  ! SQL выражения на создание и вставку
.head 5 -  String: strCreate
.head 5 -  String: strInsert
.head 5 -  !
.head 5 -  Sql Handle: hSqlA
.head 5 -  ! Флаг наличия следующей строки в таблице
.head 5 -  Boolean: bNextRowSetted	
.head 5 -  ! Хэндл колонки
.head 5 -  Window Handle: hColumn
.head 5 -  ! Временные переменные
.head 5 -  Date/Time: dTmp
.head 5 -  Number: i
.head 5 -  Number: nColCount
.head 5 -  Number: nVColCount
.head 5 -  Number: nColNo
.head 5 -  Number: nRowNo
.head 5 -  String: strTmp
.head 5 -  String: strDate
.head 5 -  String: strTime
.head 4 +  Actions
.head 5 -  Return TRUE
.head 5 -  Call SalUseRegistry(FALSE, '')
.head 5 -  Call SalGetProfileString('Import', 'OperNBPath',
     SalStrLeftX(SalFileGetDrive(), 1) ||
     ':\\BARS98\\ODBC.DSN\\OPER', sODBCDir,
     GetIniFileName())
.head 5 +  If SalFileSetCurrentDirectory(sODBCDir)
.head 6 -  Set SqlDatabase='dBase_Files'
.head 6 +  If SqlConnect(hSqlA)
.head 7 -  ! Проверка существования файла
.head 7 +  Loop
.head 8 +  If SalFileGetDateTime(sODBCDir || '\\' || strFileName || '.dbf', dTmp) !! уже существует
.head 9 -  Set YNC=SalMessageBox("Удалить данные ?","Файл "|| strFileName ||".dbf уже существует !", MB_YesNoCancel | MB_IconHand)
.head 9 -  If YNC=IDNO 	!! NO
.head 9 +  If YNC=IDCANCEL	!! CANCEL -Выйти
.head 10 -  Return FALSE
.head 9 +  If YNC=IDYES	!! YES - Удалить данные
.head 10 -  Call SqlPrepareAndExecute(hSqlA,"DROP TABLE "|| strFileName)
.head 10 +  When SqlError
.head 11 -  Return FALSE
.head 8 +  Else
.head 9 -  Break
.head 7 -  ! Определяем количество колонок(Всех и видимых)
.head 7 -  Set nColCount=0
.head 7 -  Set nVColCount=0
.head 7 -  Set hColumn=SalGetFirstChild(hWndTable, TYPE_TableColumn)
.head 7 +  Loop
.head 8 +  If SalIsWindowVisible(hColumn)	!Считаю только видимые колоноки
.head 9 -  Set nVColCount=nVColCount+1
.head 8 -  Set nColCount=nColCount+1
.head 8 -  Set hColumn=SalGetNextChild(hColumn, TYPE_TableColumn)
.head 8 +  If hColumn= hWndNULL
.head 9 -  Break
.head 7 -  Set strCreate=DBF_CREATE_String(hWndTable, strFileName)
.head 7 -  Call SqlPrepareAndExecute(hSqlA, strCreate)
.head 7 -  ! Цилк по строкам
.head 7 -  Set nRowNo=0
.head 7 -  Set bNextRowSetted=SalTblSetContext(hWndTable, nRowNo)
.head 7 +  Loop
.head 8 +  If bNextRowSetted
.head 9 -  ! Цикл по колонкам
.head 9 -  Set nColNo=1
.head 9 -  Set i=0
.head 9 -  Set strInsert='INSERT INTO ' || strFileName || ' VALUES ('
.head 9 +  Loop
.head 10 +  If nColNo<=nColCount
.head 11 -  Set hColumn=SalTblGetColumnWindow(hWndTable, nColNo, COL_GetPos)
.head 11 +  If SalIsWindowVisible(hColumn)	!Экспорт только видимых колонок
.head 12 -  Call SalGetWindowText(hColumn, strTmp, 255)
.head 12 +  If NOT SalIsValidNumber(hColumn)
.head 13 +  If SalIsValidDateTime(hColumn)	! Преобразуем дату
.head 14 -  Call DateTimeToString(SalStrToDate(strTmp), strDate, strTime)
.head 14 -  Set strTmp=strDate
.head 13 -  Set strTmp="'" || strTmp || "'"		! Берем в кавычки если не число
.head 12 +  If i<nVColCount
.head 13 -  Set strInsert = strInsert || strTmp || ' , '
.head 12 +  Else
.head 13 -  Set strInsert = strInsert || strTmp 
.head 12 -  Set i=i+1
.head 10 +  Else
.head 11 -  Break
.head 10 -  Set nColNo=nColNo+1
.head 9 -  Set strInsert = strInsert || ')'
.head 9 -  Call SqlPrepareAndExecute(hSqlA, strInsert)
.head 8 +  Else
.head 9 -  Break
.head 8 -  Set nRowNo=nRowNo+1
.head 8 -  Set bNextRowSetted=SalTblSetContext(hWndTable, nRowNo)
.head 7 -  Call SqlCommit(hSqlA)
.head 7 -  Call SqlDisconnect(hSqlA)
.head 7 -  Call SalMessageBox("Выгрузка в " || strFileName || ".dbf завершена!", "Экспорт", MB_Ok)
.head 6 +  Else
.head 7 -  Call MessageAttention('Ошибка подсоединения к Базе данных:'|| SqlDatabase)
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 -  Call MessageAttention('Нет каталога: ' ||   sODBCDir)
.head 6 -  Return FALSE
.head 5 -  Return TRUE
.head 3 +  Function: DBF_CREATE_String
.head 4 -  Description: Возвращает строку создания DBF файла по хендлу таблицы
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Window Handle: hSourceTbl
.head 5 -  String: strFileName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  : iCols[*]
.head 6 -  Class: cSqlColumnDescriptor
.head 5 -  Number: nColNo
.head 5 -  Window Handle: hColumn
.head 5 -  String: ResStr
.head 5 -  String: strTmp
.head 4 +  Actions
.head 5 -  ! Цикл по колонкам
.head 5 -  Set nColNo=0
.head 5 -  Set hColumn=SalGetFirstChild(hSourceTbl, TYPE_TableColumn)
.head 5 +  Loop
.head 6 +  If SalIsWindowVisible(hColumn)	!Счетаю только видимые колоноки
.head 7 -  Call SalArraySetUpperBound(iCols, 1, nColNo)
.head 7 -  Call SalTblGetColumnTitle(hColumn, strTmp, 255)
.head 7 -  Call CorrectFieldName(nColNo+1, strTmp)
.head 7 +  If SalIsValidDecimal(hColumn, 3, 1)	! Любое десятичное
.head 8 -  Set iCols[nColNo].nColType=DTYPE_NUMBER
.head 8 -  Set iCols[nColNo].strColName=strTmp
.head 8 -  Set iCols[nColNo].nColNameLength=SalStrLength(iCols[nColNo].strColName)
.head 8 -  Set iCols[nColNo].nColLength=22
.head 8 -  Set iCols[nColNo].nColPrec=4
.head 8 -  Set iCols[nColNo].nColScale=22
.head 7 +  Else If SalIsValidInteger(hColumn)	! Целое
.head 8 -  Set iCols[nColNo].nColType=DTYPE_NUMBER
.head 8 -  Set iCols[nColNo].strColName=strTmp
.head 8 -  Set iCols[nColNo].nColNameLength=SalStrLength(iCols[nColNo].strColName)
.head 8 -  Set iCols[nColNo].nColLength=22
.head 8 -  Set iCols[nColNo].nColPrec=0
.head 8 -  Set iCols[nColNo].nColScale=22
.head 7 +  Else If SalIsValidDateTime(hColumn)	! Дата
.head 8 -  Set iCols[nColNo].nColType= DTYPE_DATETIME
.head 8 -  Set iCols[nColNo].strColName=strTmp
.head 8 -  Set iCols[nColNo].nColNameLength=SalStrLength(iCols[nColNo].strColName)
.head 8 -  Set iCols[nColNo].nColLength=8
.head 8 -  Set iCols[nColNo].nColPrec=0
.head 8 -  Set iCols[nColNo].nColScale=8
.head 7 +  Else ! Остальное как строки
.head 8 -  Set iCols[nColNo].nColType= DTYPE_CHAR
.head 8 -  Set iCols[nColNo].strColName=strTmp
.head 8 -  Set iCols[nColNo].nColNameLength=SalStrLength(iCols[nColNo].strColName)
.head 8 -  Set iCols[nColNo].nColLength=255
.head 8 -  Set iCols[nColNo].nColPrec=0
.head 8 -  Set iCols[nColNo].nColScale=255
.head 7 -  Set nColNo=nColNo+1
.head 6 -  Set hColumn=SalGetNextChild(hColumn, TYPE_TableColumn)
.head 6 +  If hColumn= hWndNULL
.head 7 -  Break
.head 5 -  Call SqlGetCreateStatementX(iCols, nColNo, strFileName, ResStr, FALSE)
.head 5 -  Return ResStr
.head 3 +  Function: CorrectFieldName
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean: bOk
.head 4 +  Parameters
.head 5 -  Number: nColNumber
.head 5 -  Receive String: strFieldName
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Set strFieldName = 'COL_' || SalNumberToStrX(nColNumber, 0)
.head 3 +  Function: Table_TXT    			! __exported
.head 4 -  Description: экспортирует содержимое таблицы в текстовый файл
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable !! таблица
.head 5 -  String: strTableHeader  !! пусто
.head 5 -  String: strFileName          !! имя TXT-файла
.head 5 -  String: strSumColumn     !! пусто
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hOutFile
.head 5 -  !
.head 5 -  Window Handle: hWndChild
.head 5 -  String: strTmp
.head 5 -  String: strH
.head 5 -  String: strLineInLine[*, 10]
.head 5 -  !
.head 5 -  Number: nCnt
.head 5 -  Number: nLines
.head 5 -  !
.head 5 -  Number: nRow
.head 4 +  Actions
.head 5 +  If hWndTable = hWndNULL
.head 6 -  Return FALSE
.head 5 -  Call WaitCursorOn()
.head 5 -  Set nColumns = 1
.head 5 -  Set nCnt = 0
.head 5 -  ! Заполняем массив информации о колонках
.head 5 -  Set hWndChild=SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 +  While hWndChild != hWndNULL
.head 6 +  If SalIsWindowVisible(hWndChild)
.head 7 -  Call SalTblGetColumnTitle(hWndChild, strColumnHeader[ nCnt ], 254)
.head 7 -  Set strColumnHeader[ nCnt ] = StrPlain(SalStrTrimX(strColumnHeader[ nCnt ]))
.head 7 -  Call SalTblQueryColumnWidth(hWndChild, nColumnWidth[ nCnt ])
.head 7 -  Set nColumnWidth[ nCnt ] = SalNumberRound(nColumnWidth[ nCnt ] * CPI_RATIO)
.head 7 -  Set nColumnID[ nCnt ] =  SalTblQueryColumnID(hWndChild)
.head 7 +  If SalStrScan(strSumColumn || ',', SalNumberToStrX(nColumnID[ nCnt ],0) || ',') != -1
.head 8 -  Set bColumnSum[ nCnt ] = TRUE
.head 7 +  Else
.head 8 -  Set bColumnSum[ nCnt ] = FALSE
.head 7 -  Set nCnt = nCnt + 1
.head 6 -  Set nColumns = nColumns + 1
.head 6 -  Set hWndChild = SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 -  Set nColumns=nCnt
.head 5 -  ! Открываем выходной файл отчета
.head 5 +  If Not SalFileOpen(hOutFile, strFileName, OF_Create | OF_Text | OF_Write)
.head 6 -  Return MessageError('Невозможно создать файл отчета ' || strFileName)
.head 5 -  ! Печатаем содержание строк таблицы
.head 5 -  Set nRow=TBL_MinRow
.head 5 +  If nColumns > 0
.head 6 +  While SalTblFindNextRow(hWndTable, nRow, 0, 0)
.head 7 -  Call SalTblFetchRow(hWndTable, nRow)
.head 7 -  Set nCnt = 0
.head 7 -  Set strTmp = ''
.head 7 -  !
.head 7 +  Loop
.head 8 +  If nCnt > nColumns -1
.head 9 -  Break
.head 8 -  Call SalTblGetColumnText(hWndTable, nColumnID[ nCnt ], strH)
.head 8 +  If strTmp != ''
.head 9 -  Set strTmp = strTmp || ','
.head 8 -  Set strTmp = strTmp || '"' || StrWinToDosX(strH) || '"'
.head 8 -  Set nCnt = nCnt + 1
.head 7 -  Call SalFilePutStr(hOutFile,  strTmp)
.head 5 -  Call SalFileClose(hOutFile)
.head 5 -  Call MessageInfo('Информация экспортирована в файл: ' || strFileName)
.head 5 -  Return TRUE
.head 3 +  Function: Table_nCol   			! __exported
.head 4 -  Description: Количество колонок
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Window Handle: hWndTable !! таблица
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Window Handle: hWndChild
.head 5 -  String: strLineInLine[*, 10]
.head 5 -  Number: nCnt
.head 5 -  Number: nLines
.head 5 -  !
.head 5 -  Number: nRow
.head 4 +  Actions
.head 5 -  Set nCnt = 0
.head 5 +  If hWndTable = hWndNULL
.head 6 -  Return nCnt
.head 5 -  Set nColumns = 1
.head 5 -  Set hWndChild=SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 +  While hWndChild != hWndNULL
.head 6 -  Set nCnt = nCnt + 1
.head 6 -  Set nColumns = nColumns + 1
.head 6 -  Set hWndChild = SalTblGetColumnWindow(hWndTable, nColumns, COL_GetPos)
.head 5 -  Return nCnt
.head 3 -  !
.head 3 +  Function: StrPlain
.head 4 -  Description: Remove LineBreake from source string
.head 4 +  Returns
.head 5 -  String: strZ
.head 4 +  Parameters
.head 5 -  String: strSrc
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nPos
.head 5 -  String: strDst
.head 4 +  Actions
.head 5 -  Set strDst = strSrc
.head 5 +  Loop
.head 6 -  Set nPos = SalStrScan(strDst, '
')
.head 6 +  If nPos = -1
.head 7 -  Break
.head 6 -  Set strDst = SalStrReplaceX(strDst, nPos, 2, ' ')
.head 5 -  Return strDst
.head 3 +  Function: FormFrameLine
.head 4 -  Description: Forms table line according mode switch
.head 4 +  Returns
.head 5 -  String: Z
.head 4 +  Parameters
.head 5 -  Number: nMode
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strTmp
.head 5 -  String: LeftChar
.head 5 -  String: RightChar
.head 5 -  String: MainChar
.head 5 -  String: DivChar
.head 5 -  Number: nCnt
.head 4 +  Actions
.head 5 +  Select Case nMode
.head 6 +  Case LINE_TopHeader
.head 7 -  Set LeftChar = PSG_TL
.head 7 -  Set RightChar = PSG_TR
.head 7 -  Set DivChar =  PSG_HRDN
.head 7 -  Set MainChar = PSG_HR
.head 7 -  Break
.head 6 +  Case LINE_BotHeader
.head 7 -  Set LeftChar = PSG_VRRT
.head 7 -  Set RightChar = PSG_VRLT
.head 7 -  Set DivChar =  PSG_CROS
.head 7 -  Set MainChar = PSG_HR
.head 7 -  Break
.head 6 +  Case LINE_BotTable
.head 7 -  Set LeftChar = PSG_BL
.head 7 -  Set RightChar = PSG_BR
.head 7 -  Set DivChar =  PSG_HRUP
.head 7 -  Set MainChar = PSG_HR
.head 7 -  Break
.head 6 +  Case LINE_BotLine
.head 7 -  Set LeftChar = PSG_VRRT
.head 7 -  Set RightChar = PSG_VRLT
.head 7 -  Set DivChar =  PSG_CROS
.head 7 -  Set MainChar = PSG_HR
.head 7 -  Break
.head 6 -  Case LINE_BlankLine
.head 6 +  Default
.head 7 -  Set LeftChar = PSG_VR
.head 7 -  Set RightChar = PSG_VR
.head 7 -  Set DivChar =  PSG_VR
.head 7 -  Set MainChar = ' '
.head 7 -  Break
.head 5 -  Set nCnt = 0
.head 5 +  If nColumns > 0
.head 6 -  Set strTmp = LeftChar
.head 6 +  Loop
.head 7 -  Set strTmp = strTmp ||
    SalStrRepeatX(MainChar, nColumnWidth[nCnt])
.head 7 -  Set nCnt = nCnt + 1
.head 7 +  If nCnt > nColumns - 1
.head 8 -  Set strTmp = strTmp || RightChar
.head 8 -  Break
.head 7 +  Else
.head 8 -  Set strTmp = strTmp || DivChar
.head 5 -  Return strTmp
.head 3 +  Function: ColumnFit
.head 4 -  Description: Make text (or it's part) fit in column width
.head 4 +  Returns
.head 5 -  String: Z
.head 4 +  Parameters
.head 5 -  Receive String: strText
.head 5 -  Number: nColLen
.head 5 -  Receive Boolean: fLineEmpty
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strPart
.head 5 -  Number: nSpace
.head 4 +  Actions
.head 5 -  Set strPart = StrGetPart(strText, nColLen)
.head 5 -  Set strText = SalStrTrimX(SalStrMidX(SalStrTrimX(strText), SalStrLength(strPart) , SalStrLength(strText)))
.head 5 +  If nColLen != SalStrLength(strPart)
.head 6 -  Set nSpace = SalNumberRound(((nColLen - SalStrLength(strPart)) / 2) - 0.5)
.head 5 +  Else
.head 6 -  Set nSpace = 0
.head 5 -  Set strPart = Spac(SalNumberMod(nColLen - Len(strPart), 2)) || strPart
.head 5 -  Set strPart = Spac(nSpace) || strPart || Spac(nSpace)
.head 5 +  If SalStrLength(strText) > 0
.head 6 -  Set fLineEmpty = FALSE
.head 5 -  Return strPart
.head 3 +  Function: ColumnJustify
.head 4 -  Description: Выравнивает данные по ширине колонки.
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: strText
.head 5 -  Number: nWidth
.head 5 -  Number: JustificationMode
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nSpaceLeft
.head 5 -  Number: nSpaceRight
.head 5 -  String: strRes
.head 4 +  Actions
.head 5 +  If Len(strText) >= nWidth
.head 6 -  Set strRes = strText
.head 5 +  Else
.head 6 +  Select Case JustificationMode
.head 7 +  Case 1
.head 8 -  Set nSpaceRight = SalNumberRound(((nWidth - Len(strText)) / 2) - 0.5)
.head 8 -  Set nSpaceLeft  = nSpaceRight
.head 8 +  If nSpaceRight + Len(strText) + nSpaceLeft > nWidth
.head 9 -  Set nSpaceRight = nSpaceRight - 1
.head 8 +  If nSpaceRight + Len(strText) + nSpaceLeft < nWidth
.head 9 -  Set nSpaceRight = nSpaceRight + 1
.head 8 -  Break
.head 7 +  Case 2
.head 8 -  Set nSpaceRight = 0
.head 8 -  Set nSpaceLeft  = nWidth - Len(strText)
.head 8 -  Break
.head 7 +  Default
.head 8 -  Set nSpaceRight = nWidth - Len(strText)
.head 8 -  Set nSpaceLeft  = 0
.head 8 -  Break
.head 6 -  Set strRes = Spac( nSpaceLeft ) || strText || Spac(  nSpaceRight )
.head 5 -  Return strRes
.head 3 +  Function: StrGetPart
.head 4 -  Description: Getting the unnwrapped words from text
.head 4 +  Returns
.head 5 -  String: Z
.head 4 +  Parameters
.head 5 -  String: strT
.head 5 -  Number: nLen
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strRes
.head 5 -  Number: nSPos
.head 4 +  Actions
.head 5 -  Set strRes = ''
.head 5 -  Set strT=SalStrTrimX(strT)
.head 5 +  If SalStrLength(strT) <= nLen
.head 6 -  Set strRes = strT
.head 5 +  Else
.head 6 -  Set nSPos = SalStrScan(strT, ' ')
.head 6 +  If nSPos >= nLen OR nSPos = -1
.head 7 -  Set strRes = SalStrLeftX(strT, nLen)
.head 6 +  Else
.head 7 +  Loop
.head 8 +  If nSPos > nLen - SalStrLength(strRes) - 1 OR nSPos = -1
.head 9 -  Break
.head 8 -  Set strRes = strRes || SalStrLeftX(strT, nSPos+1)
.head 8 -  Set strT = SalStrMidX(strT, nSPos+1, SalStrLength(strT)-(nSPos+1))
.head 8 -  Set nSPos = SalStrScan(strT, ' ')
.head 5 -  Return strRes
.head 3 -  !
.head 3 +  Function: DocsPrintFromParam		! __exported
.head 4 -  Description: Печатает документ согласно его виду
(Мемориальный ордер, платежное поручение)
получая атрибуты документа как параметры
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nDocId
.head 5 -  Number: _kv
.head 5 -  Number: nVob
.head 5 -  String: _nd
.head 5 -  String: _mfoa
.head 5 -  String: _id_a
.head 5 -  String: _bank_a
.head 5 -  String: _nlsa
.head 5 -  String: _nam_a
.head 5 -  Number: _s
.head 5 -  Number: _sk
.head 5 -  Number: _dk
.head 5 -  String: _mfob
.head 5 -  String: _id_b
.head 5 -  String: _bank_b
.head 5 -  String: _nlsb
.head 5 -  String: _nam_b
.head 5 -  Number: _kv2
.head 5 -  Number: _s2
.head 5 -  String: _nazn
.head 5 -  Date/Time: _data
.head 5 -  Number: nMode
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  : conn
.head 6 -  Class: cABSConnect
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 5 -  !
.head 5 -  String: szISOCCode
.head 5 -  String: szCcyName
.head 5 -  String: szCUnit
.head 5 -  String: szISOCCode2
.head 5 -  String: szCcyName2
.head 5 -  String: szCUnit2
.head 5 -  String: szLiteralSumm
.head 5 -  String: szCashSymb
.head 5 -  String: szPayer
.head 5 -  String: szPayer2
.head 5 -  String: szPayerOKPO
.head 5 -  String: szPayerAdres
.head 5 -  String: szPayerBD
.head 5 -  String: szDoc
.head 5 -  String: szDocProp
.head 5 -  String: szBoss
.head 5 -  String: szAccMan
.head 5 -  String: szAddTag
.head 5 -  String: szAddTagVal
.head 5 -  String: szZvitDate
.head 5 -  String: szPmtDet
.head 5 -  !
.head 5 -  String: szTempl
.head 5 -  String: szTemplPrefix
.head 5 -  String: szTemplSuffix
.head 5 -  String: szReport
.head 5 -  Long String: lszVars
.head 5 -  Long String: lszVals
.head 5 -  !
.head 5 -  String: szHourToChar
.head 5 -  String: szTmpMName
.head 4 +  Actions
.head 5 -  Call XConnectGetParams(conn)
.head 5 +  If not conn.Connect()
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Set szTempl = GetTemplateDir()
.head 5 -  Set szReport = GetPrnDir()
.head 5 -  Set szHourToChar = '0123456789ABCDEFGHJKLMNOP'
.head 5 -  !
.head 5 +  If _dk >= 2	! Отлавливаем информационные.
.head 6 -  Set szTemplPrefix = 'inford'
.head 5 +  Else
.head 6 +  If SqlPrepareAndExecute(conn.hSql(), T('
     SELECT rep_prefix
     INTO :szTemplPrefix
     FROM Vob
     WHERE vob=:nVob'))
.head 7 -  Call SqlFetchNext(conn.hSql(), nFetchRes)
.head 5 -  !
.head 5 +  If SqlPrepareAndExecute(conn.hSql(), T('
     SELECT lcv,unit
     INTO :szISOCCode,:szCUnit
     FROM tabval
     WHERE kv=:_kv'))
.head 6 -  Call SqlFetchNext(conn.hSql(), nFetchRes)
.head 5 +  If SqlPrepareAndExecute(conn.hSql(), T('
     SELECT lcv,unit
     INTO :szISOCCode2,:szCUnit2
     FROM tabval
     WHERE kv=:_kv2'))
.head 6 -  Call SqlFetchNext(conn.hSql(), nFetchRes)
.head 5 -  Set szCcyName =
    IifS(SalStrTrimX(SalStrUpperX(szISOCCode)) = 'UAH',
    'грн', szISOCCode)
.head 5 -  Set szCcyName2 =
    IifS(SalStrTrimX(SalStrUpperX(szISOCCode2)) = 'UAH',
    'грн', szISOCCode2)
.head 5 -  !
.head 5 +  If szTemplPrefix = ''
.head 6 -  Set szTemplPrefix = 'memord'
.head 5 -  Set szTempl = szTempl || '\\' || szTemplPrefix || '_'
.head 5 -  !
.head 5 +  If SqlPrepareAndExecute(conn.hSql(), T('
     SELECT mnemonik
     INTO :szTemplSuffix
     FROM Dk
     WHERE dk=:_dk'))
.head 6 -  Call SqlFetchNext(conn.hSql(), nFetchRes)
.head 5 -  !
.head 5 +  If _sk
.head 6 -  Set szCashSymb = SalNumberToStrX(_sk, 0)
.head 5 -  !
.head 5 +  If nDocId
.head 6 +  If SqlPrepareAndExecute(conn.hSql(), T('SELECT upper(tag), value INTO :szAddTag, :szAddTagVal FROM operw WHERE ref=:nDocId'))
.head 7 +  While SqlFetchNext(conn.hSql(), nFetchRes)
.head 8 -  Call SalStrTrim(szAddTag, szAddTag)
.head 8 +  If szAddTag = 'FIO'
.head 9 -  Set szPayer = szAddTagVal
.head 8 +  Else If ( szAddTag = 'ATRT' OR szAddTag = 'PASP1' )
.head 9 -  Set szDoc = szAddTagVal
.head 8 +  Else If szAddTag = 'ATRT'
.head 9 -  Set szDocProp = szAddTagVal
.head 8 +  Else If szAddTag = 'POKPO'
.head 9 -  Set szPayerOKPO = szAddTagVal
.head 8 +  Else If szAddTag = 'FIO2'
.head 9 -  Set szPayer2 = szAddTagVal
.head 8 +  Else If szAddTag = 'ZDAT'
.head 9 -  Set szZvitDate = szAddTagVal
.head 8 +  Else If szAddTag = 'IDB'
.head 9 -  Set _id_b = szAddTagVal
.head 8 +  Else If szAddTag = 'SK'
.head 9 -  Set szCashSymb = szAddTagVal
.head 8 +  Else If szAddTag = '70'
.head 9 -  Set szPmtDet = szAddTagVal
.head 8 +  Else If szAddTag = 'ADRES'
.head 9 -  Set szPayerAdres = szAddTagVal
.head 8 +  Else If szAddTag = 'DOBR'
.head 9 -  Set szPayerBD = szAddTagVal
.head 6 -  !
.head 6 +  If SqlPrepareAndExecute(conn.hSql(), T('
	SELECT c.ruk, c.buh INTO :szBoss, :szAccMan 
	FROM oper o, accounts a, cust_acc ca, corps c
	WHERE a.nls=o.nlsa AND a.kv=o.kv AND ca.acc=a.acc AND c.rnk=ca.rnk AND
	o.ref = :nDocId'))
.head 7 -  Call SqlFetchNext(conn.hSql(), nFetchRes)
.head 5 -  !
.head 5 +  If szTemplSuffix = ''
.head 6 -  Set szTemplPrefix = 'k'
.head 5 -  Set szTempl = szTempl || szTemplSuffix || '.qrd'
.head 5 -  ! Set szReport = szReport || '\\d_' ||
    SalFmtFormatDateTime(SalDateCurrent() ,'hhhmmss')
    || '.D' || SalStrRightX('0' || SalNumberToStrX(
    SalDateDay(SalDateCurrent()), 0), 2)
.head 5 -  Set szReport=szReport ||
	'\\d_' || 
	SalFmtFormatDateTime(SalDateCurrent() ,'hhhmmss.') || 
        GetCharForDigit( SalDateDay( SalDateCurrent() ) ) || 
        SalStrLeftX(SalFmtFormatDateTime(SalDateCurrent() ,'mmmmmm'), 2)
.head 5 -  Set szTmpMName = GetMonthName(SalDateMonth(_data), TRUE)
.head 5 -  Set lszVars = 'ONumber~ODay~OMonth~OYear~OSender' ||
    '~OBank-A~OMFO-A~OOKPO-A~ONLS-A~OCcyISO~OCcyCode~OSumm' ||
    '~OSummLit~OReceiver~OBank-B~OMFO-B~OOKPO-B~ONLS-B' ||
    '~OCcyISO-B~OCcyCode-B~OSumm-B~OSummLit-B~ONazn' ||
    '~OPayer~OPOKPO~ODocument~ODocProp~OCashSymb~OBoss~OAccMan~OPmtDet~' ||
    'OPAdres~OPBrDate'
.head 5 -  Set lszVals = _nd || '~' || 
	SalNumberToStrX(SalDateDay(_data), 0) || '~' || 
	szTmpMName  || '~' || 
	SalNumberToStrX(SalDateYear(_data), 0) || '~' ||
    	VisStrSubstitute( _nam_a, '~', '`' )  || '~' || 
	VisStrSubstitute( _bank_a, '~', '`' ) || '~' || 
	_mfoa   || '~' ||
	_id_a	|| '~' ||
    	_nlsa   || '~' || 
	szISOCCode || '~' ||
    	SalNumberToStrX(_kv, 0)    || '~' ||
    	SalNumberToStrX(_s/100, 2) || '~' ||
    	SumPr(_s, 'F', szCcyName, szCUnit) || '~' || 
	VisStrSubstitute( _nam_b, '~', '`' )  || '~' || 
	VisStrSubstitute( _bank_b, '~', '`' ) || '~' || 
	_mfob   || '~' ||
	_id_b   || '~' || 
	_nlsb   || '~' || 
	szISOCCode2 || '~' ||
    	SalNumberToStrX(_kv2, 0)    || '~' ||
	SalNumberToStrX(_s2/100, 2) || '~' ||
    	SumPr(_s2, 'F', szCcyName2, szCUnit2) || '~' ||
    	VisStrSubstitute( _nazn, '~', '`' )       || '~' || 
	VisStrSubstitute( szPayer, '~', '`' )     || '~' ||
    	szPayerOKPO || '~' || 
	VisStrSubstitute( szDoc, '~', '`' )       || '~' || 
	VisStrSubstitute( szDocProp, '~', '`' )   || '~' ||
	szCashSymb  || '~' ||
	VisStrSubstitute( szBoss, '~', '`' )      || '~' ||
	VisStrSubstitute( szAccMan, '~', '`' )    || '~' ||
	VisStrSubstitute( szPmtDet, '~', '`' )    || '~' ||
	VisStrSubstitute( szPayerAdres, '~', '`' )  || '~' ||
	VisStrSubstitute( szPayerBD, '~', '`' )
.head 5 -  Call WaitCursorOn()
.head 5 -  Call DosReport(szTempl, szReport, lszVars, lszVals, nMode)
.head 5 +  If nDocId AND IsPrintTrnModel()
.head 6 -  Call DocsSaldoPrint(nDocId, szReport)
.head 5 -  Call DosDirectPrint(szReport)
.head 5 -  Call WaitCursorOff()
.head 5 -  Call conn.Disconnect()
.head 3 +  Function: DocsSaldoPrint		! __exported
.head 4 -  Description: Печать бухгалтерских проводок по документу
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nDocRef
.head 5 -  String: strFileName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  : conn
.head 6 -  Class: cABSConnect
.head 5 -  !
.head 5 -  File Handle: hFile
.head 5 -  !
.head 5 -  String: sTT
.head 5 -  Number: nDk
.head 5 -  String: sNls
.head 5 -  String: sNlsParent
.head 5 -  Number: nKv
.head 5 -  Number: nKvParent
.head 5 -  Number: nDig
.head 5 -  Date/Time: dtFdat
.head 5 -  Number: nS
.head 5 -  Number: nSQ
.head 5 -  String: sTxt
.head 5 -  !
.head 5 -  String: sLine
.head 5 -  String: sSub
.head 4 +  Actions
.head 5 -  Call XConnectGetParams(conn)
.head 5 +  If NOT conn.Connect()
.head 6 -  Return FALSE
.head 5 +  If NOT SalFileOpen(hFile, strFileName, OF_Write | OF_Text | OF_Append)
.head 6 -  Call conn.Disconnect()
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Call SalFilePutStr(hFile, '')
.head 5 -  ! Call SalFilePutStr(hFile, '   ' ||  SalStrRepeatX('- ', 38))
.head 5 -  Call SalFilePutStr(hFile, '   Перелік транзакцій для документа # ' ||  Str(nDocRef))
.head 5 -  ! Call SalFilePutStr(hFile, '')
.head 5 -  Call SalFilePutStr(hFile,  SalStrRepeatX('-', IifN(GetGlobalOption('SUB')='1',85,98)))
.head 5 +  If GetGlobalOption('SUB')='1'
.head 6 -  Call SalFilePutStr(hFile, 'Тип:   Дата   : Рахунок       :Вал:     Дебет      :     Кредит     :   Субрахунок  :')
.head 6 -  Call SalFilePutStr(hFile, 'тр.: валютув. :' || Spac(15) || ':   :' || Spac(16) || ':' || Spac(16) || ':' || Spac(15) || ':')
.head 5 +  Else
.head 6 -  Call SalFilePutStr(hFile, 'Тип:   Дата   : Рахунок       :Вал:       Дебет        :       Кредит       :     Еквівалент     :')
.head 6 -  Call SalFilePutStr(hFile, 'тр.: валютув. :' || Spac(15) || ':   :' || Spac(20) || ':' || Spac(20) || ':' || Spac(20) || ':')
.head 5 -  Call SalFilePutStr(hFile, SalStrRepeatX('-', IifN(GetGlobalOption('SUB')='1',85,98)))
.head 5 -  !
.head 5 +  If not SqlPrepareAndExecute(conn.hSql(), '
   SELECT o.tt,o.dk,a.nls,a.kv,t.dig,o.fdat,o.s,'||IifS(GetGlobalOption('NBUBANK')!='','o.sq','gl.p_icurval(a.kv, o.s, o.fdat)')||',o.txt,r.nls,r.kv,'||
    IifS(GetGlobalOption('SUB')='1',"DECODE(a.opt,2,o.sub,'')","''")||
  ' INTO :sTT,:nDk,:sNls,:nKv,:nDig,:dtFdat,:nS,:nSQ,:sTxt,:sNlsParent,:nKvParent,:sSub 
   FROM opldok o, accounts a, tabval t, accounts r 
   WHERE t.kv=a.kv and a.acc=o.acc and r.acc(+)=a.accc and o.ref=:nDocRef and o.sos is not null
   ORDER BY o.fdat, a.kv, o.stmt, o.tt, o.dk')
.head 6 -  Call conn.Disconnect()
.head 6 -  Return FALSE
.head 5 +  While SqlFetchNext(conn.hSql(), nFetchRes)
.head 6 -  ! Разбивка сумм на триады
.head 6 -  Set sLine = PadL(sTT,3) || ' ' ||
    SalFmtFormatDateTime(dtFdat, 'dd/MM/yyyy') || ' ' ||
    PadR(sNls,15) || PadL(Str(nKv), 4) || ' ' || 
    IifS(nDk,
        Spac(21) || PadL(Dig4(nS/100, nDig, nDig), 20)  || ' ',  
        PadL(Dig4(nS/100, nDig, nDig), 20) || Spac(22)) || 
  IifS(GetGlobalOption('SUB')='1', ' '||sSub, PadL(Dig4(nSQ/100, 2, 2), 20))
.head 6 -  Call SalFilePutStr(hFile, sLine)
.head 6 +  If sNlsParent
.head 7 -  Set sLine = Spac(15) || '-> ' || PadR(sNlsParent,15) || PadL(Str(nKvParent), 4)
.head 7 -  Call SalFilePutStr(hFile, sLine)
.head 7 -  Set sNlsParent = ''
.head 5 -  !
.head 5 -  ! Call SalFilePutStr(hFile, '')
.head 5 -  Call SalFilePutStr(hFile,  SalStrRepeatX('- ', IifN(GetGlobalOption('SUB')='1',42,48))||'-')
.head 5 -  !
.head 5 -  Call SalFileClose(hFile)
.head 5 -  Call conn.Disconnect()
.head 5 -  Return TRUE
.head 3 +  Function: DocsSwiftPrint		! __exported
.head 4 -  Description: Печать SWIFT`овки по документу
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nDocRef
.head 5 -  String: strFileName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  : conn
.head 6 -  Class: cABSConnect
.head 5 -  !
.head 5 -  File Handle: hFile
.head 5 -  !
.head 5 -  Number: nSwRef
.head 5 -  Number: nFetchRes
.head 5 -  Boolean: fExists
.head 4 +  Actions
.head 5 -  Call XConnectGetParams(conn)
.head 5 +  If NOT conn.Connect()
.head 6 -  Return FALSE
.head 5 +  If SqlPrepareAndExecute( conn.hSql(), '
SELECT SWREF INTO :nSwRef FROM SW_OPER WHERE REF = :nDocRef ' )
.head 6 -  Set fExists = FALSE
.head 6 +  While SqlFetchNext( conn.hSql(), nFetchRes )
.head 7 +  If NOT fExists
.head 8 +  If NOT SalFileOpen(hFile, strFileName, OF_Write | OF_Text | OF_Append)
.head 9 -  Call conn.Disconnect()
.head 9 -  Return FALSE
.head 8 -  Set fExists = TRUE
.head 7 -  !
.head 7 -  Call SalFilePutStr(hFile, '')
.head 7 -  !
.head 7 -  Call SalFilePutStr(hFile, StrWinToDosX( Sw_MtAsTextEx( hSqlAux2(), nSwRef, nDocRef ) ))
.head 6 +  If fExists
.head 7 -  Call SalFileClose(hFile)
.head 5 -  Call conn.Disconnect()
.head 5 -  Return TRUE
.head 3 -  !
.head 3 +  Function: DosReport			! __exported
.head 4 -  Description: Печать отчета по шаблону из текстового файла
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! Имя файла-шаблона
.head 5 -  String: szReportTemplate
.head 5 -  ! Имя выходного файла
.head 5 -  String: szReportFile
.head 5 -  ! Строка имен переменных (через "~")
.head 5 -  Long String: szBindVar
.head 5 -  ! Строка значений переменных (через "~")
.head 5 -  Long String: szVarValues
.head 5 -  ! Режим печати.
.head 5 -  Number: nMode
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  File Handle: hTempl
.head 5 -  File Handle: hReport
.head 5 -  String: szInput
.head 5 -  String: szOutput
.head 5 -  String: szPartLine
.head 5 -  Number: nPos
.head 5 -  Number: nLen
.head 5 -  Boolean: bIFempty
.head 5 -  Boolean: bPrintEmptyString
.head 4 +  Actions
.head 5 -  Call SalWaitCursor( TRUE )
.head 5 -  Set nLeftMargin = 0
.head 5 -  Set nRightMargin = 0
.head 5 -  Set nTextWidth = 80
.head 5 -  Set nActualWidth = 80
.head 5 -  Set nCenterMode = TextLEFT
.head 5 -  Set bIFempty = FALSE
.head 5 -  Set bPrintEmptyString = TRUE
.head 5 -  ! Call Debug( szBindVar )
.head 5 -  ! Call Debug( szVarValues )
.head 5 +  If ParseVars(szBindVar, szVarValues)
.head 6 +  If SalFileOpen(hTempl, szReportTemplate, OF_Text | OF_Read)
.head 7 +  If SalFileOpen(hReport, szReportFile, OF_Text | OF_Write | OF_Create)
.head 8 +  While SalFileGetStr(hTempl, szInput, 254)
.head 9 -  ! string parsing
.head 9 +  If SalStrLeftX(szInput, 4) != '[REM'
.head 10 -  Set szOutput = TransString(szInput)
.head 10 +  If szOutput = '' and bPrintEmptyString
.head 11 -  Call SalFilePutStr(hReport, '')
.head 9 +  Else
.head 10 -  Set szOutput = ''
.head 9 -  ! string formatting
.head 9 -  Set nActualWidth = nTextWidth - nLeftMargin - nRightMargin
.head 9 -  !
.head 9 +  While szOutput != ''
.head 10 -  Set szPartLine = SalStrLeftX(szOutput, nActualWidth)
.head 10 -  Set nPos = SalStrScan(szPartLine, Chr(13)||Chr(10))
.head 10 +  If nPos != -1
.head 11 -  Set szPartLine = Subs(szPartLine,1,nPos)
.head 10 +  Else
.head 11 -  Set nPos = nActualWidth - 2
.head 10 -  Set nLen = Len(szPartLine)
.head 10 +  If SalStrLength(szPartLine) < nActualWidth
.head 11 +  Select Case nCenterMode
.head 12 +  Case TextLEFT
.head 13 -  Set szPartLine = szPartLine ||
    Spac(nActualWidth-Len(szPartLine))
.head 13 -  Break
.head 12 +  Case TextRIGHT
.head 13 -  Set szPartLine = Spac(nActualWidth-
    Len(szPartLine)) || szPartLine
.head 13 -  Break
.head 12 +  Case TextCENTER
.head 13 -  Set szPartLine = Spac((nActualWidth-
    Len(szPartLine))/2) || szPartLine ||
    Spac((nActualWidth-Len(szPartLine))/2)
.head 13 -  Break
.head 10 -  Set szPartLine = Spac(nLeftMargin) || szPartLine || Spac(nRightMargin)
.head 10 -  ! Set szOutput = IifS(SalStrLength(szOutput) <= nActualWidth and nPos = nActualWidth, '',
    SalStrMidX(szOutput, nPos+1, SalStrLength(szOutput)))
.head 10 -  Set szOutput = IifS(SalStrLength(szOutput) <= nActualWidth and nPos = nActualWidth, '',
    SalStrMidX(szOutput, nPos+2, SalStrLength(szOutput)))
.head 10 +  If SalStrUpperX(SalStrLeftX(SalStrTrimX(szPartLine), 3)) = '#IF' and Len(SalStrTrimX(szPartLine)) = 3
.head 11 -  Set bIFempty = TRUE
.head 11 -  Set bPrintEmptyString = FALSE
.head 10 +  If SalStrUpperX(SalStrLeftX(SalStrTrimX(szPartLine), 6)) = '#ENDIF'
.head 11 -  Set bIFempty = FALSE
.head 11 -  Set bPrintEmptyString = TRUE
.head 10 +  If not bIFempty
.head 11 +  If SalStrUpperX(SalStrLeftX(SalStrTrimX(szPartLine), 6)) != '#ENDIF' and
   SalStrUpperX(SalStrLeftX(SalStrTrimX(szPartLine), 3)) != '#IF'
.head 12 -  Call SalFilePutStr(hReport, szPartLine)
.head 8 -  !
.head 8 -  Call SalFileClose(hReport)
.head 8 -  Call SalFileClose(hTempl)
.head 8 -  ! Call DosDirectPrint(szReportFile)
.head 8 -  !
.head 8 -  Call SalWaitCursor( FALSE )
.head 8 +  ! If nMode != AUTO_PRINT_DOC
.head 9 -          Return MessageNoWait( 'Информация по Банковскому ' || 'документу сохранена в файле: ' ||
       szReportFile, MSG_Information(), 3, 0)
.head 8 -  Return SaveInfoToLog('Информация по Банковскому' || ' документу сохранена в файле: ' ||
       szReportFile)
.head 7 +  Else
.head 8 -  Call SalFileClose(hTempl)
.head 8 -  !
.head 8 -  Call SalWaitCursor( FALSE )
.head 8 -  Return MessageError(MSG_BDP_IOErrorReport || szReportFile || ' !')
.head 6 +  Else
.head 7 -  Call SalWaitCursor( FALSE )
.head 7 -  Return MessageError(MSG_BDP_IOErrorTemplate || szReportTemplate)
.head 3 -  !
.head 3 +  Function: ParseVars
.head 4 -  Description: Разбор строки параметров
.head 4 +  Returns
.head 5 -  Number: nZ
.head 4 +  Parameters
.head 5 -  Long String: szTmpVarList
.head 5 -  Long String: szTmpValList
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nCntVar
.head 4 +  Actions
.head 5 -  ! Call Debug(szTmpVarList)
.head 5 -  ! Call Debug(szTmpValList)
.head 5 -  Set nVarNum = 0
.head 5 -  Set nCntVar = 0
.head 5 -  Set szTmpVarList = SalStrTrimX(szTmpVarList) || '~'
.head 5 -  Set szTmpValList = SalStrTrimX(szTmpValList) || '~'
.head 5 +  While szTmpValList != '' AND szTmpVarList != ''
.head 6 -  Set szVArray[nCntVar, 0] = SalStrTrimX(SalStrLeftX(szTmpVarList, SalStrScan(szTmpVarList, '~')))
.head 6 -  Set szTmpVarList = SalStrMidX(szTmpVarList, SalStrScan(szTmpVarList, '~')+1, SalStrLength(szTmpVarList))
.head 6 -  Set szVArray[nCntVar, 1] = SalStrTrimX(SalStrLeftX(szTmpValList, SalStrScan(szTmpValList, '~')))
.head 6 -  Set szTmpValList = SalStrMidX(szTmpValList, SalStrScan(szTmpValList, '~')+1, SalStrLength(szTmpValList))
.head 6 -  Set nCntVar = nCntVar + 1
.head 5 +  If szTmpValList != '' OR szTmpVarList != ''
.head 6 -  Return MessageError(MSG_BDP_ParValMismatch)
.head 5 -  Set nVarNum = nCntVar - 1
.head 5 -  Return 1
.head 3 +  Function: TransString
.head 4 -  Description: Преобразование ссылок в строке в реальные значения
.head 4 +  Returns
.head 5 -  String: szRes
.head 4 +  Parameters
.head 5 -  String: szSrc
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: szTag
.head 5 -  String: szTagOptions
.head 5 -  String: szRes
.head 5 -  Number: nTagPos
.head 4 +  Actions
.head 5 -  Set nTagPos = SalStrScan(szSrc, '[')
.head 5 +  While nTagPos != -1
.head 6 +  If SalStrMidX(szSrc, nTagPos - 1, 1) = '\\'
.head 7 -  Set szRes = szRes || SalStrLeftX(szSrc, nTagPos - 1) || '['
.head 7 -  Set szSrc = SalStrMidX(szSrc, nTagPos + 1, SalStrLength(szSrc))
.head 7 -  Set nTagPos = SalStrScan(szSrc, '[')
.head 6 +  Else
.head 7 -  Set szRes = szRes || SalStrLeftX(szSrc, nTagPos)
.head 7 -  Set szSrc = SalStrMidX(szSrc, nTagPos+1, SalStrLength(szSrc))
.head 7 -  Set szTag = SalStrLeftX(szSrc, SalStrScan(szSrc, ']'))
.head 7 -  Set szSrc = SalStrMidX(szSrc, SalStrScan(szSrc, ']')+1, SalStrLength(szSrc))
.head 7 -  ! ///
.head 7 -  Set szTagOptions = SalStrTrimX(SalStrMidX(szTag, SalStrScan(szTag, '=')+1, SalStrLength(szTag)))
.head 7 -  Set szTag = SalStrTrimX(SalStrLeftX(szTag, SalStrScan(szTag, '=')))
.head 7 -  ! ///
.head 7 -  Set szRes = szRes || Tagging(szTag , szTagOptions)
.head 7 -  ! ///
.head 7 -  Set nTagPos = SalStrScan(szSrc, '[')
.head 5 -  Set szRes = szRes || szSrc
.head 5 -  Return szRes
.head 3 +  Function: Tagging
.head 4 -  Description: Обрабатывает тэги, изменяет глобальные параметры
.head 4 +  Returns
.head 5 -  String: szRes
.head 4 +  Parameters
.head 5 -  String: szTagName
.head 5 -  String: szTagDet
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: szRefSubTag[5]
.head 5 -  String: szRes
.head 5 -  String: chTypeVar
.head 5 -  String: szVarName
.head 5 -  String: szCut
.head 5 -  Number: nVarLen
.head 5 -  Number: nDecim
.head 5 -  Boolean: fTrimOn
.head 5 -  Number: nOffset
.head 5 -  Number: nn
.head 5 -  ! !
.head 5 -  String: sDecimal
.head 5 -  Number: nScan
.head 5 -  String: sTmp
.head 5 -  String: sDec
.head 4 +  Actions
.head 5 +  If szTagName = 'ESC'
.head 6 -  Set szRes = '[ESC=' || SalStrTrimX(szTagDet) || ']'
.head 5 +  Else If szTagName = 'REF'
.head 6 -  Set szRes = ''
.head 6 -  Set szVarName = ''
.head 6 -  Set chTypeVar = 'C'
.head 6 -  Set nVarLen = 0
.head 6 -  Set nDecim = 0
.head 6 -  Set fTrimOn = FALSE
.head 6 -  !
.head 6 -  Set nn = SalStrTokenize( SalStrTrimX( szTagDet ), '', ',', szRefSubTag )
.head 6 +  If nn
.head 7 -  Set szVarName = szRefSubTag[0]
.head 7 -  Set chTypeVar = szRefSubTag[1]
.head 7 -  Set nVarLen   = SalStrToNumber(szRefSubTag[2])
.head 7 +  If nn > 3
.head 8 -  Set nDecim = SalStrToNumber(szRefSubTag[3])
.head 7 +  If nn > 4
.head 8 +  If SalStrUpperX(szRefSubTag[4]) = 'TRUE'
.head 9 -  Set fTrimOn = TRUE
.head 6 -  Set szRes = SalStrLeftX(GetVarVal(szVarName), nVarLen)
.head 6 +  If NOT fTrimOn
.head 7 +  If chTypeVar = 'C'
.head 8 -  Set szRes =  szRes || Spac(nVarLen-Len(szRes))
.head 7 +  Else If chTypeVar = 'T'
.head 8 -  Set sDecimal = ','
.head 8 -  Set nScan = SalStrScan(szRes, sDecimal)
.head 8 +  If nScan != -1
.head 9 -  Set sDec = Subs(szRes, nScan+1, Len(szRes)-nScan)
.head 9 -  Set szRes = Subs(szRes,1,nScan)
.head 8 +  Else
.head 9 -  Set sDecimal = '.'
.head 9 -  Set nScan = SalStrScan(szRes, sDecimal)
.head 9 +  If nScan != -1
.head 10 -  Set sDec = Subs(szRes, nScan+1, Len(szRes)-nScan)
.head 10 -  Set szRes = Subs(szRes,1,nScan)
.head 9 +  Else
.head 10 -  Set sDec = ''
.head 8 -  Set sTmp = ''
.head 8 +  Loop
.head 9 -  Set sTmp = ' ' || Subs(szRes,Len(szRes)-2,3) || sTmp
.head 9 -  Set szRes = Subs(szRes,1,Len(szRes)-3)
.head 9 +  If szRes = ''
.head 10 -  Break
.head 8 -  Set sTmp = SalStrTrimX(sTmp) || sDec
.head 8 -  Set szRes = Spac(nVarLen-Len(sTmp)) || sTmp
.head 7 +  Else
.head 8 -  Set szRes = Spac(nVarLen-Len(szRes)) || szRes
.head 5 +  Else If szTagName = 'WIDTH'
.head 6 -  Set szRes = ''
.head 6 +  If SalStrIsValidNumber(szTagDet)
.head 7 -  Set nTextWidth = SalStrToNumber(szTagDet)
.head 5 +  Else If szTagName = 'ALIGN'
.head 6 -  Set szRes = ''
.head 6 +  If SalStrUpperX(szTagDet) = 'LEFT'
.head 7 -  Set nCenterMode = TextLEFT
.head 6 +  Else If SalStrUpperX(szTagDet) ='RIGHT'
.head 7 -  Set nCenterMode = TextRIGHT
.head 6 +  Else If SalStrUpperX(szTagDet) = 'CENTER'
.head 7 -  Set nCenterMode = TextCENTER
.head 5 +  Else If szTagName = 'RMARGIN'
.head 6 -  Set szRes = ''
.head 6 +  If SalStrIsValidNumber(szTagDet)
.head 7 -  Set nRightMargin = SalStrToNumber(szTagDet)
.head 5 +  Else If szTagName = 'LMARGIN'
.head 6 -  Set szRes = ''
.head 6 +  If SalStrIsValidNumber(szTagDet)
.head 7 -  Set nLeftMargin = SalStrToNumber(szTagDet)
.head 5 +  Else If szTagName = 'LFEED'
.head 6 -  Set szRes = SalNumberToChar(13) || SalNumberToChar(10)
.head 5 +  Else
.head 6 -  Set szRes = ''
.head 5 -  Return szRes
.head 3 +  Function: GetVarVal
.head 4 -  Description: Возвращает значение переменной по имени
.head 4 +  Returns
.head 5 -  String: szRes
.head 4 +  Parameters
.head 5 -  String: szVarName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nVC
.head 5 -  String: szValue
.head 5 -  Boolean: bFound
.head 4 +  Actions
.head 5 -  Set nVC = 0
.head 5 -  Set bFound  = FALSE
.head 5 +  Loop
.head 6 +  If nVC > nVarNum
.head 7 -  Break
.head 6 +  If szVArray[nVC, 0] = szVarName
.head 7 -  Set bFound = TRUE
.head 7 -  Set szValue = szVArray[nVC, 1]
.head 7 -  Break
.head 6 -  Set nVC = nVC + 1
.head 5 +  If NOT bFound
.head 6 -  Set szValue = ''
.head 5 -  Return szValue
.head 3 -  !
.head 3 +  Function: GetTablePrintOpt		! __exported
.head 4 -  Description: Выбрать опцию печати документов в таблице
.head 4 +  Returns
.head 5 -  Number:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return SalModalDialog(dlg_GetClue, hWndForm)
.head 3 +  Function: DosDirectPrint		! __exported
.head 4 -  Description: Функция прямой досовой печати
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strFName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Boolean: fRet
.head 5 -  String: strParams
.head 4 +  Actions
.head 5 +  If UseBatchPrint()
.head 6 -  Set fRet = SalLoadApp('DPRINT.PIF', SalStrUpperX(strFName))
.head 5 +  Else
.head 6 -  Set strParams = ""
.head 6 +  If RunChoosePrinterDialog()
.head 7 -  Set strParams = strParams || 'C'
.head 6 +  If SalStrUpperX(SalStrTrimX(GetPrintEncoding())) = 'DOS'
.head 7 -  Set strParams = strParams || 'D'
.head 6 +  If SalStrUpperX(SalStrTrimX(GetUkrCharCoding())) = 'NBU'
.head 7 -  Set strParams = strParams || 'U'
.head 6 -  !
.head 6 +  If strParams
.head 7 -  Set strParams = '-' || strParams
.head 6 -  Set fRet = SalLoadApp('DPRINT.EXE', SalStrUpperX(strFName) || ' ' || strParams)
.head 5 -  Return fRet
.head 3 +  Function: DirectView			! __exported
.head 4 -  Description: Функция просмотра документов
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: strFName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Boolean: fRet
.head 4 +  Actions
.head 5 -  !
.head 5 -  Set fRet = SalLoadApp('DVIEW.EXE', SalStrUpperX(strFName))
.head 5 -  !
.head 5 -  Return fRet
.head 3 -  !
.head 3 -  ! //  DATEAPI - Функции
.head 3 -  !
.head 3 +  Function: GetMonthName			! __exported
.head 4 -  Description: Возвращает имя месяца (И.П. или Р.П.)
.head 4 +  Returns
.head 5 -  String: szMonthName
.head 4 +  Parameters
.head 5 -  Number: nMonthNum
.head 5 -  Boolean: bPadegh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: szRes
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Call SqlPrepareAndExecute(hSqlAux(), '
     SELECT name_' || IifS(bPadegh, 'from', 'plain') || '
     INTO :szRes
     FROM Meta_month
     WHERE n=:nMonthNum')
.head 5 -  Call SqlFetchNext(hSqlAux(), nFetchRes)
.head 5 -  Return szRes
.head 3 +  Function: GetMonthNameRus		! __exported
.head 4 -  Description: Возвращает имя месяца (И.П. или Р.П.)
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nMonthNum
.head 5 -  Boolean: bPadegh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: szRes
.head 5 -  String: szColName1[13]
.head 5 -  String: szColName2[13]
.head 4 +  Actions
.head 5 -  Set szColName1[0] = 'эхаль'
.head 5 -  Set szColName1[1] = 'январь'
.head 5 -  Set szColName1[2] = 'февраль'
.head 5 -  Set szColName1[3] = 'март'
.head 5 -  Set szColName1[4] = 'апрель'
.head 5 -  Set szColName1[5] = 'май'
.head 5 -  Set szColName1[6] = 'июнь'
.head 5 -  Set szColName1[7] = 'июль'
.head 5 -  Set szColName1[8] = 'август'
.head 5 -  Set szColName1[9] = 'сентябрь'
.head 5 -  Set szColName1[10] = 'октябрь'
.head 5 -  Set szColName1[11] = 'ноябрь'
.head 5 -  Set szColName1[12] = 'декабрь'
.head 5 -  Set szColName2[0] = 'эхаля'
.head 5 -  Set szColName2[1] = 'января'
.head 5 -  Set szColName2[2] = 'февраля'
.head 5 -  Set szColName2[3] = 'марта'
.head 5 -  Set szColName2[4] = 'апреля'
.head 5 -  Set szColName2[5] = 'мая'
.head 5 -  Set szColName2[6] = 'июня'
.head 5 -  Set szColName2[7] = 'июля'
.head 5 -  Set szColName2[8] = 'августа'
.head 5 -  Set szColName2[9] = 'сентября'
.head 5 -  Set szColName2[10] = 'октября'
.head 5 -  Set szColName2[11] = 'ноября'
.head 5 -  Set szColName2[12] = 'декабря'
.head 5 -  Return IifS(bPadegh, szColName2[nMonthNum],
       szColName1[nMonthNum])
.head 3 +  Function: GetMonthUkr			! __exported
.head 4 -  Description: Возвращает имя месяца (И.П. или Р.П.) укр.
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Date/Time: dData
.head 5 -  String: sPadeg !! 'I,i,И,и' - именительный падеж,
                           'R,r,Р,р' - родительный
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: smMonthNameI[13]
.head 5 -  String: smMonthNameR[13]
.head 4 +  Actions
.head 5 -  Set smMonthNameI[1] = 'січень'
.head 5 -  Set smMonthNameI[2] = 'лютий'
.head 5 -  Set smMonthNameI[3] = 'березень'
.head 5 -  Set smMonthNameI[4] = 'квітень'
.head 5 -  Set smMonthNameI[5] = 'травень'
.head 5 -  Set smMonthNameI[6] = 'червень'
.head 5 -  Set smMonthNameI[7] = 'липень'
.head 5 -  Set smMonthNameI[8] = 'серпень'
.head 5 -  Set smMonthNameI[9] = 'вересень'
.head 5 -  Set smMonthNameI[10] = 'жовтень'
.head 5 -  Set smMonthNameI[11] = 'листопад'
.head 5 -  Set smMonthNameI[12] = 'грудень'
.head 5 -  Set smMonthNameR[1] = 'січня'
.head 5 -  Set smMonthNameR[2] = 'лютого'
.head 5 -  Set smMonthNameR[3] = 'березня'
.head 5 -  Set smMonthNameR[4] = 'квітня'
.head 5 -  Set smMonthNameR[5] = 'травня'
.head 5 -  Set smMonthNameR[6] = 'червня'
.head 5 -  Set smMonthNameR[7] = 'липня'
.head 5 -  Set smMonthNameR[8] = 'серпня'
.head 5 -  Set smMonthNameR[9] = 'вересня'
.head 5 -  Set smMonthNameR[10] = 'жовтня'
.head 5 -  Set smMonthNameR[11] = 'листопада'
.head 5 -  Set smMonthNameR[12] = 'грудня'
.head 5 -  Return IifS(sPadeg = 'I' or sPadeg = 'i' or sPadeg = 'И' or
            sPadeg = 'и', smMonthNameI[SalDateMonth(dData)],
            smMonthNameR[SalDateMonth(dData)])
.head 3 +  Function: GetMonthArray			! __exported
.head 4 -  Description: Заполняет массив строк из 12 элементов - имен месяцев
.head 4 +  Returns
.head 5 -  Boolean: fRet
.head 4 +  Parameters
.head 5 -  Receive String: strMonthArray[12]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strMonth
.head 5 -  Number: nNum
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Set nNum=0
.head 5 -  !
.head 5 -  Call SqlPrepareAndExecute(hSqlAux(), 'SELECT name_plain FROM Meta_month INTO :strMonth')
.head 5 -  !
.head 5 +  While SqlFetchNext(hSqlAux(), nFetchRes) And nNum < 12
.head 6 -  Set strMonthArray[nNum]=SalStrProperX(strMonth)
.head 6 -  Set nNum = nNum + 1
.head 5 -  !
.head 5 -  Return TRUE
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: GetMonthArrayRus		! __exported
.head 4 -  Description: Заполняет массив из 12 элементов - имен месяцев
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Receive String: strMonthArray[12]
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Set strMonthArray[0] = 'Январь'
.head 5 -  Set strMonthArray[1] = 'Февраль'
.head 5 -  Set strMonthArray[2] = 'Март'
.head 5 -  Set strMonthArray[3] = 'Апрель'
.head 5 -  Set strMonthArray[4] = 'Май'
.head 5 -  Set strMonthArray[5] = 'Июнь'
.head 5 -  Set strMonthArray[6] = 'Июль'
.head 5 -  Set strMonthArray[7] = 'Август'
.head 5 -  Set strMonthArray[8] = 'Сентябрь'
.head 5 -  Set strMonthArray[9] = 'Октябрь'
.head 5 -  Set strMonthArray[10] = 'Ноябрь'
.head 5 -  Set strMonthArray[11] = 'Декабрь'
.head 5 -  Return TRUE
.head 3 +  Function: GetWeekDayName		! __exported
.head 4 -  Description: Возвращает имя дня недели по номеру
.head 4 +  Returns
.head 5 -  String: strName
.head 4 +  Parameters
.head 5 -  Number: nWeekDayNumber
.head 5 -  Boolean: fShort
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strName
.head 4 +  Actions
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 +  Select Case nWeekDayNumber
.head 6 +  Case 0
.head 7 +  If fShort
.head 8 -  Set strName = 'Сб'
.head 7 +  Else
.head 8 -  Set strName = 'Суббота'
.head 7 -  Break
.head 6 +  Case 1
.head 7 +  If fShort
.head 8 -  Set strName = 'Вс'
.head 7 +  Else
.head 8 -  Set strName = 'Воскресенье'
.head 7 -  Break
.head 6 +  Case 2
.head 7 +  If fShort
.head 8 -  Set strName = 'Пн'
.head 7 +  Else
.head 8 -  Set strName = 'Понедельник'
.head 7 -  Break
.head 6 +  Case 3
.head 7 +  If fShort
.head 8 -  Set strName = 'Вт'
.head 7 +  Else
.head 8 -  Set strName = 'Вторник'
.head 7 -  Break
.head 6 +  Case 4
.head 7 +  If fShort
.head 8 -  Set strName = 'Ср'
.head 7 +  Else
.head 8 -  Set strName = 'Среда'
.head 7 -  Break
.head 6 +  Case 5
.head 7 +  If fShort
.head 8 -  Set strName = 'Чт'
.head 7 +  Else
.head 8 -  Set strName = 'Четверг'
.head 7 -  Break
.head 6 +  Case 6
.head 7 +  If fShort
.head 8 -  Set strName = 'Пт'
.head 7 +  Else
.head 8 -  Set strName = 'Пятница'
.head 7 -  Break
.head 6 +  Default
.head 7 -  Set strName = ''
.head 7 -  Break
.head 5 -  !
.head 5 -  Return strName
.head 5 -  !
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: GetWeekDayArray		! __exported
.head 4 -  Description: Заполняет массив из 7 строковых элементов - имен дней недели
.head 4 +  Returns
.head 5 -  Boolean: fRet
.head 4 +  Parameters
.head 5 -  String: strDayName[7]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nNum
.head 4 +  Actions
.head 5 -  Set nNum = 0
.head 5 +  Loop
.head 6 +  If nNum >= 7
.head 7 -  Break
.head 6 +  If nNum = 6
.head 7 -  Set strDayName[nNum] = GetWeekDayName(0, TRUE)
.head 7 -  Break
.head 6 -  Set strDayName[nNum] = GetWeekDayName(nNum+1, TRUE)
.head 6 -  Set nNum = nNum + 1
.head 5 -  Return TRUE
.head 3 +  Function: SalFmtFormatStrDateTime	! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 +  Parameters
.head 5 -  String: strDateTime
.head 5 -  String: strMask
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nDay
.head 5 -  Number: nMonth
.head 5 -  Number: nYear
.head 5 -  Number: nHour
.head 5 -  Number: nMinute
.head 5 -  Number: nSecond
.head 5 -  !
.head 5 -  Number: i
.head 5 -  String: strMaskChar
.head 5 -  String: strIntmd
.head 5 -  Number: nVal
.head 5 -  !
.head 5 -  Number: pos1
.head 5 -  Number: posN
.head 4 +  Actions
.head 5 -  Set nDay = 0
.head 5 -  Set nMonth = 0
.head 5 -  Set nYear = 0
.head 5 -  Set nHour = 0
.head 5 -  Set nMinute = 0
.head 5 -  Set nSecond = 0
.head 5 -  !
.head 5 -  Call SalStrTrim(strDateTime, strDateTime)
.head 5 -  Call SalStrTrim(strMask, strMask)
.head 5 -  !
.head 5 -  Set i = 0
.head 5 +  While i < SalStrLength(strMask)
.head 6 -  Set strMaskChar = SalStrMidX(strMask, i, 1)
.head 6 -  Set strIntmd = strMaskChar
.head 6 -  Set pos1= i
.head 6 +  While strMaskChar = strIntmd AND  i < SalStrLength(strMask)
.head 7 -  Set i = i + 1
.head 7 -  Set strMaskChar = SalStrMidX(strMask, i, 1)
.head 6 -  Set posN = i - 1
.head 6 -  Set nVal = SalStrToNumber(SalStrMidX(strDateTime, pos1, posN - pos1+1))
.head 6 +  If strIntmd = 'd'
.head 7 -  Set nDay = nVal
.head 6 +  Else If strIntmd = 'M'
.head 7 -  Set nMonth = nVal
.head 6 +  Else If strIntmd = 'y'
.head 7 -  Set nYear = nVal
.head 6 +  Else If strIntmd = 'h'
.head 7 -  Set nHour = nVal
.head 6 +  Else If strIntmd = 'm'
.head 7 -  Set nMinute = nVal
.head 6 +  Else If strIntmd = 's'
.head 7 -  Set nSecond = nVal
.head 5 +  If nYear < 50
.head 6 -  Set nYear = 2000 + nYear
.head 5 +  Else If nYear < 100
.head 6 -  Set nYear = 1900 + nYear
.head 5 -  ! Call SalMessageBox('Day: ' || SalNumberToStrX(nDay, 0) || PutCrLf() ||
'Month: ' || SalNumberToStrX(nMonth, 0) || PutCrLf() ||
'Year: ' || SalNumberToStrX(nYear, 0) || PutCrLf() ||
'Hour: ' || SalNumberToStrX(nHour, 0) || PutCrLf() ||
'Minute: ' || SalNumberToStrX(nMinute, 0) || PutCrLf() ||
'Second: ' || SalNumberToStrX(nSecond, 0) || PutCrLf(), 'Debug', 0)
.head 5 -  Return SalDateConstruct(nYear, nMonth, nDay, nHour, nMinute, nSecond)
.head 3 +  Function: AddMonths             	! __exported
.head 4 -  Description: Возвращает Дату + n Месяцев
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 +  Parameters
.head 5 -  Date/Time: dDat
.head 5 -  Number: nN
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nNextM
.head 5 -  ! Number: nDay
.head 5 -  ! Number: nDayL
.head 5 -  Number: nYear
.head 4 +  Actions
.head 5 -  ! Set nNextM = SalDateMonth(dDat) + nN - 1
.head 5 -  ! Set nDay = SalDateDay(dDat)
.head 5 -  ! Set nDayL=SalDateDay(SalDateConstruct(
    SalDateYear(dDat)+SalNumberTruncate((nNextM+1)/12,15,0),
    SalNumberMod(nNextM+1,12)+1,1,0,0,0)-1)
.head 5 +  ! If nDay > nDayL
.head 6 -  Set nDay = nDayL
.head 5 -  ! Return SalDateConstruct(SalDateYear(dDat)+SalNumberTruncate(nNextM/12,10,0),
       SalNumberMod(nNextM,12)+1, nDay, 0, 0, 0)
.head 5 -  Set nNextM = SalDateMonth(dDat) + nN
.head 5 -  Set nYear = SalDateYear(dDat)
.head 5 +  Loop
.head 6 +  If nNextM > 12
.head 7 -  Set nNextM = nNextM - 12
.head 7 -  Set nYear = nYear + 1
.head 6 +  Else
.head 7 -  Break
.head 5 +  Loop
.head 6 +  If nNextM <= 0
.head 7 -  Set nNextM = nNextM + 12
.head 7 -  Set nYear = nYear - 1
.head 6 +  Else
.head 7 -  Break
.head 5 -  Return SalDateConstruct(nYear, nNextM, SalDateDay(dDat), 0, 0, 0)
.head 3 -  !
.head 3 -  ! Функції для оплати документів (Oracle / Informix)
.head 3 -  !
.head 3 +  Function: Ref				! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Receive Number: nRef
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 7 +  If not SqlPLSQLCommand(hSql(), "gl.ref(nRef)")
.head 8 -  Break
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(), "informix.ref","", ":nRef") 
.head 8 -  Break
.head 7 +  If not SqlExecute (hSql())
.head 8 -  Break
.head 7 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Break
.head 6 -  Return TRUE
.head 5 -  Call SqlRollbackEx(hSql(),'Неуспех при получении РЕФЕРЕНЦИИ')
.head 5 -  Return FALSE
.head 3 +  Function: In_Pay			! __exported
.head 4 -  Description: Вставка проводки в OPLDOK
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nFl
.head 5 -  Number: nRef
.head 5 -  String: sVdat
.head 5 -  String: sTT
.head 5 -  Number: nKv
.head 5 -  Number: nDk
.head 5 -  Number: nNls
.head 5 -  Number: nS
.head 5 -  Number: nSq
.head 5 -  String: sTxt
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  String: sNls
.head 5 -  Date/Time: dVdat
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 7 -  Set dVdat=MMddyyyyToDate(sVdat)
.head 7 -  Set sNls=SalNumberToStrX(nNls,0)
.head 7 +  If not SqlPLSQLCommand(hSql(),"gl.pay(nFl,nRef,dVdat,sTT,nKv,nDk,sNls,nS,nSq,sTxt)")
.head 8 -  Break
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(), "informix.pay",":nFl,:nRef,:sVdat,:sTT,:nKv,:nDk,:nNls,:nS,:nSq,:sTxt", "")
.head 8 -  Break
.head 7 +  If not SqlExecute (hSql())
.head 8 -  Break
.head 6 -  Return TRUE
.head 5 -  Call SqlRollbackEx(hSql(),'Неуспех при вставке документа в OPLDOK')
.head 5 -  Return FALSE
.head 3 +  Function: In_PayV			! __exported
.head 4 -  Description: Вставка мультивалютных проводок в OPLDOK
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nFl      ! Флаг План/Факт
.head 5 -  Number: nRef     ! Референция
.head 5 -  Date/Time: dVdat ! Дата валютирования
.head 5 -  String: sTT      ! Тип транзакции
.head 5 -  Number: nDk      ! Признак Дебет/Кредит 
.head 5 -  Number: nKv1     ! Код валюты 1
.head 5 -  Number: sNls1    ! Счет А
.head 5 -  Number: nS1      ! Сумма номинала в валюте 1
.head 5 -  Number: nKv2     ! Код валюты 2
.head 5 -  Number: sNls2    ! Счет Б
.head 5 -  Number: nS2      ! Сумма номинала в валюте 2
.head 5 -  Number: nS1Q     ! Сумма еквивалента в валюте 1
.head 5 -  Number: nS2Q     ! Сумма еквивалента в валюте 2
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 7 +  If not SqlPLSQLCommand(hSql(),"gl.payv(nFl,nRef,dVdat,sTT,nDk,nKv1,sNls2,nS1,nKv2,sNls2,nS2,nS1Q,nS2Q)")
.head 8 -  Break
.head 6 +  Else
.head 7 -  ! Set dVdat=MMddyyyyToDate(sVdat)
.head 7 -  ! Set sNls=SalNumberToStrX(nNls,0)
.head 7 -  ! Set sNls2=SalNumberToStrX(nNls2,0)
.head 7 +  If not SqlRetrieve(hSql(), "informix.payv",":nRef,:sVdat,:sTT,:nDk,:nKv,:nNls,:nS,:nKv2,nNls2,:nS2", "")
.head 8 -  Break
.head 7 +  If not SqlExecute (hSql())
.head 8 -  Break
.head 6 -  Return TRUE
.head 5 -  Call SqlRollbackEx(hSql(),'Неуспех при записи проводок в OPLDOK')
.head 5 -  Return FALSE
.head 3 +  Function: Op_Reg			! __exported
.head 4 -  Description: Открытие и регистрация счетов 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nMod   !  0       1       2    способ регистрации
.head 5 -  Number: nP1    ! Тип ЦБ | N дог | N дог | 
.head 5 -  Number: nP2    ! N эмис |  -    | N зал |
.head 5 -  Number: nP3    !    -   |  -    | M зал |
.head 5 -  Receive Number: nP4     !  -   | N дог/зал|
.head 5 -  Number: nRnk   ! рег номер 
.head 5 -  String: sNls   ! номер счета 
.head 5 -  Number: nKv    ! код валюты счета 
.head 5 -  String: sNms   ! наименование счета
.head 5 -  String: sTip   ! тип счета
.head 5 -  Number: nIsp   ! исполнитель
.head 5 -  Receive Number: nAcc   ! номер счета открывшийся или Null
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  String: dinStr
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 -  Set dinStr=GetDBMS()
.head 6 -  Set dinStr=SalStrUpperX(GetDBMS())
.head 6 +  If SalStrTrimX(dinStr)='ORACLE'
.head 7 +  If not SqlPLSQLCommand(hSql(), "op_reg(nMod,nP1,nP2,nP3,nP4,nRnk,sNls,nKv,sNms,sTip,nIsp,nAcc)")
.head 8 -  Break
.head 6 +  Else
.head 7 -  Call SalMessageBox("Для INFORMIX пока не реализовано","Sorry",MB_IconHand)
.head 7 -  Break
.head 6 -  ! Call P_Doc()
.head 6 -  Return TRUE
.head 5 -  Call SqlRollbackEx(hSql(),'Не удалось открыть счет '||sNls)
.head 5 -  Return FALSE
.head 3 +  Function: Pay_Bck			! __exported
.head 4 -  Description: Откат оплаты документа
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nRef   ! референция документа
.head 5 -  Number: nLev   ! уровень обратной оплаты   (1-3-5)
.head 5 -  String: sTT    ! код операции  (пока не реализовано)
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nFetchRes
.head 5 -  ! String: sNls
.head 5 -  ! Date/Time: dVdat
.head 5 -  String: sErrTxt
.head 5 -  Number: nRefH
.head 5 -  Number: nRefL
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 7 -  Set nRefH=nRef
.head 7 +  While nRefH
.head 8 +  If not SqlPrepareAndExecute(hSql(),
  "SELECT refl INTO :nRefL
     FROM oper
    WHERE ref=:nRefH")
.head 9 -  Set sErrTxt = 'Ош. компиляции SQL выражения'
.head 9 -  Break
.head 8 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 9 -  Set sErrTxt = 'Нет документа Ref:'||SalNumberToStrX(nRefH, 0)
.head 9 -  Break
.head 8 +  If not SqlPLSQLCommand(hSql(),"gl.pay_bck(nRefH, nLev)")
.head 9 -  Set sErrTxt = 'Ош. отката документа Ref:'||SalNumberToStrX(nRefH, 0)
.head 9 -  Break
.head 8 +  If nRefL
.head 9 -  Set nRefH = nRefL
.head 8 +  Else
.head 9 -  Call SaveFInfoToLog('Выполнен откат документа Ref:'|| SalNumberToStrX(nRefH,0))
.head 9 -  Return TRUE
.head 7 -  Call SqlRollback(hSql())
.head 7 -  Call MessageErrorEx(sErrTxt)
.head 7 -  Return FALSE
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(), 'informix.pay_bck', ':nRef', '')
.head 8 -  Break
.head 7 +  If not SqlExecute (hSql())
.head 8 -  Break
.head 6 -  Call SaveFInfoToLog('Выполнен откат документа Ref:'|| SalNumberToStrX(nRef,0))
.head 6 -  Return TRUE
.head 5 -  Return FALSE
.head 3 +  Function: Ful_Bak			! __exported
.head 4 -  Description: Полный убой документа
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nRef ! референция документа для убоя
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  While TRUE
.head 6 +  If SalStrTrimX(SalStrUpperX(GetDBMS()))='ORACLE'
.head 7 +  If not SqlPLSQLCommand(hSql(), "ful_bak(nRef)")
.head 8 -  Break
.head 6 +  Else
.head 7 +  If not SqlRetrieve(hSql(), 'informix.ful_bak', ':nRef', '')
.head 8 -  Break
.head 7 +  If not SqlExecute(hSql())
.head 8 -  Break
.head 6 +  If not SqlCommitEx(hSql(),'Убили документ №:'||Str(nRef)||' (насмерть - Ful_Bak)')
.head 7 -  Break
.head 6 -  Return TRUE
.head 5 -  Return FALSE
.head 3 +  Function: MMddyyyyToDate		! __exported
.head 4 -  Description: Из символьной дати  типа  Informix   ->  в  дату
.head 4 +  Returns
.head 5 -  Date/Time:
.head 4 +  Parameters
.head 5 -  String: sDat
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nYear
.head 5 -  Number: nMonth
.head 5 -  Number: nDay
.head 5 -  Date/Time: dtBankDate
.head 4 +  Actions
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 -  !
.head 5 -  Set nDay=SalStrToNumber(SalStrMidX(sDat, 3, 2))
.head 5 -  Set nMonth=SalStrToNumber(SalStrMidX(sDat, 0, 2))
.head 5 -  Set nYear=SalStrToNumber(SalStrMidX(sDat, 6, 4))
.head 5 -  !
.head 5 -  Set dtBankDate=SalDateConstruct(nYear, nMonth, nDay, 0, 0, 0)
.head 5 -  !
.head 5 -  Return dtBankDate
.head 5 -  !
.head 5 -  ! ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 3 +  Function: EnableWindow			! __exported
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Window Handle: hwndWnd
.head 5 -  Boolean: isEnable
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If isEnable
.head 6 -  Call SalEnableWindow (hwndWnd)
.head 6 -  Call SalColorSet (hwndWnd, COLOR_IndexWindow, COLOR_Default)
.head 6 -  Call SalColorSet (hwndWnd, COLOR_IndexWindowText, COLOR_Default)
.head 5 +  Else
.head 6 -  Call SalColorSet (hwndWnd, COLOR_IndexWindow, COLOR_3DHighlight)
.head 6 -  Call SalColorSet (hwndWnd, COLOR_IndexWindowText, COLOR_SysWindowText)
.head 6 -  Call SalDisableWindow (hwndWnd)
.head 3 -  !
.head 3 -  ! Функция инициализации подписи
.head 3 -  !
.head 3 +  ! Function: S_Ini				! __exported
.head 4 -  Description: Инициализировать ЭЦП
.head 4 +  Returns 
.head 5 -  Boolean: 
.head 4 -  Parameters 
.head 4 +  Static Variables 
.head 5 -  Boolean: bRsaInited
.head 4 +  Local variables 
.head 5 -  String: strUxDateTime
.head 5 -  String: strDay
.head 5 -  Number: nDay
.head 5 -  Number: nErrorSign
.head 5 -  String: strErrorSign
.head 4 +  Actions 
.head 5 +  If bRsaInited
.head 6 -  Return TRUE
.head 5 -  Call ClearPinCode()
.head 5 +  If GetSignType() = UKR() or GetSignType() = NBU()
.head 6 -  Set nErrorSign = NUMBER_Null
.head 6 +  While TRUE
.head 7 +  If GetPinCode()=''
.head 8 +  If ShowInputPinCode()
.head 9 +  If GetSignType()=NBU()
.head 10 -  Set strUxDateTime='1998/01/18 08:08:08'
       !!! ТОЛЬКО ДЛЯ ОТЛАДКИ !!!
.head 10 -  ! Set strUxDateTime=SalFmtFormatDateTime(
         SalDateCurrent(),'yyyy/MM/dd hhh:mm:ss')
.head 10 -  !
.head 10 -  Set nErrorSign=INIT_ZAH(GetOpenKeyDir(), GetSecretKeyDrv(), GetIdOper(), strUxDateTime, GetPinCode())
.head 10 -  !
.head 10 +  If nErrorSign= -70
.head 11 -  Call MessageErrorEx('>> RSA. Последний день действия секретного ключа')
.head 10 +  Else If nErrorSign> -77 And nErrorSign< -70
.head 11 -  Set nDay= - nErrorSign - 70
.head 11 +  If nDay=1
.head 12 -  Set strDay='день'
.head 11 +  Else If nDay=2 Or nDay=3 Or nDay=4
.head 12 -  Set strDay='дня'
.head 11 +  Else If nDay=5 Or nDay=6
.head 12 -  Set strDay='дней'
.head 11 -  Call MessageErrorEx('>> RSA. Срок действия секретного ключа прекращается через ' || NumberToStr(nDay) || ' ' || strDay)
.head 10 +  Else If nErrorSign!=0
.head 11 -  Break 
.head 9 +  Else 
.head 10 -  ! Cipher 98
.head 10 -  Set nErrorSign=nsignInitOPSign(GetOpenKeyDir(), GetSecretKeyDrv(), GetPinCode(), GetBankMfo())
.head 10 -  ! Cipher 99    с  ОперИдом
.head 10 -  ! Set nErrorSign=nsignInitOPSign(GetOpenKeyDir(), GetSecretKeyDrv(), GetPinCode(), GetBankMfo(),GetIdOper())
.head 10 -  ! Set nErrorSign=nsignInitOPSign(GetOpenKeyDir(), GetSecretKeyDrv(), GetPinCode(), '351447',GetIdOper())
.head 10 +  If nErrorSign!=0
.head 11 -  Break 
.head 9 -  Call SaveInfoToLog('>> RSA- инициализация - OK')
.head 9 -  Set bRsaInited=TRUE
.head 9 -  Return TRUE
.head 8 +  Else 
.head 9 -  Break 
.head 7 +  Else 
.head 8 -  Break 
.head 6 -  Set strErrorSign = Spac(129)
.head 6 +  If nErrorSign != NUMBER_Null ! обработка ошибок ЭЦП
.head 7 +  If GetSignType()=NBU()
.head 8 -  Set strErrorSign='>> RSA. Ошибка инициализации ЭЦП: ' || NumberToStr(nErrorSign)
.head 8 -  ! Call CLOSE_ZAH()
.head 8 -  Call MessageErrorEx(strErrorSign)
.head 7 +  Else 
.head 8 -  Call nsignMapError2Text(strErrorSign, nErrorSign)
.head 8 -  Call MessageErrorEx('>> CIP. ' || StrDosToWinX(strErrorSign))
.head 8 -  Call nsignExitOPSign()
.head 6 -  Call ClearPinCode()
.head 6 -  Return FALSE
.head 6 -  !
.head 5 +  Else 
.head 6 -  Return MessageErrorEx('Неизвестная система  ЭЦП: ' || GetSignType())
.head 5 -  ! //////////////////////////////////////////////////////////////////////////////////////////////////////////////
.head 5 +  ! Комментарий
.head 6 -  ! 'NBU' -- используется ЭЦП НБУ
.head 6 -  ! 'UKR' -- используется ЭЦП Банка 'Украина'
.head 3 +  Function: ConPara			! __exported
.head 4 -  Description: Сохраняет или получает значения системных
переменных SqlDatabase,SqlUser,SqlPassword
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sMod
.head 4 +  Static Variables
.head 5 -  String: SavDatabase
.head 5 -  String: SavUser
.head 5 -  String: SavPassword
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If sMod = 'PUSH'
.head 6 -  Set SavDatabase = SqlDatabase
.head 6 -  Set SavUser = SqlUser
.head 6 -  Set SavPassword = SqlPassword
.head 5 +  Else
.head 6 -  Set SqlDatabase = SavDatabase
.head 6 -  Set SqlUser = SavUser
.head 6 -  Set SqlPassword = SavPassword
.head 3 -  ! Функции SWIFT
.head 3 +  Function: Sw_MtAsText			! __exported
.head 4 -  Description: Возвращает текстовое представление SWIFT
сообщения по его референсу
.head 4 +  Returns
.head 5 -  Long String:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSql_
.head 5 -  Number: nDRef
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: Result
.head 5 -  String: strSQL
.head 5 -  Number: nFetchRes
.head 5 -  Number: nSWCurId
.head 5 -  Number: nSWId
.head 5 -  String: strTag
.head 5 -  String: strOpt
.head 5 -  Long String: strVal
.head 5 -  String: strValShort
.head 5 -  String: strSeq
.head 5 -  String: nSortN
.head 5 -  !
.head 5 -  String: strInd
.head 5 -  String: strMT
.head 5 -  String: strSender
.head 5 -  String: strSndrName
.head 5 -  String: strReceiver
.head 5 -  String: strRcvrName
.head 5 -  Number: nValLen
.head 4 +  Actions
.head 5 -  Set Result = ""
.head 5 -  Set strSQL = "
 SELECT j.mt, j.io_ind,
        j.sender,  NVL(b1.name,'Отсутствует в справочнике'),
        j.receiver,NVL(b2.name,'Отсутствует в справочнике')
 INTO :strMT, :strInd, :strSender, :strSndrName, :strReceiver, :strRcvrName
 FROM sw_journal j, sw_banks b1, sw_banks b2
 WHERE j.swref = :nDRef    AND
       b1.bic(+)  = j.sender  AND
       b2.bic(+)  = j.receiver "
.head 5 +  If SqlPrepareAndExecute( hSql_, strSQL )
.head 6 +  If SqlFetchNext( hSql_, nFetchRes )
.head 7 -  Set Result = SalStrRepeatX( '-', 60 ) || PutCrLf() ||
                       'Message : MT' || strMT || ' (' || strInd || ')' || PutCrLf()
.head 7 -  Set Result = Result || 'Sender  : ' || strSender   || PutCrLf()
.head 7 -  Set Result = Result || '          ' || strSndrName || PutCrLf()
.head 7 -  Set Result = Result || 'Receiver: ' || strReceiver || PutCrLf()
.head 7 -  Set Result = Result || '          ' || strRcvrName || PutCrLf()
.head 7 -  Set Result = Result || 'Message Body' || PutCrLf()
.head 5 -  !
.head 5 -  ! Определяем версию таблиц SWIFT по длине поля SW_OPERW.VALUE
.head 5 -  !
.head 5 -  Set nValLen = 200
.head 5 -  Set strSQL = "
select data_length into :nValLen
  from all_tab_columns
 where owner = 'BARS'
    and table_name = 'SW_OPERW'
    and column_name = 'VALUE' "
.head 5 +  If SqlPrepareAndExecute( hSql_, strSQL )
.head 6 -  Call SqlFetchNext( hSql_, nFetchRes )
.head 5 +  If nValLen > 254
.head 6 -  Set strSQL = "
 SELECT w.swref, w.tag, w.opt, w.value, w.seq, w.n
 INTO :nSWId, :strTag, :strOpt, :strVal, :strSeq, :nSortN
 FROM sw_operw w
 WHERE w.swref=:nDRef
 ORDER BY w.swref, w.n "
.head 5 +  Else
.head 6 -  Set strSQL = "
 SELECT w.swref, w.tag, w.opt, w.value, w.seq, w.n
 INTO :nSWId, :strTag, :strOpt, :strValShort, :strSeq, :nSortN
 FROM sw_operw w
 WHERE w.swref=:nDRef
 ORDER BY w.swref, w.n "
.head 5 -  Call SqlPrepareAndExecute( hSql_, strSQL )
.head 5 +  While SqlFetchNext( hSql_, nFetchRes )
.head 6 +  If nValLen < 255
.head 7 -  Set strVal = strValShort
.head 6 -  Set strVal = VisStrSubstitute( strVal, PutCrLf(), Chr(13) )
.head 6 -  Set strVal = VisStrSubstitute( strVal, Chr(13), PutCrLf() || '      '  )
.head 6 -  Set Result = Result || SalStrRepeatX(' ', 4-SalStrLength(strTag||strOpt)) ||
    strTag || strOpt || ': ' || strVal || PutCrLf()
.head 5 -  Return Result
.head 3 -  !
.head 3 +  Function: DigInit                       ! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nMaxDig
.head 4 +  Actions
.head 5 +  If not SqlPrepareAndExecute( hSql(), '
   SELECT max(dig) INTO :nMaxDig FROM tabval ' )
.head 6 -  Return -1
.head 5 +  If not SqlFetchNext( hSql(), nFetchRes )
.head 6 -  Return -1
.head 5 -  Return nMaxDig
.head 3 +  Function: Dig4                          ! __exported
.head 4 -  Description: преобразуем decimal-столбец в строковый с nDig знаками
после запятой и пробелами до nMaxDig,
!предполагается, что текущая сумма уже поделена на 100!
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  Number: nCol
.head 5 -  Number: nDig
.head 5 -  Number: nMaxDig
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sCol
.head 5 -  String: sMaska
.head 4 +  Actions
.head 5 -  ! преобразуем decimal-столбец в строковый с nDig знаками
  после запятой и пробелами до nMaxDig
.head 5 -  Set sMaska = '# ##0'
.head 5 +  If SalStrMidX( SalNumberToStrX( 1.1, 1 ), 1, 1 ) = '.'
.head 6 -  Set sMaska = sMaska || '.'
.head 5 +  Else
.head 6 -  Set sMaska = sMaska || ','
.head 5 -  Set sCol = SalFmtFormatNumber( nCol*SalNumberPower( 10, 2-nDig ), sMaska || SalStrRepeatX('0',nDig) )
.head 5 -  Set sCol = sCol || SalStrRepeatX( ' ', (nMaxDig - nDig)*2)
.head 5 -  Return sCol
.head 3 +  Function: KvitD                         ! __exported
.head 4 -  Description: Сформировать квитанцию D при сторнировании документа, пришедшего по системе КЛИЕНТ-БАНК
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Number: nRef
.head 5 -  String: strPathD
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sIDF
.head 5 -  String: sIDD
.head 5 -  String: sBACKR
.head 5 -  String: sFN
.head 5 -  String: sLine
.head 5 -  File Handle: hFile
.head 4 +  Actions
.head 5 -  ! Проверяем, документ из КЛИЕНТ-БАНК или нет
.head 5 -  Call SqlPrepareAndExecute(hSql(), "
  SELECT a.value,b.value,c.value
  INTO :sIDF,:sIDD,:sBACKR
  FROM operw a, operw b, operw c
  WHERE a.ref=:nRef and a.tag='IDF' and a.ref=b.ref and b.tag='IDD' and a.ref=c.ref and c.tag='BACKR'")
.head 5 -  ! Нет
.head 5 +  If not SqlFetchNext(hSql(), nFetchRes)
.head 6 -  Return TRUE
.head 5 +  If sBACKR != GetGlobalOption('FM_BACK')
.head 6 -  ! Формируем квитанцию D
.head 6 -  Set sFN = strPathD || '\\^D' || Subs(sIDF, 3, 6) || '.' || Subs(sIDF, 10, 3)
.head 6 -  Call SalFileOpen(hFile, sFN, OF_Create | OF_Text | OF_Write | OF_Share_Deny_None)
.head 6 -  Set sLine = sIDD || ' ' || sIDF || ' ' || '001' || ' ' || PadR(sBACKR, 140)
.head 6 -  Call SalFilePutStr(hFile, StrWinToDosX(sLine))
.head 6 -  Call SalFileClose(hFile)
.head 6 -  Return File(sFN)
.head 5 +  Else
.head 6 -  Return TRUE
.head 3 +  Function: Sw_MtAsTextEx			! __exported	
.head 4 -  Description: Возвращает текстовое представление SWIFT 
по референсу сообщения и референсу документа
.head 4 +  Returns
.head 5 -  Long String:
.head 4 +  Parameters
.head 5 -  Sql Handle: hSql_
.head 5 -  Number: nSwRef
.head 5 -  Number: nRef
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: Result
.head 5 -  String: strSQL
.head 5 -  Number: nFetchRes
.head 5 -  Number: nSWCurId
.head 5 -  Number: nSWId
.head 5 -  String: strTag
.head 5 -  String: strOpt
.head 5 -  Long String: strVal
.head 5 -  String: strValShort
.head 5 -  String: strSeq
.head 5 -  String: nSortN
.head 5 -  !
.head 5 -  String: strInd
.head 5 -  String: strMT
.head 5 -  String: strSender
.head 5 -  String: strSndrName
.head 5 -  String: strSndrAdr
.head 5 -  String: strReceiver
.head 5 -  String: strRcvrName
.head 5 -  String: strRcvrAdr
.head 5 -  Number: nValLen
.head 5 -  !
.head 5 -  Number: nStmt
.head 5 -  Number: nStmtNum
.head 5 -  Number: nMt
.head 5 -  Number: nInd
.head 5 -  String: strFldName
.head 4 +  Actions
.head 5 -  Set Result = ""
.head 5 -  Set strSQL = "select
                                  j.mt, 
                                  j.io_ind,
                                  j.sender,   nvl(b1.name, 'Отсутствует в справочнике'), b1.office,
                                  j.receiver, nvl(b2.name, 'Отсутствует в справочнике'), b2.office,
                                  (select count(*) from dual 
                                   where exists (select 1 from sw_stmt s where s.mt = j.mt))
                          into :nMt, :strInd, :strSender, :strSndrName, :strSndrAdr, :strReceiver, :strRcvrName, :strRcvrAdr, :nStmt
                         from sw_journal j, sw_banks b1, sw_banks b2
                       where j.swref = :nSwRef
                           and b1.bic(+)  = j.sender
                           and b2.bic(+)  = j.receiver"
.head 5 +  If SqlPrepareAndExecute( hSql_, strSQL )
.head 6 +  If SqlFetchNext( hSql_, nFetchRes )
.head 7 -  Set Result = SalStrRepeatX( '-', 60 ) || PutCrLf() ||
                     'Message : MT' || Str(nMt) || ' (' || strInd || ')' || PutCrLf()
.head 7 -  Set Result = Result || 'Sender  : ' || strSender   || PutCrLf()
.head 7 -  Set Result = Result || '          ' || strSndrName || PutCrLf()
.head 7 +  If strSndrAdr
.head 8 -  Set Result = Result || '          ' || strSndrAdr || PutCrLf()
.head 7 -  Set Result = Result || 'Receiver: ' || strReceiver || PutCrLf()
.head 7 -  Set Result = Result || '          ' || strRcvrName || PutCrLf()
.head 7 +  If strRcvrAdr
.head 8 -  Set Result = Result || '          ' || strRcvrAdr || PutCrLf()
.head 7 -  Set Result = Result || SalStrRepeatX( '-', 60 ) || PutCrLf() || 'Message Body' || PutCrLf()
.head 5 -  ! Если это не выписка, то показываем все сообщение
.head 5 +  If (nStmt = 0 or (nStmt = 1 and nRef = NUMBER_Null))
.head 6 -  Set strSQL = "select w.tag, w.opt, w.seq, w.n, 
                                 substr(bars_swift.get_message_fieldname(:nMt, w.seq, w.tag, w.opt), 1, 100),
                                 bars_swift.get_message_fieldvalue(:nMt, w.seq, w.tag, w.opt, w.value)
	           into :strTag, :strOpt, :strSeq, :nSortN, :strFldName, :strVal
                          from sw_operw w
                       where w.swref=:nSwRef
                       order by w.n "
.head 5 +  Else
.head 6 -  ! Получаем строку выписки, к которой прикреплен данный документ
.head 6 -  Set nStmtNum = 0
.head 6 +  If SqlPrepareAndExecute( hSql_, "select swrnum into :nStmtNum from sw_oper where swref = :nSwRef and ref = :nRef" )
.head 7 -  Call SqlFetchNext( hSql_, nFetchRes )
.head 6 -  Set strSQL = "select w.tag, w.opt, w.seq, w.n, 
                                 substr(bars_swift.get_message_fieldname(:nMt, w.seq, w.tag, w.opt), 1, 100),
                                 bars_swift.get_message_fieldvalue(:nMt, w.seq, w.tag, w.opt,w.value)
	           into :strTag, :strOpt, :strSeq, :nSortN, :strFldName, :strVal
                          from sw_operw w
                       where w.swref=:nSwRef
                          and w.n = :nStmtNum
                       order by w.n "
.head 5 -  Call SqlPrepareAndExecute( hSql_, strSQL )
.head 5 +  While SqlFetchNext( hSql_, nFetchRes )
.head 6 -  Set strVal = VisStrSubstitute( strVal, PutCrLf(), Chr(13) )
.head 6 -  Set strVal = VisStrSubstitute( strVal, Chr(13), PutCrLf() || '      '  )
.head 6 -  Set Result = Result || SalStrRepeatX(' ', 4-SalStrLength(strTag||strOpt)) ||
	    strTag || strOpt || ': ' || strFldName || PutCrLf() || SalStrRepeatX(' ', 6) || strVal || PutCrLf()
.head 5 -  Return Result
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  ! Помещение содержимого файла в blob/clob поле указанной таблицы
.head 3 -  !
.head 3 +  Function: PutFileToBlob			! __exported
.head 4 -  Description: Загрузка данных из файла в поле BLOB
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя файла загружаемого в БД
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для обновления строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 5 -  ! Признак вставки новой строки в таблицу (1/0)
.head 5 -  Number: nInsertRow
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return PutFileToLob( hSqlHandle, strFileName, 'B', 
       strTableName, strKeyColumnName, strValueColumnName, 
       nKeyValue, strKeyValue, strWhereClause, nInsertRow  )
.head 3 +  Function: PutFileToClob			! __exported
.head 4 -  Description: Загрузка данных из файла в поле СLOB
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя файла загружаемого в БД
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего СLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для обновления строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 5 -  ! Признак вставки новой строки в таблицу (1/0)
.head 5 -  Number: nInsertRow
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return PutFileToLob( hSqlHandle, strFileName, 'C', 
       strTableName, strKeyColumnName, strValueColumnName, 
       nKeyValue, strKeyValue, strWhereClause, nInsertRow  )
.head 3 +  Function: PutFileToLob
.head 4 -  Description: Загрузка данных из файла в поле BLOB с последующей записью в BLOB или CLOB
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя файла загружаемого в БД
.head 5 -  String: strFileName
.head 5 -  ! Селектор: 'B'-BLOB, 'C'-CLOB
.head 5 -  String: strSelector
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для обновления строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 5 -  ! Признак вставки новой строки в таблицу (1/0)
.head 5 -  Number: nInsertRow
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Имя процедуры БД
.head 5 -  String: strProcedure
.head 4 +  Actions
.head 5 -  ! Определяемся: работаем с BLOB или CLOB
.head 5 +  If strSelector='B'
.head 6 -  Set strProcedure = 'bars_lob.write_blob'
.head 5 +  Else If strSelector='C'
.head 6 -  Set strProcedure = 'bars_lob.write_clob'
.head 5 +  Else
.head 6 -  Call MessageError('Неизвестный селектор: ' || strSelector || 'Ожидался символ B или C.')
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Call PutFileToTmpLob(hSqlHandle, strFileName, strSelector)
.head 5 -  !
.head 5 -  ! Здесь мы зовем процедуру, которая перекладывает данные из временной таблицы в поле БД
.head 5 +  If NOT SqlPLSQLCommand(hSqlHandle,
  strProcedure||'(
    strTableName,
    strKeyColumnName,
    strValueColumnName,
    nKeyValue,
    strKeyValue,
    strWhereClause,
    nInsertRow     )')
.head 6 -  Call SqlRollback(hSqlHandle)
.head 6 -  Return FALSE
.head 5 -  ! Сохраняем изменения
.head 5 -  Call SqlCommit(hSqlHandle)
.head 5 -  Return TRUE
.head 3 +  Function: PutFileToTmpLob               ! __exported
.head 4 -  Description: Загрузка данных из файла в поле BLOB с таблицы TMP_LOB
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя файла загружаемого в БД
.head 5 -  String: strFileName
.head 5 -  ! Селектор: 'B'-BLOB, 'C'-CLOB
.head 5 -  String: strSelector
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (3999)
.head 5 -  Number: nBufferSize
.head 5 -  ! Количество прочитанных байт
.head 5 -  Number: nBytesRead
.head 5 -  ! Номер строки в таблице TMP_LOB
.head 5 -  Number: nRowNumber
.head 5 -  String: strDataField
.head 4 +  Actions
.head 5 -  ! Это максимальный теоритический предел для вставки в БД
.head 5 -  Set nBufferSize = 3999
.head 5 -  ! Определяемся: работаем с BLOB или CLOB
.head 5 +  If strSelector='B'
.head 6 -  Set strDataField = 'BLOBDATA'
.head 5 +  Else If strSelector='C'
.head 6 -  Set strDataField = 'STRDATA'
.head 5 +  Else
.head 6 -  Call MessageError('Неизвестный селектор: ' || strSelector || 'Ожидался символ B или C.')
.head 6 -  Return FALSE
.head 5 -  ! Здесь мы удаляем даные из временной таблицы
.head 5 -  Call SqlPrepareAndExecute(hSqlHandle, 'BEGIN bars_lob.clear_temporary; END; ')
.head 5 -  ! Открываем файл для чтения
.head 5 -  Set nErrCode = VisFileOpen(hFile, strFileName, OF_Binary | OF_Read)
.head 5 +  If nErrCode
.head 6 -  Call MessageError('Не удалось открыть файл ' || strFileName)
.head 6 -  Return FALSE
.head 5 -  ! Инитим № строки во временной таблице
.head 5 -  Set nRowNumber = 1
.head 5 -  ! В цикле по частям вычитываем файл и складываем его во временую таблицу БД
.head 5 +  Loop
.head 6 +  If SalStrSetBufferLength(sBuffer, nBufferSize+1)
.head 7 -  Set nBytesRead = VisFileRead(hFile, sBuffer, nBufferSize)
.head 7 -  Call SalStrSetBufferLength(sBuffer, nBytesRead+1)
.head 7 +  If nBytesRead
.head 8 +  If SqlPrepare(hSqlHandle, 'INSERT INTO TMP_LOB (ID, '||strDataField||') VALUES (:nRowNumber, :sBuffer)')
.head 9 +  If strSelector='B'
.head 10 +  If NOT SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 11 -  Return FALSE
.head 9 +  Else If strSelector='C'
.head 10 +  If NOT SqlSetLongBindDatatype(2, BLOB_TEXT)
.head 11 -  Return FALSE
.head 9 +  If SqlExecute(hSqlHandle)
.head 10 -  Set nRowNumber = nRowNumber + 1
.head 9 +  Else
.head 10 -  Call SqlRollback(hSqlHandle)
.head 10 -  Return FALSE
.head 8 +  Else
.head 9 -  Return FALSE
.head 8 +  If nBytesRead < nBufferSize
.head 9 -  Break
.head 7 +  Else
.head 8 -  Break
.head 6 +  Else
.head 7 -  Return FALSE
.head 5 -  ! Закрываем файл
.head 5 -  Call VisFileClose(hFile)
.head 5 -  ! Сохраняем изменения
.head 5 -  ! Call SqlCommit(hSqlHandle) ! нельзя, поскольку ON COMMIT DELETE ROWS;
.head 5 -  Return TRUE
.head 3 -  !
.head 3 -  !
.head 3 -  ! Помещение(добавление) содержимого blob/clob из поля указанной таблицы в файл
.head 3 -  !
.head 3 +  Function: LobToFile			
.head 4 -  Description: Выгрузка данных из LOB (любой таблицы) в файл. 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 5 -  ! Создание нового файла или добавление данных - принимает знчение nFlags из функи VisFileOpen
.head 5 -  Number: nFileOpenMode
.head 5 -  ! Селектор: 'B'-BLOB, 'C'-CLOB
.head 5 -  String: strSelector
.head 5 -  !
.head 5 -  !
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: strProcedure
.head 4 +  Actions
.head 5 -  !
.head 5 +  If strSelector='B'
.head 6 -  Set strProcedure = 'bars_lob.read_blob'
.head 5 +  Else If strSelector='C'
.head 6 -  Set strProcedure = 'bars_lob.read_clob'
.head 5 +  Else
.head 6 -  Call MessageError('Неизвестный селектор: ' || strSelector || 'Ожидался символ B или C.')
.head 6 -  Return FALSE
.head 5 -  ! Здесь мы зовем функцию пакета, которая читает данные из указанного места 
! в БД и складывает их во временую таблицу
.head 5 +  If (strTableName!='')
.head 6 +  If NOT SqlPLSQLCommand(hSqlHandle,
strProcedure||'(
    strTableName,
    strKeyColumnName,
    strValueColumnName,
    nKeyValue,
    strKeyValue,
    strWhereClause  )')
.head 7 -  Call SqlRollback(hSqlHandle)
.head 7 -  Return FALSE
.head 5 -  !
.head 5 -  Call PutTmpLobToFile(hSqlHandle, strFileName, strSelector, nFileOpenMode)
.head 5 -  !
.head 5 -  Return TRUE
.head 3 +  Function: PutTmpLobToFile               ! __exported
.head 4 -  Description: Выгрузка данных из уже подготовленной таблицы TMP_LOB в файл
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя файла загружаемого в БД
.head 5 -  String: strFileName
.head 5 -  ! Селектор: 'B'-BLOB, 'C'-CLOB
.head 5 -  String: strSelector
.head 5 -  ! Дозаписать файл или создать новый (OF_Create  или OF_Append)
.head 5 -  Number: nFileOpenMode
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера 
.head 5 -  Number: nBufferSize
.head 5 -  ! имя колонки в TMP_LOB
.head 5 -  String: strDataField
.head 5 -  ! имя колонки, где хранится длина поля в TMP_LOB
.head 5 -  String: strDataLen
.head 5 -  ! Количество байт в LOBе
.head 5 -  Number: nLobSize
.head 5 -  ! Количество байт, записанное в файл
.head 5 -  Number: nBytesWrote
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  ! Это максимальный теоритический предел
.head 5 -  Set nBufferSize = 2000
.head 5 -  !
.head 5 -  !
.head 5 +  If strSelector='B'
.head 6 -  Set strDataField = 'RAWDATA'
.head 6 -  Set strDataLen   = 'RAWLEN'
.head 5 +  Else If strSelector='C'
.head 6 -  Set strDataField = 'STRDATA'
.head 6 -  Set strDataLen   = 'length(STRDATA)'
.head 5 +  Else
.head 6 -  Call MessageError('Неизвестный селектор: ' || strSelector || 'Ожидался символ B или C.')
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  Set nErrCode = VisFileOpen(hFile, strFileName, OF_Binary | nFileOpenMode)
.head 5 +  If (nFileOpenMode=OF_Append and nErrCode=-2)  ! файла еще нету - создать
.head 6 -  Set nErrCode = VisFileOpen(hFile, strFileName, OF_Binary | OF_Create)
.head 5 +  If nErrCode
.head 6 -  Call Debug('Ошибка открытия файла: '||SalNumberToStrX(nErrCode,0))
.head 6 -  ! Call Debug(' OF_Append = '||SalNumberToStrX(OF_Append,0)||
           ' OF_Cretae = '||SalNumberToStrX(OF_Create,0)||
           ' current mode ='||SalNumberToStrX(nFileOpenMode,0)||
           ' file = '||strFileName )
.head 6 -  Return FALSE
.head 5 -  ! В цикле по частям вычитываем файл из временной таблицы БД и сохраняю их в файл
.head 5 +  If SqlPrepare(hSqlHandle, 'SELECT '||strDataLen||','||strDataField ||' INTO :nLobSize, :sBuffer FROM TMP_LOB ORDER BY ID')
.head 6 +  If strSelector='B'
.head 7 +  If NOT SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 8 -  Return FALSE
.head 6 +  Else If strSelector='C'
.head 7 +  If NOT SqlSetLongBindDatatype(2, BLOB_TEXT)
.head 8 -  Return FALSE
.head 6 -  !
.head 6 +  If SqlExecute(hSqlHandle)
.head 7 +  Loop
.head 8 +  If SalStrSetBufferLength(sBuffer, nBufferSize+1)
.head 9 +  If SqlFetchNext(hSqlHandle, nFetchRes)
.head 10 -  Set nBytesWrote = VisFileWrite(hFile, sBuffer, nLobSize)
.head 9 +  Else
.head 10 -  Break
.head 8 +  Else
.head 9 -  Call Debug('SalStrSetBufferLength- ailed')
.head 9 -  Return FALSE
.head 6 +  Else
.head 7 -  Call SqlRollback(hSqlHandle)
.head 7 -  Return FALSE
.head 5 +  Else
.head 6 -  Call Debug('4')
.head 6 -  Return FALSE
.head 5 -  ! Закрываем файл
.head 5 -  Call VisFileClose(hFile)
.head 5 -  Return TRUE
.head 3 +  Function: PutBlobToFile			! __exported
.head 4 -  Description: Выгрузка данных из BLOB (любой таблицы) в файл. 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (2000)
.head 5 -  Number: nBufferSize
.head 5 -  ! Количество байт в BLOBе
.head 5 -  Number: nBlobSize
.head 5 -  ! Количество байт, записанное в файл
.head 5 -  Number: nBytesWrote
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Return LobToFile(hSqlHandle,
                  strFileName,
                  strTableName,
                  strKeyColumnName,
                  strValueColumnName,
                  nKeyValue,
                  strKeyValue,
                  strWhereClause,
                  OF_Create,
                  'B' )
.head 3 +  Function: AppendBlobToFile		! __exported
.head 4 -  Description: Дописывание (append) данных из BLOB в файл. 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (2000)
.head 5 -  Number: nBufferSize
.head 5 -  ! Количество байт в BLOBе
.head 5 -  Number: nBlobSize
.head 5 -  ! Количество байт, записанное в файл
.head 5 -  Number: nBytesWrote
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Return LobToFile(hSqlHandle,
                  strFileName,
                  strTableName,
                  strKeyColumnName,
                  strValueColumnName,
                  nKeyValue,
                  strKeyValue,
                  strWhereClause,
                  OF_Append,
                  'B')
.head 3 +  Function: PutClobToFile			! __exported
.head 4 -  Description: Выгрузка данных из СLOB (любой таблицы) в файл. 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего СLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (2000)
.head 5 -  Number: nBufferSize
.head 5 -  ! Количество байт в BLOBе
.head 5 -  Number: nBlobSize
.head 5 -  ! Количество байт, записанное в файл
.head 5 -  Number: nBytesWrote
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Return LobToFile(hSqlHandle,
                  strFileName,
                  strTableName,
                  strKeyColumnName,
                  strValueColumnName,
                  nKeyValue,
                  strKeyValue,
                  strWhereClause,
                  OF_Create,
                  'C' )
.head 3 +  Function: AppendClobToFile		! __exported
.head 4 -  Description: Дописывание (append) данных из СLOB в файл. 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего СLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (2000)
.head 5 -  Number: nBufferSize
.head 5 -  ! Количество байт в BLOBе
.head 5 -  Number: nBlobSize
.head 5 -  ! Количество байт, записанное в файл
.head 5 -  Number: nBytesWrote
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 4 +  Actions
.head 5 -  Return LobToFile(hSqlHandle,
                  strFileName,
                  strTableName,
                  strKeyColumnName,
                  strValueColumnName,
                  nKeyValue,
                  strKeyValue,
                  strWhereClause,
                  OF_Append,
                  'С')
.head 3 -  !
.head 3 +  Function: PutStringToClob		! __exported
.head 4 -  Description: Запись данных из длинной строки в поле СLOB
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Строка для сохранения в CLOB
.head 5 -  Long String: strStringToPut
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего CLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для обновления строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 5 -  ! Признак вставки новой строки в таблицу (1/0)
.head 5 -  Number: nInsertRow
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Текущий фрагмет строки
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (4000)
.head 5 -  Number: nBufferSize
.head 5 -  ! Номер строки в таблице TMP_LOB (также используется как № фрагмента в строке)
.head 5 -  Number: nRowNumber
.head 4 +  Actions
.head 5 -  ! Это максимальный теоритический предел для вставки в БД
.head 5 -  Set nBufferSize = 4000
.head 5 -  ! Здесь мы удаляем даные из временной таблицы
.head 5 -  Call SqlPrepareAndExecute(hSqlHandle, 'BEGIN bars_lob.clear_temporary; END; ')
.head 5 -  ! Инитим № строки во временной таблице
.head 5 -  Set nRowNumber = 1
.head 5 -  ! В цикле по частям вычитываем файл и складываем его во временую таблицу БД
.head 5 +  Loop
.head 6 -  ! Выбираем соответствующую подстроку из целой строки strStringToPut
.head 6 -  Set sBuffer = SalStrMidX(strStringToPut, nBufferSize * (nRowNumber-1), nBufferSize)
.head 6 -  ! Сохраняем подстроку в БД
.head 6 +  If SqlPrepare(hSqlHandle, 'INSERT INTO TMP_LOB (ID, STRDATA) VALUES (:nRowNumber, :sBuffer)')
.head 7 +  If SqlSetLongBindDatatype(2, BLOB_TEXT)
.head 8 +  If SqlExecute(hSqlHandle)
.head 9 -  Set nRowNumber = nRowNumber + 1
.head 8 +  Else
.head 9 -  Call SqlRollback(hSqlHandle)
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Return FALSE
.head 6 +  Else
.head 7 -  Return FALSE
.head 6 -  ! Выходим по окончании строки
.head 6 +  If SalStrLength(strStringToPut) < nBufferSize * (nRowNumber-1)
.head 7 -  Break
.head 5 -  ! Здесь мы зовем процедуру, которая перекладывает данные из временной таблицы в поле БД
.head 5 +  If NOT SqlPLSQLCommand(hSqlHandle,
'bars_lob.write_clob(
    strTableName,
    strKeyColumnName,
    strValueColumnName,
    nKeyValue,
    strKeyValue,
    strWhereClause,
    nInsertRow     )')
.head 6 -  Call SqlRollback(hSqlHandle)
.head 6 -  Return FALSE
.head 5 -  ! Сохраняем изменения
.head 5 -  Call SqlCommit(hSqlHandle)
.head 5 -  Return TRUE
.head 3 +  Function: PutStringToBlob		! __exported
.head 4 -  Description: Запись данных из длинной строки в поле BLOB
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Строка для сохранения в BLOB
.head 5 -  Long String: strStringToPut
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для обновления строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 5 -  ! Признак вставки новой строки в таблицу (1/0)
.head 5 -  Number: nInsertRow
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Текущий фрагмет строки
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (4000)
.head 5 -  Number: nMaxBufferSize
.head 5 -  ! Размер буфера
.head 5 -  Number: nBufferSize
.head 5 -  ! Номер строки в таблице TMP_LOB (также используется как № фрагмента в строке)
.head 5 -  Number: nRowNumber
.head 5 -  ! Размер строки
.head 5 -  Number: nLength
.head 4 +  Actions
.head 5 -  ! Это максимальный теоритический предел для вставки в БД
.head 5 -  Set nMaxBufferSize = 4000
.head 5 -  ! Размер строки
.head 5 -  Set nLength = SalStrGetBufferLength(strStringToPut)
.head 5 -  ! Здесь мы удаляем даные из временной таблицы
.head 5 -  Call SqlPrepareAndExecute(hSqlHandle, 'BEGIN bars_lob.clear_temporary; END; ')
.head 5 -  ! Инитим № строки во временной таблице
.head 5 -  Set nRowNumber = 1
.head 5 -  ! В цикле по частям вычитываем файл и складываем его во временую таблицу БД
.head 5 +  Loop
.head 6 -  ! Выбираем соответствующую подстроку из целой строки strStringToPut
.head 6 -  Set nBufferSize = IifN(nLength < nMaxBufferSize*nRowNumber, nLength-nMaxBufferSize*(nRowNumber-1), nMaxBufferSize)
.head 6 -  Set sBuffer = Spac(nBufferSize)
.head 6 -  Call InsertBuf(sBuffer, 0, strStringToPut, nMaxBufferSize * (nRowNumber-1), nBufferSize)
.head 6 -  ! Сохраняем подстроку в БД
.head 6 +  If SqlPrepare(hSqlHandle, 'INSERT INTO TMP_LOB (ID, blobdata) VALUES (:nRowNumber, :sBuffer)')
.head 7 +  If SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 8 +  If SqlExecute(hSqlHandle)
.head 9 -  Set nRowNumber = nRowNumber + 1
.head 8 +  Else
.head 9 -  Call SqlRollback(hSqlHandle)
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Return FALSE
.head 6 +  Else
.head 7 -  Return FALSE
.head 6 -  ! Выходим по окончании строки
.head 6 +  If nLength < nMaxBufferSize * (nRowNumber-1)
.head 7 -  Break
.head 5 -  ! Здесь мы зовем процедуру, которая перекладывает данные из временной таблицы в поле БД
.head 5 +  If NOT SqlPLSQLCommand(hSqlHandle,
'bars_lob.write_blob(
    strTableName,
    strKeyColumnName,
    strValueColumnName,
    nKeyValue,
    strKeyValue,
    strWhereClause,
    nInsertRow     )')
.head 6 -  Call SqlRollback(hSqlHandle)
.head 6 -  Return FALSE
.head 5 -  ! Сохраняем изменения
.head 5 -  Call SqlCommit(hSqlHandle)
.head 5 -  Return TRUE
.head 3 +  Function: GetStringFromClob		! __exported
.head 4 -  Description: Чтение данных из поля СLOB в длинную строку
.head 4 +  Returns
.head 5 -  Long String:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего CLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Текущий фрагмет строки
.head 5 -  Long String: sBuffer
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 5 -  !
.head 5 -  Long String: strResult
.head 4 +  Actions
.head 5 -  ! Здесь мы зовем функцию пакета, которая читает данные из указанного места в БД и складывает их во временую таблицу
.head 5 +  If NOT SqlPLSQLCommand(hSqlHandle,
'bars_lob.read_clob(
    strTableName,
    strKeyColumnName,
    strValueColumnName,
    nKeyValue,
    strKeyValue,
    strWhereClause  )')
.head 6 -  Call SqlRollback(hSqlHandle)
.head 6 -  Return ''
.head 5 -  Set strResult = ''
.head 5 -  ! В цикле по частям вычитываем фрагменты строки из временной таблицы БД и конкатенируем их в единую строку
.head 5 +  If SqlPrepare(hSqlHandle, 'SELECT STRDATA INTO :sBuffer FROM TMP_LOB ORDER BY ID')
.head 6 +  If SqlSetLongBindDatatype(2, BLOB_TEXT)
.head 7 +  If SqlExecute(hSqlHandle)
.head 8 +  Loop
.head 9 +  If SqlFetchNext(hSqlHandle, nFetchRes)
.head 10 -  Set strResult = strResult || sBuffer
.head 9 +  Else
.head 10 -  Break
.head 7 +  Else
.head 8 -  Call SqlRollback(hSqlHandle)
.head 8 -  Return ''
.head 6 +  Else
.head 7 -  Return ''
.head 5 +  Else
.head 6 -  Return ''
.head 5 -  Return strResult
.head 3 +  Function: GetStringFromBlob		! __exported
.head 4 -  Description: Чтение данных из поля BLOB в длинную строку
.head 4 +  Returns
.head 5 -  Long String:
.head 4 +  Parameters
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя таблицы
.head 5 -  String: strTableName
.head 5 -  ! Имя ключевого поля в таблице
.head 5 -  String: strKeyColumnName
.head 5 -  ! Имя поля содержащего BLOB значение
.head 5 -  String: strValueColumnName
.head 5 -  ! Значение ключевого поля (число)
.head 5 -  Number: nKeyValue
.head 5 -  ! Значение ключевого поля (строка)
.head 5 -  String: strKeyValue
.head 5 -  ! Условие для выборки строки (если ключ композитный)
.head 5 -  String: strWhereClause
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! Текущий фрагмет строки
.head 5 -  Long String: sBuffer
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 5 -  !
.head 5 -  Long String: strResult
.head 5 -  Number: nBufLen
.head 5 -  Long String: sRes
.head 5 -  Number: nLen
.head 4 +  Actions
.head 5 -  ! Здесь мы зовем функцию пакета, которая читает данные из указанного места в БД и складывает их во временую таблицу
.head 5 +  If NOT SqlPLSQLCommand(hSqlHandle,
'bars_lob.read_blob(
    strTableName,
    strKeyColumnName,
    strValueColumnName,
    nKeyValue,
    strKeyValue,
    strWhereClause  )')
.head 6 -  Call SqlRollback(hSqlHandle)
.head 6 -  Return ''
.head 5 -  Set strResult = ''
.head 5 -  Set nLen = 0
.head 5 -  ! В цикле по частям вычитываем фрагменты строки из временной таблицы БД и конкатенируем их в единую строку
.head 5 +  If SqlPrepare(hSqlHandle, 'SELECT rawdata, rawlen INTO :sBuffer, :nBufLen FROM TMP_LOB ORDER BY ID')
.head 6 +  If SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 7 +  If SqlExecute(hSqlHandle)
.head 8 +  Loop
.head 9 +  If SqlFetchNext(hSqlHandle, nFetchRes)
.head 10 -  Set sRes = strResult
.head 10 -  Set strResult = Spac(nLen + nBufLen)
.head 10 -  Call ConcatBufs(strResult, sRes, nLen, sBuffer, nBufLen)
.head 10 -  Set nLen = nLen + nBufLen
.head 9 +  Else
.head 10 -  Break
.head 7 +  Else
.head 8 -  Call SqlRollback(hSqlHandle)
.head 8 -  Return ''
.head 6 +  Else
.head 7 -  Return ''
.head 5 +  Else
.head 6 -  Return ''
.head 5 -  Return strResult
.head 3 -  !
.head 3 -  ! Если данные уже разбиты и загружены во временную таблицу TMP_LOB
.head 3 -  ! при помощи функции bars_lob.export_lob. 
.head 3 -  !
.head 3 +  ! Function: PutLoadedBlobToFile	        ! __exported
.head 4 -  Description: Выгрузка данных из BLOB в файл если данный блоб уже разбит и помещен во временную таблицу. 
.head 4 +  Returns 
.head 5 -  Boolean: 
.head 4 +  Parameters 
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 4 -  Static Variables 
.head 4 -  Local variables 
.head 4 +  Actions 
.head 5 -  Return PutBlobToFile(hSqlHandle, strFileName,'','','',0,'','')
.head 3 +  ! Function: PutLoadedDBFToFile	        ! __exported
.head 4 -  Description: Выгрузка данных из BLOB в файл 
.head 4 +  Returns 
.head 5 -  Boolean: 
.head 4 +  Parameters 
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 4 -  Static Variables 
.head 4 +  Local variables 
.head 5 -  ! Файл
.head 5 -  File Handle: hFile
.head 5 -  ! Ошибка при открытии файла
.head 5 -  Number: nErrCode
.head 5 -  ! Буфер чтения файла
.head 5 -  Long String: sBuffer
.head 5 -  ! Максимальный размер буфера (2000)
.head 5 -  Number: nBufferSize
.head 5 -  ! Количество байт в BLOBе
.head 5 -  Number: nBlobSize
.head 5 -  ! Количество байт, записанное в файл
.head 5 -  Number: nBytesWrote
.head 5 -  !
.head 5 -  Number: nFetchRes
.head 4 +  Actions 
.head 5 -  Set nBufferSize = 2000
.head 5 -  ! Здесь мы зовем функцию пакета, которая читает данные из указанного места 
! в БД и складывает их во временую таблицу
.head 5 -  Set nErrCode = VisFileOpen(hFile, strFileName, OF_Binary | OF_Create)
.head 5 +  If nErrCode
.head 6 -  Return FALSE
.head 5 -  ! Вычитаем 
.head 5 +  If SqlPrepare(hSqlHandle, 'SELECT RAWLEN, RAWDATA INTO :nBlobSize, :sBuffer FROM TMP_LOB')
.head 6 +  If SqlSetLongBindDatatype(2, BLOB_BYTE)
.head 7 +  If SqlExecute(hSqlHandle)
.head 8 +  Loop 
.head 9 +  If SalStrSetBufferLength(sBuffer, nBufferSize+1)
.head 10 +  If SqlFetchNext(hSqlHandle, nFetchRes)
.head 11 -  Set nBytesWrote = VisFileWrite(hFile, sBuffer, nBlobSize)
.head 10 +  Else 
.head 11 -  Break 
.head 9 +  Else 
.head 10 -  Return FALSE
.head 7 +  Else 
.head 8 -  Call SqlRollback(hSqlHandle)
.head 8 -  Return FALSE
.head 6 +  Else 
.head 7 -  Return FALSE
.head 5 +  Else 
.head 6 -  Return FALSE
.head 5 -  !
.head 5 -  !
.head 5 -  Call VisFileClose(hFile)
.head 5 -  Return TRUE
.head 3 +  ! Function: AppendLoadedBlobToFile	! __exported
.head 4 -  Description: Дополнить файл данными из blob, если данный блоб уже разбит и помещен во временную таблицу tmp_lob
при помощи функции bars_lob.export_lob. 
.head 4 +  Returns 
.head 5 -  Boolean: 
.head 4 +  Parameters 
.head 5 -  ! SQL соединение
.head 5 -  Sql Handle: hSqlHandle
.head 5 -  ! Имя создаваемого файла
.head 5 -  String: strFileName
.head 4 -  Static Variables 
.head 4 -  Local variables 
.head 4 +  Actions 
.head 5 -  Return AppendBlobToFile(hSqlHandle, strFileName,'','','',0,'','')
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  ! Функция импорта данных из XLS-файлов
.head 3 -  !
.head 3 +  Function: ImportXLS			! __exported
.head 4 -  Description: Импорт данных из XLS-файла, возврат (число):
+n - количество строк в возвращаемом массиве
-1 - XLS-файл отсутствует
-2 - ошибка обработки XLS-файла
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  ! Полное имя входного файла
.head 5 -  String: sXLSRealName
.head 5 -  ! Количество столбцов импорта
.head 5 -  Number: nCol
.head 5 -  ! Наименование секции Xls-файла
.head 5 -  String: sXlsSection
.head 5 -  ! Массив возврата
.head 5 -  Receive String: smXls[*,99999]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: sDCCPath
.head 5 -  String: sTempPath
.head 5 -  String: sTempName
.head 5 -  String: sDCCName
.head 5 -  String: sXLSFullNAme
.head 5 -  String: sTekPath
.head 5 -  Sql Handle: hSqlE
.head 5 -  String: sPopulateLen
.head 5 -  !
.head 5 -  Number: nmEl[*,254]
.head 5 -  Number: nmF[254]
.head 5 -  !
.head 5 -  String: sOsnSelect
.head 5 -  Number: nA
.head 5 -  Number: nI
.head 5 -  Number: nJ
.head 5 -  String: sPopulateLenSelect
.head 5 -  String: sPopulateLenInto
.head 5 -  String: sAscSelect
.head 5 -  String: sAscInto
.head 5 -  String: sA
.head 5 -  String: smN[*]
.head 5 -  Number: nmN[*]
.head 5 -  Number: nmL[*,99999]
.head 5 -  Number: nmA[*]
.head 5 -  Number: nK
.head 5 -  Number: nL
.head 5 -  Number: nC
.head 5 -  String: sSelect
.head 5 -  String: sInto
.head 5 -  String: sWhere
.head 5 -  Number: nP
.head 5 -  Number: n1
.head 5 -  Number: nQ
.head 5 -  Number: nResCol
.head 5 -  Number: nLenF
.head 4 +  Actions
.head 5 -  ! читаем параметры из INI-файла
.head 5 -  Call SalUseRegistry(FALSE, '')
.head 5 -  Call SalGetProfileString('Import_XLS', 'DCC_Path', '\\DEPLOY\\', sDCCPath, GetIniFileName())
.head 5 -  Call SalGetProfileString('Import_XLS', 'TempPath', 'C:\\TEMP\\', sTempPath, GetIniFileName())
.head 5 -  Call SalGetProfileString('Import_XLS', 'TempName', 'TEMP.XLS', sTempName, GetIniFileName())
.head 5 -  Set sDCCName = sDCCPath || IifS(Right(sDCCPath, 1) != '\\', '\\', '') || 'DCC.INI'
.head 5 -  Set sTempPath = sTempPath || IifS(Right(sTempPath, 1) != '\\', '\\', '')
.head 5 -  Set sXLSFullNAme = sTempPath || sTempName
.head 5 -  !
.head 5 +  If not File(sXLSRealName)
.head 6 -  Return -1
.head 5 -  Call SalFileCopy(sXLSRealName, sXLSFullNAme, TRUE)
.head 5 -  ! Call Debug(sDCCName)
.head 5 -  Call VisFileDelete(sDCCName)
.head 5 -  Call SalFileGetCurrentDirectory(sTekPath)
.head 5 -  Call SalFileSetCurrentDirectory(Left(sTempPath, Len(sTempPath)-1))
.head 5 -  Set SqlDatabase = 'Excel_Files'
.head 5 +  If not SqlConnect(hSqlE)
.head 6 -  Return -2
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 -  Set nI = 1
.head 5 -  Set sPopulateLenSelect = "SELECT "
.head 5 -  Set sPopulateLenInto = " INTO "
.head 5 -  ! Call SaveInfoToLog('2Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 5 +  While nI <= nCol
.head 6 -  Set sPopulateLenSelect = sPopulateLenSelect || "Len(F" || Str(nI) || "),"
.head 6 -  Set sPopulateLenInto = sPopulateLenInto || ":nmF[" || Str(nI-1) || "],"
.head 6 -  ! !
    SELECT Max(Len(F1)),Max(Len(F2)),Max(Len(F3)),Max(Len(F4)),Max(Len(F5))...
    INTO :nF1,:nF2,:nF3,:nF4,:nF5...
    FROM [" || sXlsSection || "$]"
.head 6 -  Set nI = nI + 1
.head 5 -  ! Call SaveInfoToLog('2End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 5 -  Set sPopulateLen = Left(sPopulateLenSelect, Len(sPopulateLenSelect)-1) ||
    Left(sPopulateLenInto, Len(sPopulateLenInto)-1) || " FROM [" || sXlsSection || "$]"
.head 5 -  ! Call Debug(sPopulateLen)
.head 5 -  !
.head 5 +  If SqlPrepareAndExecute(hSqlE, sPopulateLen)
.head 6 -  ! сформировать SELECT для выборки собственно данных
.head 6 -  Set nI = 1
.head 6 -  ! Call SaveInfoToLog('3Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 6 +  While SqlFetchNext(hSqlE, nFetchRes)
.head 7 -  ! Call DebugN(nmF[0])
.head 7 -  Set nJ = 1
.head 7 -  Set smN[nI-1] = ''
.head 7 -  ! Call SaveInfoToLog('4Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 +  While nJ <= nCol
.head 8 -  Set nmL[nI-1,nJ-1] = nmF[nJ-1]
.head 8 -  Set smN[nI-1] = smN[nI-1] || Str(nmF[nJ-1]) || ','
.head 8 -  Set nJ = nJ + 1
.head 7 -  ! Call SaveInfoToLog('4End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 -  Set nK = nI
.head 7 -  Set nL = 0
.head 7 -  ! Call SaveInfoToLog('5Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 +  While nK > 0
.head 8 +  If smN[nK-1] = smN[nI-1]
.head 9 -  Set nL = nL + 1
.head 8 -  Set nK = nK - 1
.head 7 -  ! Call SaveInfoToLog('5End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 -  Set nmN[nI-1] = nL
.head 7 -  Set nI = nI + 1
.head 6 -  ! Call SaveInfoToLog('3End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 6 -  ! в nI - количество строк для выборки
.head 6 -  ! теперь надо сформировать SELECTы для выборки информации из строк в массив элементов (в цикле по количеству строк)
.head 6 -  Set nC = 1
.head 6 -  ! Call SaveInfoToLog('6Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 6 +  While nC < nI
.head 7 -  Set sSelect = "SELECT "
.head 7 -  Set sInto = " INTO "
.head 7 -  Set sWhere = " WHERE "
.head 7 -  Set nJ = 1
.head 7 -  Set nA = 1
.head 7 -  ! Call SaveInfoToLog('7Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 +  While nJ <= nCol
.head 8 -  ! Set sWhere = sWhere || "Len(F" || Str(nJ) || ")=:nmF[" || Str(nJ) || "],"
.head 8 -  Set sWhere = sWhere || "Len(F" || Str(nJ) || ")=" || Str(nmL[nC-1,nJ-1]) || " and "
.head 8 -  Set nP = 1
.head 8 -  ! Call SaveInfoToLog('8Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 8 +  While nP <= nmL[nC-1,nJ-1]
.head 9 -  Set sSelect = sSelect || "Asc(Mid(F" || Str(nJ) || "," || Str(nP) || ",1)),"
.head 9 -  Set sInto = sInto || ":nmA[" || Str(nA-1) || "],"
.head 9 -  Set nA = nA + 1
.head 9 -  Set nP = nP + 1
.head 8 -  ! Call SaveInfoToLog('8End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 8 -  Set nJ = nJ + 1
.head 7 -  ! Call SaveInfoToLog('7End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 -  ! Call Debug(sWhere)
.head 7 -  Set sSelect = Left(sSelect, Len(sSelect)-1) || Left(sInto, Len(sInto)-1) || " FROM ["|| sXlsSection || "$]" ||
    Left(sWhere, Len(sWhere)-5)
.head 7 -  ! Set sInto = Left(sInto, Len(sInto)-1)
.head 7 -  ! Set sWhere = Left(sWhere, Len(sWhere)-1)
.head 7 -  Call SqlPrepareAndExecute(hSqlE, sSelect)
.head 7 -  Set n1 = 1
.head 7 -  Set nQ = 0
.head 7 -  ! Call Debug(sSelect)
.head 7 -  ! Call SaveInfoToLog('9Beg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 +  While SqlFetchNext(hSqlE, nFetchRes)
.head 8 -  ! Call DebugN(nC)
.head 8 -  ! Call DebugN(nmN[nC-1])
.head 8 +  If n1 = nmN[nC-1]
.head 9 -  ! разобрать полученные данные (в цикле по количеству колонок) и поместить в элемент выходного массива
.head 9 -  Set nResCol = 1
.head 9 -  ! Call SaveInfoToLog('ABeg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 9 +  While nResCol <= nCol
.head 10 -  Set nLenF = 1
.head 10 -  Set smXls[nC-1,nResCol-1]=''
.head 10 -  ! Call SaveInfoToLog('BBeg=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 10 +  While nLenF <= nmL[nC-1,nResCol-1]
.head 11 -  Set smXls[nC-1,nResCol-1]=smXls[nC-1,nResCol-1] || Chr(nmA[nQ])
.head 11 -  Set nQ = nQ + 1
.head 11 -  Set nLenF = nLenF + 1
.head 10 -  ! Call SaveInfoToLog('BEnd=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 10 -  Set nResCol = nResCol + 1
.head 9 -  ! Call SaveInfoToLog('AEnd=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 8 -  Set n1 = n1 + 1
.head 7 -  ! Call SaveInfoToLog('9End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 7 -  Set nC = nC + 1
.head 6 -  ! Call SaveInfoToLog('6End=' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhh:mm:ss:mmmmmm'))
.head 5 +  Else
.head 6 -  Set nI = -1
.head 5 -  Call SqlDisconnect(hSqlE)
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return nI-1
.head 3 +  Function: ImportCSV			! __exported
.head 4 -  Description: Импорт данных из CSV-файла, возврат (число):
+n - количество строк в возвращаемом массиве
-1 - CSV-файл отсутствует
-2 - ошибка обработки CSV-файла
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  ! Полное имя входного файла
.head 5 -  String: sCSVRealName
.head 5 -  ! разделитель
.head 5 -  String: sDelimeter
.head 5 -  ! Массив возврата
.head 5 -  Receive String: smCsv[*,99999]
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  ! String: sDCCPath
.head 5 -  ! String: sTempPath
.head 5 -  ! String: sTempName
.head 5 -  ! String: sDCCName
.head 5 -  ! String: sCSVFullNAme
.head 5 -  ! String: sTekPath
.head 5 -  ! Sql Handle: hSqlE
.head 5 -  ! String: sPopulateLen
.head 5 -  !
.head 5 -  ! Number: nmEl[*,254]
.head 5 -  ! Number: nmF[254]
.head 5 -  !
.head 5 -  ! String: sOsnSelect
.head 5 -  ! Number: nA
.head 5 -  Number: nI
.head 5 -  ! Number: nJ
.head 5 -  ! String: sPopulateLenSelect
.head 5 -  ! String: sPopulateLenInto
.head 5 -  ! String: sAscSelect
.head 5 -  ! String: sAscInto
.head 5 -  ! String: sA
.head 5 -  ! String: smN[*]
.head 5 -  ! Number: nmN[*]
.head 5 -  ! Number: nmL[*,99999]
.head 5 -  ! Number: nmA[*]
.head 5 -  Number: nK
.head 5 -  ! Number: nL
.head 5 -  ! Number: nC
.head 5 -  ! String: sSelect
.head 5 -  ! String: sInto
.head 5 -  ! String: sWhere
.head 5 -  ! Number: nP
.head 5 -  ! Number: n1
.head 5 -  ! Number: nQ
.head 5 -  ! Number: nResCol
.head 5 -  ! Number: nLenF
.head 5 -  File Handle: hF
.head 5 -  String: sBuffer
.head 5 -  Number: nNumTokens
.head 5 -  String: sTokenArray[*]
.head 4 +  Actions
.head 5 +  If not File(sCSVRealName)
.head 6 -  Return -1
.head 5 +  If not SalFileOpen(hF, sCSVRealName, OF_Read)
.head 6 -  Return -2
.head 5 -  Call SalWaitCursor(TRUE)
.head 5 -  Set sBuffer = Spac(2048)
.head 5 -  Set nI = 0
.head 5 +  While SalFileGetStr(hF, sBuffer, 2048)
.head 6 -  Set nNumTokens = SalStrTokenize(sBuffer, '', ';', sTokenArray)
.head 6 +  If nNumTokens < 0
.head 7 -  Call SalFileClose(hF)
.head 7 -  Return -2
.head 6 -  Set nK = 0
.head 6 +  While nK < nNumTokens
.head 7 -  Set smCsv[nI, nK] = SalStrTrimX(sTokenArray[nK])
.head 7 -  Set nK = nK + 1
.head 6 -  Set nI = nI + 1
.head 6 -  Set sBuffer = Spac(2048)
.head 5 -  Call SalFileClose(hF)
.head 5 -  Call SalWaitCursor(FALSE)
.head 5 -  Return nI
.head 3 -  !
.head 3 +  Function: FieldInTable                  ! __exported
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  String: sCol
.head 5 -  String: sTab
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return '1' = GetValueStr("
       SELECT to_char(FieldInTable('" || sCol || "','" || sTab || "'))
       FROM   dual")
.head 2 -  Named Menus
.head 2 +  Class Definitions
.data RESOURCE 0 0 1 1265076824
0000: BE0000006C000000 0000000000000000 0200000100FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F41003C00 000D630052616469
0040: 6F4C69730074426F 7886000000F00500 0000E0010D000000 FF3F0D00B9000100
0060: FFFFE01A00000001 FE00FF8327000000 01FB00FF0F340000 00EE0100FF3F
.enddata
.head 2 +  Default Classes
.head 3 -  MDI Window: cBaseMDI
.head 3 -  Form Window:
.head 3 -  Dialog Box:
.head 3 -  Table Window:
.head 3 -  Quest Window:
.head 3 -  Data Field:
.head 3 -  Spin Field:
.head 3 -  Multiline Field:
.head 3 -  Pushbutton: cpbCancel
.head 3 -  Radio Button:
.head 3 -  Option Button:
.head 3 -  Check Box:
.head 3 -  Child Table:
.head 3 -  Quest Child Window: cQuickDatabase
.head 3 -  List Box:
.head 3 -  Combo Box:
.head 3 -  Picture:
.head 3 -  Vertical Scroll Bar:
.head 3 -  Horizontal Scroll Bar:
.head 3 -  Column:
.head 3 -  Background Text:
.head 3 -  Group Box:
.head 3 -  Line:
.head 3 -  Frame:
.head 3 -  Custom Control:
.head 2 -  Application Actions
.head 1 +  Dialog Box: dlg_SqlError
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: АБС "БАРС98" - Ошибка
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? No
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? No
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   1.138"
.head 4 -  Top:    0.625"
.head 4 -  Width:  8.217"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 2.7"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Обработка SQL-ошибки
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: 0.625"
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Multiline Field: mlErrSys
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 10000
.head 5 -  String Type: Long String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? Yes
.head 5 -  Window Location and Size
.head 6 -  Left:   0.2"
.head 6 -  Top:    0.15"
.head 6 -  Width:  6.0"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 2.0"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: 3D Highlight Color
.head 4 -  Message Actions
.head 3 +  Pushbutton: pbContinue
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Продолжить
.head 4 -  Window Location and Size
.head 5 -  Left:   6.4"
.head 5 -  Top:    0.15"
.head 5 -  Width:  1.5"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\REFRESH.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call cTool.Disconnect()
.head 6 -  Call SalEndDialog(hWndForm, FALSE)
.head 3 +  Pushbutton: pbAdvanced
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Подробно
.head 4 -  Window Location and Size
.head 5 -  Left:   6.4"
.head 5 -  Top:    0.655"
.head 5 -  Width:  1.5"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\OPEN.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  ! Вызываем диалог показа расширенной информации об ошибке
.head 6 -  Set bExtDialog = TRUE
.head 6 -  Call SalModalDialog(dlg_SqlErrorExt, hWndForm, p_modcode, p_modname, p_erramsg, strCurrSql, strErrText)
.head 6 -  Set bExtDialog = FALSE
.head 3 +  Pushbutton: pbStop
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Стоп!
.head 4 -  Window Location and Size
.head 5 -  Left:   6.4"
.head 5 -  Top:    1.155"
.head 5 -  Width:  1.5"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalMessageBeep(MB_IconQuestion)
.head 6 -  ! 'Закончить работу приложения?', 'Подтверждение...'
.head 6 +  If SalMessageBox(CurrentLangTable.GetAtomTitle('dlg_SqlError.cTMess1'), 
   CurrentLangTable.GetAtomTitle('dlg_SqlError.cTMess2'),
   MB_IconQuestion | MB_YesNo | MB_DefButton2) = IDYES
.head 7 -  Call SalQuit()
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  Sql Handle: hSqlErrH
.head 3 -  Number: nErrNum
.head 3 -  String: strErrText
.head 3 -  String: strCurrSql
.head 3 -  Number: nErrPos
.head 3 -  String: strErrAbs
.head 2 +  Window Variables
.head 3 -  !
.head 3 -  Number: nXa
.head 3 -  Number: nYa
.head 3 -  !
.head 3 -  Number: nX
.head 3 -  Number: nY
.head 3 -  String: sX
.head 3 -  String: sY
.head 3 -  !
.head 3 -  Number: nXn
.head 3 -  Number: nYn
.head 3 -  !
.head 3 -  Number: nContinueTime
.head 3 -  Number: nTimer
.head 3 -  String: sContinueTime
.head 3 -  !
.head 3 -  : cTool
.head 4 -  Class: cABSConnect
.head 3 -  String: p_errtxt
.head 3 -  String: p_errumsg
.head 3 -  String: p_erracode
.head 3 -  String: p_erramsg
.head 3 -  String: p_errahlp
.head 3 -  String: p_modcode
.head 3 -  String: p_modname
.head 3 -  Long String: p_errmsg
.head 3 -  ! String: sTmp
.head 3 -  Boolean: bExtDialog
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call IniAbsapi()
.head 4 -  Call SalSendMsgToChildren(hWndForm, UM_QueryLabelText, 0, 0)
.head 4 -  Call SalSetWindowText(hWndForm, CurrentLangTable.GetAtomTitle('cTWndTitleError'))
.head 4 -  ! Вспомним координаты окошка
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 -  Call SalGetProfileString('SqlErrorMessage', 'X-Coordinate', '-1', sX, GetProductName())
.head 4 -  Call SalGetProfileString('SqlErrorMessage', 'Y-Coordinate', '-1', sY, GetProductName())
.head 4 -  Call SalUseRegistry(FALSE, '')
.head 4 -  !
.head 4 -  Set bExtDialog = FALSE
.head 4 -  ! Установка интервала таймера
.head 4 -  Call SalGetProfileString('Errors', 'SqlErrorContinueTime', '80000', sContinueTime, GetIniFileName())
.head 4 -  Set nContinueTime = Val(sContinueTime) * 1000
.head 4 -  Set nTimer = Min(nContinueTime, 65000)
.head 4 -  Call SalTimerSet(hWndForm, 1, nTimer)
.head 4 -  Set nContinueTime = nContinueTime - nTimer
.head 4 -  ! Установка размера и положения окна
.head 4 -  Set nX = SalStrToNumber(sX)
.head 4 -  Set nY = SalStrToNumber(sY)
.head 4 +  If nX >= 0 and nY >= 0
.head 5 -  Call SalSetWindowLoc(hWndForm, nX, nY)
.head 4 +  Else
.head 5 -  Call SalCenterWindow(hWndForm)
.head 4 -  Call SalGetWindowSize(hWndForm, nXa, nYa)
.head 4 -  ! Преобразуем текст сообщения об ошибке LF -> CRLF
.head 4 -  Set strErrText = VisStrSubstitute(strErrText, PutLf(), PutCrLf())
.head 4 -  ! Создаем соединение с БД
.head 4 -  Call XConnectGetParams(cTool)
.head 4 -  Call cTool.Connect()
.head 4 -  ! Вызываем обработчик ошибок (передаем только первую строку - текст ошибки без стека)
.head 4 -  Set p_errtxt = SalStrLeftX(strErrText, SalStrScan(strErrText, PutCrLf()))
.head 4 +  When SqlError
.head 5 -  Set p_errumsg = strErrText
.head 5 -  Return FALSE
.head 4 -  Call SqlPLSQLCommand(cTool.hSql(), "bars_error.get_error_info(
        p_errtxt,
        p_errumsg,
        p_erracode,
        p_erramsg,
        p_errahlp,
        p_modcode,
        p_modname,
        p_errmsg)")
.head 4 -  Call SaveErrorToLog(SQL_ERROR || SalStrTrimX(p_erramsg) || " " || SalStrTrimX(strErrText) || SalStrTrimX(strCurrSql))
.head 4 -  ! Устанавливаем пользовательское сообщение об ошибке
.head 4 -  Set mlErrSys = p_errumsg
.head 4 -  ! Устанавливаем умолчательную кнопку
.head 4 -  Call SalSetFocus(pbContinue)
.head 4 -  Call SalWaitCursor(FALSE)
.head 3 +  On SAM_Timer
.head 4 +  If nContinueTime > 0
.head 5 -  Set nTimer = Min(nContinueTime, 65000)
.head 5 -  Call SalTimerSet(hWndForm, 1, nTimer)
.head 5 -  Set nContinueTime = nContinueTime - nTimer
.head 4 +  Else
.head 5 +  If not bExtDialog
.head 6 -  Call SalSendMsg(pbContinue, SAM_Click, 0, 0)
.head 3 +  On SAM_Destroy
.head 4 -  Call SaveInfoToLog('Выход из обработчика SQL-ошибки')
.head 4 -  Call SalGetWindowLoc(hWndForm, nXn, nYn)
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 +  If nXn != nX
.head 5 -  Call SalSetProfileString('SqlErrorMessage', 'X-Coordinate', SalNumberToStrX(nXn, 3),
     'Bars98')
.head 4 +  If nYn != nY
.head 5 -  Call SalSetProfileString('SqlErrorMessage', 'Y-Coordinate', SalNumberToStrX(nYn, 3),
     'Bars98')
.head 4 -  Call SalUseRegistry(FALSE, '')
.head 4 -  Call SalTimerKill(hWndForm, 1)
.head 1 +  Dialog Box: dlg_GetClue
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Что печатать?
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   Default
.head 4 -  Top:    Default
.head 4 -  Width:  4.414"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 2.042"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Диалог выбора опций печати документов в таблице
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 -  Group Box: &
.head 4 -  Resource Id: 62230
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.043"
.head 5 -  Top:    -0.052"
.head 5 -  Width:  3.114"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.844"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? No
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Radio Button: rbAll
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cRadioButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Всю таблицу
.head 4 -  Window Location and Size
.head 5 -  Left:   0.557"
.head 5 -  Top:    0.188"
.head 5 -  Width:  2.971"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Create
.head 6 -  Set rbAll = TRUE
.head 5 +  On SAM_Click
.head 6 +  If rbAll
.head 7 -  Set nRet = 1
.head 3 +  Radio Button: rbChecked
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cRadioButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Отмеченные документы
.head 4 -  Window Location and Size
.head 5 -  Left:   0.557"
.head 5 -  Top:    0.531"
.head 5 -  Width:  2.971"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Create
.head 6 -  Set rbChecked = FALSE
.head 5 +  On SAM_Click
.head 6 +  If rbChecked
.head 7 -  Set nRet = 2
.head 3 +  Pushbutton: pbOk
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Печатать
.head 4 -  Window Location and Size
.head 5 -  Left:   0.443"
.head 5 -  Top:    1.094"
.head 5 -  Width:  1.457"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\print.bmp
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, nRet)
.head 3 +  Pushbutton: pbCancel
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Отменить
.head 4 -  Window Location and Size
.head 5 -  Left:   2.314"
.head 5 -  Top:    1.094"
.head 5 -  Width:  1.457"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, 0)
.head 3 -  Frame
.head 4 -  Resource Id: 59539
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.129"
.head 5 -  Top:    0.073"
.head 5 -  Width:  4.029"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.865"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Corners: Square
.head 4 -  Border Style: Etched
.head 4 -  Border Thickness: 1
.head 4 -  Border Color: 3D Shadow Color
.head 4 -  Background Color: 3D Face Color
.head 2 -  Functions
.head 2 -  Window Parameters
.head 2 +  Window Variables
.head 3 -  Number: nRet
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call IniAbsapi()
.head 4 -  Call SalSendMsgToChildren(hWndForm, UM_QueryLabelText, 0, 0)
.head 4 -  Call SalSetWindowText(hWndForm, CurrentLangTable.GetAtomTitle('dlg_GetClue.cTWndTitle'))
.head 4 -  !
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  Set nRet = 1
.head 1 +  Dialog Box: dlg_MessageBox
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? No
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? No
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   1.28"
.head 4 -  Top:    1.625"
.head 4 -  Width:  7.257"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 3.01"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: MS Sans Serif
.head 3 -  Font Size: 8
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Вывод сообщения
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: 0.406"
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Red
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Multiline Field: mlMessageText
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 8192
.head 5 -  String Type: Long String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? No
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? No
.head 5 -  Window Location and Size
.head 6 -  Left:   0.057"
.head 6 -  Top:    0.042"
.head 6 -  Width:  7.057"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 1.896"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: 3D Face Color
.head 4 +  Message Actions
.head 5 +  On UM_NoFontChange
.head 6 -  Return TRUE
.head 3 +  Pushbutton: pbYes
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Да
.head 4 -  Window Location and Size
.head 5 -  Left:   1.757"
.head 5 -  Top:    2.104"
.head 5 -  Width:  1.571"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\APPLY.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, IDYES)
.head 3 +  Pushbutton: pbNo
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Нет
.head 4 -  Window Location and Size
.head 5 -  Left:   3.571"
.head 5 -  Top:    2.104"
.head 5 -  Width:  1.571"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, IDNO)
.head 3 +  Pushbutton: pbContinue
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Продолжить
.head 4 -  Window Location and Size
.head 5 -  Left:   3.567"
.head 5 -  Top:    2.107"
.head 5 -  Width:  1.571"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.45"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\REFRESH.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, IDYES)
.head 3 +  Pushbutton: pbCancel
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Завершить
.head 4 -  Window Location and Size
.head 5 -  Left:   5.433"
.head 5 -  Top:    2.104"
.head 5 -  Width:  1.571"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, IDCANCEL)
.head 3 -  Frame
.head 4 -  Resource Id: 62229
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.057"
.head 5 -  Top:    2.031"
.head 5 -  Width:  7.057"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.594"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Corners: Square
.head 4 -  Border Style: Etched
.head 4 -  Border Thickness: 1
.head 4 -  Border Color: 3D Shadow Color
.head 4 -  Background Color: 3D Face Color
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  Long String: strMessageText
.head 3 -  String: strTitleText
.head 3 -  Number: nMode
.head 3 -  Number: nRefDoc
.head 2 +  Window Variables
.head 3 -  Number: nWu
.head 3 -  Number: nHu
.head 3 -  Number: nWbu
.head 3 -  Number: nHbu
.head 3 -  Number: nXbu
.head 3 -  Number: nYbu
.head 3 -  Number: nWp
.head 3 -  Number: nWbp
.head 3 -  Number: nContinueTime
.head 3 -  String: sContinueTime
.head 3 -  Number: nTimer
.head 3 -  String: sX
.head 3 -  String: sY
.head 3 -  Number: nX
.head 3 -  Number: nY
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call IniAbsapi()
.head 4 -  Call SalSendMsgToChildren(hWndForm, UM_QueryLabelText, 0, 0)
.head 4 +  If not nMode Or nMode = 4
.head 5 -  Call SalSetFocus(pbContinue)
.head 5 -  Call SalHideWindow(pbYes)
.head 5 -  Call SalHideWindow(pbNo)
.head 5 -  Call SalHideWindow(pbCancel)
.head 5 -  Call SalGetWindowSize(hWndForm, nWu, nHu) !! центрирование кнопки 'Продолжить'
.head 5 -  Call SalGetWindowLoc(pbContinue, nXbu, nYbu)
.head 5 -  Call SalGetWindowSize(pbContinue, nWbu, nHbu)
.head 5 -  Set nWp = SalFormUnitsToPixels(hWndForm, nWu, FALSE)
.head 5 -  Set nWbp = SalFormUnitsToPixels(hWndForm, nWbu, FALSE)
.head 5 -  Call SalSetWindowLoc(pbContinue, SalPixelsToFormUnits(hWndForm, SalNumberRound(nWp/2 - nWbp/2), FALSE), nYbu)
.head 5 +  If nMode = 4
.head 6 -  Call SalColorSet(mlMessageText, COLOR_IndexWindow, COLOR_Red)
.head 6 -  Call SalColorSet(mlMessageText, COLOR_IndexWindowText, COLOR_Yellow)
.head 5 -  Call SalUseRegistry(FALSE, '')
.head 5 -  Call SalGetProfileString('Information', 'InfoMessageContinueTime', '80000', sContinueTime, GetIniFileName())
.head 5 -  Set nContinueTime = Val(sContinueTime) * 1000
.head 5 -  Set nTimer = Min(nContinueTime, 65000)
.head 5 -  Call SalTimerSet(hWndForm, 1, nTimer) !! задержка для MSG_Information на nTimer секунд
.head 4 +  Else If nMode = PRINT_DOC
.head 5 -  Call SalSetFocus(pbContinue)
.head 5 -  Call SalHideWindow(pbCancel)
.head 5 -  ! Call SalHideWindow(pbContinue)
.head 5 -  Call SalHideWindow(pbYes)
.head 5 -  Call SalHideWindow(pbNo)
.head 5 -  Call SalUseRegistry(FALSE, '')
.head 5 -  Call SalGetProfileString('Print', 'PrintDocContinueTime', '80000', sContinueTime, GetIniFileName())
.head 5 -  Set nContinueTime = Val(sContinueTime) * 1000
.head 5 -  Set nTimer = Min(nContinueTime, 65000)
.head 5 -  Call SalTimerSet(hWndForm, 1, nTimer) !! задержка для PRINT_DOC на nTimer секунд
.head 5 -  ! Call SalTimerSet(dlg_MessageBox, 1, 30000) !! задержка для PRINT_DOC на 30 секунд
.head 4 +  Else If nMode = AUTO_PRINT_DOC
.head 5 -  Call SalSetFocus(pbContinue)
.head 5 -  Call SalHideWindow(pbYes)
.head 5 -  Call SalHideWindow(pbNo)
.head 4 +  Else If nMode
.head 5 -  Call SalSetFocus(pbNo)
.head 5 -  Call SalHideWindow(pbContinue)
.head 5 -  Call SalHideWindow(pbCancel)
.head 4 -  Call SalSetWindowText(hWndForm, strTitleText)
.head 4 -  Set mlMessageText = strMessageText
.head 4 -  ! Call PrepareWindow(hWndForm)
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 -  Call SalGetProfileString('MessageBox', 'X-Coordinate', 'None', sX, GetProductName())
.head 4 -  Call SalGetProfileString('MessageBox', 'Y-Coordinate', 'None', sY, GetProductName())
.head 4 +  If sX != 'None' AND sY != 'None'
.head 5 -  Call SalSetWindowLoc(hWndForm, SalStrToNumber(sX), SalStrToNumber(sY))
.head 4 +  Else
.head 5 -  Call SalCenterWindow(hWndForm)
.head 3 +  On SAM_CreateComplete
.head 4 -  Call WaitCursorOff()
.head 3 +  On SAM_Destroy
.head 4 -  Call SalGetWindowLoc(hWndForm, nX, nY)
.head 4 +  If nX != SalStrToNumber(sX) 
.head 5 -  Call SalSetProfileString('MessageBox', 'X-Coordinate', SalNumberToStrX(nX, 3), GetProductName())
.head 4 +  If nY != SalStrToNumber(sY)  
.head 5 -  Call SalSetProfileString('MessageBox', 'Y-Coordinate', SalNumberToStrX(nY, 3), GetProductName())
.head 4 -  Call SalSendMsg(pbCancel, SAM_Click, 0, 0)
.head 3 +  On SAM_Timer
.head 4 +  If nContinueTime > 0
.head 5 -  Set nTimer = Min(nContinueTime, 65000)
.head 5 -  Call SalTimerSet(hWndForm, 1, nTimer)
.head 5 -  Set nContinueTime = nContinueTime - nTimer
.head 4 +  Else
.head 5 -  Call SalSendMsg(pbContinue, SAM_Click, 0, 0)
.head 4 -  ! Call SalTimerKill(dlg_MessageBox, 1)
.head 4 -  ! Call SalSendMsg(pbContinue, SAM_Click, 0, 0) 
.head 1 +  Dialog Box: dlg_MessageBoxEx
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title:
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   Default
.head 4 -  Top:    Default
.head 4 -  Width:  6.1"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 1.948"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Вывод сообщения с различным набором кнопок
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Multiline Field: mlMsgText
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? No
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? No
.head 5 -  Window Location and Size
.head 6 -  Left:   0.071"
.head 6 -  Top:    0.052"
.head 6 -  Width:  5.843"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.99"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: 3D Face Color
.head 4 -  Message Actions
.head 3 +  Pushbutton: pbYes
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: &Да
.head 4 -  Window Location and Size
.head 5 -  Left:   0.129"
.head 5 -  Top:    1.094"
.head 5 -  Width:  1.4"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\APPLY.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, MBEx_Yes)
.head 3 +  Pushbutton: pbNo
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: &Нет
.head 4 -  Window Location and Size
.head 5 -  Left:   1.571"
.head 5 -  Top:    1.094"
.head 5 -  Width:  1.4"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DELREC.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, MBEx_No)
.head 3 +  Pushbutton: pbYes2All
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: &Все!
.head 4 -  Window Location and Size
.head 5 -  Left:   3.014"
.head 5 -  Top:    1.094"
.head 5 -  Width:  1.4"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Class Default
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\EXECUTE.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, MBEx_YesToAll)
.head 3 +  Pushbutton: pbCancel
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Отменить
.head 4 -  Window Location and Size
.head 5 -  Left:   4.457"
.head 5 -  Top:    1.094"
.head 5 -  Width:  1.4"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, MBEx_Cancel)
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  String: strText
.head 3 -  String: strHeader
.head 2 -  Window Variables
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call IniAbsapi()
.head 4 -  Call SalSendMsgToChildren(hWndForm, UM_QueryLabelText, 0, 0)
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  Call SalSetWindowText(hWndForm, strHeader)
.head 4 -  Set mlMsgText = strText
.head 4 -  Call SalSetFocus(pbYes)
.head 1 +  Dialog Box: dlg_MessageNoWait
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title:
.head 2 -  Accesories Enabled? Yes
.head 2 -  Visible? No
.head 2 -  Display Settings
.head 3 -  Display Style? Etched
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   3.613"
.head 4 -  Top:    1.156"
.head 4 -  Width:  6.229"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 2.262"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Bold
.head 3 -  Text Color: White
.head 3 -  Background Color: Red
.head 2 -  Description: Вывод сообщения без бесконечного ожидания (задается интервал остановки) или с бесконечным ожиданием
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? No
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Red
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Multiline Field: mlMsgTxt
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? No
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? No
.head 5 -  Window Location and Size
.head 6 -  Left:   0.029"
.head 6 -  Top:    -0.012"
.head 6 -  Width:  6.114"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 1.75"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: 10
.head 5 -  Font Enhancement: Bold
.head 5 -  Text Color: White
.head 5 -  Background Color: Red
.head 4 +  Message Actions
.head 5 +  On SAM_SetFocus
.head 6 -  Call SalSetFocus(pbOk)
.head 3 +  Pushbutton: pbOk
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Ok
.head 4 -  Window Location and Size
.head 5 -  Left:   -0.014"
.head 5 -  Top:    1.655"
.head 5 -  Width:  6.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.333"
.head 5 -  Height Editable? No
.head 4 -  Visible? Yes
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Black
.head 4 -  Background Color: White
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If nTz > 0
.head 7 -  Call SalTimerKill(hWndForm, 1)
.head 6 -  Call SalEndDialog(hWndForm, 0)
.head 3 +  Pushbutton: pbEsc
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Ok
.head 4 -  Window Location and Size
.head 5 -  Left:   -0.014"
.head 5 -  Top:    1.655"
.head 5 -  Width:  6.2"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.333"
.head 5 -  Height Editable? No
.head 4 -  Visible? No
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Black
.head 4 -  Background Color: White
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 +  If nTz>0
.head 7 -  Call SalTimerKill(hWndForm, 1)
.head 6 -  Call SalEndDialog(hWndForm, 1)
.head 5 +  On SAM_SetFocus
.head 6 -  Call SalSetFocus(pbOk)
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  String: sText
.head 3 -  String: sHeader
.head 3 -  Number: nTz
.head 3 -  Number: n01
.head 2 +  Window Variables
.head 3 -  Number: nTm
.head 3 -  String: sTm
.head 3 -  String: sX
.head 3 -  String: sY
.head 3 -  Number: nX
.head 3 -  Number: nY
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Set nTm = 0
.head 4 -  Call SalUseRegistry(TRUE, GetCompanyName())
.head 4 -  Call SalGetProfileString('MessageNoWait', 'X-Coordinate', 'None', sX, GetProductName())
.head 4 -  Call SalGetProfileString('MessageNoWait', 'Y-Coordinate', 'None', sY, GetProductName())
.head 4 +  If sX != 'None' AND sY != 'None'
.head 5 -  Call SalSetWindowLoc(hWndForm, SalStrToNumber(sX), SalStrToNumber(sY))
.head 4 +  Else
.head 5 -  Call SalCenterWindow(hWndForm)
.head 4 -  Set sTm = 'Ok'
.head 4 +  If nTz > 0
.head 5 -  Set sTm = sTm || ' (' || SalNumberToStrX(nTz, 0) || ')'
.head 4 -  Call SalSetWindowText(hWndForm, ' ' || sHeader)
.head 4 -  Call SalSetWindowText(pbOk, sTm)
.head 4 -  Call SalSetFocus(pbOk)
.head 4 -  Set mlMsgTxt = sText
.head 4 +  If n01 = 0 !! Обычное сообщение
.head 5 -  Call SalColorSet(mlMsgTxt, COLOR_IndexWindowText, COLOR_Black)
.head 5 -  Call SalColorSet(mlMsgTxt, COLOR_IndexWindow, COLOR_Gray)
.head 5 -  Call SalColorSet(hWndForm, COLOR_IndexWindow, COLOR_Gray)
.head 4 +  Else If n01 = 1 !! Аварийное сообщение
.head 5 -  Call SalColorSet(mlMsgTxt, COLOR_IndexWindowText, COLOR_White)
.head 5 -  Call SalColorSet(mlMsgTxt, COLOR_IndexWindow, COLOR_Red)
.head 5 -  Call SalColorSet(hWndForm, COLOR_IndexWindow, COLOR_Red)
.head 5 -  Call SalMessageBeep(MB_IconAsterisk)
.head 4 +  If nTz > 0
.head 5 -  Call SalTimerSet(hWndForm, 1, 1000)
.head 3 +  On SAM_Timer
.head 4 +  If nTz>0
.head 5 -  Set nTm = nTm+1
.head 5 +  If nTm > nTz
.head 6 -  Call SalSendMsg(pbOk, SAM_Click, 0, 0)
.head 5 +  Else
.head 6 -  Call SalSetWindowText(pbOk, 'Ok (' || SalNumberToStrX(nTz-nTm,0) || ')')
.head 3 +  On SAM_Destroy
.head 4 -  Call SalGetWindowLoc(hWndForm, nX, nY)
.head 4 +  If nX != SalStrToNumber(sX) 
.head 5 -  Call SalSetProfileString('MessageNoWait', 'X-Coordinate', SalNumberToStrX(nX, 3), GetProductName())
.head 4 +  If nY != SalStrToNumber(sY)  
.head 5 -  Call SalSetProfileString('MessageNoWait', 'Y-Coordinate', SalNumberToStrX(nY, 3), GetProductName())
.head 4 -  Call SalTimerKill( hWndForm, 1 )
.head 4 -  Call SalUseRegistry(FALSE, '')
.head 3 +  On SAM_Close
.head 4 -  Call SalEndDialog(hWndForm, 1)
.head 1 +  Dialog Box: dlgPrmptForAT
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: Экспортировать в ...
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? Yes
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? Yes
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   3.438"
.head 4 -  Top:    3.208"
.head 4 -  Width:  3.783"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 1.44"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Выбор направления экспорта (для TablePrint)
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: Default
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  List Box: lbAppType
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   -0.017"
.head 5 -  Top:    -0.012"
.head 5 -  Width:  3.7"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 1.155"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Multiple selection? No
.head 4 -  Sorted? Yes
.head 4 -  Vertical Scroll? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 -  Horizontal Scroll? No
.head 4 +  List Initialization
.head 5 -  Text: MS Word
.head 5 -  Text: MS Excel
.head 5 -  Text: Текстовый файл
.head 5 -  Text: Текстовый файл с печатью на принтер
.head 5 -  ! Text: Таблица *.dbf
.head 4 +  Message Actions
.head 5 +  On SAM_DoubleClick
.head 6 -  Set CurType = SalListQueryTextX(lbAppType,
    SalListQuerySelection(lbAppType))
.head 6 +  If CurType = 'MS Word'
.head 7 -  Call SalEndDialog(dlgPrmptForAT, 1)
.head 6 +  If CurType = 'MS Excel'
.head 7 -  Call SalEndDialog(dlgPrmptForAT, 2)
.head 6 +  If CurType = 'Текстовый файл'
.head 7 -  Call SalEndDialog(dlgPrmptForAT, 3)
.head 6 +  If CurType = 'Текстовый файл с печатью на принтер'
.head 7 -  Call SalEndDialog(dlgPrmptForAT, 4)
.head 6 +  If CurType = 'Таблица *.dbf'
.head 7 -  Call SalEndDialog(dlgPrmptForAT, 5)
.head 3 +  Pushbutton: pbOnEnter
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title:
.head 4 -  Window Location and Size
.head 5 -  Left:   Default
.head 5 -  Top:    Default
.head 5 -  Width:  Default
.head 5 -  Width Editable? Yes
.head 5 -  Height: Default
.head 5 -  Height Editable? Yes
.head 4 -  Visible? No
.head 4 -  Keyboard Accelerator: Enter
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Picture File Name:
.head 4 -  Picture Transparent Color: None
.head 4 -  Image Style: Single
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalSendMsg(lbAppType, SAM_DoubleClick, 0, 0)
.head 2 +  Functions
.head 3 +  Function: SetWindowFullSizeEx
.head 4 -  Description: Установить максимальный размер окна в пределах
материнского 
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  Window Handle: hWindow
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: nX0
.head 5 -  Number: nX1
.head 5 -  Number: nY0
.head 5 -  Number: nY1
.head 4 +  Actions
.head 5 +  If SalParentWindow(hWindow) = hWndNULL
.head 6 -  Return FALSE
.head 5 -  Call GetClientRect(SalParentWindow(hWindow), nX0, nY0, nX1, nY1)
.head 5 -  Call SalSetWindowLoc(hWindow, 
	SalPixelsToFormUnits(SalParentWindow(hWindow), nX0, FALSE), 
	SalPixelsToFormUnits(SalParentWindow(hWindow), nY0, TRUE))
.head 5 -  Call SalSetWindowSize(hWindow, 
	SalPixelsToFormUnits(SalParentWindow(hWindow), nX1-nX0, FALSE), 
	SalPixelsToFormUnits(SalParentWindow(hWindow), nY1-nY0+9, TRUE))
.head 5 -  Return TRUE
.head 2 -  Window Parameters
.head 2 +  Window Variables
.head 3 -  String: CurType
.head 2 +  Message Actions
.head 3 +  On SAM_CreateComplete
.head 4 -  Call SetWindowFullSizeEx( lbAppType )
.head 3 +  On SAM_Activate
.head 4 -  Call SalCenterWindow(hWndForm)
.head 1 +  Dialog Box: dlg_SqlErrorExt
.head 2 -  Class:
.head 2 -  Property Template:
.head 2 -  Class DLL Name:
.head 2 -  Title: АБС "БАРС98" - Ошибка
.head 2 -  Accesories Enabled? No
.head 2 -  Visible? No
.head 2 -  Display Settings
.head 3 -  Display Style? Default
.head 3 -  Visible at Design time? No
.head 3 -  Type of Dialog: Modal
.head 3 -  Window Location and Size
.head 4 -  Left:   1.138"
.head 4 -  Top:    0.625"
.head 4 -  Width:  9.1"
.head 4 -  Width Editable? Yes
.head 4 -  Height: 6.6"
.head 4 -  Height Editable? Yes
.head 3 -  Absolute Screen Location? Yes
.head 3 -  Font Name: Default
.head 3 -  Font Size: Default
.head 3 -  Font Enhancement: Default
.head 3 -  Text Color: Default
.head 3 -  Background Color: Default
.head 2 -  Description: Обработка SQL-ошибки
.head 2 +  Tool Bar
.head 3 -  Display Settings
.head 4 -  Display Style? Default
.head 4 -  Location? Top
.head 4 -  Visible? Yes
.head 4 -  Size: 0.625"
.head 4 -  Size Editable? Yes
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Default
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 -  Contents
.head 2 +  Contents
.head 3 +  Pushbutton: pbStop
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cPushButtonLabeled
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Title: Закрыть
.head 4 -  Window Location and Size
.head 5 -  Left:   7.2"
.head 5 -  Top:    5.7"
.head 5 -  Width:  1.5"
.head 5 -  Width Editable? Class Default
.head 5 -  Height: 0.452"
.head 5 -  Height Editable? Class Default
.head 4 -  Visible? Class Default
.head 4 -  Keyboard Accelerator: Esc
.head 4 -  Font Name: Class Default
.head 4 -  Font Size: Class Default
.head 4 -  Font Enhancement: Class Default
.head 4 -  Picture File Name: \BARS98\RESOURCE\BMP\DISCARD.BMP
.head 4 -  Picture Transparent Color: Gray
.head 4 -  Image Style: Class Default
.head 4 -  Text Color: Class Default
.head 4 -  Background Color: Class Default
.head 4 +  Message Actions
.head 5 +  On SAM_Click
.head 6 -  Call SalEndDialog(hWndForm, FALSE)
.head 3 -  Background Text: Расширенная информация
.head 4 -  Resource Id: 13144
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.3"
.head 5 -  Top:    0.05"
.head 5 -  Width:  4.0"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.2"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: 10
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Dark Gray
.head 4 -  Background Color: Default
.head 3 +  Data Field: bgInfo
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cLabelControl
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Class Default
.head 5 -  Data Type: Class Default
.head 5 -  Editable? Class Default
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   Default
.head 6 -  Top:    Default
.head 6 -  Width:  Class Default
.head 6 -  Width Editable? Class Default
.head 6 -  Height: Class Default
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Justify: Class Default
.head 5 -  Format: Class Default
.head 5 -  Country: Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: Class Default
.head 5 -  Font Enhancement: Class Default
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Class Default
.head 5 -  Input Mask: Class Default
.head 4 -  Message Actions
.head 3 -  Background Text: Модуль:
.head 4 -  Resource Id: 5020
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.3"
.head 5 -  Top:    0.3"
.head 5 -  Width:  8.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: bgModCode
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cLabelControl
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Class Default
.head 5 -  Data Type: Class Default
.head 5 -  Editable? Class Default
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   Default
.head 6 -  Top:    Default
.head 6 -  Width:  Class Default
.head 6 -  Width Editable? Class Default
.head 6 -  Height: Class Default
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Justify: Class Default
.head 5 -  Format: Class Default
.head 5 -  Country: Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: Class Default
.head 5 -  Font Enhancement: Class Default
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Class Default
.head 5 -  Input Mask: Class Default
.head 4 -  Message Actions
.head 3 +  Data Field: dfModCode
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   0.3"
.head 6 -  Top:    0.5"
.head 6 -  Width:  0.7"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Left
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 +  Data Field: dfModName
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  Data Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   1.1"
.head 6 -  Top:    0.5"
.head 6 -  Width:  7.6"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.25"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Border? Yes
.head 5 -  Justify: Left
.head 5 -  Format: Unformatted
.head 5 -  Country: Default
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 5 -  Input Mask: Unformatted
.head 4 -  Message Actions
.head 3 -  Background Text: Текст ошибки:
.head 4 -  Resource Id: 5021
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.3"
.head 5 -  Top:    0.85"
.head 5 -  Width:  8.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: bgAppErrText
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cLabelControl
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Class Default
.head 5 -  Data Type: Class Default
.head 5 -  Editable? Class Default
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   Default
.head 6 -  Top:    Default
.head 6 -  Width:  Class Default
.head 6 -  Width Editable? Class Default
.head 6 -  Height: Class Default
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Justify: Class Default
.head 5 -  Format: Class Default
.head 5 -  Country: Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: Class Default
.head 5 -  Font Enhancement: Class Default
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Class Default
.head 5 -  Input Mask: Class Default
.head 4 -  Message Actions
.head 3 +  Multiline Field: mlAppErrText
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Default
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? Yes
.head 5 -  Window Location and Size
.head 6 -  Left:   0.3"
.head 6 -  Top:    1.05"
.head 6 -  Width:  8.4"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 0.5"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 4 -  Message Actions
.head 3 -  Background Text: Текущее действие:
.head 4 -  Resource Id: 5022
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.3"
.head 5 -  Top:    1.65"
.head 5 -  Width:  8.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: bgCurrAction
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cLabelControl
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Class Default
.head 5 -  Data Type: Class Default
.head 5 -  Editable? Class Default
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   Default
.head 6 -  Top:    Default
.head 6 -  Width:  Class Default
.head 6 -  Width Editable? Class Default
.head 6 -  Height: Class Default
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Justify: Class Default
.head 5 -  Format: Class Default
.head 5 -  Country: Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: Class Default
.head 5 -  Font Enhancement: Class Default
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Class Default
.head 5 -  Input Mask: Class Default
.head 4 -  Message Actions
.head 3 +  Multiline Field: mlCurrAction
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 4000
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? Yes
.head 5 -  Window Location and Size
.head 6 -  Left:   0.3"
.head 6 -  Top:    1.85"
.head 6 -  Width:  8.4"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 1.0"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 4 -  Message Actions
.head 3 -  Background Text: Содержимое стека:
.head 4 -  Resource Id: 5023
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.3"
.head 5 -  Top:    2.95"
.head 5 -  Width:  8.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: bgCurrStack
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cLabelControl
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Class Default
.head 5 -  Data Type: Class Default
.head 5 -  Editable? Class Default
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   Default
.head 6 -  Top:    Default
.head 6 -  Width:  Class Default
.head 6 -  Width Editable? Class Default
.head 6 -  Height: Class Default
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Justify: Class Default
.head 5 -  Format: Class Default
.head 5 -  Country: Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: Class Default
.head 5 -  Font Enhancement: Class Default
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Class Default
.head 5 -  Input Mask: Class Default
.head 4 -  Message Actions
.head 3 +  Multiline Field: mlCurrStack
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 2000
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? Yes
.head 5 -  Window Location and Size
.head 6 -  Left:   0.3"
.head 6 -  Top:    3.15"
.head 6 -  Width:  8.4"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 1.0"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 4 -  Message Actions
.head 3 -  Background Text: Исходная ошибка:
.head 4 -  Resource Id: 5024
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.3"
.head 5 -  Top:    4.25"
.head 5 -  Width:  8.4"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 0.25"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Justify: Left
.head 4 -  Font Name: Default
.head 4 -  Font Size: Default
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Default
.head 4 -  Background Color: Default
.head 3 +  Data Field: bgSrcErrText
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class: cLabelControl
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: Class Default
.head 5 -  Data Type: Class Default
.head 5 -  Editable? Class Default
.head 4 -  Display Settings
.head 5 -  Window Location and Size
.head 6 -  Left:   Default
.head 6 -  Top:    Default
.head 6 -  Width:  Class Default
.head 6 -  Width Editable? Class Default
.head 6 -  Height: Class Default
.head 6 -  Height Editable? Class Default
.head 5 -  Visible? Class Default
.head 5 -  Border? Class Default
.head 5 -  Justify: Class Default
.head 5 -  Format: Class Default
.head 5 -  Country: Class Default
.head 5 -  Font Name: Class Default
.head 5 -  Font Size: Class Default
.head 5 -  Font Enhancement: Class Default
.head 5 -  Text Color: Class Default
.head 5 -  Background Color: Class Default
.head 5 -  Input Mask: Class Default
.head 4 -  Message Actions
.head 3 +  Multiline Field: mlSrcErrText
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Data
.head 5 -  Maximum Data Length: 2000
.head 5 -  String Type: String
.head 5 -  Editable? No
.head 4 -  Display Settings
.head 5 -  Border? Yes
.head 5 -  Word Wrap? Yes
.head 5 -  Vertical Scroll? Yes
.head 5 -  Window Location and Size
.head 6 -  Left:   0.3"
.head 6 -  Top:    4.45"
.head 6 -  Width:  8.4"
.head 6 -  Width Editable? Yes
.head 6 -  Height: 1.0"
.head 6 -  Height Editable? Yes
.head 5 -  Visible? Yes
.head 5 -  Font Name: Default
.head 5 -  Font Size: Default
.head 5 -  Font Enhancement: Default
.head 5 -  Text Color: Default
.head 5 -  Background Color: Default
.head 4 -  Message Actions
.head 3 +  Picture: pic1
.head 4 -  Class Child Ref Key: 0
.head 4 -  Class ChildKey: 0
.head 4 -  Class:
.head 4 -  Property Template:
.head 4 -  Class DLL Name:
.head 4 -  Window Location and Size
.head 5 -  Left:   0.1"
.head 5 -  Top:    0.15"
.head 5 -  Width:  8.8"
.head 5 -  Width Editable? Yes
.head 5 -  Height: 5.4"
.head 5 -  Height Editable? Yes
.head 4 -  Visible? Yes
.head 4 -  Editable? No
.head 4 -  File Name:
.head 4 -  Storage: External
.head 4 -  Picture Transparent Color: None
.head 4 -  Fit: Scale
.head 4 -  Scaling
.head 5 -  Width:  100
.head 5 -  Height:  100
.head 4 -  Corners: Square
.head 4 -  Border Style: Etched
.head 4 -  Border Thickness: 1
.head 4 -  Tile To Parent? No
.head 4 -  Border Color: Default
.head 4 -  Background Color: 3D Face Color
.head 4 -  Message Actions
.head 2 -  Functions
.head 2 +  Window Parameters
.head 3 -  String: strModuleCode
.head 3 -  String: strModuleName
.head 3 -  String: strAppErrorMsg
.head 3 -  String: strCurrSql
.head 3 -  String: strErrText
.head 2 -  Window Variables
.head 2 +  Message Actions
.head 3 +  On SAM_Create
.head 4 -  Call IniAbsapi()
.head 4 -  Call SalSendMsgToChildren(hWndForm, UM_QueryLabelText, 0, 0)
.head 4 -  Call SalSetWindowText(hWndForm, CurrentLangTable.GetAtomTitle('cTWndTitleError'))
.head 4 -  !
.head 4 -  Call SalCenterWindow(hWndForm)
.head 4 -  !
.head 4 -  ! Устанавливаем значения из переданных параметров
.head 4 -  !
.head 4 -  ! Код модуля
.head 4 -  Set dfModCode = strModuleCode
.head 4 -  ! Наименование модуля
.head 4 -  Set dfModName = strModuleName
.head 4 -  ! Текст прикладной ошибки
.head 4 -  Set mlAppErrText = strAppErrorMsg
.head 4 -  ! Текст SQL-запроса
.head 4 -  Set mlCurrAction = strCurrSql
.head 4 -  ! Стек получаем из сообщения об ошибке: первая строка содержит исключение, все остальные - стек
.head 4 -  Set mlCurrStack = SalStrMidX(strErrText, SalStrScan(strErrText, PutCrLf())+2, SalStrLength(strErrText))
.head 4 -  ! Исходный текст ошибки
.head 4 -  Set mlSrcErrText = strErrText
