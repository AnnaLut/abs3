Application Description: технологические операции по обработке файлов системы КЛИЕНТ-БАНК (ИКТ)
	Outline Version - 4.0.26
	Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000B30000 002C000000020000 0003000000FFFFFF FFFFFFFFFFFCFFFF
0040: FFE9FFFFFFD90000 0001000000B70200 0042010000010000 0001000000010000
0060: 000F4170706C6963 6174696F6E497465 6D00000000
.enddata
.data DT_MAKERUNDLG
0000: 020000000015513A 5C43454E54555241 5C6E65776170702E 65786515513A5C43
0020: 454E545552415C6E 65776170702E646C 6C15513A5C43454E 545552415C6E6577
0040: 6170702E61706300 0001010115513A5C 43454E545552415C 6E65776170702E72
0060: 756E15513A5C4345 4E545552415C6E65 776170702E646C6C 15513A5C43454E54
0080: 5552415C6E657761 70702E6170630000 010101185C424152 5339385C42494E5C
00A0: 6B6C6F705F746578 2E617064165C4241 525339385C42494E 5C6E65776170702E
00C0: 646C6C165C424152 5339385C42494E5C 6E65776170702E61 7063000001010115
00E0: 513A5C43454E5455 52415C6E65776170 702E61706C15513A 5C43454E54555241
0100: 5C6E65776170702E 646C6C15513A5C43 454E545552415C6E 65776170702E6170
0120: 630000010101
.enddata
		Outline Window State: Normal
		Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
			Left:   -0.013"
			Top:    0.0"
			Width:  8.013"
			Height: 4.969"
		Options Box Location
.data VIEWINFO
0000: 1018B80BB80B2500
.enddata
.data VIEWSIZE
0000: 0800
.enddata
			Visible? Yes
			Left:   4.15"
			Top:    1.885"
			Width:  3.8"
			Height: 2.073"
		Class Editor Location
			Visible? No
			Left:   0.575"
			Top:    0.094"
			Width:  5.063"
			Height: 2.719"
		Tool Palette Location
			Visible? No
			Left:   6.388"
			Top:    0.729"
		Fully Qualified External References? Yes
		Reject Multiple Window Instances? No
		Enable Runtime Checks Of External References? Yes
		Use Release 4.0 Scope Rules? No
	Libraries
		Dynalib: Absapi.apd
		Dynalib: Global.apd
		Dynalib: Service.apd
		Dynalib: Message.apd
		File Include: Vtdos.apl
		File Include: Vtfile.apl
		File Include: Vtstr.apl
		File Include: Vtcal.apl
		File Include: Vtarray.apl
		File Include: Vttblwin.apl
		File Include: VTMETER.APL
		File Include: Winbars2.apl
		File Include: Constant.apl
		File Include: Gentbl.apl
		File Include: GENLIST.APL
	Global Declarations
		Window Defaults
			Tool Bar
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Form Window
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Dialog Box
				Display Style? Etched
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Top Level Table Window
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Data Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Multiline Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Spin Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Background Text
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Pushbutton
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Radio Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Check Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Option Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Group Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Child Table Window
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			List Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Combo Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Line
				Line Color: Use Parent
			Frame
				Border Color: Use Parent
				Background Color: 3D Face Color
			Picture
				Border Color: Use Parent
				Background Color: Use Parent
		Formats
			Number: 0'%'
			Number: #0
			Number: ###000
			Number: ###000;'($'###000')'
			Date/Time: hh:mm:ss AMPM
			Date/Time: M/d/yy
			Date/Time: MM-dd-yy
			Date/Time: dd-MMM-yyyy
			Date/Time: MMM d, yyyy
			Date/Time: MMM d, yyyy hh:mm AMPM
			Date/Time: MMMM d, yyyy hh:mm AMPM
		External Functions
			Library name: Lcb_W32b.Dll
				Function: INITKSGN
					Description: инициализация средств ЭЦП
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPSTR
						String: LPSTR
						String: LPSTR
						String: LPSTR
				Function: EXITKSGN
					Description: деинициализация средств ЭЦП
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: PUTFSGNB
					Description: выработка ЭЦП операционста
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: HANDLE
				Function: CHKSIGNB
					Description: проверка подписи должностных лиц
							клиента на информационной строке
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: WORD
						String: LPSTR
						String: LPCSTR
				Function: ENCRYPTB
					Description: шифрование с архивированием файла для
							клиента
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: WORD
						Number: WORD
						Number: DWORD
				Function: DECRYPTB
					Description: дешифрование с разархивированием и
							проверкой подписи файла от клиента
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: WORD
						Number: WORD
						Number: DWORD
			Library name: IctBob.Dll
				Function: llopen
					Description: открытие файла (C++)
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						! первый параметр: имя файла, второй: тип открытия
						String: LPCSTR
						Number: INT
				Function: llcreat
					Description: создание файла (C++)
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						! первый параметр: имя файла, второй: тип открытия
						String: LPCSTR
						Number: INT
				Function: llclose
					Description: закрытие файла (C++)
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						Number: HANDLE
				Function: llread
					Description: чтение файла (C++)
					Export Ordinal: 0
					Returns
						Number: UINT
					Parameters
						Number: HANDLE
						String: LPVOID
						Number: UINT
				Function: llwrite
					Description:
					Export Ordinal: 0
					Returns
						Number: UINT
					Parameters
						Number: HANDLE
						String: LPCSTR
						Number: UINT
				Function: lllseek
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Number: HANDLE
						Number: LONG
						Number: INT
				Function: llstr2str
					Description: преобразование строки HEXtoBIN
					Export Ordinal: 0
					Returns
					Parameters
						String: LPSTR
						Receive String: LPVOID
						Number: ULONG
			Library name: DSGBVC4.DLL
				! DSGBVC4.DLL - экспортируемые функции
				Function: nsignInitGBSign
					Description: int GLOBAL nsignInitGBSign(
							    char *dbDir, char *secKeyDisk,
							    char *pin, char *mfo, int mode)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						Number: INT
				Function: nsignExitGBSign
					Description: int GLOBAL nsignExitGBSign(void)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: nsignInitOPSign
					Description: int GLOBAL nsignInitOPSign(
							    char *dbDir, char *secKeyDisk,
							    char *pin, char *mfo)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
				Function: nsignExitOPSign
					Description: int GLOBAL nsignExitOPSign(void)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: nsignMapError2Text
					Description: void GLOBAL nsignMapError2Text(
							     char *buffer, int errorCode)
					Export Ordinal: 0
					Returns
					Parameters
						Receive String: LPSTR
						Number: INT
				Function: nsignPutOPSignOnMemory
					Description: int GLOBAL nsignPutOPSignOnMemory(
							           void* data,
							           unsigned short size,
							           void* signPtr)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPVOID
						Number: SHORT
						Receive String: LPVOID
			Library name: RSAC.DLL
				! RSAC.DLL - экспортируемые функции
				Function: INIT_ZAH
					Description: int InitSign(char *szPathOpenKey,
							             char *szPathSecKey,
							             char *szIdOper,
							             char *szUxDateTme,
							             char *szPasword)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
						String: LPCSTR
				Function: CLOSE_ZAH
					Description: int CloseRsa(void)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: RSA_ZAH
					Description: int RSA_ZAH(char cMode, int iHandler,
							            dword dwCountPart,
							            dword dwOffset, dword dwLength,
							            dword dwOffsetSecond,
							            char *szSign, char *szIdOpen)
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: CHAR
						Number: INT
						Number: DWORD
						String: LPCSTR
						Number: DWORD
						Number: DWORD
						String: LPSTR
						String: LPCSTR
		Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
			System
			User
		Resources
		Variables
			Number: nCount0 ! счетчик к-ва документов в файле А
			Number: nCount1 ! счетчик сумм по дебету  в файле А
			Number: nCount2 ! счетчик сумм по кредиту в файле А
			String: strPinCodeICT
			! только для отладки
			File Handle: h1
			! все необходимые для ВСЕХ окон переменные
			String: sDiskKata
			String: sArchPath
			String: sTempPath
			Number: nKLI
			String: sSAB
			String: smSAB[*]
			Number: nRNK
			Number: nmRNK[*]
			String: sNMK
			String: smNMK[*]
			String: sOKPO
			String: smOKPO[*]
			String: sTIMES
			String: smTIMES[*]
			!
			Boolean: bmKORP[*]
			!
			Number: nFetchRes
			! String: sX
			! String: sY
			! Number: nX
			! Number: nY
			Number: nKw
			!
			String: sMass[*]
			Number: nCount
			Number: nHo
			Number: nHc
			String: sFileTmp
			Number: nSendId
			Boolean: bIni
			String: sPinKod
			Number: nNf
			!
			! Number: nI
			Number: nII
			Number: nLenArr
			String: sUserid
			! переменные для файла лицензии
			String: smlNAIM[*]
			String: smlSAB[*]
			Number: nmlNOMER[*]
			Date/Time: dmlDALI[*]
			! переменные для выбора LISTBOX и Calendar
			Number: nArray[*]
			String: sSelectNAIM[*]
			String: sSelectSAB[*]
			Date/Time: dSelect
			String: smWeek[7]
			String: smMonth[12]
			Date/Time: dDada
			String: sDat
			String: sSqlSAB
			Number: nIndex
			!
			String: sMFOA
			String: smMFOA[*]
			String: sNLSA
			String: smNLSA[*]
			String: sNAMA
			String: smNAMA[*]
			String: sMFOB
			String: smMFOB[*]
			String: sNLSB
			String: smNLSB[*]
			String: sNAMB
			String: smNAMB[*]
			String: sOKPOB
			String: smOKPOB[*]
			String: sOKPOZ
			String: smOKPOZ[*]
			Number: nDK
			Number: nmDK[*]
			Number: nS
			Number: nmS[*]
			Number: nVOB
			Number: nmVOB[*]
			String: sND
			String: smND[*]
			Number: nISP
			Number: nmISP[*]
			Number: nKV
			Number: nmKV[*]
			Date/Time: dDAOP
			Date/Time: dmDAOP[*]
			Number: nIOST
			Number: nmIOST[*]
			Date/Time: dDAPP
			Date/Time: dmDAPP[*]
			String: sNAZN
			String: smNAZN[*]
			String: smD_rec[*]
			String: sPOND
			String: smPOND[*]
			Number: nSK
			Number: nmSK[*]
			String: sNameFileA
			String: smNameFileA[*]
			!
			Boolean: bU
			Number: nIU
			Number: nIL
			Number: nIQ
			Number: nIN
			Number: nIV
			Number: nIO
			Number: nIW
			!
			Number: nKodirowka
			!
			String: sFrag
			Number: nIl1
			!
			Number: nDiti
		Internal Functions
			Function: KliTex                     ! __exported
				Description: обработка информации по КЛИЕНТ-БАНК
				Returns
				Parameters
					Number: nFun
					Window Handle: hWnd
					String: sPar
				Static Variables
				Local variables
				Actions
					Select Case nFun
						Case 1
							Call SalModalDialog(FormE, hWndMDI)
							Break
						Case 2
							Call SalCreateWindow(wino1, hWndForm)
							Break
						Case 3
							! Call SalCreateWindow(Times, hWndForm)
							Call SalCreateWindow(Times, hWndMDI)
							Break
						Case 4
							Call SalCreateWindow(winoSbb, hWndForm, 0)
							Break
						Case 5
							Call SalCreateWindow(winoSbb, hWndForm, 1)
							Break
						Case 6
							Call SalCreateWindow(winoSbb_tst, hWndForm, 0)
							Break
			! все функции доступны здесь всем окнам
			Function: LenArray
				Description: возвращает длину одномерного массива строк
				Returns
					Number:
				Parameters
					String: smArr[*]
				Static Variables
				Local variables
					Number: nBound
				Actions
					Call SalArrayGetUpperBound(smArr, 1, nBound)
					Return nBound
			Function: ErrMsgIct
				Description: формирование текстовых расшифровок кодов возврата функций ИКТ
				Returns
					String:
				Parameters
					Number: nKow
					String: sDes
				Static Variables
				Local variables
					String: sTx
				Actions
					If nKow = -1
						Set sTx = 'На дискете отсутствует секретный ключ'
					Else If nKow = -2
						Set sTx = 'Ошибка чтения секретного ключа'
					Else If nKow = -3
						Set sTx = 'Нарушена целостность секретного ключа'
					Else If nKow = -4
						Set sTx = 'PIN-код введен неверно'
					Else If nKow = -9
						Set sTx = 'Ошибка инициализации БД открытых ключей'
					Else If nKow = -10
						Set sTx = 'Ошибка чтения открытого ключа'
					Else If nKow = -13
						Set sTx = 'Нарушена целостность открытого ключа'
					Else If nKow = -14
						Set sTx = 'Ошибка поиска открытого ключа'
					Else If nKow = -16
						Set sTx = 'Отсутствует заданный каталог'
					Else If nKow = -40
						Set sTx = 'Ошибка открытия/чтения файла'
					Else If nKow = -41
						Set sTx = 'Ошибка записи в файл'
					Else If nKow = -43
						Set sTx = 'Ошибка при постановке ЦП'
					Else If nKow = -45
						Set sTx = 'Отсутствует ЦП (файл не был подписан)'
					Else If nKow = -47
						Set sTx = 'Неверная ЦП (не снята подпись)'
					Else If nKow = -102
						Set sTx = 'Нарушена целостность файла'
					Else If nKow = -103
						Set sTx = 'Файл не зашифрован'
					Else
						Set sTx = 'Ошибка ' || Str(nKow)
					Return sDes || '(' || Str(nKow) || ').' || ' ' || sTx
			Function: InitICT
				Description: инициализация подписи ИКТ
				Returns
					Number:
				Parameters
				Static Variables
				Local variables
				Actions
					Return INITKSGN(GetOpKeyPath(), GetSecKeyDrv(), sArchPath, GetPinCodeICT())
			Function: ShowInputPinCodeICT
				Description: ввод PIN-кода ИКТ
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
				Actions
					Return SalModalDialog(dlg_InputPinCodeICT, hWndForm)
			Function: GetPinCodeICT
				Description: возвращает значение PIN-кода ИКТ
				Returns
					String:
				Parameters
				Static Variables
				Local variables
				Actions
					Return strPinCodeICT
			Function: SalNumberXOR
				Description: XOR
				Returns
					Number:
				Parameters
					Number: n1
					Number: n2
				Static Variables
				Local variables
				Actions
					Return (n1 & (-1-n2)) | (n2 & (-1-n1))
			Function: DaySymbol
				Description: преобразовывает день  в символ
				Returns
					String:
				Parameters
					Date/Time: dDa
				Static Variables
				Local variables
					Number: nDa
					String: sDay
				Actions
					Set nDa = SalDateDay(dDa)
					If nDa < 10
						Set sDay = Str(nDa)
					Else
						Set sDay = Chr(nDa+55)
					Return sDay
			Function: MonthSymbol
				Description: преобразовывает месяц  в символ
				Returns
					String:
				Parameters
					Date/Time: dDa
				Static Variables
				Local variables
					Number: nMo
					String: sMonth
				Actions
					Set nMo = SalDateMonth(dDa)
					If nMo < 10
						Set sMonth = Str(nMo)
					Else
						Set sMonth = Chr(nMo+55)
					Return sMonth
			Function: YearSymbol
				Description: преобразовывает год  в символ
				Returns
					String:
				Parameters
					Date/Time: dDa
				Static Variables
				Local variables
					Number: nY
					String: sYear
				Actions
					Set nY = Max(SalDateYear(dDa) - 1998, 0)
					If nY<10
						Set sYear = Str(nY)
					Else
						Set sYear = Chr(nY+55)
					Return sYear
			Function: LcwRead
				Description: обработка файла лицензии [МФО].Lcw
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sLiPa
					String: sNaim
					File Handle: hO
					Number: nSeed
					Number: nB
					Number: n1
					Number: nTmp
					String: sKoPo
					String: sNoPo
					Number: nNoPo
					String: sDali
					Date/Time: dDali
				Actions
					Set sLiPa = GetLicenPath() || GetBankMfo() || '.Lcw'
					If not SalFileOpen(hO, sLiPa, OF_Read)
						Return FALSE
					Else
						Set nSeed = SalFileGetChar(hO)
						Set nIndex = 0
						While TRUE
							Set nB = SalFileGetChar(hO)
							If nB != -1 ! не конец файла
								Set nSeed = Mod(nSeed+1, 256)
								Set nB = SalNumberXOR(nB, nSeed)
								Set n1 = 0
								Set sNaim = ''
								While n1 < nB
									Set nTmp = SalFileGetChar(hO)
									If nTmp = -1
										Call SalFileClose(hO)
										Return FALSE
									Else
										Set nSeed = Mod(nSeed+1, 256)
										Set nTmp = SalNumberXOR(nTmp, nSeed)
										Set sNaim = sNaim || Chr(nTmp)
										Set n1 = n1 + 1
								Set n1 = 0
								Set sKoPo = ''
								While n1 < 4
									Set nTmp = SalFileGetChar(hO)
									If nTmp = -1
										Call SalFileClose(hO)
										Return FALSE
									Else
										Set nSeed = Mod(nSeed+1, 256)
										Set nTmp = SalNumberXOR(nTmp, nSeed)
										Set sKoPo = sKoPo || Chr(nTmp)
										Set n1 = n1 + 1
								Set n1 = 0
								Set sNoPo = ''
								While n1 < 4
									Set nTmp = SalFileGetChar(hO)
									If nTmp = -1
										Call SalFileClose(hO)
										Return FALSE
									Else
										Set nSeed = Mod(nSeed+1, 256)
										Set nTmp = SalNumberXOR(nTmp, nSeed)
										Set sNoPo = sNoPo || Chr(nTmp)
										Set n1 = n1 + 1
								Set nNoPo = Val(sNoPo)
								Set n1 = 0
								Set sDali = ''
								While n1 < 8
									Set nTmp = SalFileGetChar(hO)
									If nTmp = -1
										Call SalFileClose(hO)
										Return FALSE
									Else
										Set nSeed = Mod(nSeed+1, 256)
										Set nTmp = SalNumberXOR(nTmp, nSeed)
										Set sDali = sDali || Chr(nTmp)
										Set n1 = n1 + 1
								Set dDali = SalDateConstruct(Val(Left(sDali, 4)), Val(SalStrMidX(sDali, 4, 2)),
										    Val(SalStrMidX(sDali, 6, 2)), 0, 0, 0)
								! Set sDali = SalFmtFormatDateTime(dDali, 'MM/dd/yyyy')
								Set smlNAIM [nIndex] = sNaim
								Set smlSAB  [nIndex] = SalStrUpperX(sKoPo)
								Set nmlNOMER[nIndex] = nNoPo
								Set dmlDALI [nIndex] = dDali
								Set nIndex = nIndex + 1
							Else
								Call SalFileClose(hO)
								Return TRUE
			Function: StrWinToDosX2
				Description:
				Returns
					String:
				Parameters
					String: sIn
				Static Variables
				Local variables
					String: sOut
				Actions
					Set sOut = Spac(Len(sIn))
					Call CharToOemUkr(sIn, sOut)
					Return sOut
		Named Menus
		Class Definitions
.data RESOURCE 0 0 1 25218691
0000: 37010000A2000000 0000000000000000 0200000200FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F22003C00 000A630047656E46
0040: 696C746500727400 00000400001E0002 0400C10001000000 3F8001F800000037
0060: 040001F00D000000 FF1F110000DC0002 00FF7F1570000000 0100FFFF21018022
0080: 000001C200000B63 47F8444669B30004 00770200F601004F 800100FE008D0400
00A0: 010DFD00FF371100 02F700FFDF15DC00 0100FF7F
.enddata
		Default Classes
			MDI Window: cBaseMDI
			Form Window:
			Dialog Box:
			Table Window:
			Quest Window:
			Data Field:
			Spin Field:
			Multiline Field:
			Pushbutton: cpbCancel
			Radio Button:
			Option Button:
			Check Box:
			Child Table:
			Quest Child Window: cQuickDatabase
			List Box:
			Combo Box: cGenComboBox_StrId
			Picture:
			Vertical Scroll Bar:
			Horizontal Scroll Bar:
			Column:
			Background Text:
			Group Box:
			Line:
			Frame:
			Custom Control: cMeter
		Application Actions
	Dialog Box: dlg_InputPinCodeICT
		Class:
		Property Template:
		Class DLL Name:
		Title: Ввод PIN-кода ИКТ
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? No
			Type of Dialog: Modal
			Window Location and Size
				Left:   1.588"
				Top:    1.646"
				Width:  4.357"
				Width Editable? Yes
				Height: 1.792"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: MS Sans Serif
			Font Size: 8
			Font Enhancement: Default
			Text Color: Blue
			Background Color: Default
		Description: Ввод PIN-кода пользователя
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? No
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Background Text: PIN-Код:
				Resource Id: 42241
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.586"
					Top:    0.375"
					Width:  1.214"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Right
				Font Name: Default
				Font Size: Default
				Font Enhancement: Bold
				Text Color: Default
				Background Color: Default
			Data Field: dfPinCode
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 16
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left:   1.829"
						Top:    0.333"
						Width:  1.586"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Invisible
					Country: Default
					Font Name: Arial
					Font Size: 12
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_AnyEdit
						Call SalEnableWindow(pbOk)
			Pushbutton: pbOk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Ввести
				Window Location and Size
					Left:   0.5"
					Top:    1.021"
					Width:  1.429"
					Width Editable? Yes
					Height: 0.286"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Set strPinCodeICT = dfPinCode
						Call SalEndDialog(hWndForm, TRUE)
			Pushbutton: pbExit
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Выход
				Window Location and Size
					Left:   2.343"
					Top:    1.021"
					Width:  1.429"
					Width Editable? Yes
					Height: 0.286"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: MS Sans Serif
				Font Size: 8
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Message Actions
					On SAM_Click
						Set strPinCodeICT = ''
						Call SalEndDialog(hWndForm, FALSE)
			Frame
				Resource Id: 42242
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.057"
					Top:    0.031"
					Width:  4.171"
					Width Editable? Yes
					Height: 0.854"
					Height Editable? Yes
				Visible? Yes
				Corners: Square
				Border Style: Drop-Shadow
				Border Thickness: 1
				Border Color: 3D Shadow Color
				Background Color: 3D Face Color
			Frame
				Resource Id: 42243
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.057"
					Top:    0.917"
					Width:  4.171"
					Width Editable? Yes
					Height: 0.521"
					Height Editable? Yes
				Visible? Yes
				Corners: Square
				Border Style: Drop-Shadow
				Border Thickness: 1
				Border Color: 3D Shadow Color
				Background Color: 3D Face Color
		Functions
		Window Parameters
		Window Variables
		Message Actions
			On SAM_Create
				Call PrepareWindow(hWndForm)
				Call SalDisableWindow(pbOk)
				Call SalSetFocus(dfPinCode)
			On SAM_CreateComplete
				Call WaitCursorOff()
			On SAM_Destroy
				Call WaitCursorOff()
	Form Window: wino1
		Class:
		Property Template:
		Class DLL Name:
		Title: Отбор ЗАКЛЮЧ. выписок "электронным" клиентам
		Icon File:
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Automatically Created at Runtime? Yes
			Initial State: Normal
			Maximizable? Yes
			Minimizable? Yes
			System Menu? Yes
			Resizable? Yes
			Window Location and Size
				Left:   2.138"
				Top:    0.625"
				Width:  6.617"
				Width Editable? Yes
				Height: 3.548"
				Height Editable? Yes
			Form Size
				Width:  Default
				Height: Default
				Number of Pages: Dynamic
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 440
					String Type: Long String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? No
					Window Location and Size
						Left:   0.183"
						Top:    0.155"
						Width:  6.1"
						Width Editable? Yes
						Height: 1.0"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Black
					Background Color: Sky
				Message Actions
			Background Text: ТЕКУЩЕЕ СООБЩЕНИЕ
				Resource Id: 48476
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.183"
					Top:    0.012"
					Width:  2.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Dark Gray
				Background Color: Default
		Functions
			Function: Message
				Description: вывод текста в окно и запись в LOG
				Returns
					Boolean:
				Parameters
					String: sStr
					Boolean: bTL
				Static Variables
				Local variables
				Actions
					If bTL
						Call SaveInfoToLog(sStr)
					Call SalSetWindowText(ml1, sStr)
			Function: OtborLS
				Description: отбор ЛС "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					Number: nRNK
					String: sNMK
					Number: nFetchRes
					Number: nIndex
					Date/Time: dBaDa
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					String: sNAZN
					String: smNAZN[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nREF
					Number: nmREF[*]
					!
					String: sOpenDay
					!
					Number: nUid
					Number: nKwo
					Boolean: bOk
					Number: nVal
					!
					String: sYearBaDa
				Actions
					Call SalWaitCursor(TRUE)
					Set dBaDa = GetBankDate()
					Set sYearBaDa = Str(SalDateYear(dBaDa))
					! Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
					Set sOpenDay = '0' ! как бы день закрыт
					Set nIL = 0
					While nIL <= nKLI
						Set sSAB = smSAB[nIL]
						Set nRNK = nmRNK[nIL]
						Set sNMK = smNMK[nIL]
						Set sOKPO = smOKPO[nIL]
						Set sTIMES = smTIMES[nIL]
						Set nUid = GetUserId()
						! Set nVal = GetBaseVal()
						Set nVal = NUMBER_Null
						If SqlPLSQLCommand(hSql(), "p_lici" || IifS(bmKORP[nIL], "u", "") ||
								   "(nUid,dBaDa,sSAB,nVal,'%')")
							Call SqlCommit(hSql())
							Call SqlPrepareAndExecute(hSql(), T("
									     SELECT count(*)
									     FROM tmp_lici
									     INTO :nKwo
									     WHERE id=:nUid"))
							Call SqlFetchNext(hSql(), nFetchRes)
							Set bOk = nKwo>0
						Else
							Call SqlRollback(hSql())
							Set bOk = FALSE
						If bOk and SqlPrepareAndExecute(hSql(), T("
								   SELECT nlsa,nama,mfob,nlsb,namb,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dapp,nazn,pond,
								          sk,namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,ref
								   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,
								        :dDAOP,:nIOST,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,
								        :sNaznk,:sD_rec,:sFn_a,:nREF
								   FROM tmp_lici
								   WHERE id=:nUid
								   ORDER BY nlsa,kv,dk,s"))
							Set sMFOA = GetBankMfo()
							Set nIndex = 0
							Call SalArraySetUpperBound(smMFOA, 1, -1)
							Call SalArraySetUpperBound(smNLSA, 1, -1)
							Call SalArraySetUpperBound(smNAMA, 1, -1)
							Call SalArraySetUpperBound(smMFOB, 1, -1)
							Call SalArraySetUpperBound(smNLSB, 1, -1)
							Call SalArraySetUpperBound(smNAMB, 1, -1)
							Call SalArraySetUpperBound(smOKPOB, 1, -1)
							Call SalArraySetUpperBound(nmDK, 1, -1)
							Call SalArraySetUpperBound(nmS, 1, -1)
							Call SalArraySetUpperBound(nmVOB, 1, -1)
							Call SalArraySetUpperBound(smND, 1, -1)
							Call SalArraySetUpperBound(nmISP, 1, -1)
							Call SalArraySetUpperBound(nmKV, 1, -1)
							Call SalArraySetUpperBound(dmDAOP, 1, -1)
							Call SalArraySetUpperBound(nmIOST, 1, -1)
							Call SalArraySetUpperBound(dmDAPP, 1, -1)
							Call SalArraySetUpperBound(smNAZN, 1, -1)
							Call SalArraySetUpperBound(smPOND, 1, -1)
							Call SalArraySetUpperBound(nmSK, 1, -1)
							Call SalArraySetUpperBound(smNameFileA, 1, -1)
							Call SalArraySetUpperBound(nmREF, 1, -1)
							While SqlFetchNext(hSql(), nFetchRes)
								Set smMFOA[nIndex] = sMFOA
								Set smNLSA[nIndex] = sNLSA
								Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
								Set smMFOB[nIndex] = sMFOB
								Set smNLSB[nIndex] = sNLSB
								Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
								Set smOKPOB[nIndex] = sOKPOB
								Set nmDK[nIndex] = nDK
								Set nmS[nIndex] = nS
								Set nmVOB[nIndex] = nVOB
								Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
								Set nmISP[nIndex] = nISP
								Set nmKV[nIndex] = nKV
								Set dmDAOP[nIndex] = dDAOP
								Set nmIOST[nIndex] = nIOST
								Set dmDAPP[nIndex] = dDAPP
								Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
								Set sD_rec = StrDosToWinX(sD_rec)
								If sNazns = '00'
									Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM s_np
											    WHERE k_np='" || sNaznk || "'"))
								Else If sNazns = '01' or sNazns = '11' or sNazns = '41'
									Set smNAZN[nIndex] = IifS(sNazns='01', SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM s_np
											    WHERE k_np='" || sNaznk || "'")), smNAZN[nIndex])
									If SalStrScan(sD_rec, '#B') >= 0 !! есть БИСы
										! Call SqlPrepareAndExecute(hSqlAux3(), "
												     SELECT substr(convert(nazn,'RU8PC866','CL8MSWIN1251'),1,200),
												            substr(convert(d_rec,'RU8PC866','CL8MSWIN1251'),1,200)
												     INTO :sNaznBis,:sD_recBis
												     FROM arc_rrp
												     WHERE fn_a=:sFn_a and TO_CHAR(dat_a,'YYYY')=:sYearBaDa and nd=:sND and ref is null and
												           bis>1 and s=0 and dk=3 and nazns=33
												     ORDER BY bis")
										! Call SqlPrepareAndExecute(hSqlAux3(), "
												     SELECT nazn,d_rec
												     INTO :sNaznBis,:sD_recBis
												     FROM arc_rrp
												     WHERE fn_a=:sFn_a and TO_CHAR(dat_a,'YYYY')=:sYearBaDa and nd=:sND and ref is null and
												           bis>1 and s=0 and dk=3 and nazns=33
												     ORDER BY bis")
										Call SqlPrepareAndExecute(hSqlAux3(), "
												     SELECT nazn,d_rec
												     INTO :sNaznBis,:sD_recBis
												     FROM arc_rrp
												     WHERE (fn_a=:sFn_a or fn_b=:sFn_a) and TO_CHAR(dat_a,'YYYY')=:sYearBaDa and nd=:sND and
												           ref is null and bis>1 and s=0 and dk=3 and nazns=33
												     ORDER BY bis")
										While SqlFetchNext(hSqlAux3(), nFetchRes)
											! Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || StrDosToWinX(Left(
													    Right(sNaznBis, Len(sNaznBis)-2), Len(Right(sNaznBis, Len(sNaznBis)-2))-1)) || ' ' || StrDosToWinX(Left(
													    Right(sD_recBis, Len(sD_recBis)-2), Len(Right(sD_recBis, Len(sD_recBis)-2))-1)))
											Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || Left(Right(sNaznBis, Len(sNaznBis)-2), Len(
													    Right(sNaznBis, Len(sNaznBis)-2))-1) || ' ' || Left(Right(sD_recBis, Len(sD_recBis)-2), Len(
													    Right(sD_recBis, Len(sD_recBis)-2))-1))
								Else If sNazns = '21' or sNazns = '20'
									Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM s_np
											    WHERE k_np='" || sNaznk || "'") || ' ' || smNAZN[nIndex])
									If sNazns = '21' and
											   SalStrScan(sD_rec, '#B') >= 0 !! есть БИСы
										! Call SqlPrepareAndExecute(hSqlAux3(), "
												     SELECT substr(convert(nazn,'RU8PC866','CL8MSWIN1251'),1,200),
												            substr(convert(d_rec,'RU8PC866','CL8MSWIN1251'),1,200)
												     INTO :sNaznBis,:sD_recBis
												     FROM arc_rrp
												     WHERE fn_a=:sFn_a and TO_CHAR(dat_a,'YYYY')=:sYearBaDa and nd=:sND and ref is null and bis>1 and s=0 and
												           dk=3 and nazns=33
												     ORDER BY bis")
										! Call SqlPrepareAndExecute(hSqlAux3(), "
												     SELECT nazn,d_rec
												     INTO :sNaznBis,:sD_recBis
												     FROM arc_rrp
												     WHERE fn_a=:sFn_a and TO_CHAR(dat_a,'YYYY')=:sYearBaDa and nd=:sND and ref is null and
												           bis>1 and s=0 and dk=3 and nazns=33
												     ORDER BY bis")
										Call SqlPrepareAndExecute(hSqlAux3(), "
												     SELECT nazn,d_rec
												     INTO :sNaznBis,:sD_recBis
												     FROM arc_rrp
												     WHERE (fn_a=:sFn_a or fn_b=:sFn_a) and TO_CHAR(dat_a,'YYYY')=:sYearBaDa and nd=:sND and
												           ref is null and bis>1 and s=0 and dk=3 and nazns=33
												     ORDER BY bis")
										While SqlFetchNext(hSqlAux3(), nFetchRes)
											! Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || StrDosToWinX(Left(
													    Right(sNaznBis, Len(sNaznBis)-2), Len(Right(sNaznBis, Len(sNaznBis)-2))-1)) || ' ' || StrDosToWinX(Left(
													    Right(sD_recBis, Len(sD_recBis)-2), Len(Right(sD_recBis, Len(sD_recBis)-2))-1)))
											Set smNAZN[nIndex] = SalStrTrimX(smNAZN[nIndex] || ' ' || Left(Right(sNaznBis, Len(sNaznBis)-2), Len(
													    Right(sNaznBis, Len(sNaznBis)-2))-1) || ' ' || Left(Right(sD_recBis, Len(sD_recBis)-2), Len(
													    Right(sD_recBis, Len(sD_recBis)-2))-1))
								! Else !! If sNazns = '10' or sNazns = '40'
									                                Set smNAZN[nIndex] = smNAZN[nIndex]
								Set smPOND[nIndex] = sPOND
								Set nmSK[nIndex] = nSK
								Set smNameFileA[nIndex] = sNameFileA
								Set nmREF[nIndex] = nREF
								Set nIndex = nIndex + 1
							If nIndex > 0
								Call Message(' Отбор выписки для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
								Call FormFileV(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB,
										     smOKPOB, nmDK, nmS, nmVOB, smND, nmISP, nmKV, dmDAOP, nmIOST, dmDAPP, smNAZN,
										     smPOND, nmSK, smNameFileA, nmREF)
						Set nIL = nIL + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: OtborLSV
				Description: отбор выписок по валютным документам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					Number: nRNK
					String: sNMK
					Number: nIndex
					Date/Time: dBaDa
					!
					String: sFNAMEKB
					String: smFNAMEKB[*]
					String: sIDENTKB
					String: smIDENTKB[*]
					String: sTIPKB
					String: smTIPKB[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNLSB
					String: smNLSB[*]
					Number: nS
					Number: nmS[*]
					Number: nKVA
					Number: nmKVA[*]
					Number: nKVB
					Number: nmKVB[*]
					Number: nREF
					Number: nmREF[*]
					!
					! String: sOpenDay
					!
					Number: nUid
					Number: nKwo
					Boolean: bOk
					Number: nVal
					!
					Number: nRNKtemp
				Actions
					Call SalWaitCursor(TRUE)
					Call Message('Подготовка к отбору валютных выписок...', TRUE)
					Set dBaDa = GetBankDate()
					! Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
					Set nIL = 0
					While nIL <= nKLI
						Set sSAB = smSAB[nIL]
						Set nRNK = nmRNK[nIL]
						Set sNMK = smNMK[nIL]
						Set sOKPO = smOKPO[nIL]
						Set sTIMES = smTIMES[nIL]
						Set nUid = GetUserId()
						! Set nVal = GetBaseVal()
						Set nVal = NUMBER_Null
						If SqlPrepareAndExecute(hSql(), T("
								   SELECT rnk
								   INTO :nRNKtemp
								   FROM klpv_v
								   WHERE rnk=:nRNK"))
							If SqlFetchNext(hSql(), nFetchRes)
								If SqlPLSQLCommand(hSql(), "val_v(nUid,dBaDa,sSAB)")
									Call SqlCommit(hSql())
									Call SqlPrepareAndExecute(hSql(), T("
											     SELECT count(*)
											     FROM tmp_vv
											     INTO :nKwo
											     WHERE id=:nUid"))
									Call SqlFetchNext(hSql(), nFetchRes)
									Set bOk = nKwo>0
								Else
									Set bOk = FALSE
								If bOk and SqlPrepareAndExecute(hSql(), T("
										   SELECT fnamekb,identkb,tipkb,nlsa,kva,nlsb,kvb,s,ref
										   INTO :sFNAMEKB,:sIDENTKB,:sTIPKB,:sNLSA,:nKVA,:sNLSB,:nKVB,:nS,:nREF
										   FROM tmp_vv
										   WHERE id=:nUid
										   ORDER BY 1,2"))
									Set sMFOA = GetBankMfo()
									Set nIndex = 0
									Call SalArraySetUpperBound(smFNAMEKB, 1, -1)
									Call SalArraySetUpperBound(smIDENTKB, 1, -1)
									Call SalArraySetUpperBound(smTIPKB, 1, -1)
									Call SalArraySetUpperBound(smNLSA, 1, -1)
									Call SalArraySetUpperBound(nmKVA, 1, -1)
									Call SalArraySetUpperBound(smNLSB, 1, -1)
									Call SalArraySetUpperBound(nmKVB, 1, -1)
									Call SalArraySetUpperBound(nmS, 1, -1)
									Call SalArraySetUpperBound(nmREF, 1, -1)
									While SqlFetchNext(hSql(), nFetchRes)
										Set smFNAMEKB[nIndex] = sFNAMEKB
										Set smIDENTKB[nIndex] = sIDENTKB
										Set smTIPKB[nIndex] = sTIPKB
										Set smNLSA[nIndex] = sNLSA
										Set nmKVA[nIndex] = nKVA
										Set smNLSB[nIndex] = sNLSB
										Set nmKVB[nIndex] = nKVB
										Set nmS[nIndex] = nS
										Set nmREF[nIndex] = nREF
										Set nIndex = nIndex + 1
									If nIndex > 0
										Call Message(' Отбор вал.выписки для клиента ' || sSAB || ' (' || sNMK || ')',
												     TRUE)
										Call FormFileY(dBaDa, sSAB, smFNAMEKB, smIDENTKB, smTIPKB, smNLSA, nmKVA,
												     smNLSB, nmKVB, nmS, nmREF, sTIMES)
						Set nIL = nIL + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: FormFileV
				Description: формирование файла %V
				Returns
					Boolean:
				Parameters
					String: s01
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smNAMA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					String: smNAMB[*]
					String: smOKPOB[*]
					Number: nmDK[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmISP[*]
					Number: nmKV[*]
					Date/Time: dmDAOP[*]
					Number: nmIOST[*]
					Date/Time: dmDAPP[*]
					String: smNAZN[*]
					String: smPOND[*]
					Number: nmSK[*]
					String: smNameFileA[*]
					Number: nmREF[*]
				Static Variables
				Local variables
					Number: nKd
					Number: nLA
					Boolean: bZag
					String: sV
					File Handle: hV
					String: sDaTi
					Number: nSdeb
					Number: nSkre
					Number: nKw
					Number: nhV
					Number: nhVc
					String: sVc
					Long String: s404
					!
					Number: nVcrc
					Number: nFetchRes
					Date/Time: dDFI
					Number: nCRC
					!
					Number: nLenArr
					Number: nIv
				Actions
					Call SalArrayDimCount(smMFOA, nKd)
					Call SalArrayGetUpperBound(smMFOA, nKd, nLA)
					Set nKd = 0
					Set nVcrc = 0
					Set bZag = TRUE
					While nKd <= nLA
						If bZag ! Сформировать часть заголовка файла V
							! Set sV = '%V' || sSab || DaySymbol(dmDAOP[0]) || MonthSymbol(dmDAOP[0]) || '.' ||
									    YearSymbol(dmDAOP[0]) || Suffix(sSab, 'V')
							Set sV = sTempPath || '%V' || sSab || DaySymbol(dmDAOP[0]) ||
									    MonthSymbol(dmDAOP[0]) || '.' || YearSymbol(dmDAOP[0]) || IifS(Mod(
									    Val(s01), 2) = 1, '00', 'ZA')
							If not SalFileOpen(hV, sV, OF_Create | OF_ReadWrite)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call MessageNoWait('Ошибка при создании файла ' || sV, 'Аварийная ситуация', 7, 1)
								Return FALSE
							Set sDaTi = SalFmtFormatDateTime(dmDAOP[0], 'yyyyMMdd') || IifS(
									    Right(sV, 2)='ZA', '235959', Right('0' || SalFmtFormatDateTime(
									    SalDateCurrent(), 'hhhhmmss'), 6))
							If SalFileWrite(hV, Right(sV, 12) || sDaTi || PadL(Str(nLA+1), 4) || Spac(32) ||
									   Str(Mod(Val(s01), 2)) || PutCrLf(), 65) != 65
								Call SalFileClose(hV)
								Call VisFileDelete(sV)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call MessageNoWait('Ошибка при записи в файл (65) ' || sV, 'Аварийная ситуация',
										     7, 1)
								Return FALSE
							Set bZag = FALSE
						If nmDK[nKd] = 0
							Set nSdeb = nSdeb + nmS[nKd]
						Else
							Set nSkre = nSkre + nmS[nKd]
						If Val(smMFOA[nKd]) = 0
							Set smMFOA[nKd] = GetBankMfo()
						If Val(smMFOB[nKd]) = 0
							Set smMFOB[nKd] = GetBankMfo()
						! Дебетовые документы
						If nmDK[nKd] = 0
							Set s404 = PadL(VisStrLeftTrim(smMFOA[nKd]), 9) || PadL(
									    VisStrLeftTrim(smNLSA[nKd]), 14) || PadR(VisStrLeftTrim(
									    StrWinToDosX(smNAMA[nKd])), 38) || PadL(VisStrLeftTrim(smMFOB[nKd]), 9) || PadL(
									    VisStrLeftTrim(smNLSB[nKd]), 14) || PadR(VisStrLeftTrim(
									    StrWinToDosX(smNAMB[nKd])), 38) || PadR(VisStrLeftTrim(smOKPOB[nKd]), 14) ||
									    Str(nmDK[nKd]) || PadL(Str(nmS[nKd]), 16) || PadL(Str(nmVOB[nKd]), 2) || PadR(
									    VisStrLeftTrim(StrWinToDosX(smND[nKd])), 10) || PadL(Str(nmISP[nKd]), 8)
						! Кредитовые документы
						Else
							Set s404 = PadL(VisStrLeftTrim(smMFOA[nKd]), 9) || PadL(
									    VisStrLeftTrim(smNLSA[nKd]), 14) || PadR(VisStrLeftTrim(
									    StrWinToDosX(smNAMB[nKd])), 38) || PadL(VisStrLeftTrim(smMFOB[nKd]), 9) || PadL(
									    VisStrLeftTrim(smNLSB[nKd]), 14) || PadR(VisStrLeftTrim(
									    StrWinToDosX(smNAMA[nKd])), 38) || PadR(VisStrLeftTrim(smOKPOB[nKd]), 14) ||
									    Str(nmDK[nKd]) || PadL(Str(nmS[nKd]), 16) || PadL(Str(nmVOB[nKd]), 2) || PadR(
									    VisStrLeftTrim(StrWinToDosX(smND[nKd])), 10) || PadL(Str(nmISP[nKd]), 8)
						! Set s404 = s404 || PadL(Str(nmKV[nKd]), 3) ||
								    SalFmtFormatDateTime(dmDAOP[nKd], 'yyyyMMdd') || PadL(Str(nmIOST[nKd]), 24) ||
								    SalFmtFormatDateTime(dmDAPP[nKd], 'yyyyMMdd') || PadR(VisStrLeftTrim(
								    StrWinToDosX(smNAZN[nKd])), 160) || PadR(VisStrLeftTrim(smPOND[nKd]), 8) ||
								    IifS(nmSK[nKd]=NUMBER_Null, '  ', PadL(Str(nmSK[nKd]), 2)) || PadR(
								    VisStrLeftTrim(smNameFileA[nKd]), 12) || PadL(Str(nKd+1), 4) || PutCrLf()
						Set s404 = s404 || PadL(Str(nmKV[nKd]), 3) ||
								    SalFmtFormatDateTime(dmDAOP[nKd], 'yyyyMMdd') || PadL(Str(nmIOST[nKd]), 24) ||
								    SalFmtFormatDateTime(
								    IifD(dmDAPP[nKd]=DATETIME_Null, dmDAOP[nKd], dmDAPP[nKd]), 'yyyyMMdd') || PadR(
								    VisStrLeftTrim(StrWinToDosX(smNAZN[nKd])), 160) || Right(
								    Str(100000000+Int(nmREF[nKd])), 8) || IifS(nmSK[nKd]=NUMBER_Null, '  ', PadL(
								    Str(nmSK[nKd]), 2)) || PadR(VisStrLeftTrim(smNameFileA[nKd]), 12) || PadL(
								    Str(nKd+1), 4) || PutCrLf()
						Set nVcrc = nVcrc + CRCstring(s404)
						If SalFileWrite(hV, s404, 404) != 404
							Call SalFileClose(hV)
							Call VisFileDelete(sV)
							Call SqlRollback(hSql())
							Call SqlRollback(hSqlAux2())
							Call MessageNoWait('Ошибка при записи в файл (404) ' || sV, 'Аварийная ситуация', 7,
									     1)
							Return FALSE
						Set nKd = nKd + 1
					If not SalFileSeek(hV, 30, FILE_SeekBegin)
						Call SalFileClose(hV)
						Call VisFileDelete(sV)
						Call SqlRollback(hSql())
						Call SqlRollback(hSqlAux2())
						Call MessageNoWait('Ошибка при записи в файл (30) ' || sV, 'Аварийная ситуация', 7, 1)
						Return FALSE
					If SalFileWrite(hV, PadL(Str(nSdeb), 16) || PadL(Str(nSkre), 16), 32) != 32
						Call SalFileClose(hV)
						Call VisFileDelete(sV)
						Call SqlRollback(hSql())
						Call SqlRollback(hSqlAux2())
						Call MessageNoWait('Ошибка при записи в файл (32) ' || sV, 'Аварийная ситуация', 7, 1)
						Return FALSE
					Call SalFileClose(hV)
					If s01 = '1'
						If SqlPrepareAndExecute(hSqlAux2(), T("
								   SELECT dfi,crc
								   FROM klpcrc
								   INTO :dDFI,:nCRC
								   WHERE sab=:sSab and tip='V'"))
							If SqlFetchNext(hSqlAux2(),nFetchRes)
								If SalFmtFormatDateTime(dDFI, 'yyyyMMdd') =
										   SalFmtFormatDateTime(SalDateCurrent(), 'yyyyMMdd') and nCRC = nVcrc
									Call VisFileDelete(sV)
									Call SqlRollback(hSql())
									Call SqlRollback(hSqlAux2())
									Call MessageNoWait('Информация для ' || sSab || ' ранее уже отбиралась (' ||
											     SalNumberToStrX(nCRC, 9) || ')', 'Предупреждение', 1, 0)
									Return FALSE
								Else
									Call SqlPrepareAndExecute(hSqlAux2(), T("
											     UPDATE klpcrc
											     SET dfi= TODAY ,crc=:nVcrc
											     WHERE sab=:sSab and tip='V'"))
							Else
								Call SqlPrepareAndExecute(hSqlAux2(), T("
										     INSERT
										     INTO klpcrc (sab,tip,dfi,crc)
										     VALUES (:sSab,'V', TODAY ,:nVcrc)"))
					! Подписать файл и поместить в нужный ящик
					If not bIni ! Надо инициализировать ЭЦП ИКТ
						Call Message(' Инициализация ЭЦП ИКТ', TRUE)
						If ShowInputPinCodeICT()
							Set nKw = InitICT()
							If nKw != 0
								Call VisFileDelete(sV)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'),
										     'Аварийная ситуация', 7, 1)
								Return FALSE
							Else
								Set bIni = TRUE
						Else
							Call VisFileDelete(sV)
							Call SqlRollback(hSql())
							Call SqlRollback(hSqlAux2())
							Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 7, 1)
							Return FALSE
					Set nhV = llopen(sV, OF_ReadWrite)
					If nhV > 0
						Set nKw = PUTFSGNB(nhV)
						If nKw < 0
							Call llclose(nhV)
							Call VisFileDelete(sV)
							Call SqlRollback(hSql())
							Call SqlRollback(hSqlAux2())
							Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sV),
									     'Аварийная ситуация', 7, 1)
							Return FALSE
						Else
							Set sVc = VisFileCreateTemp('~V~')
							Call VisFileDelete(sVc)
							Set nhVc = llcreat(sVc, OF_ReadWrite)
							If nhVc > 0
								! зашифровать
								! Set nSendId = 1 ! пока
										! (надо получить из KlpLcw по sSab)
								Set nIv = 0
								Set nSendId = 0
								Set nLenArr = LenArray(smlSAB)
								While nIv <= nLenArr
									If SalStrUpperX(sSab) = smlSAB[nIv]
										Set nSendId = nmlNOMER[nIv]
										Break
									Set nIv = nIv + 1
								Set nKw = ENCRYPTB(nhV, nhVc, nSendId)
								Call llclose(nhV)
								Call llclose(nhVc)
								If nKw != 0
									Call VisFileDelete(sV)
									Call VisFileDelete(sVc)
									Call SqlRollback(hSql())
									Call SqlRollback(hSqlAux2())
									Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sV),
											     'Аварийная ситуация', 7, 1)
									Return FALSE
								Else
									If SalFileCopy(sV, sArchPath || 'ARH\\' || Right(sV, 12), TRUE) != FILE_CopyOK
										Call MessageNoWait('Ошибка при создании файла ' || sArchPath || 'ARH\\' ||
												     Right(sV, 12) || '. Повторите операцию.', 'Аварийная ситуация', 7, 1)
									If SalFileCopy(sVc, sDiskKata || sSab || '\\OUT\\' || Right(sV, 12), TRUE) !=
											   FILE_CopyOK
										Call MessageNoWait('Ошибка при создании файла ' || sDiskKata || sSab ||
												     '\\OUT\\' || Right(sV, 12) || '. Повторите операцию.',
												     'Аварийная ситуация', 7, 1)
									Call VisFileDelete(sVc)
									Call VisFileDelete(sV)
									Call SqlCommit(hSql())
									Call SqlCommit(hSqlAux2())
									Return TRUE
							Else
								Call llclose(nhV)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call VisFileDelete(sV)
								Call MessageNoWait('Ошибка при создании временного файла ' || sVc,
										     'Аварийная ситуация', 7, 1)
								Return FALSE
					Else
						Call SqlRollback(hSql())
						Call SqlRollback(hSqlAux2())
						Call VisFileDelete(sV)
						Call MessageNoWait('Ошибка при открытии файла ' || sV, 'Аварийная ситуация', 7, 1)
						Return FALSE
			Function: FormFileY
				Description: формирование файла %Y
				Returns
					Boolean:
				Parameters
					Date/Time: dFdat
					String: sSab
					String: smFNAMEKB[*]
					String: smIDENTKB[*]
					String: smTIPKB[*]
					String: smNLSA[*]
					Number: nmKVA[*]
					String: smNLSB[*]
					Number: nmKVB[*]
					Number: nmS[*]
					Number: nmREF[*]
					String: sTITI
				Static Variables
				Local variables
					Number: nKd
					Number: nLA
					Boolean: bZag
					String: sV
					File Handle: hV
					String: sDaTi
					Number: nSdeb
					Number: nSkre
					Number: nKw
					Number: nhV
					Number: nhVc
					String: sVc
					Long String: s102
					!
					Number: nVcrc
					Date/Time: dDFI
					Number: nCRC
					!
					Number: nLenArr
					Number: nIv
					!
					Number: nInterval
				Actions
					Call SalArrayDimCount(smFNAMEKB, nKd)
					Call SalArrayGetUpperBound(smFNAMEKB, nKd, nLA)
					Set nKd = 0
					Set nVcrc = 0
					Set bZag = TRUE
					While nKd <= nLA
						If bZag ! Сформировать часть заголовка файла Y
							Set sV = sTempPath || '%Y' || sSab || DaySymbol(dFdat) ||
									    MonthSymbol(dFdat) || '.' || YearSymbol(dFdat) || '00'
							If not SalFileOpen(hV, sV, OF_Create | OF_ReadWrite)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call MessageNoWait('Ошибка при создании файла ' || sV, 'Аварийная ситуация', 3, 1)
								Return FALSE
							Set sDaTi = SalFmtFormatDateTime(dFdat, 'yyyyMMdd') || IifS(Right(sV, 2)='ZA', '235959',
									    Right('0' || SalFmtFormatDateTime(SalDateCurrent(), 'hhhhmmss'), 6))
							! Call Debug(sDaTi)
							! Call Debug(Str(nLA+1))
							If SalFileWrite(hV, Right(sV, 12) || sDaTi || PadL(Str(nLA+1), 4) || Repl('0', 8) ||
									   PutCrLf(), 40) != 40
								Call SalFileClose(hV)
								Call VisFileDelete(sV)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call MessageNoWait('Ошибка при записи в файл (40) ' ||  sV, 'Аварийная ситуация',
										     3, 1)
								Return FALSE
							Set bZag = FALSE
						Set s102 = PadR(VisStrLeftTrim(smFNAMEKB[nKd]), 12) || PadR(
								    VisStrLeftTrim(smIDENTKB[nKd]), 16) || PadL(VisStrLeftTrim(smTIPKB[nKd]), 2) || PadL(
								    Str(nmREF[nKd]), 16) || PadL(VisStrLeftTrim(smNLSA[nKd]), 14) || PadL(
								    Str(nmKVA[nKd]), 3) || PadL(VisStrLeftTrim(smNLSB[nKd]), 14) || PadL(Str(nmKVB[nKd]), 3)
								    || PadL(Str(nmS[nKd]), 16) || PadL(Str(nKd+1), 4) || PutCrLf()
						Set nVcrc = nVcrc + CRCstring(s102)
						If SalFileWrite(hV, s102, 102) != 102
							Call SalFileClose(hV)
							Call VisFileDelete(sV)
							Call SqlRollback(hSql())
							Call SqlRollback(hSqlAux2())
							Call MessageNoWait('Ошибка при записи в файл (404) ' || sV, 'Аварийная ситуация', 3,
									     1)
							Return FALSE
						Set nKd = nKd + 1
					Call SalFileClose(hV)
					If SqlPrepareAndExecute(hSqlAux2(), T("
							   SELECT dfi,crc
							   FROM klpcrc
							   INTO :dDFI,:nCRC
							   WHERE sab=:sSab and tip='Y'"))
						If SqlFetchNext(hSqlAux2(), nFetchRes)
							! Call SqlPrepareAndExecute(hSqlAux2(), T("
									     UPDATE klpcrc
									     SET dfi= TODAY ,crc=:nVcrc
									     WHERE sab=:sSab and tip='Y'"))
							Call Message('Отобрана вал.выписка для ' || sSab || ' (' ||
									     SalNumberToStrX(nCRC, 9) || ')', TRUE)
						Else
							Call SqlPrepareAndExecute(hSqlAux2(), T("
									     INSERT
									     INTO klpcrc (sab,tip,dfi,crc)
									     VALUES (:sSab,'Y', TODAY ,:nVcrc)"))
					! Подписать файл и поместить в нужный ящик
					If not bIni ! Надо инициализировать ЭЦП ИКТ
						Call Message('Инициализация ЭЦП ИКТ', TRUE)
						If ShowInputPinCodeICT()
							Set nKw = InitICT()
							If nKw != 0
								Call VisFileDelete(sV)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при инициализации ЭЦП ИКТ'),
										     'Аварийная ситуация', 3, 1)
								Return FALSE
							Else
								Set bIni = TRUE
						Else
							Call VisFileDelete(sV)
							Call SqlRollback(hSql())
							Call SqlRollback(hSqlAux2())
							Call MessageNoWait('PIN-код ИКТ не введен. Выход.', 'Аварийная ситуация', 3, 1)
							Return FALSE
					Set nhV = llopen(sV, OF_ReadWrite)
					If nhV > 0
						Set nKw = PUTFSGNB(nhV)
						If nKw < 0
							Call llclose(nhV)
							Call VisFileDelete(sV)
							Call SqlRollback(hSql())
							Call SqlRollback(hSqlAux2())
							Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при подписи файла ' || sV),
									     'Аварийная ситуация', 3, 1)
							Return FALSE
						Else
							Set sVc = VisFileCreateTemp('~Y~')
							Call VisFileDelete(sVc)
							Set nhVc = llcreat(sVc, OF_ReadWrite)
							If nhVc > 0
								! зашифровать
								! Set nSendId = 1 ! пока
										! (надо получить из KlpLcw по sSab)
								Set nIv = 0
								Set nSendId = 0
								Set nLenArr = LenArray(smlSAB)
								While nIv <= nLenArr
									If SalStrUpperX(sSab) = smlSAB[nIv]
										Set nSendId = nmlNOMER[nIv]
										Break
									Set nIv = nIv + 1
								Set nKw = ENCRYPTB(nhV, nhVc, nSendId)
								Call llclose(nhV)
								Call llclose(nhVc)
								If nKw != 0
									Call VisFileDelete(sV)
									Call VisFileDelete(sVc)
									Call SqlRollback(hSql())
									Call SqlRollback(hSqlAux2())
									Call MessageNoWait(ErrMsgIct(nKw, 'Ошибка при шифровании файла ' || sV),
											     'Аварийная ситуация', 3, 1)
									Return FALSE
								Else
									! Call MomFileCopy(sV, sArchPath || 'ARH\\' || Right(sV, 12), TRUE)
									! Call MomFileCopy(sVc, sDiskKata || sSab || '\\OUT\\' || Right(sV, 12), TRUE)
									If SalFileCopy(sV, sArchPath || 'ARH\\' || Right(sV, 12), TRUE) != FILE_CopyOK
										Call MessageNoWait('Ошибка при создании файла ' || sArchPath || 'ARH\\' ||
												     Right(sV, 12) || '. Повторите операцию.', 'Аварийная ситуация', 7, 1)
									If SalFileCopy(sVc, sDiskKata || sSab || '\\OUT\\' || Right(sV, 12), TRUE) !=
											   FILE_CopyOK
										Call MessageNoWait('Ошибка при создании файла ' || sDiskKata || sSab ||
												     '\\OUT\\' || Right(sV, 12) || '. Повторите операцию.',
												     'Аварийная ситуация', 7, 1)
									Call VisFileDelete(sVc)
									Call VisFileDelete(sV)
									Call SqlCommit(hSql())
									Call SqlCommit(hSqlAux2())
									Return TRUE
							Else
								Call llclose(nhV)
								Call SqlRollback(hSql())
								Call SqlRollback(hSqlAux2())
								Call VisFileDelete(sV)
								Call MessageNoWait('Ошибка при создании временного файла ' || sVc,
										     'Аварийная ситуация', 3, 1)
								Return FALSE
					Else
						Call SqlRollback(hSql())
						Call SqlRollback(hSqlAux2())
						Call VisFileDelete(sV)
						Call MessageNoWait('Ошибка при открытии файла ' || sV, 'Аварийная ситуация', 3, 1)
						Return FALSE
		Window Parameters
		Window Variables
			String: sOpenDay
			! Number: nI
			! Number: nDubl
			!
			String: sNazns
			Number: nBis
			String: sNaznk
			String: sD_rec
			String: sFn_a
			String: sNaznBis
			String: sD_recBis
			!
			Boolean: bKORP
			!
			! Number: nSEP
		Message Actions
			On SAM_Create
				Call SalCenterWindow(wino1)
				Call SalWaitCursor(TRUE)
				Set bKORP = Val(GetGlobalOption('KB_Corpo'))=1
				Set sUserid = Str(GetUserId())
				Set nKLI = -1
				! If SqlPrepareAndExecute(hSql(), T("
						   SELECT sab,rnk,nmk,okpo
						   INTO :sSAB,:nRNK,:sNMK,:sOKPO
						   FROM customer
						   WHERE sab is not null and stmt=5
						   ORDER BY sab"))
					             Call SalArraySetUpperBound(smSAB, 1, -1)
					             Call SalArraySetUpperBound(nmRNK, 1, -1)
					             Call SalArraySetUpperBound(smNMK, 1, -1)
					             Call SalArraySetUpperBound(smOKPO, 1, -1)
					             Call SalArraySetUpperBound(smTIMES, 1, -1)
					             Call SalArraySetUpperBound(bmKORP, 1, -1)
					             Set nKLI = -1
					             While SqlFetchNext(hSql(), nFetchRes)
						             If bKORP
							             If SqlPrepareAndExecute(hSqlAux3(), T("
									   SELECT count(*)
									   INTO :nDiti
									   FROM customer
									   WHERE rnkp=:nRNK"))
								             If not SqlFetchNext(hSqlAux3(), nFetchRes)
									             Set nDiti = 0
							             Else 
								             Set nDiti = 0
						             Else 
							             Set nDiti = 0
						             Set nKLI = nKLI + 1
						             Set smSAB[nKLI] = sSAB
						             Set nmRNK[nKLI] = nRNK
						             Set smNMK[nKLI] = SalStrTrimX(sNMK)
						             Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
						             Set smTIMES[nKLI] = sTIMES
						             Set bmKORP[nKLI] = nDiti>0
				If SqlPrepareAndExecute(hSql(), T("
						   SELECT sab,rnk,nmk,okpo
						   INTO :sSAB,:nRNK,:sNMK,:sOKPO
						   FROM customer
						   WHERE sab is not null and stmt=6
						   ORDER BY sab"))
					Call SalArraySetUpperBound(smSAB, 1, -1)
					Call SalArraySetUpperBound(nmRNK, 1, -1)
					Call SalArraySetUpperBound(smNMK, 1, -1)
					Call SalArraySetUpperBound(smOKPO, 1, -1)
					Call SalArraySetUpperBound(smTIMES, 1, -1)
					Call SalArraySetUpperBound(bmKORP, 1, -1)
					Set nKLI = -1
					While SqlFetchNext(hSql(), nFetchRes)
						If bKORP
							If SqlPrepareAndExecute(hSqlAux3(), T("
									   SELECT count(*)
									   INTO :nDiti
									   FROM customer
									   WHERE rnkp=:nRNK"))
								If not SqlFetchNext(hSqlAux3(), nFetchRes)
									Set nDiti = 0
							Else
								Set nDiti = 0
						Else
							Set nDiti = 0
						Set nKLI = nKLI + 1
						Set smSAB[nKLI] = sSAB
						Set nmRNK[nKLI] = nRNK
						Set smNMK[nKLI] = SalStrTrimX(sNMK)
						Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
						Set smTIMES[nKLI] = sTIMES
						Set bmKORP[nKLI] = nDiti>0
				If nKLI = -1
					Call SalSendMsg(wino1, SAM_Destroy, 0, 0)
				! Set nSEP = GetGlobalOptionEx('SEPNUM')
				Call SalWaitCursor(FALSE)
			On SAM_CreateComplete
				Set sDiskKata = GetElKDir()    ! получить путь к п/я электронных клиентов
				Set sArchPath = GetArchiv_KB() ! получить путь к архиву файлов электронных клиентов
				Set sTempPath = GetTempKPath() ! получить путь временных файлов КЛИЕНТ-БАНК
				Set bIni = FALSE
				Call Message(' Обработка файла лицензии КЛИЕНТ-БАНК...', TRUE)
				If not LcwRead()
					Call MessageNoWait('Отсутствует или ошибочен файл лицензии ' || GetLicenPath() ||
							     GetBankMfo() || '.Lcw.', 'Работа прекращается', 7, 1)
					Call SalDestroyWindow(wino1)
				Else
					Call Message(' Обработан файл лицензии КЛИЕНТ-БАНК.', TRUE)
				Call OtborLS()
				Call OtborLSV()
				Call SalDestroyWindow(wino1)
	Form Window: winoSbb
		Class:
		Property Template:
		Class DLL Name:
		Title: Отбор ЗАКЛЮЧ. выписок "электронным" клиентам
		Icon File:
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Automatically Created at Runtime? Yes
			Initial State: Normal
			Maximizable? Yes
			Minimizable? Yes
			System Menu? Yes
			Resizable? Yes
			Window Location and Size
				Left:   2.138"
				Top:    0.625"
				Width:  6.617"
				Width Editable? Yes
				Height: 3.548"
				Height Editable? Yes
			Form Size
				Width:  Default
				Height: Default
				Number of Pages: Dynamic
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 440
					String Type: Long String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? No
					Window Location and Size
						Left:   0.183"
						Top:    0.155"
						Width:  6.1"
						Width Editable? Yes
						Height: 1.0"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Black
					Background Color: Sky
				Message Actions
			Background Text: ТЕКУЩЕЕ СООБЩЕНИЕ
				Resource Id: 8112
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.183"
					Top:    0.012"
					Width:  2.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Dark Gray
				Background Color: Default
		Functions
			Function: Suffix
				Description: возвращает суффикс по типу файла и SAB
				Returns
					String:
				Parameters
					String: sSab
					String: sTip
				Static Variables
				Local variables
					Number: nSuf
					Number: nRnk
					String: sTemp
				Actions
					Call SqlPrepareAndExecute(hSqlAux2(), T('
							     SELECT k.count,k.rnk
							     INTO :nSuf,:nRnk
							     FROM custcount k, customer c
							     WHERE k.tip=:sTip and c.sab=:sSab and k.rnk=c.rnk'))
					If SqlFetchNext(hSqlAux2(), nFetchRes)
						Set nSuf = IifN(nSuf=999, 0, nSuf+1)
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     UPDATE custcount
								     SET count=:nSuf
								     WHERE rnk=:nRnk and tip=:sTip'))
					Else
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     SELECT rnk
								     INTO :nRnk
								     FROM customer
								     WHERE sab=:sSab'))
						Call SqlFetchNext(hSqlAux2(), nFetchRes)
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     SELECT tip
								     INTO :sTemp
								     FROM tipcount
								     WHERE tip=:sTip'))
						If not SqlFetchNext(hSqlAux2(), nFetchRes)
							Call SqlPrepareAndExecute(hSqlAux2(), T("
									     INSERT
									     INTO tipcount (tip, name)
									     VALUES (:sTip,'')"))
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     INSERT
								     INTO custcount (rnk,tip,count)
								     VALUES (:nRnk,:sTip,:nSuf)'))
					Return Right(Str(nSuf+1000), 3)
			Function: Message
				Description: вывод текста в окно и запись в LOG
				Returns
					Boolean:
				Parameters
					String: sStr
					Boolean: bTL
				Static Variables
				Local variables
				Actions
					If bTL
						Call SaveInfoToLog(sStr)
					Call SalSetWindowText(ml1, sStr)
			Function: OtborLS
				Description: отбор ЛС "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					Number: nRNK
					String: sNMK
					Number: nFetchRes
					Number: nIndex
					Date/Time: dBaDa
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOA
					String: smOKPOA[*]
					String: sOKPOZ
					String: smOKPOZ[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Number: nDOS
					Number: nmDOS[*]
					Number: nKOS
					Number: nmKOS[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					Date/Time: dPDAT
					Date/Time: dmPDAT[*]
					String: sNAZN
					String: smNAZN[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					Date/Time: dDATb1
					Date/Time: dmDATb1[*]
					Date/Time: dDATb2
					Date/Time: dmDATb2[*]
					Date/Time: dDATOV
					Date/Time: dmDATOV[*]
					Number: nRef
					!
					String: sOpenDay
					!
					Number: nUid
					Number: nKwo
					Boolean: bOk
					Number: nVal
					Number: nPosKwoBis
					String: sTempBis
					Number: nB
					Number: nRec
					Number: nLoop
					!
					Date/Time: dDATD
					Date/Time: dmDATD[*]
					!
					String: sYearBaDa
					String: sSQL
					!
					Date/Time: dDATbis
				Actions
					Call SalWaitCursor(TRUE)
					Set dBaDa = GetBankDate()
					Set sYearBaDa = Str(SalDateYear(dBaDa))
					! Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
					Set sOpenDay = '0' ! как бы день закрыт
					Set nIL = 0
					While nIL <= nKLI
						Set sSAB = smSAB[nIL]
						Set nRNK = nmRNK[nIL]
						Set sNMK = smNMK[nIL]
						Set sOKPO = smOKPO[nIL]
						! Set sTIMES = smTIMES[nIL]
						Set nUid = GetUserId()
						Set nVal = GetBaseVal()
						If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dBaDa,dBaDa,sSAB,nVal,'%','Z')")
							Call SqlCommit(hSql())
							Call SqlPrepareAndExecute(hSql(), T("
									     SELECT count(*)
									     FROM tmp_lics
									     INTO :nKwo
									     WHERE id=:nUid"))
							Call SqlFetchNext(hSql(), nFetchRes)
							Set bOk = nKwo>0
						Else
							Call SqlRollback(hSql())
							Set bOk = FALSE
						If bOk and SqlPrepareAndExecute(hSql(), T("
								   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,namefilea,
								          Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,Ref,okpoz
								   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,:nKOS,
								        :dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nRec,:dDATD,
								        :dDATb1,:dDATb2,:dDATOV,:dDATbis,:nRef,:sOKPOZ
								   FROM tmp_lics
								   WHERE id=:nUid
								   ORDER BY nlsa,kv,dk,s"))
							Set sMFOA = GetBankMfo()
							Set nIndex = 0
							Call SalArraySetUpperBound(smMFOA, 1, -1)
							Call SalArraySetUpperBound(smNLSA, 1, -1)
							Call SalArraySetUpperBound(smNAMA, 1, -1)
							Call SalArraySetUpperBound(smMFOB, 1, -1)
							Call SalArraySetUpperBound(smNLSB, 1, -1)
							Call SalArraySetUpperBound(smNAMB, 1, -1)
							Call SalArraySetUpperBound(smOKPOA, 1, -1)
							Call SalArraySetUpperBound(smOKPOZ, 1, -1)
							Call SalArraySetUpperBound(smOKPOB, 1, -1)
							Call SalArraySetUpperBound(nmDK, 1, -1)
							Call SalArraySetUpperBound(nmS, 1, -1)
							Call SalArraySetUpperBound(nmVOB, 1, -1)
							Call SalArraySetUpperBound(smND, 1, -1)
							Call SalArraySetUpperBound(nmISP, 1, -1)
							Call SalArraySetUpperBound(nmKV, 1, -1)
							Call SalArraySetUpperBound(dmDAOP, 1, -1)
							Call SalArraySetUpperBound(nmIOST, 1, -1)
							Call SalArraySetUpperBound(nmDOS, 1, -1)
							Call SalArraySetUpperBound(nmKOS, 1, -1)
							Call SalArraySetUpperBound(dmDAPP, 1, -1)
							Call SalArraySetUpperBound(dmPDAT, 1, -1)
							Call SalArraySetUpperBound(dmDATD, 1, -1)
							Call SalArraySetUpperBound(smNAZN, 1, -1)
							Call SalArraySetUpperBound(smD_rec, 1, -1)
							Call SalArraySetUpperBound(smPOND, 1, -1)
							Call SalArraySetUpperBound(nmSK, 1, -1)
							Call SalArraySetUpperBound(smNameFileA, 1, -1)
							Call SalArraySetUpperBound(nmBis, 1, -1)
							Call SalArraySetUpperBound(smBis, 1, -1)
							Call SalArraySetUpperBound(dmDATb1, 1, -1)
							Call SalArraySetUpperBound(dmDATb2, 1, -1)
							Call SalArraySetUpperBound(dmDATOV, 1, -1)
							While SqlFetchNext(hSql(), nFetchRes)
								Set smMFOA[nIndex] = sMFOA
								Set smNLSA[nIndex] = sNLSA
								Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
								Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
								Set smNLSB[nIndex] = sNLSB
								Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
								Set smOKPOA[nIndex] = sOKPOA
								Set smOKPOZ[nIndex] = sOKPOZ
								Set smOKPOB[nIndex] = sOKPOB
								Set nmDK[nIndex] = nDK
								Set nmS[nIndex] = nS
								! Set nmVOB[nIndex] = nVOB
								! Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, 1))
								Set nmVOB[nIndex] = IifN(nVOB=9, 9, IifN(nVOB=7, 3, IifN(nVOB=6, 6, 1)))
								Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
								Set nmISP[nIndex] = nISP
								Set nmKV[nIndex] = nKV
								Set dmDAOP[nIndex] = dDAOP
								Set nmIOST[nIndex] = nIOST
								Set nmDOS[nIndex] = nDOS
								Set nmKOS[nIndex] = nKOS
								Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
								Set dmDATD[nIndex] = dDATD
								Set dmDAPP[nIndex] = dDAPP
								Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
								Set sD_rec = StrDosToWinX(sD_rec)
								Set smD_rec[nIndex] = sD_rec
								If nBis = NUMBER_Null or nBis = 0
									Set nmBis[nIndex] = 0
									Set smBis[nIndex] = ''
								If sNazns = '00'
									Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM s_np
											    WHERE k_np='" || sNaznk || "'"))
								!
								If nBis > 0
									Set nPosKwoBis = SalStrScan(sD_rec, '#B')
									! внешние бисы
									If nPosKwoBis >= 0
										Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
										Set nB = SalStrScan(sTempBis, '#')
										Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
										Set sSQL = "SELECT nazn,d_rec
												            INTO   :sNaznBis,:sD_recBis
												            FROM   arc_rrp
												            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
												            ORDER BY rec_a,bis"
									! внутрение  бисы
									Else
										Set nmBis[nIndex] = nBis
										Set sSQL = "
												    SELECT '#C'||value||'#','' as d_recbis
												    INTO   :sNaznBis,:sD_recBis
												    FROM   operw
												    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
												    ORDER BY tag"
									!
									!
									Set nLoop = nmBis[nIndex]
									Set smBis[nIndex] = ''
									Set nmBis[nIndex] = 0
									Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
									While SqlFetchNext(hSqlAux3(), nFetchRes)
										If nLoop > 0
											Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
											Set nLenOdinBis = Len(sOdinBis)
											! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
											Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
											Set nmBis[nIndex] = nmBis[nIndex] + 1
											Set nLoop = nLoop - 1
									! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									If nmBis[nIndex] > 0
										If Len(smBis[nIndex]) = 0
											Set nmBis[nIndex] = 0
										Else
											Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									Else
										Set smBis[nIndex] = ''
								Set smPOND[nIndex] = sPOND
								Set nmSK[nIndex] = nSK
								Set smNameFileA[nIndex] = sNameFileA
								Set dmDATb1[nIndex] = dDATb1
								Set dmDATb2[nIndex] = dDATb2
								Set dmDATOV[nIndex] = dDATOV
								Set nIndex = nIndex + 1
							If nIndex > 0
								Call Message(' Отбор выписки для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
								Call MakeZ(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOA, smOKPOB, nmDK, nmS, nmVOB,
										     smND, nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK, smNameFileA,
										     nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
						If nKursi = 1
							Call Message(' Отбор курсов валют для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
							Call MakeK(sSAB)
						Set nIL = nIL + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: MakeZ
				Description:
				Returns
					Boolean:
				Parameters
					String: s01
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smNAMA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					String: smNAMB[*]
					String: smOKPOA[*]
					String: smOKPOB[*]
					Number: nmDK[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmISP[*]
					Number: nmKV[*]
					Date/Time: dmDAOP[*]
					Number: nmIOST[*]
					Number: nmDOS[*]
					Number: nmKOS[*]
					Date/Time: dmDAPP[*]
					Date/Time: dmPDAT[*]
					String: smNAZN[*]
					String: smD_rec[*]
					String: smPOND[*]
					Number: nmSK[*]
					String: smNameFileA[*]
					Number: nmBis[*]
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Date/Time: dmDATD[*]
					Date/Time: dmDATOV[*]
					String: smOKPOZ[*]
				Static Variables
				Local variables
					Boolean: bFl
					! Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					Number: nKvTek
					String: sFile
					File Handle: hF
					String: sString
					!
					String: sVERS
				Actions
					Set bFl = TRUE
					Set sVERS = smVERS[VisArrayFindString(smSAB, sSab)]
					! Set nBaseVal = GetBaseVal()
					Call SalArrayGetUpperBound(smMFOA, 1, nKwo)
					Set nI = 0
					Set sNlsTek = ''
					Set nKvTek = -1
					While nI <= nKwo
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'Z' || SalFmtFormatDateTime(dmDAOP[0], 'yyMMdd') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							Call VisFileOpen(hF, sFile, OF_Create)
							! Call Debug('Создали файл '||sFile)
							If sVERS >= '1.55'
								Set sString = 'VERSION20041207' || Spac(85) || PutCrLf()
								Call VisFileWrite(hF, sString, Len(sString))
						If sNlsTek != smNLSA[nI] or nKvTek != nmKV[nI]
							Set sNlsTek = smNLSA[nI]
							Set nKvTek = nmKV[nI]
							If SalStrTrimX(smOKPOZ[nI]) = '0'
								Set smOKPOZ[nI] = ''
							Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nmKV[nI]), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || PadL(SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd'), 8) ||
									    PadR(smOKPOZ[nI], 14) || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							Call VisFileWrite(hF, sString, Len(sString))
						If Abs(nmS[nI]) + Val(smNLSB[nI]) > 0
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDATD[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(IifN(sVERS<'1.63.0.4201',
									    IifN(nmVOB[nI]=6, 1, nmVOB[nI]), nmVOB[nI])), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf())
							Call VisFileWrite(hF, sString, Len(sString))
							If nmBis[nI] > 0
								Set sString = StrWinToDosX2(smBis[nI])
								Call VisFileWrite(hF, sString, Len(sString))
						Set nI = nI + 1
					If not bFl
						Call VisFileClose(hF)
						Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
						! Call Debug('Копируем файл '||sFile||'->'||sDiskKataOUT || Right(sFile, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						! Call Debug('Создание директории бекапа '||syyyyMMddPath)
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
						! Call Debug('Копируем '||sFile||' -> '||syyyyMMddPath || Right(sFile, 12))
						If File(sDiskKataOUT || Right(sFile, 12))
							Call VisFileDelete(sFile)
							! Call Debug('Файл '||sDiskKataOUT || Right(sFile, 12)||' существует - удалем его')
							Return TRUE
						Return FALSE
					Return FALSE
			Function: MakeK
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Number: nKV
					Number: nBSUM
					Date/Time: dVDATE
					Number: nRATE_O
					Boolean: bFl
					String: sFile
					File Handle: hF
					Boolean: b1
					String: sString
					String: s16t
				Actions
					If SalStrUpperX(SalStrTrimX(GetDBMS())) = "ORACLE"
						Set b1 = SqlPLSQLCommand(hSql(), 'val_ku(dBankDate, nBaseVal)')
					Else
						Call SqlRetrieve(hSql(), "informix.val_ku", ":dBankDate", ":nBaseVal")
						Call SqlExecute(hSql())
						Set b1 = SqlFetchNext(hSql(), nFetchRes)
					If b1
						Call SqlCommit(hSql())
						Set bFl = TRUE
						Call SqlPrepareAndExecute(hSql(), T("
								     SELECT kv,bsum,vdate1,rateo1
								     INTO :nKV,:nBSUM,:dVDATE,:nRATE_O
								     FROM tmp_valk
								     ORDER BY 1"))
						While SqlFetchNext(hSql(), nFetchRes)
							If bFl
								Set bFl = FALSE
								Set sFile = sTempPath || 'K' || ddd(dBankDate) || Suffix(sSab, 'K') ||
										    Left(sSab, 1) || '.' || Right(sSab, 3)
								If File(sFile)
									Call VisFileDelete(sFile)
								Call VisFileOpen(hF, sFile, OF_Create)
							Set s16t = PadL(SalNumberToStrX(nRATE_O/nBSUM, 8), 16)
							Set sString = PadL(Str(nKV), 3) || SalFmtFormatDateTime(dVDATE, 'yyyyMMdd') || Left(s16t, 7) || '.' ||
									    Right(s16t, 8) || PutCrLf()
							Call VisFileWrite(hF, sString, Len(sString))
						Call SqlCommit(hSqlAux2())
						If not bFl
							Call VisFileClose(hF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							If File(sDiskKataOUT || Right(sFile, 12))
								Call VisFileDelete(sFile)
								Return TRUE
							Return FALSE
					Else
						Call SqlRollback(hSql())
					Return FALSE
		Window Parameters
			Number: nKursi
		Window Variables
			! String: sOpenDay
			Number: nI
			! Number: nDubl
			!
			String: sNazns
			Number: nBis
			String: sNaznk
			String: sD_rec
			String: sFn_a
			String: sNaznBis
			String: sD_recBis
			String: sDiskKataOUT
			!
			Date/Time: dBankDate
			Number: nBaseVal
			!
			String: sOdinBis
			Number: nLenOdinBis
			!
			String: syyyyMMddPath
			!
			String: sVERS
			String: smVERS[*]
			String: sThisWndVersion
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
				Call SalWaitCursor(TRUE)
				Set sUserid = Str(GetUserId())
				Set dBankDate = GetBankDate()
				Set nBaseVal = GetBaseVal()
				Set sThisWndVersion = '1.1'
				Call SalSetWindowText(hWndForm, 'ЗАКЛЮЧНI виписки "електроним" клієнтам.(v.'||sThisWndVersion||')'  )
				Set nKLI = -1
				If SqlPrepareAndExecute(hSql(), T("
						   SELECT c.sab,c.rnk,c.nmk,c.okpo,nvl(k.VERSION,'0.0')
						   INTO :sSAB,:nRNK,:sNMK,:sOKPO,:sVERS
						   FROM customer c, klp_version k
						   WHERE c.sab is not null and c.stmt=5 and c.rnk=k.rnk(+)
						   ORDER BY c.sab"))
					Call SalArraySetUpperBound(smSAB, 1, -1)
					Call SalArraySetUpperBound(nmRNK, 1, -1)
					Call SalArraySetUpperBound(smNMK, 1, -1)
					Call SalArraySetUpperBound(smOKPO, 1, -1)
					Call SalArraySetUpperBound(smTIMES, 1, -1)
					Call SalArraySetUpperBound(smVERS, 1, -1)
					Set nKLI = -1
					While SqlFetchNext(hSql(), nFetchRes)
						Set nKLI = nKLI + 1
						Set smSAB[nKLI] = sSAB
						Set nmRNK[nKLI] = nRNK
						Set smNMK[nKLI] = SalStrTrimX(sNMK)
						Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
						Set smVERS[nKLI] = SalStrTrimX(sVERS)
				If nKLI = -1
					Call SalSendMsg(winoSbb, SAM_Destroy, 0, 0)
				Call SalWaitCursor(FALSE)
			On SAM_CreateComplete
				Set sDiskKataOUT = GetElKDirOUT() ! получить путь к OUT электронных клиентов
				Set sArchPath = GetArchiv_KB()    ! получить путь к архиву файлов электронных клиентов
				Set sTempPath = GetTempKPath()    ! получить путь временных файлов КЛИЕНТ-БАНК
				! Call Debug('sDiskKataOUT='||sDiskKataOUT||' sArchPath='||sArchPath||'  sTempPath='||sTempPath)
				Set bIni = FALSE
				Call OtborLS()
				Call SalDestroyWindow(hWndForm)
	Table Window: Times
		Class: cGenericTable
		Property Template:
		Class DLL Name:
		Title: Установка времен формирования выписок "электронным" клиентам
		Icon File:
		Accesories Enabled? Class Default
		Visible? Class Default
		Display Settings
			Visible at Design time? Yes
			Automatically Created at Runtime? Class Default
			Initial State: Normal
			Maximizable? Class Default
			Minimizable? Class Default
			System Menu? Yes
			Resizable? Class Default
			Window Location and Size
				Left:   0.325"
				Top:    0.552"
				Width:  10.871"
				Width Editable? Class Default
				Height: 5.798"
				Height Editable? Class Default
			Font Name: Class Default
			Font Size: Default
			Font Enhancement: Bold
			Text Color: Class Default
			Background Color: Class Default
			View: Class Default
			Allow Row Sizing? Class Default
			Lines Per Row: Class Default
		Memory Settings
			Maximum Rows in Memory: 2345
			Discardable? Class Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Class Default
				Location? Class Default
				Visible? Class Default
				Size: 0.429"
				Size Editable? Class Default
				Font Name: Class Default
				Font Size: Default
				Font Enhancement: None
				Text Color: Class Default
				Background Color: Class Default
			Contents
				Pushbutton: pbIns
					Class Child Ref Key: 33
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? No
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbDel
					Class Child Ref Key: 34
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? No
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbRefresh
					Class Child Ref Key: 35
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   0.083"
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbUpdate
					Class Child Ref Key: 36
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   0.583"
						Top:    0.071"
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Line
					Resource Id: 55590
					Class Child Ref Key: 37
					Class ChildKey: 0
					Class: cGenericTable
					Coordinates
						Begin X:  Class Default
						Begin Y:  Class Default
						End X:  Class Default
						End Y:  Class Default
					Visible? No
					Line Style: Class Default
					Line Thickness: Class Default
					Line Color: Class Default
				Pushbutton: pbSearch
					Class Child Ref Key: 38
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   1.083"
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbFilter
					Class Child Ref Key: 44
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   1.883"
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? No
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbDetails
					Class Child Ref Key: 39
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   Class Default
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? No
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Pushbutton: pbPrint
					Class Child Ref Key: 40
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   1.883"
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? No
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Line
					Resource Id: 55591
					Class Child Ref Key: 41
					Class ChildKey: 0
					Class: cGenericTable
					Coordinates
						Begin X:  Class Default
						Begin Y:  Class Default
						End X:  Class Default
						End Y:  Class Default
					Visible? No
					Line Style: Class Default
					Line Thickness: Class Default
					Line Color: Class Default
				Pushbutton: pbExit
					Class Child Ref Key: 42
					Class ChildKey: 0
					Class: cGenericTable
					Property Template:
					Class DLL Name:
					Title:
					Window Location and Size
						Left:   1.883"
						Top:    Class Default
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Keyboard Accelerator: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Picture File Name:
					Picture Transparent Color: Class Default
					Image Style: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Message Actions
				Line
					Resource Id: 55592
					Class Child Ref Key: 43
					Class ChildKey: 0
					Class: cGenericTable
					Coordinates
						Begin X:  Class Default
						Begin Y:  Class Default
						End X:  Class Default
						End Y:  Class Default
					Visible? No
					Line Style: Class Default
					Line Thickness: Class Default
					Line Color: Class Default
		Contents
			Column: colSab
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Код клиента
				Visible? Yes
				Editable? No
				Maximum Data Length: Default
				Data Type: String
				Justify: Left
				Width:  Default
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colNmk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Наименование клиента
				Visible? Yes
				Editable? No
				Maximum Data Length: Default
				Data Type: String
				Justify: Left
				Width:  3.814"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colRowid
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Visible? No
				Editable? No
				Maximum Data Length: Default
				Data Type: String
				Justify: Left
				Width:  5.167"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
			Column: colTimes
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Допустимые интервалы времен
				Visible? Yes
				Editable? Yes
				Maximum Data Length: 140
				Data Type: String
				Justify: Left
				Width:  5.471"
				Width Editable? Yes
				Format: Unformatted
				Country: Default
				Input Mask: Unformatted
				Cell Options
					Cell Type? Standard
					Multiline Cell? No
					Cell DropDownList
						Sorted? Yes
						Vertical Scroll? Yes
						Auto Drop Down? No
						Allow Text Editing? Yes
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Yes
				List Values
				Message Actions
					On SAM_Validate
						Set sTemp = SalStrTrimX(colTimes)
						If Len(sTemp) > 0
							Call SalArraySetUpperBound(sElement, 1, -1)
							Call SalArraySetUpperBound(sLTime, 1, -1)
							Call SalArraySetUpperBound(sRTime, 1, -1)
							Call SalArraySetUpperBound(nLHou, 1, -1)
							Call SalArraySetUpperBound(nLMin, 1, -1)
							Call SalArraySetUpperBound(nRHou, 1, -1)
							Call SalArraySetUpperBound(nRMin, 1, -1)
							Set nI = 0
							Set n1 = SalStrScan(sTemp, ',')
							If n1 >= 0
								Loop
									Set sElement[nI] = Left(sTemp, n1)
									Set sTemp = Subs(sTemp, n1+2, Len(sTemp)-n1-1)
									Set nI = nI + 1
									Set n1 = SalStrScan(sTemp, ',')
									If n1 < 0
										Set sElement[nI] = sTemp
										Break
							Else
								Set sElement[0] = sTemp
							Set nI = 0
							While nI <= LenArray(sElement)
								Set n1 = SalStrScan(sElement[nI], '-')
								If n1 < 0
									Call MessageNoWait('Ошибка в элементе ' || Str(nI+1), 'Cообщение A', 3, 1)
									Return VALIDATE_Cancel
								Else
									Set sLTime[nI] = Left(sElement[nI], n1)
									Set sRTime[nI] = Subs(sElement[nI], n1+2, Len(sElement[nI])-n1-1)
									If Len(sLTime[nI])*Len(sRTime[nI]) = 0
										Call MessageNoWait('Ошибка в элементе ' || Str(nI+1), 'Cообщение B', 3, 1)
										Return VALIDATE_Cancel
									Else
										Set n1 = SalStrScan(sLTime[nI], ':')
										Set nLHou[nI] = IifN(n1<0, Val(sLTime[nI]), Val(Left(sLTime[nI], n1)))
										Set nLMin[nI] = IifN(n1<0, 0, Val(Subs(sLTime[nI], n1+2,
												    Len(sLTime[nI])-n1-1)))
										Set n1 = SalStrScan(sRTime[nI], ':')
										Set nRHou[nI] = IifN(n1<0, Val(sRTime[nI]), Val(Left(sRTime[nI], n1)))
										Set nRMin[nI] = IifN(n1<0, 0, Val(Subs(sRTime[nI], n1+2,
												    Len(sRTime[nI])-n1-1)))
										Set bUsl = nLHou[nI] < 0 or nLHou[nI] > 23 or nLMin[nI] < 0 or
												    nLMin[nI] > 59 or nRHou[nI] < 0 or nRHou[nI] > 23 or nRMin[nI] < 0 or
												    nRMin[nI] > 59 or nRHou[nI] < nLHou[nI] or (nRHou[nI] = nLHou[nI] and
												    nRMin[nI] <= nLMin[nI])
										If nI > 0
											Set bUsl = bUsl or nLHou[nI-1] > nLHou[nI] or nRHou[nI-1] > nLHou[nI] or
													    (nRHou[nI-1] = nLHou[nI] and nRMin[nI-1] >= nLMin[nI])
										If bUsl
											Call MessageNoWait('Ошибка в элементе ' || Str(nI+1), 'Cообщение C', 3, 1)
											Return VALIDATE_Cancel
								Set nI = nI + 1
		Functions
		Window Parameters
		Window Variables
			Number: n1
			Number: nI
			String: sTitle
			String: sTemp
			String: sElement[*]
			String: sLTime[*]
			String: sRTime[*]
			Number: nLHou[*]
			Number: nLMin[*]
			Number: nRHou[*]
			Number: nRMin[*]
			Boolean: bUsl
		Message Actions
			On SAM_Create
				Call PrepareWindow(hWndForm)
				Call SalTblGetColumnTitle(colTimes, sTitle, 99)
				Call SalStatusSetText(hWndForm, 'Пример заполнения колонки "' || sTitle ||
						     '": 9-10,11:30-12:30,14-15:45,16:30-18,...')
				Set nFlags = GT_NoIns | GT_NoDel
				! Set Times.strSqlPopulate = "
						    SELECT sab,nmk,notes,rowid
						    FROM customer
						    WHERE stmt=5 and sab is not null
						    ORDER BY sab
						    INTO :Times.colSab,:Times.colNmk,:Times.colTimes,:Times.colRowid"
				Set Times.strSqlPopulate = "
						    SELECT sab,nmk,notes,rowid
						    FROM customer
						    WHERE stmt in (5,6) and sab is not null
						    ORDER BY sab
						    INTO :Times.colSab,:Times.colNmk,:Times.colTimes,:Times.colRowid"
				Set Times.strSqlUpdate = "
						    UPDATE customer
						    SET notes=:Times.colTimes
						    WHERE rowid=:Times.colRowid"
				Call SalSendClassMessage(SAM_Create, 0, 0)
			On UM_Populate
				Call SalSendClassMessage(UM_Populate, 0, 0)
				Call VisTblAutoSizeColumn(hWndForm, hWndNULL)
				! Call SalTblSetTableFlags(hWndForm, TBL_Flag_SuppressLastColLine, TRUE)
			On WM_NCMouseMove
				Call VisTblAutoSizeColumn(hWndForm, hWndNULL)
	Dialog Box: FormE
		Class:
		Property Template:
		Class DLL Name:
		Title: Отбор итоговых (промежуточных) выписок (E) текущего дня (SBB)
		Accesories Enabled? Yes
		Visible? No
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Window Location and Size
				Left:   2.713"
				Top:    0.979"
				Width:  9.717"
				Width Editable? Yes
				Height: 6.417"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description: Отбор итоговых (промежуточных) выписок (E) текущего дня (SBB)
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? No
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Multiline Field: mlText
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 1024
					String Type: String
					Editable? No
				Display Settings
					Border? No
					Word Wrap? Yes
					Vertical Scroll? No
					Window Location and Size
						Left:   0.083"
						Top:    5.667"
						Width:  9.45"
						Width Editable? Yes
						Height: 0.429"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: 10
					Font Enhancement: Bold
					Text Color: Default
					Background Color: 3D Face Color
				Message Actions
			Pushbutton: pbRun
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Выполнить
				Window Location and Size
					Left:   0.083"
					Top:    5.238"
					Width:  1.5"
					Width Editable? Yes
					Height: 0.333"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F5
				Font Name: Default
				Font Size: 10
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Dark Green
				Background Color: Default
				Message Actions
					On SAM_Click
						Call OtborE()
						Call SalTimerSet(pbExit, 2, 500)
					On SAM_Timer
						Call SalTimerKill(pbRun, 1)
						Call SalSendMsg(pbRun, SAM_Click, 0, 0)
			Pushbutton: pbExit
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Выход
				Window Location and Size
					Left:   8.033"
					Top:    5.238"
					Width:  1.5"
					Width Editable? Yes
					Height: 0.333"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: F10
				Font Name: Default
				Font Size: 10
				Font Enhancement: Bold
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Dark Blue
				Background Color: Default
				Message Actions
					On SAM_Click
						Call SalEndDialog(hWndForm, 0)
					On SAM_Timer
						Call SalTimerKill(pbExit, 2)
						Call SalSendMsg(pbExit, SAM_Click, 0, 0)
			Child Table: tbl1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Display Settings
					Window Location and Size
						Left:   0.083"
						Top:    0.071"
						Width:  9.45"
						Width Editable? Yes
						Height: 5.107"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					View: Table
					Allow Row Sizing? No
					Lines Per Row: Default
				Memory Settings
					Maximum Rows in Memory: Default
					Discardable? Yes
				Contents
					Column: colOTM
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Отм.
						Visible? Yes
						Editable? Yes
						Maximum Data Length: Default
						Data Type: String
						Justify: Left
						Width:  0.533"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Check Box
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value: 1
								Uncheck Value: 0
								Ignore Case? Yes
						List Values
						Message Actions
					Column: colSAB
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Код
						Visible? Yes
						Editable? No
						Maximum Data Length: 4
						Data Type: String
						Justify: Left
						Width:  0.6"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
					Column: colNMK
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Наименование
						Visible? Yes
						Editable? No
						Maximum Data Length: 38
						Data Type: String
						Justify: Left
						Width:  7.55"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
				Functions
				Window Variables
				Message Actions
					On SAM_Create
						Call WaitCursorOn()
						Call SalTblPopulate(tbl1, hSql(), T("
								     SELECT '1',c.sab,c.nmk
								     INTO :tbl1.colOTM,:tbl1.colSAB,:tbl1.colNMK
								     FROM customer c, klp_version k
								     WHERE c.sab is not null and c.stmt=5 and c.rnk=k.rnk and k.filee=1
								     ORDER BY c.sab"), TBL_FillAll)
						Call WaitCursorOff()
			! cMeter: ccMeter
.winattr class Custom Control:
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: cMeter
				Property Template:
				Class DLL Name:
				Display Settings
					DLL Name: vti11.dll
					MS Windows Class Name: VT:cMeter:10
					Style:  0x00000000
					ExStyle:  0x00000000
					Title:
					Window Location and Size
						Left:   0.083"
						Top:    6.083"
						Width:  9.45"
						Width Editable? Yes
						Height: 0.333"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Etched Border? Yes
					Hollow? No
					Vertical Scroll? No
					Horizontal Scroll? No
					Tab Stop? None
					Tile To Parent? No
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Blue
					Background Color: System Window Color
					DLL Settings
.end
				                     Message Actions 
		Functions
			Function: Message
				Description: вывод текста в окно и запись в LOG
				Returns
					Boolean:
				Parameters
					String: sStr
					Boolean: bTL
				Static Variables
				Local variables
				Actions
					If bTL
						Call SaveInfoToLog(sStr)
					Call SalSetWindowText(mlText, sStr)
			Function: OtborE
				Description: отбор E "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					Number: nRNK
					String: sNMK
					Number: nFetchRes
					Number: nIndex
					Date/Time: dBaDa
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOA
					String: smOKPOA[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Number: nDOS
					Number: nmDOS[*]
					Number: nKOS
					Number: nmKOS[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					Date/Time: dPDAT
					Date/Time: dmPDAT[*]
					String: sNAZN
					String: smNAZN[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					Date/Time: dDATb1
					Date/Time: dmDATb1[*]
					Date/Time: dDATb2
					Date/Time: dmDATb2[*]
					Date/Time: dDATOV
					Date/Time: dmDATOV[*]
					!
					String: sOpenDay
					!
					Number: nUid
					Number: nKwo
					Boolean: bOk
					Number: nVal
					Number: nPosKwoBis
					String: sTempBis
					Number: nB
					Number: nRec
					Number: nLoop
					!
					Date/Time: dDATD
					Date/Time: dmDATD[*]
					!
					String: sYearBaDa
					!
					Number: nCurrentRow
					!
					Date/Time: dDATbis
				Actions
					Call SalWaitCursor(TRUE)
					Set dBaDa = GetBankDate()
					Set sYearBaDa = Str(SalDateYear(dBaDa))
					Set sOpenDay = '0' ! как бы день закрыт
					Set nCurrentRow = TBL_MinRow
					While SalTblFindNextRow(tbl1, nCurrentRow, 0, 0)
						Call SalTblSetContext(tbl1, nCurrentRow)
						If tbl1.colOTM = '1'
							Set nIL = VisArrayFindString(smSAB, tbl1.colSAB)
							Set sSAB = smSAB[nIL]
							Set nRNK = nmRNK[nIL]
							Set sNMK = smNMK[nIL]
							Set nUid = GetUserId()
							Set nVal = GetBaseVal()
							If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dBaDa,dBaDa,sSAB,nVal,'%','E')")
								Call SqlCommit(hSql())
								Call SqlPrepareAndExecute(hSql(), T("
										     SELECT count(*)
										     FROM tmp_lics
										     INTO :nKwo
										     WHERE id=:nUid"))
								Call SqlFetchNext(hSql(), nFetchRes)
								Set bOk = nKwo>0
							Else
								Call SqlRollback(hSql())
								Set bOk = FALSE
							If bOk and SqlPrepareAndExecute(hSql(), T("
									   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,
									          namefilea,Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,okpoz
									   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,:nKOS,
									        :dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nRec,:dDATD,
									        :dDATb1,:dDATb2,:dDATOV,:dDATbis,:sOKPOZ
									   FROM tmp_lics
									   WHERE id=:nUid
									   ORDER BY nlsa,kv,dk,s"))
								Set sMFOA = GetBankMfo()
								Set nIndex = 0
								Call SalArraySetUpperBound(smMFOA, 1, -1)
								Call SalArraySetUpperBound(smNLSA, 1, -1)
								Call SalArraySetUpperBound(smNAMA, 1, -1)
								Call SalArraySetUpperBound(smMFOB, 1, -1)
								Call SalArraySetUpperBound(smNLSB, 1, -1)
								Call SalArraySetUpperBound(smNAMB, 1, -1)
								Call SalArraySetUpperBound(smOKPOA, 1, -1)
								Call SalArraySetUpperBound(smOKPOZ, 1, -1)
								Call SalArraySetUpperBound(smOKPOB, 1, -1)
								Call SalArraySetUpperBound(nmDK, 1, -1)
								Call SalArraySetUpperBound(nmS, 1, -1)
								Call SalArraySetUpperBound(nmVOB, 1, -1)
								Call SalArraySetUpperBound(smND, 1, -1)
								Call SalArraySetUpperBound(nmISP, 1, -1)
								Call SalArraySetUpperBound(nmKV, 1, -1)
								Call SalArraySetUpperBound(dmDAOP, 1, -1)
								Call SalArraySetUpperBound(nmIOST, 1, -1)
								Call SalArraySetUpperBound(nmDOS, 1, -1)
								Call SalArraySetUpperBound(nmKOS, 1, -1)
								Call SalArraySetUpperBound(dmDAPP, 1, -1)
								Call SalArraySetUpperBound(dmPDAT, 1, -1)
								Call SalArraySetUpperBound(dmDATD, 1, -1)
								Call SalArraySetUpperBound(smNAZN, 1, -1)
								Call SalArraySetUpperBound(smD_rec, 1, -1)
								Call SalArraySetUpperBound(smPOND, 1, -1)
								Call SalArraySetUpperBound(nmSK, 1, -1)
								Call SalArraySetUpperBound(smNameFileA, 1, -1)
								Call SalArraySetUpperBound(nmBis, 1, -1)
								Call SalArraySetUpperBound(smBis, 1, -1)
								Call SalArraySetUpperBound(dmDATb1, 1, -1)
								Call SalArraySetUpperBound(dmDATb2, 1, -1)
								Call SalArraySetUpperBound(dmDATOV, 1, -1)
								While SqlFetchNext(hSql(), nFetchRes)
									Set smMFOA[nIndex] = sMFOA
									Set smNLSA[nIndex] = sNLSA
									Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
									Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
									Set smNLSB[nIndex] = sNLSB
									Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
									Set smOKPOA[nIndex] = sOKPOA
									Set smOKPOZ[nIndex] = sOKPOZ
									Set smOKPOB[nIndex] = sOKPOB
									Set nmDK[nIndex] = nDK
									Set nmS[nIndex] = nS
									Set nmVOB[nIndex] = 1
									Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
									Set nmISP[nIndex] = nISP
									Set nmKV[nIndex] = nKV
									Set dmDAOP[nIndex] = dDAOP
									Set nmIOST[nIndex] = nIOST
									Set nmDOS[nIndex] = nDOS
									Set nmKOS[nIndex] = nKOS
									Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
									Set dmDATD[nIndex] = dDATD
									Set dmDAPP[nIndex] = dDAPP
									Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
									Set sD_rec = StrDosToWinX(sD_rec)
									Set smD_rec[nIndex] = sD_rec
									If nBis = NUMBER_Null or nBis = 0
										Set nmBis[nIndex] = 0
										Set smBis[nIndex] = ''
									If sNazns = '00'
										Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
												    SELECT n_np
												    FROM s_np
												    WHERE k_np='" || sNaznk || "'"))
									If nBis > 0
										Set nPosKwoBis = SalStrScan(sD_rec, '#B')
										! внешние бисы
										If nPosKwoBis >= 0
											Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
											Set nB = SalStrScan(sTempBis, '#')
											Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
											Set sSQL = "SELECT nazn,d_rec
													            INTO   :sNaznBis,:sD_recBis
													            FROM   arc_rrp
													            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
													            ORDER BY rec_a,bis"
										! внутрение бисы
										Else
											Set nmBis[nIndex] = nBis
											Set sSQL = "
													    SELECT '#C'||value||'#','' as d_recbis
													    INTO   :sNaznBis,:sD_recBis
													    FROM   operw
													    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
													    ORDER BY tag"
										!
										Set nLoop = nmBis[nIndex]
										Set smBis[nIndex] = ''
										Set nmBis[nIndex] = 0
										Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
										While SqlFetchNext(hSqlAux3(), nFetchRes)
											If nLoop > 0
												Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
												Set nLenOdinBis = Len(sOdinBis)
												! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
												Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
												Set nmBis[nIndex] = nmBis[nIndex] + 1
												Set nLoop = nLoop - 1
										! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
										If nmBis[nIndex] > 0
											If Len(smBis[nIndex]) = 0
												Set nmBis[nIndex] = 0
											Else
												Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
										Else
											Set smBis[nIndex] = ''
									Set smPOND[nIndex] = sPOND
									Set nmSK[nIndex] = nSK
									Set smNameFileA[nIndex] = sNameFileA
									Set dmDATb1[nIndex] = dDATb1
									Set dmDATb2[nIndex] = dDATb2
									Set dmDATOV[nIndex] = dDATOV
									Set nIndex = nIndex + 1
								If nIndex > 0
									Call Message(' Отбор выписки E для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
									Call MakeE(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOA, smOKPOB, nmDK, nmS, nmVOB,
											     smND, nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK, smNameFileA,
											     nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: MakeE
				Description:
				Returns
					Boolean:
				Parameters
					String: s01
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smNAMA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					String: smNAMB[*]
					String: smOKPOA[*]
					String: smOKPOB[*]
					Number: nmDK[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmISP[*]
					Number: nmKV[*]
					Date/Time: dmDAOP[*]
					Number: nmIOST[*]
					Number: nmDOS[*]
					Number: nmKOS[*]
					Date/Time: dmDAPP[*]
					Date/Time: dmPDAT[*]
					String: smNAZN[*]
					String: smD_rec[*]
					String: smPOND[*]
					Number: nmSK[*]
					String: smNameFileA[*]
					Number: nmBis[*]
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Date/Time: dmDATD[*]
					Date/Time: dmDATOV[*]
					String: smOKPOZ[*]
				Static Variables
				Local variables
					Boolean: bFl
					Number: nKwo
					String: sNlsTek
					Number: nKvTek
					String: sFile
					File Handle: hF
					String: sString
					!
					String: sVERS
				Actions
					Set bFl = TRUE
					Set sVERS = smVERS[VisArrayFindString(smSAB, sSab)]
					Call SalArrayGetUpperBound(smMFOA, 1, nKwo)
					Set nI = 0
					Set sNlsTek = ''
					Set nKvTek = -1
					While nI <= nKwo
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'E' || SalFmtFormatDateTime(dmDAOP[0], 'yyMMdd') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							Call VisFileOpen(hF, sFile, OF_Create)
							If sVERS >= '1.55'
								Set sString = 'VERSION20041207' || Spac(85) || PutCrLf()
								Call VisFileWrite(hF, sString, Len(sString))
						If sNlsTek != smNLSA[nI] or nKvTek != nmKV[nI]
							Set sNlsTek = smNLSA[nI]
							Set nKvTek = nmKV[nI]
							If SalStrTrimX(smOKPOZ[nI]) = '0'
								Set smOKPOZ[nI] = ''
							Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nmKV[nI]), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || PadL(SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd'), 8) ||
									    PadR(smOKPOZ[nI], 14) || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							Call VisFileWrite(hF, sString, Len(sString))
						If Abs(nmS[nI]) + Val(smNLSB[nI]) > 0
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDATD[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(IifN(sVERS<'1.63.0.4201',
									    IifN(nmVOB[nI]=6, 1, nmVOB[nI]), nmVOB[nI])), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							Call VisFileWrite(hF, sString, Len(sString))
						Set nI = nI + 1
					If not bFl
						Call VisFileClose(hF)
						Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
						If File(sDiskKataOUT || Right(sFile, 12))
							Call VisFileDelete(sFile)
							Return TRUE
						Return FALSE
					Return FALSE
		Window Parameters
		Window Variables
			String: sNazns
			Number: nBis
			String: sNaznk
			String: sD_rec
			String: sFn_a
			String: sNaznBis
			String: sD_recBis
			String: sDiskKataOUT
			!
			Date/Time: dBankDate
			!
			String: sOdinBis
			Number: nLenOdinBis
			!
			String: syyyyMMddPath
			!
			String: sVERS
			String: smVERS[*]
			Number: nI
			Number: nRNK
			!
			String: sSQL
		Message Actions
			On SAM_Create
				Call SalWaitCursor(TRUE)
				Call SalCenterWindow(hWndForm)
				! Call SalHideWindow(ccMeter)
				Set sUserid = Str(GetUserId())
				Set dBankDate = GetBankDate()
				Set nKLI = -1
				If SqlPrepareAndExecute(hSql(), T("
						   SELECT c.sab,c.rnk,c.nmk,nvl(k.version,'0.0')
						   INTO :sSAB,:nRNK,:sNMK,:sVERS
						   FROM customer c, klp_version k
						   WHERE c.sab is not null and c.stmt=5 and c.rnk=k.rnk(+) and k.filee=1
						   ORDER BY c.sab"))
					Call SalArraySetUpperBound(smSAB, 1, -1)
					Call SalArraySetUpperBound(nmRNK, 1, -1)
					Call SalArraySetUpperBound(smNMK, 1, -1)
					Call SalArraySetUpperBound(smVERS, 1, -1)
					Set nKLI = -1
					While SqlFetchNext(hSql(), nFetchRes)
						Set nKLI = nKLI + 1
						Set smSAB[nKLI] = sSAB
						Set nmRNK[nKLI] = nRNK
						Set smNMK[nKLI] = SalStrTrimX(sNMK)
						Set smVERS[nKLI] = sVERS
				If nKLI = -1
					Call SalEndDialog(FormE, 0)
				Call SalWaitCursor(FALSE)
			On SAM_CreateComplete
				Set sDiskKataOUT = GetElKDirOUT() ! получить путь к OUT электронных клиентов
				Set sArchPath = GetArchiv_KB()    ! получить путь к архиву файлов электронных клиентов
				Set sTempPath = GetTempKPath()    ! получить путь временных файлов КЛИЕНТ-БАНК
				Call SalTimerSet(pbRun, 1, 30000)
	Form Window: winoSbb_tst
		Class:
		Property Template:
		Class DLL Name:
		Title: Отбор ЗАКЛЮЧ. выписок "электронным" клиентам
		Icon File:
		Accesories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Automatically Created at Runtime? Yes
			Initial State: Normal
			Maximizable? Yes
			Minimizable? Yes
			System Menu? Yes
			Resizable? Yes
			Window Location and Size
				Left:   2.138"
				Top:    0.625"
				Width:  6.783"
				Width Editable? Yes
				Height: 2.667"
				Height Editable? Yes
			Form Size
				Width:  Default
				Height: Default
				Number of Pages: Dynamic
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Contents
		Contents
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 440
					String Type: Long String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? No
					Window Location and Size
						Left:   0.183"
						Top:    0.571"
						Width:  6.1"
						Width Editable? Yes
						Height: 0.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Bold
					Text Color: Black
					Background Color: Sky
				Message Actions
			Pushbutton: pbOk
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: cpbOk
				Property Template:
				Class DLL Name:
				Title: Виконати
				Window Location and Size
					Left:   1.883"
					Top:    1.571"
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Message Actions
					On SAM_Click
						Set sDiskKataOUT = 'c:\\temp\\1' ! GetElKDirOUT() ! получить путь к OUT электронных клиентов
						Set sArchPath = 'c:\\temp\\2'    !GetArchiv_KB()    ! получить путь к архиву файлов электронных клиентов
						Set sTempPath = 'c:\\temp\\3'    !GetTempKPath()    ! получить путь временных файлов КЛИЕНТ-БАНК
						Set bIni = FALSE
						Call OtborLS()
			Pushbutton: pbClose
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: cpbCancel
				Property Template:
				Class DLL Name:
				Title: Вийти
				Window Location and Size
					Left:   3.183"
					Top:    1.571"
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Message Actions
					On SAM_Click
						Call SalDestroyWindow(hWndForm)
			Combo Box: cmbBankDate
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: cGenComboBox_StrId
				Property Template:
				Class DLL Name:
				Window Location and Size
					Left:   1.683"
					Top:    0.155"
					Width:  2.0"
					Width Editable? Class Default
					Height: 0.881"
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List Initialization
				Message Actions
					On SAM_Create
						Call cmbBankDate.Init(hWndItem)
						Call cmbBankDate.Populate(hSql(), "rownum", "TO_CHAR(fdat,'DD-MM-YYYY')",
								    "(select fdat from fdat)",
								     "ORDER BY fdat DESC")
						Call SalListSetSelect(cmbBankDate, 0)
						Set sTmp = cmbBankDate.GetNameById(cmbBankDate.GetKey(SalListQuerySelection(hWndItem)))
						Set dBankDate = SalDateConstruct(SalStrToNumber( SalStrRightX( sTmp, 4 )),
								 SalStrToNumber( SalStrMidX( sTmp, 3, 2 )),
								 SalStrToNumber(SalStrLeftX( sTmp, 2 )), 0, 0, 0)
					On SAM_Click
						Call SalSendClassMessage( SAM_Click, 0, 0 )
						Set sTmp = cmbBankDate.GetNameById(cmbBankDate.GetKey(SalListQuerySelection(hWndItem)))
						Set dBankDate = SalDateConstruct(SalStrToNumber( SalStrRightX( sTmp, 4 )),
								 SalStrToNumber( SalStrMidX( sTmp, 3, 2 )),
								 SalStrToNumber(SalStrLeftX( sTmp, 2 )), 0, 0, 0)
			Background Text: Дата виписки
				Resource Id: 8919
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.283"
					Top:    0.179"
					Width:  1.4"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Frame
				Resource Id: 8920
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.083"
					Top:    0.071"
					Width:  6.3"
					Width Editable? Yes
					Height: 1.417"
					Height Editable? Yes
				Visible? Yes
				Corners: Square
				Border Style: Etched
				Border Thickness: 1
				Border Color: 3D Shadow Color
				Background Color: Default
			Frame
				Resource Id: 8921
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left:   0.083"
					Top:    1.488"
					Width:  6.3"
					Width Editable? Yes
					Height: 0.69"
					Height Editable? Yes
				Visible? Yes
				Corners: Square
				Border Style: Etched
				Border Thickness: 1
				Border Color: 3D Shadow Color
				Background Color: Default
		Functions
			Function: Suffix
				Description: возвращает суффикс по типу файла и SAB
				Returns
					String:
				Parameters
					String: sSab
					String: sTip
				Static Variables
				Local variables
					Number: nSuf
					Number: nRnk
					String: sTemp
				Actions
					Call SqlPrepareAndExecute(hSqlAux2(), T('
							     SELECT k.count,k.rnk
							     INTO :nSuf,:nRnk
							     FROM custcount k, customer c
							     WHERE k.tip=:sTip and c.sab=:sSab and k.rnk=c.rnk'))
					If SqlFetchNext(hSqlAux2(), nFetchRes)
						Set nSuf = IifN(nSuf=999, 0, nSuf+1)
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     UPDATE custcount
								     SET count=:nSuf
								     WHERE rnk=:nRnk and tip=:sTip'))
					Else
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     SELECT rnk
								     INTO :nRnk
								     FROM customer
								     WHERE sab=:sSab'))
						Call SqlFetchNext(hSqlAux2(), nFetchRes)
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     SELECT tip
								     INTO :sTemp
								     FROM tipcount
								     WHERE tip=:sTip'))
						If not SqlFetchNext(hSqlAux2(), nFetchRes)
							Call SqlPrepareAndExecute(hSqlAux2(), T("
									     INSERT
									     INTO tipcount (tip, name)
									     VALUES (:sTip,'')"))
						Call SqlPrepareAndExecute(hSqlAux2(), T('
								     INSERT
								     INTO custcount (rnk,tip,count)
								     VALUES (:nRnk,:sTip,:nSuf)'))
					Return Right(Str(nSuf+1000), 3)
			Function: Message
				Description: вывод текста в окно и запись в LOG
				Returns
					Boolean:
				Parameters
					String: sStr
					Boolean: bTL
				Static Variables
				Local variables
				Actions
					If bTL
						Call SaveInfoToLog(sStr)
					Call SalSetWindowText(ml1, sStr)
			Function: OtborLS
				Description: отбор ЛС "электронным" клиентам
				Returns
					Boolean:
				Parameters
				Static Variables
				Local variables
					String: sSAB
					Number: nRNK
					String: sNMK
					Number: nFetchRes
					Number: nIndex
					Date/Time: dBaDa
					Number: nRef
					String: sSQL
					!
					String: sMFOA
					String: smMFOA[*]
					String: sNLSA
					String: smNLSA[*]
					String: sNAMA
					String: smNAMA[*]
					String: sMFOB
					String: smMFOB[*]
					String: sNLSB
					String: smNLSB[*]
					String: sNAMB
					String: smNAMB[*]
					String: sOKPOA
					String: smOKPOA[*]
					String: sOKPOB
					String: smOKPOB[*]
					Number: nDK
					Number: nmDK[*]
					Number: nS
					Number: nmS[*]
					Number: nVOB
					Number: nmVOB[*]
					String: sND
					String: smND[*]
					Number: nISP
					Number: nmISP[*]
					Number: nKV
					Number: nmKV[*]
					Date/Time: dDAOP
					Date/Time: dmDAOP[*]
					Number: nIOST
					Number: nmIOST[*]
					Number: nDOS
					Number: nmDOS[*]
					Number: nKOS
					Number: nmKOS[*]
					Date/Time: dDAPP
					Date/Time: dmDAPP[*]
					Date/Time: dPDAT
					Date/Time: dmPDAT[*]
					String: sNAZN
					String: smNAZN[*]
					String: sPOND
					String: smPOND[*]
					Number: nSK
					Number: nmSK[*]
					String: sNameFileA
					String: smNameFileA[*]
					Number: nBis
					Number: nmBis[*]
					String: sBis
					String: smBis[*]
					Date/Time: dDATb1
					Date/Time: dmDATb1[*]
					Date/Time: dDATb2
					Date/Time: dmDATb2[*]
					Date/Time: dDATOV
					Date/Time: dmDATOV[*]
					!
					String: sOpenDay
					!
					Number: nUid
					Number: nKwo
					Boolean: bOk
					Number: nVal
					Number: nPosKwoBis
					String: sTempBis
					Number: nB
					Number: nRec
					Number: nLoop
					!
					Date/Time: dDATD
					Date/Time: dmDATD[*]
					!
					String: sYearBaDa
					!
					Date/Time: dDATbis
				Actions
					Call SalWaitCursor(TRUE)
					! Set dBaDa = GetBankDate()
					Set sTmp = cmbBankDate.GetNameById(cmbBankDate.GetKey(SalListQuerySelection(cmbBankDate)))
					Set dBaDa = SalDateConstruct(SalStrToNumber(SalStrRightX(sTmp, 4)), SalStrToNumber(SalStrMidX(sTmp, 3, 2)),
							    SalStrToNumber(SalStrLeftX(sTmp, 2)), 0, 0, 0)
					Set sYearBaDa = Str(SalDateYear(dBaDa))
					! Set sOpenDay = GetGlobalOption(CFG_BANKDAY())
					Set sOpenDay = '0' ! как бы день закрыт
					Set nIL = 0
					While nIL <= nKLI
						Set sSAB = smSAB[nIL]
						Set nRNK = nmRNK[nIL]
						Set sNMK = smNMK[nIL]
						Set sOKPO = smOKPO[nIL]
						! Set sTIMES = smTIMES[nIL]
						Set nUid = GetUserId()
						Set nVal = GetBaseVal()
						Call SalDateToStr(dBaDa, sTmp)
						If SqlPLSQLCommand(hSql(), "p_licsbb(nUid,dBaDa,dBaDa,sSAB,nVal,'%','Z')")
							Call SqlCommit(hSql())
							Call SqlPrepareAndExecute(hSql(), T("
									     SELECT count(*)
									     FROM tmp_lics
									     INTO :nKwo
									     WHERE id=:nUid"))
							Call SqlFetchNext(hSql(), nFetchRes)
							Set bOk = nKwo>0
						Else
							Call SqlRollback(hSql())
							Set bOk = FALSE
						If bOk and SqlPrepareAndExecute(hSql(), T("
								   SELECT nlsa,nama,mfob,nlsb,namb,okpoa,okpob,dk,s,vob,nd,isp,kv,daopl,iost,dos,kos,pdat,dapp,nazn,pond,sk,namefilea,
								          Kodirowka,nazns,bis,naznk,d_rec,fn_a,rec,datd,datb1,datb2,datov,datbis,ref,okpoz
								   INTO :sNLSA,:sNAMA,:sMFOB,:sNLSB,:sNAMB,:sOKPOA,:sOKPOB,:nDK,:nS,:nVOB,:sND,:nISP,:nKV,:dDAOP,:nIOST,:nDOS,:nKOS,
								        :dPDAT,:dDAPP,:sNAZN,:sPOND,:nSK,:sNameFileA,:nKodirowka,:sNazns,:nBis,:sNaznk,:sD_rec,:sFn_a,:nRec,:dDATD,
								        :dDATb1,:dDATb2,:dDATOV,:dDATbis,:nRef,:sOKPOZ
								   FROM tmp_lics
								   WHERE id=:nUid
								   ORDER BY nlsa,kv,dk,s"))
							Set sMFOA = GetBankMfo()
							Set nIndex = 0
							Call SalArraySetUpperBound(smMFOA, 1, -1)
							Call SalArraySetUpperBound(smNLSA, 1, -1)
							Call SalArraySetUpperBound(smNAMA, 1, -1)
							Call SalArraySetUpperBound(smMFOB, 1, -1)
							Call SalArraySetUpperBound(smNLSB, 1, -1)
							Call SalArraySetUpperBound(smNAMB, 1, -1)
							Call SalArraySetUpperBound(smOKPOA, 1, -1)
							Call SalArraySetUpperBound(smOKPOZ, 1, -1)
							Call SalArraySetUpperBound(smOKPOB, 1, -1)
							Call SalArraySetUpperBound(nmDK, 1, -1)
							Call SalArraySetUpperBound(nmS, 1, -1)
							Call SalArraySetUpperBound(nmVOB, 1, -1)
							Call SalArraySetUpperBound(smND, 1, -1)
							Call SalArraySetUpperBound(nmISP, 1, -1)
							Call SalArraySetUpperBound(nmKV, 1, -1)
							Call SalArraySetUpperBound(dmDAOP, 1, -1)
							Call SalArraySetUpperBound(nmIOST, 1, -1)
							Call SalArraySetUpperBound(nmDOS, 1, -1)
							Call SalArraySetUpperBound(nmKOS, 1, -1)
							Call SalArraySetUpperBound(dmDAPP, 1, -1)
							Call SalArraySetUpperBound(dmPDAT, 1, -1)
							Call SalArraySetUpperBound(dmDATD, 1, -1)
							Call SalArraySetUpperBound(smNAZN, 1, -1)
							Call SalArraySetUpperBound(smD_rec, 1, -1)
							Call SalArraySetUpperBound(smPOND, 1, -1)
							Call SalArraySetUpperBound(nmSK, 1, -1)
							Call SalArraySetUpperBound(smNameFileA, 1, -1)
							Call SalArraySetUpperBound(nmBis, 1, -1)
							Call SalArraySetUpperBound(smBis, 1, -1)
							Call SalArraySetUpperBound(dmDATb1, 1, -1)
							Call SalArraySetUpperBound(dmDATb2, 1, -1)
							Call SalArraySetUpperBound(dmDATOV, 1, -1)
							While SqlFetchNext(hSql(), nFetchRes)
								Set smMFOA[nIndex] = sMFOA
								Set smNLSA[nIndex] = sNLSA
								Set smNAMA[nIndex] = IifS(nKodirowka=0, sNAMA, StrDosToWinX(sNAMA))
								Set smMFOB[nIndex] = IifS(Val(sMFOB)=0, sMFOA, sMFOB)
								Set smNLSB[nIndex] = sNLSB
								Set smNAMB[nIndex] = IifS(nKodirowka=0, sNAMB, StrDosToWinX(sNAMB))
								Set smOKPOA[nIndex] = sOKPOA
								Set smOKPOA[nIndex] = sOKPOZ
								Set smOKPOB[nIndex] = sOKPOB
								Set nmDK[nIndex] = nDK
								Set nmS[nIndex] = nS
								! Set nmVOB[nIndex] = nVOB
								Set nmVOB[nIndex] = 1
								Set smND[nIndex] = IifS(nKodirowka=0, sND, StrDosToWinX(sND))
								Set nmISP[nIndex] = nISP
								Set nmKV[nIndex] = nKV
								Set dmDAOP[nIndex] = dDAOP
								Set nmIOST[nIndex] = nIOST
								Set nmDOS[nIndex] = nDOS
								Set nmKOS[nIndex] = nKOS
								Set dmPDAT[nIndex] = IifD(SalDateHour(dPDAT)+SalDateMinute(dPDAT)=0, dDATD, dPDAT)
								Set dmDATD[nIndex] = dDATD
								Set dmDAPP[nIndex] = dDAPP
								Set smNAZN[nIndex] = IifS(nKodirowka=0, sNAZN, StrDosToWinX(sNAZN))
								Set sD_rec = StrDosToWinX(sD_rec)
								Set smD_rec[nIndex] = sD_rec
								If nBis = NUMBER_Null or nBis = 0
									Set nmBis[nIndex] = 0
									Set smBis[nIndex] = ''
								If sNazns = '00'
									Set smNAZN[nIndex] = SalStrTrimX(GetValueStr("
											    SELECT n_np
											    FROM s_np
											    WHERE k_np='" || sNaznk || "'"))
								Set nPosKwoBis = SalStrScan(sD_rec, '#B')
								If nBis > 0
									Set nPosKwoBis = SalStrScan(sD_rec, '#B')
									! внешние бисы
									If nPosKwoBis >= 0
										Set sTempBis = Right(sD_rec, Len(sD_rec)-nPosKwoBis-2)
										Set nB = SalStrScan(sTempBis, '#')
										Set nmBis[nIndex] = Val(Left(sTempBis, nB)) - 1
										Set sSQL = "SELECT nazn,d_rec
												            INTO   :sNaznBis,:sD_recBis
												            FROM   arc_rrp
												            WHERE  (fn_a=:sFn_a or fn_b=:sFn_a) and dat_a=:dDATbis and rec>:nRec and bis>1 and s=0
												            ORDER BY rec_a,bis"
									! внутрение  бисы
									Else
										Set nmBis[nIndex] = nBis
										Set sSQL = "
												    SELECT '#C'||value||'#','' as d_recbis
												    INTO   :sNaznBis,:sD_recBis
												    FROM   operw
												    WHERE  ref=:nRef and regexp_like(trim(tag),'C[0-9]{1,2}$')
												    ORDER BY tag"
									!
									!
									Set nLoop = nmBis[nIndex]
									Set smBis[nIndex] = ''
									Set nmBis[nIndex] = 0
									Call SqlPrepareAndExecute(hSqlAux3(), sSQL)
									While SqlFetchNext(hSqlAux3(), nFetchRes)
										If nLoop > 0
											Set sOdinBis = VisStrTrim(sNaznBis || sD_recBis)
											Set nLenOdinBis = Len(sOdinBis)
											! Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || StrDosToWinX(sOdinBis)
											Set smBis[nIndex] = smBis[nIndex] || Right('0000' || Str(nLenOdinBis), 4) || sOdinBis
											Set nmBis[nIndex] = nmBis[nIndex] + 1
											Set nLoop = nLoop - 1
									! Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									If nmBis[nIndex] > 0
										If Len(smBis[nIndex]) = 0
											Set nmBis[nIndex] = 0
										Else
											Set smBis[nIndex] = smBis[nIndex] || PutCrLf()
									Else
										Set smBis[nIndex] = ''
								Set smPOND[nIndex] = sPOND
								Set nmSK[nIndex] = nSK
								Set smNameFileA[nIndex] = sNameFileA
								Set dmDATb1[nIndex] = dDATb1
								Set dmDATb2[nIndex] = dDATb2
								Set dmDATOV[nIndex] = dDATOV
								Set nIndex = nIndex + 1
							If nIndex > 0
								Call Message(' Отбор выписки для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
								Call MakeZ(sOpenDay, sSAB, smMFOA, smNLSA, smNAMA, smMFOB, smNLSB, smNAMB, smOKPOA, smOKPOB, nmDK, nmS, nmVOB,
										     smND, nmISP, nmKV, dmDAOP, nmIOST, nmDOS, nmKOS, dmDAPP, dmPDAT, smNAZN, smD_rec, smPOND, nmSK, smNameFileA,
										     nmBis, smBis, dmDATb1, dmDATb2, dmDATD, dmDATOV, smOKPOZ)
						If nKursi = 1
							Call Message(' Отбор курсов валют для клиента ' || sSAB || ' (' || sNMK || ')', TRUE)
							Call MakeK(sSAB)
						Set nIL = nIL + 1
					Call SalWaitCursor(FALSE)
					Return TRUE
			Function: MakeZ
				Description:
				Returns
					Boolean:
				Parameters
					String: s01
					String: sSab
					String: smMFOA[*]
					String: smNLSA[*]
					String: smNAMA[*]
					String: smMFOB[*]
					String: smNLSB[*]
					String: smNAMB[*]
					String: smOKPOA[*]
					String: smOKPOB[*]
					Number: nmDK[*]
					Number: nmS[*]
					Number: nmVOB[*]
					String: smND[*]
					Number: nmISP[*]
					Number: nmKV[*]
					Date/Time: dmDAOP[*]
					Number: nmIOST[*]
					Number: nmDOS[*]
					Number: nmKOS[*]
					Date/Time: dmDAPP[*]
					Date/Time: dmPDAT[*]
					String: smNAZN[*]
					String: smD_rec[*]
					String: smPOND[*]
					Number: nmSK[*]
					String: smNameFileA[*]
					Number: nmBis[*]
					String: smBis[*]
					Date/Time: dmDATb1[*]
					Date/Time: dmDATb2[*]
					Date/Time: dmDATD[*]
					Date/Time: dmDATOV[*]
					String: smOKPOZ[*]
				Static Variables
				Local variables
					Boolean: bFl
					! Number: nBaseVal
					Number: nKwo
					String: sNlsTek
					Number: nKvTek
					String: sFile
					File Handle: hF
					String: sString
					!
					String: sVERS
				Actions
					Set bFl = TRUE
					Set sVERS = smVERS[VisArrayFindString(smSAB, sSab)]
					! Set nBaseVal = GetBaseVal()
					Call SalArrayGetUpperBound(smMFOA, 1, nKwo)
					Set nI = 0
					Set sNlsTek = ''
					Set nKvTek = -1
					While nI <= nKwo
						If bFl
							Set bFl = FALSE
							Set sFile = sTempPath || 'Z' || SalFmtFormatDateTime(dmDAOP[0], 'yyMMdd') || Left(sSab, 1) || '.' || Right(sSab, 3)
							If File(sFile)
								Call VisFileDelete(sFile)
							Call VisFileOpen(hF, sFile, OF_Create)
							If sVERS >= '1.55'
								Set sString = 'VERSION20041207' || Spac(85) || PutCrLf()
								Call VisFileWrite(hF, sString, Len(sString))
						If sNlsTek != smNLSA[nI] or nKvTek != nmKV[nI]
							Set sNlsTek = smNLSA[nI]
							Set nKvTek = nmKV[nI]
							If SalStrTrimX(smOKPOZ[nI]) = '0'
								Set smOKPOZ[nI] = ''
							Set sString = '0' || PadL(smNLSA[nI], 14) || PadL(Str(nmKV[nI]), 3) || PadL(Str(nmIOST[nI]), 16) || PadL(
									    Str(nmDOS[nI]), 16) || PadL(Str(nmKOS[nI]), 16) || PadL(SalFmtFormatDateTime(dmDAPP[nI], 'yyyyMMdd'), 8) ||
									    PadR(smOKPOZ[nI], 14) || Repl(SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd'), 2) || PutCrLf()
							Call VisFileWrite(hF, sString, Len(sString))
						If Abs(nmS[nI]) + Val(smNLSB[nI]) > 0
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDATD[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf() || smBis[nI])
							! Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(nmVOB[nI]), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf())
							Set sString = StrWinToDosX2('1' || PadL(smMFOB[nI], 9) || PadL(smNLSB[nI], 14) || PadL(Str(
									    IifN(nmDK[nI]=0, 0-nmS[nI], nmS[nI])), 16) || PadL(Str(IifN(sVERS<'1.63.0.4201',
									    IifN(nmVOB[nI]=6, 1, nmVOB[nI]), nmVOB[nI])), 2) || PadR(smND[nI], 10) ||
									    SalFmtFormatDateTime(dmDAOP[nI], 'yyyyMMdd') || Right('0' || SalFmtFormatDateTime(dmDATOV[nI], 'hhhhmm'), 4) ||
									    PadR(smNAMB[nI], 38) || PadR(smOKPOB[nI], 14) || PadR(smNAZN[nI], 160) || PadR(smD_rec[nI], 60) ||
									    IifS(sVERS>='1.55', PadR(SalFmtFormatDateTime(dmDATb1[nI], 'yyyyMMdd'), 8), '') || IifS(sVERS>='1.55', PadR(
									    SalFmtFormatDateTime(dmDATb2[nI], 'yyyyMMdd'), 8), '')  || PadL(Str(nmBis[nI]), 4) || PutCrLf())
							Call VisFileWrite(hF, sString, Len(sString))
							If nmBis[nI] > 0
								Set sString = StrWinToDosX2(smBis[nI])
								Call VisFileWrite(hF, sString, Len(sString))
						Set nI = nI + 1
					If not bFl
						Call VisFileClose(hF)
						Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
						Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
						Call SalFileCreateDirectory(syyyyMMddPath)
						Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
						If File(sDiskKataOUT || Right(sFile, 12))
							Call VisFileDelete(sFile)
							Return TRUE
						Return FALSE
					Return FALSE
			Function: MakeK
				Description:
				Returns
				Parameters
					String: sSab
				Static Variables
				Local variables
					Number: nKV
					Number: nBSUM
					Date/Time: dVDATE
					Number: nRATE_O
					Boolean: bFl
					String: sFile
					File Handle: hF
					Boolean: b1
					String: sString
					String: s16t
				Actions
					If SalStrUpperX(SalStrTrimX(GetDBMS())) = "ORACLE"
						Set b1 = SqlPLSQLCommand(hSql(), 'val_ku(dBankDate, nBaseVal)')
					Else
						Call SqlRetrieve(hSql(), "informix.val_ku", ":dBankDate", ":nBaseVal")
						Call SqlExecute(hSql())
						Set b1 = SqlFetchNext(hSql(), nFetchRes)
					If b1
						Call SqlCommit(hSql())
						Set bFl = TRUE
						Call SqlPrepareAndExecute(hSql(), T("
								     SELECT kv,bsum,vdate1,rateo1
								     INTO :nKV,:nBSUM,:dVDATE,:nRATE_O
								     FROM tmp_valk
								     ORDER BY 1"))
						While SqlFetchNext(hSql(), nFetchRes)
							If bFl
								Set bFl = FALSE
								Set sFile = sTempPath || 'K' || ddd(dBankDate) || Suffix(sSab, 'K') ||
										    Left(sSab, 1) || '.' || Right(sSab, 3)
								If File(sFile)
									Call VisFileDelete(sFile)
								Call VisFileOpen(hF, sFile, OF_Create)
							Set s16t = PadL(SalNumberToStrX(nRATE_O/nBSUM, 8), 16)
							Set sString = PadL(Str(nKV), 3) || SalFmtFormatDateTime(dVDATE, 'yyyyMMdd') || Left(s16t, 7) || '.' ||
									    Right(s16t, 8) || PutCrLf()
							Call VisFileWrite(hF, sString, Len(sString))
						Call SqlCommit(hSqlAux2())
						If not bFl
							Call VisFileClose(hF)
							Call VisFileCopy(sFile, sDiskKataOUT || Right(sFile, 12))
							Set syyyyMMddPath = sArchPath || 'BCK\\' || SalFmtFormatDateTime(dBankDate, 'yyyyMMdd') || '\\'
							Call SalFileCreateDirectory(syyyyMMddPath)
							Call SalFileCopy(sFile, syyyyMMddPath || Right(sFile, 12), TRUE)
							If File(sDiskKataOUT || Right(sFile, 12))
								Call VisFileDelete(sFile)
								Return TRUE
							Return FALSE
					Else
						Call SqlRollback(hSql())
					Return FALSE
		Window Parameters
			Number: nKursi
		Window Variables
			! String: sOpenDay
			Number: nI
			! Number: nDubl
			!
			String: sNazns
			Number: nBis
			String: sNaznk
			String: sD_rec
			String: sFn_a
			String: sNaznBis
			String: sD_recBis
			String: sDiskKataOUT
			!
			Date/Time: dBankDate
			Number: nBaseVal
			!
			String: sOdinBis
			Number: nLenOdinBis
			!
			String: syyyyMMddPath
			!
			String: sVERS
			String: smVERS[*]
			String: sThisWndVersion
			String: sTmp
		Message Actions
			On SAM_Create
				Call SalCenterWindow(hWndForm)
				Call SalWaitCursor(TRUE)
				Set sUserid = Str(GetUserId())
				! Set dBankDate = GetBankDate()
				Set nBaseVal = GetBaseVal()
				Set sThisWndVersion = '1.1'
				Call SalSetWindowText(hWndForm, 'ЗАКЛЮЧНI виписки "електроним" клієнтам.(v.'||sThisWndVersion||')'  )
				Set nKLI = -1
				If SqlPrepareAndExecute(hSql(), T("
						   SELECT c.sab,c.rnk,c.nmk,c.okpo,nvl(k.VERSION,'0.0')
						   INTO :sSAB,:nRNK,:sNMK,:sOKPO,:sVERS
						   FROM customer c, klp_version k
						   WHERE c.sab is not null and c.stmt=5 and c.rnk=k.rnk(+)
						   ORDER BY c.sab"))
					Call SalArraySetUpperBound(smSAB, 1, -1)
					Call SalArraySetUpperBound(nmRNK, 1, -1)
					Call SalArraySetUpperBound(smNMK, 1, -1)
					Call SalArraySetUpperBound(smOKPO, 1, -1)
					Call SalArraySetUpperBound(smTIMES, 1, -1)
					Call SalArraySetUpperBound(smVERS, 1, -1)
					Set nKLI = -1
					While SqlFetchNext(hSql(), nFetchRes)
						Set nKLI = nKLI + 1
						Set smSAB[nKLI] = sSAB
						Set nmRNK[nKLI] = nRNK
						Set smNMK[nKLI] = SalStrTrimX(sNMK)
						Set smOKPO[nKLI] = SalStrTrimX(sOKPO)
						Set smVERS[nKLI] = SalStrTrimX(sVERS)
				If nKLI = -1
					Call SalSendMsg(winoSbb_tst, SAM_Destroy, 0, 0)
				Call SalWaitCursor(FALSE)
			On SAM_CreateComplete
				! Set sDiskKataOUT = GetElKDirOUT() ! получить путь к OUT электронных клиентов
				! Set sArchPath = GetArchiv_KB()    ! получить путь к архиву файлов электронных клиентов
				! Set sTempPath = GetTempKPath()    ! получить путь временных файлов КЛИЕНТ-БАНК
				! Set bIni = FALSE
				! Call OtborLS()
				! Call SalDestroyWindow(hWndForm)
