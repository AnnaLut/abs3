.head 0 +  Application Description: ! Dynamic Filter Class Library
! Библиотека классов динамического фильтра
! DEN, Copyright (C) УНИТИ-Барс, 1999-2000
! ----------------------------------------
.head 1 -  Outline Version - 4.0.26
.head 1 +  Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000B10000 002C000000020000 0003000000FFFFFF FFFFFFFFFFF8FFFF
0040: FFE2FFFFFFFFFFFF FF000000007C0200 004D010000010000 0000000000010000
0060: 000F4170706C6963 6174696F6E497465 6D0100000007436C 6173736573
.enddata
.head 2 -  Outline Window State: Normal
.head 2 +  Outline Window Location and Size
.data VIEWINFO
0000: 6600040003002D00 0000000000000000 0000B71E5D0E0500 1D00FFFF4D61696E
0020: 0000000000000000 0000000000000000 0000003B00010000 00000000000000E9
0040: 1E800A00008600FF FF496E7465726E61 6C2046756E637469 6F6E730000000000
0060: 0000000000000000 0000000000003200 0100000000000000 0000E91E800A0000
0080: DF00FFFF56617269 61626C6573000000 0000000000000000 0000000000000000
00A0: 3000010000000000 00000000F51E100D 0000F400FFFF436C 6173736573000000
00C0: 0000000000000000 0000000000000000
.enddata
.data VIEWSIZE
0000: D000
.enddata
.head 3 -  Left:   -0.013"
.head 3 -  Top:    0.0"
.head 3 -  Width:  8.013"
.head 3 -  Height: 4.969"
.head 2 +  Options Box Location
.data VIEWINFO
0000: 0318B80BB80B2500
.enddata
.data VIEWSIZE
0000: 0800
.enddata
.head 3 -  Visible? Yes
.head 3 -  Left:   4.15"
.head 3 -  Top:    1.885"
.head 3 -  Width:  3.8"
.head 3 -  Height: 2.073"
.head 2 +  Class Editor Location
.head 3 -  Visible? No
.head 3 -  Left:   0.575"
.head 3 -  Top:    0.094"
.head 3 -  Width:  5.063"
.head 3 -  Height: 2.719"
.head 2 +  Tool Palette Location
.head 3 -  Visible? No
.head 3 -  Left:   6.388"
.head 3 -  Top:    0.729"
.head 2 -  Fully Qualified External References? Yes
.head 2 -  Reject Multiple Window Instances? No
.head 2 -  Enable Runtime Checks Of External References? Yes
.head 2 -  Use Release 4.0 Scope Rules? No
.head 1 +  Libraries
.head 2 -  Dynalib: absapi.apd
.head 2 -  Dynalib: Global.apd
.head 2 -  File Include: vtstr.apl
.head 2 -  File Include: Genfcls.apl
.head 1 +  Global Declarations
.head 2 +  Window Defaults
.head 3 +  Tool Bar
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Form Window
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Dialog Box
.head 4 -  Display Style? Etched
.head 4 -  Font Name: MS Sans Serif
.head 4 -  Font Size: 8
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Top Level Table Window
.head 4 -  Font Name: Arial Cyr
.head 4 -  Font Size: 9
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Window Color
.head 3 +  Data Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Multiline Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Spin Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Background Text
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Pushbutton
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Radio Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Check Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Option Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Group Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Child Table Window
.head 4 -  Font Name: Arial Cyr
.head 4 -  Font Size: 9
.head 4 -  Font Enhancement: Bold
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: System Window Color
.head 3 +  List Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Combo Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Line
.head 4 -  Line Color: Use Parent
.head 3 +  Frame
.head 4 -  Border Color: 3D Shadow Color
.head 4 -  Background Color: 3D Face Color
.head 3 +  Picture
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 2 +  Formats
.head 3 -  Number: 0'%'
.head 3 -  Number: #0
.head 3 -  Number: ###000
.head 3 -  Number: ###000;'($'###000')'
.head 3 -  Date/Time: hh:mm:ss AMPM
.head 3 -  Date/Time: M/d/yy
.head 3 -  Date/Time: MM-dd-yy
.head 3 -  Date/Time: dd-MMM-yyyy
.head 3 -  Date/Time: MMM d, yyyy
.head 3 -  Date/Time: MMM d, yyyy hh:mm AMPM
.head 3 -  Date/Time: MMMM d, yyyy hh:mm AMPM
.head 2 +  External Functions
.head 2 +  Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
.head 3 -  System
.head 3 +  User
.head 4 -  !
.head 4 -  String: SQLKeyWords = 'SELECT;UPDATE;INSERT;DELETE;INTO;VALUES;FROM;WHERE;GROUP;ORDER;BY;SET'
.head 4 -  String: LogicalOperId = 'AND;OR '
.head 4 -  String: LogicalOperSm = 'И  ;ИЛИ'
.head 4 -  String: LogicalSignId = 'IS NULL;IS NOT NULL;LIKE ;NOT LIKE;IN     ;NOT IN    '
.head 4 -  String: LogicalSignSm = 'ПУСТОЙ ;НЕ ПУСТОЙ  ;ПОХОЖ;НЕ ПОХОЖ;ОДИН ИЗ;НЕ ОДИН ИЗ'
.head 4 -  !
.head 4 -  Boolean: FILTER_StandAlone = TRUE
.head 4 -  Boolean: FILTER_Complex    = FALSE
.head 2 +  Resources
.head 2 -  Variables
.head 2 +  Internal Functions
.head 2 -  Named Menus
.head 2 +  Class Definitions
.data RESOURCE 0 0 1 25218691
0000: 37010000A2000000 0000000000000000 0200000200FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F22003C00 000A630047656E46
0040: 696C746500727400 00000400001E0002 0400C10001000000 3F8001F800000037
0060: 040001F00D000000 FF1F110000DC0002 00FF7F1570000000 0100FFFF21018022
0080: 000001C200000B63 47F8444669B30004 00770200F601004F 800100FE008D0400
00A0: 010DFD00FF371100 02F700FFDF15DC00 0100FF7F
.enddata
.head 3 +  Functional Class: cGenSemantic
.head 4 -  Description: структура описания семантической связи для FK
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sSTabName    ! Таблица храненияемантики
.head 5 -  String: sSColName    ! Поле ключ связи 
.head 5 -  String: sSSemantic   ! Поле - семантика ключа
.head 4 -  Functions
.head 3 +  Functional Class: cGenAttach
.head 4 -  Description: структура описания отношения для полей "чужых" таблиц
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sHColName    ! колонка фильтруемой таблицы для связи
.head 5 -  String: sRTabAlias   ! псевдоним чужой таблицы
.head 5 -  String: sRColName    ! колонка чужой таблицы для связи
.head 5 -  ! Имя чужой таблицы находится в основном поле тэга sQueryTab
.head 5 -  ! Имя своей таблицы находится в классе фильтра
.head 4 -  Functions
.head 3 +  Functional Class: cGenFilterTag
.head 4 -  Description: Общий класс поля фильтра
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sQueryCol    ! поле таблицы участвующее в запросе
.head 5 -  String: sQueryTab    ! таблица поля
.head 5 -  : S      ! структура связи для семантики
.head 6 -  Class: cGenSemantic
.head 5 -  : R        ! структура связи для отношения
.head 6 -  Class: cGenAttach
.head 5 -  String: sTagName ! наименование тэга
.head 5 -  String: sTagType ! тип данных поля участвующего в запросе
.head 4 +  Functions
.head 5 +  Function: GetAttachedTagWhereClause
.head 6 -  Description: Возвращает строку для добавление в WHERE часть
запроса для присоедененной колонки
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: strHostAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sWhereClause
.head 6 +  Actions
.head 7 -  Set sWhereClause = ''
.head 7 +  If R.sRTabAlias != ''
.head 8 -  Set sWhereClause = R.sRTabAlias
.head 7 +  Else
.head 8 -  Set sWhereClause = sQueryTab
.head 7 -  Set sWhereClause = sWhereClause || '.' || R.sRColName || ' (+) = ' || 
strHostAlias || '.' || R.sHColName
.head 7 -  Return sWhereClause
.head 5 +  Function: isAttached
.head 6 -  Description: Проверяет тип колонки (присоедененная)
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return ( R.sRColName !='' )
.head 5 +  Function: isForeignKey
.head 6 -  Description: Проверяет тип колонки (чужой ключ)
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return ( S.sSTabName != '' )
.head 5 +  Function: CastValueToType
.head 6 -  Description: приводит значение тэга к его типу
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: sVal
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sCVal
.head 6 +  Actions
.head 7 -  Set sCVal = ''
.head 7 +  If SalStrLeftX( sVal, 1 ) = '@'
.head 8 -  Set sCVal = SalStrMidX( sVal, 1, SalStrLength( sVal )-1 )
.head 7 +  Else
.head 8 +  If sTagType = 'C'
.head 9 -  Set sCVal = '\'' || sVal || '\''
.head 8 +  Else If sTagType = 'D'
.head 9 -  Set sVal = SalStrMidX(sVal,3,2) || "/" || SalStrLeftX(sVal,2) || "/" || SalStrMidX(sVal,6,4)
.head 9 -  Set sCVal = DateInQuery( sVal )
.head 8 +  Else
.head 9 -  Set sCVal = sVal
.head 7 -  Return sCVal
.head 3 -  !
.head 3 +  Functional Class: cGenFilterString
.head 4 -  Description: строка фильтра
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sLOper       ! логическая операции
.head 5 -  Number: nColId       ! код поля
.head 5 -  String: sColName     ! имя поля
.head 5 -  Number: nRTabId      ! код связной таблицы
.head 5 -  String: sRTabName    ! имя связной таблицы
.head 5 -  String: sLSign       ! логическоий оператор
.head 5 -  String: sValue       ! значение фильтра
.head 5 -  String: sSemantic    ! семантика фильтра
.head 4 -  Functions
.head 3 -  !
.head 3 +  Functional Class: cGenFilter
.head 4 -  Description: Общий класс фильтра
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sFTabName		! Имя фильтруемой таблица
.head 5 -  String: sFTabAlias		! Псевдоним фильтруемой таблицы
.head 5 -  Number: nFTabId			! Id таблицы в мета базе
.head 5 -  : Tag[*]		! Список тэгов фильтра
.head 6 -  Class: cGenFilterTag
.head 5 -  Number: nTagNum			! Количест тэгов в фильтре
.head 5 -  : FStr[*]	! Cтроки в фильтре
.head 6 -  Class: cGenFilterString
.head 5 -  Number: nStrNum			! Количество строк в фильтре
.head 5 -  !
.head 5 -  Boolean: fSystemFilterInUse	! Системный фильтр в работе
.head 5 -  String: strSysFromClause	! Системное From
.head 5 -  String: strSysWhereClause	! Системное Where
.head 5 -  Number: nSysRow			! Активная строка системного фильтра
.head 5 -  !
.head 5 -  Boolean: fUserFilterInUse	! Пользовательский фильтр в работе
.head 5 -  String: strUserFromClause	! Пользовательское From
.head 5 -  String: strUserWhereClause	! Пользовательское Where
.head 5 -  Number: nUserRow		! Активная строка пользовательского фильтр
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description: Инициализация фильтра для таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sTableName
.head 7 -  String: sTableAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  : cMain
.head 8 -  Class: cABSConnect
.head 7 -  : cAux
.head 8 -  Class: cABSConnect
.head 7 -  !
.head 7 -  Number: nFetchRes
.head 7 -  !
.head 7 -  Number: nColId
.head 7 -  Number: nTabId
.head 7 -  String: sCol
.head 7 -  String: sType
.head 7 -  String: sKey
.head 7 -  String: sATab
.head 7 -  String: sATabA
.head 7 -  String: sAATab
.head 7 -  String: sAKey
.head 7 -  String: sAAKey
.head 7 -  String: sACol
.head 7 -  String: sAType
.head 7 -  String: sName
.head 7 -  Number: nShowPos
.head 7 -  Boolean: fExtra
.head 7 -  !
.head 7 -  String: sSQL
.head 6 +  Actions
.head 7 -  Call XConnectGetParams(cMain)
.head 7 +  If NOT cMain.Connect()
.head 8 -  Return FALSE
.head 7 +  If NOT cAux.Clone(cMain, TRUE)
.head 8 -  Call cMain.Disconnect()
.head 8 -  Return FALSE
.head 7 -  Set sFTabName = SalStrUpperX(sTableName)
.head 7 -  Set sFTabAlias = SalStrTrimX(sTableAlias)
.head 7 -  Set nTagNum = 0
.head 7 -  Set nStrNum = 0
.head 7 -  Set nSysRow  = -1
.head 7 -  Set nUserRow = -1
.head 7 +  If NOT SqlPrepareAndExecute(cMain.hSql(), 'SELECT tabid INTO :nFTabId FROM meta_tables WHERE tabname=:sFTabName')
.head 8 -  Call cMain.Disconnect()
.head 8 -  Call cAux.Disconnect()
.head 8 -  Return FALSE
.head 7 -  Call SqlFetchNext(cMain.hSql(), nFetchRes)
.head 7 +  If nFTabId = NUMBER_Null
.head 8 -  Call cMain.Disconnect()
.head 8 -  Call cAux.Disconnect()
.head 8 -  Return FALSE
.head 7 -  !
.head 7 -  ! Поищем колонки пригодные для фильтра и принадлежащие самой таблице
.head 7 -  !
.head 7 -  Set sSQL = 
'SELECT c.colid, c.colname, c.semantic, c.coltype, c.extrnval, c.showpos 
   INTO :nColId, :sCol, :sName, :sType, :fExtra, :nShowPos
   FROM meta_columns c 
  WHERE c.tabid = :nFTabId AND c.showin_fltr = 1
  ORDER BY 6'
.head 7 +  If NOT SqlPrepareAndExecute(cMain.hSql(), T(sSQL)) 
.head 8 -  Call cMain.Disconnect()
.head 8 -  Call cAux.Disconnect()
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(cMain.hSql(), nFetchRes)
.head 8 +  If NOT fExtra OR fExtra = NUMBER_Null
.head 9 -  Call NewTag(sCol, sFTabName, VisStrSubstitute(sName,'~',' '), sType)
.head 8 +  Else
.head 9 -  Set sSQL = 'SELECT c.colname, t.tabname, s.colname 
 INTO :sAKey, :sATab, :sACol
 FROM meta_extrnval e, meta_columns c, meta_columns s,
      meta_tables t
 WHERE e.srctabid=t.tabid AND 
       e.srccolid=c.colid AND e.srctabid=c.tabid AND
       e.srctabid=s.tabid AND s.instnssemantic=1 AND
       e.tabid=:nFTabId   AND e.colid=:nColId'
.head 9 +  If NOT SqlPrepareAndExecute(cAux.hSql(), T(sSQL)) 
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 +  If NOT SqlFetchNext(cAux.hSql(), nFetchRes)
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 -  Call NewTagFK(sCol, VisStrSubstitute(sName,'~',' '), sType, sATab, sAKey, sACol)
.head 7 -  !
.head 7 -  ! А тут будем искать колонки примкнувшые к нашей таблице
.head 7 -  !
.head 7 -  Set sSQL = 
'SELECT var_colid, av.colname, cond_tag, av.coltype, av.extrnval, ta.tabname, ta.tabid, 
        addtabalias, hc.colname, ac.colname
   INTO :nColId, :sCol, :sName, :sType, :fExtra, :sATab, :nTabId, :sATabA, :sKey, :sAKey
   FROM meta_browsetbl, meta_tables ta, meta_columns hc, meta_columns ac, meta_columns av
  WHERE ta.tabid = addtabid
    AND hc.tabid = hosttabid AND hc.colid = hostcolkeyid
    AND ac.tabid = addtabid  AND ac.colid = addcolkeyid
    AND av.tabid = addtabid  AND av.colid = var_colid
    AND addtabid IS NOT NULL AND hosttabid = :nFTabId'
.head 7 +  If NOT SqlPrepareAndExecute( cMain.hSql(), T(sSQL))
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(cMain.hSql(), nFetchRes)
.head 8 +  If NOT fExtra OR fExtra = NUMBER_Null
.head 9 -  Call NewTagAttach( sCol, VisStrSubstitute(sName,'~',' '), sType, sATab, sATabA, sKey, sAKey )
.head 8 +  Else
.head 9 -  Set sSQL = 'SELECT c.colname, t.tabname, s.colname 
 INTO :sAAKey, :sAATab, :sACol
 FROM meta_extrnval e, meta_columns c, meta_columns s,
      meta_tables t
 WHERE e.srctabid=t.tabid AND 
       e.srccolid=c.colid AND e.srctabid=c.tabid AND 
       e.srctabid=s.tabid AND s.instnssemantic=1 AND
       e.tabid=:nTabId    AND e.colid=:nColId'
.head 9 +  If NOT SqlPrepareAndExecute(cAux.hSql(), T(sSQL)) 
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 +  If NOT SqlFetchNext(cAux.hSql(), nFetchRes)
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 -  Call NewTagAttachFK( sCol, VisStrSubstitute(sName,'~',' '), sType, sATab, sATabA, sKey, sAKey, sAATab, sAAKey, sACol )
.head 7 -  !
.head 7 -  Set fSystemFilterInUse = FALSE
.head 7 -  Set fUserFilterInUse   = FALSE
.head 7 -  !
.head 7 -  Call cMain.Disconnect()
.head 7 -  Call cAux.Disconnect()
.head 7 -  Return TRUE
.head 5 +  Function: SaveFilterDB
.head 6 -  Description: Сохранить фильтр в базе данных
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nUserId
.head 7 -  String: strFilterName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  : cSave
.head 8 -  Class: cABSConnect
.head 7 -  !
.head 7 -  String: sFromClause
.head 7 -  Long String: sWhereClause
.head 7 -  !
.head 7 -  Boolean: fRet
.head 6 +  Actions
.head 7 -  Set fRet = TRUE
.head 7 -  Call XConnectGetParams( cSave )
.head 7 +  If NOT cSave.Connect()
.head 8 -  Return FALSE
.head 7 -  Set sFromClause  = GetFilterFromClause( FILTER_StandAlone )
.head 7 -  ! Sabstitute table aliase with pseudo name
.head 7 -  Set sWhereClause = VisStrSubstitute( GetFilterWhereClause( FILTER_StandAlone ), ' '||sFTabAlias||'.', ' $~~ALIAS~~$.' )
.head 7 -  Call SqlSetLongBindDatatype( 5, 22 )
.head 7 +  If NOT SqlPrepareAndExecute(cSave.hSql(), 
'INSERT INTO dyn_filter 
 (filter_id, tabid, userid, semantic, from_clause, where_clause) VALUES 
 (0, :nFTabId, :nUserId, :strFilterName, :sFromClause, :sWhereClause)')
.head 8 -  Call SqlRollback( cSave.hSql() )
.head 8 -  Set fRet = FALSE
.head 7 -  Call SqlCommitEx( cSave.hSql(), 'Сохранен пользовательский фильтр <' || strFilterName || '>' )
.head 7 -  Call cSave.Disconnect()
.head 7 -  Return fRet
.head 5 +  Function: isTagListEmpty
.head 6 -  Description: Есть ли жизнь на марсе? В смысле: тэги фильтра описаны?
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return (nTagNum=0)
.head 5 +  Function: isFilterEmpty
.head 6 -  Description: А фильтр задали?
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return (nStrNum=0)
.head 5 -  !
.head 5 +  Function: NewTag
.head 6 -  Description: Добавляет тэг фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sQTab    ! таблица поля
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].sQueryCol = SalStrUpperX(sQCol)
.head 7 -  Set Tag[nTagNum].sQueryTab = SalStrUpperX(sQTab)
.head 7 -  Set Tag[nTagNum].sTagName = SalStrUpperX(sName)
.head 7 -  Set Tag[nTagNum].sTagType = SalStrUpperX(sType)
.head 7 -  Set nTagNum = nTagNum + 1
.head 7 -  Return TRUE
.head 5 +  Function: NewTagFK
.head 6 -  Description: Добавить тэг - FK
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 7 -  !
.head 7 -  String: sATab    ! таблица семантики
.head 7 -  String: sACol    ! колонка ключ связи
.head 7 -  String: sSCol    ! колонка семантики
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].S.sSTabName = SalStrUpperX(sATab)
.head 7 -  Set Tag[nTagNum].S.sSColName = SalStrUpperX(sACol)
.head 7 -  Set Tag[nTagNum].S.sSSemantic = SalStrUpperX(sSCol)
.head 7 -  !
.head 7 -  Return NewTag(sQCol, sFTabName, sName, sType)
.head 5 +  Function: NewTagAttach
.head 6 -  Description: Добавить тэг с полем чужой таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 7 -  !
.head 7 -  String: sATab    ! чужая таблица
.head 7 -  String: sATabA   ! псевдоним чужой таблицы
.head 7 -  String: sHCol    ! свое поле-ключ
.head 7 -  String: sACol    ! чужое поле-ключ
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].R.sHColName = SalStrUpperX(sHCol)
.head 7 -  Set Tag[nTagNum].R.sRTabAlias = sATabA
.head 7 -  Set Tag[nTagNum].R.sRColName = SalStrUpperX(sACol)
.head 7 -  !
.head 7 -  Return NewTag(sQCol, sATab, sName, sType)
.head 5 +  Function: NewTagAttachFK
.head 6 -  Description: Добавить тэг с полем чужой таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 7 -  !
.head 7 -  String: sATab    ! чужая таблица
.head 7 -  String: sATabA   ! псевдоним чужой таблицы
.head 7 -  String: sHCol    ! свое поле-ключ
.head 7 -  String: sACol    ! чужое поле-ключ
.head 7 -  !
.head 7 -  String: sSTab    ! Таблица семантики
.head 7 -  String: sSKey    ! колонка связи (PK)
.head 7 -  String: sSCol    ! колонка семантики
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].R.sHColName = SalStrUpperX(sHCol)
.head 7 -  Set Tag[nTagNum].R.sRTabAlias = sATabA
.head 7 -  Set Tag[nTagNum].R.sRColName = SalStrUpperX(sACol)
.head 7 -  !
.head 7 -  Set Tag[nTagNum].S.sSTabName = SalStrUpperX(sSTab)
.head 7 -  Set Tag[nTagNum].S.sSColName = SalStrUpperX(sSKey)
.head 7 -  Set Tag[nTagNum].S.sSSemantic = SalStrUpperX(sSCol)
.head 7 -  !
.head 7 -  Return NewTag(sQCol, sATab, sName, sType)
.head 5 -  !
.head 5 +  Function: GetTagByKey
.head 6 -  Description: Получить индех тэга в массиве по ключу
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: sColName ! Имя колонки
.head 7 -  String: sTabName ! Имя таблицы по связи
.head 7 -  ! для полей таблицы-субъекта второй параметр ВСЕГДА пустой
.head 7 -  ! для полей таблиц связаных с таблицей-субъетом - имя таблицы
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIterator
.head 7 -  Boolean: fFound
.head 6 +  Actions
.head 7 -  Set nIterator = 0
.head 7 -  Call SalStrUpper( sColName, sColName )
.head 7 -  Call SalStrUpper( sTabName, sTabName )
.head 7 -  Set fFound = FALSE
.head 7 +  Loop
.head 8 +  If nIterator >= nTagNum
.head 9 -  Break
.head 8 +  If Tag[nIterator].sQueryCol = sColName AND
   Tag[nIterator].sQueryTab = sTabName
.head 9 -  Set fFound = TRUE
.head 9 -  Break
.head 8 -  Set nIterator = nIterator + 1
.head 7 +  If fFound
.head 8 -  Return nIterator
.head 7 +  Else
.head 8 -  Return -1
.head 5 +  Function: GetTagByName
.head 6 -  Description: Получить индех тэга в массиве по наименованию
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: sName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIterator
.head 7 -  Boolean: fFound
.head 6 +  Actions
.head 7 -  Set nIterator = 0
.head 7 -  Set fFound = FALSE
.head 7 +  Loop
.head 8 +  If nIterator >= nTagNum
.head 9 -  Break
.head 8 +  If Tag[nIterator].sTagName = sName
.head 9 -  Set fFound = TRUE
.head 9 -  Break
.head 8 -  Set nIterator = nIterator + 1
.head 7 +  If fFound
.head 8 -  Return nIterator
.head 7 +  Else
.head 8 -  Return -1
.head 5 +  Function: TranslateLOper
.head 6 -  Description: Транслировать код логической опрации в семантику и обратно
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: sOp
.head 7 -  Boolean: fDirect
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nPos
.head 7 -  String: sOp2
.head 7 -  !
.head 7 -  String: sPrimary
.head 7 -  String: sSecondary
.head 6 +  Actions
.head 7 -  Set sOp =  SalStrTrimX(SalStrUpperX(sOp))
.head 7 +  If fDirect
.head 8 -  Set sPrimary   = LogicalOperId
.head 8 -  Set sSecondary = LogicalOperSm
.head 7 +  Else
.head 8 -  Set sPrimary   = LogicalOperSm
.head 8 -  Set sSecondary = LogicalOperId
.head 7 -  !
.head 7 -  Set nPos = SalStrScan(sPrimary, sOp)
.head 7 +  If nPos != -1
.head 8 -  Call SalStrRight( sSecondary, SalStrLength( sSecondary )-nPos, sSecondary)
.head 8 -  Set sOp2 = SalStrLeftX( sSecondary, SalStrScan( sSecondary || ';', ';'))
.head 7 +  Else
.head 8 -  Set sOp2 = sOp
.head 7 -  Return sOp2
.head 5 +  Function: TranslateLSign
.head 6 -  Description: Транслировать код логического знака в семантику и обратно
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: Sign
.head 7 -  Boolean: fDirect
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nPos
.head 7 -  String: sSign2
.head 7 -  !
.head 7 -  String: sPrimary
.head 7 -  String: sSecondary
.head 6 +  Actions
.head 7 -  Set Sign =  SalStrTrimX(SalStrUpperX(Sign))
.head 7 +  If fDirect
.head 8 -  Set sPrimary   = LogicalSignId
.head 8 -  Set sSecondary = LogicalSignSm
.head 7 +  Else
.head 8 -  Set sPrimary   = LogicalSignSm
.head 8 -  Set sSecondary = LogicalSignId
.head 7 -  !
.head 7 -  Set nPos = SalStrScan(sPrimary, Sign)
.head 7 +  If nPos != -1
.head 8 -  Call SalStrRight( sSecondary, SalStrLength( sSecondary )-nPos, sSecondary )
.head 8 -  Set sSign2 = SalStrLeftX( sSecondary, SalStrScan( sSecondary || ';', ';'))
.head 7 +  Else
.head 8 -  Set sSign2 = Sign
.head 7 -  Return sSign2
.head 5 +  Function: CheckFilter
.head 6 -  Description: Проверить синтаксис фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: ni
.head 7 -  Number: nParanteses
.head 7 -  Boolean: fIsSingleOp
.head 7 -  Boolean: fIsError
.head 6 +  Actions
.head 7 -  Set ni = 0
.head 7 -  Set nParanteses = 0
.head 7 -  Set fIsSingleOp = FALSE
.head 7 -  Set fIsError = FALSE
.head 7 +  While ni < nStrNum AND NOT fIsError
.head 8 +  If FStr[ni].sLOper = '('
.head 9 -  Set nParanteses = nParanteses + 1
.head 8 +  If FStr[ni].sLOper = ')'
.head 9 -  Set nParanteses = nParanteses - 1
.head 8 -  !
.head 8 +  If FStr[ni].sLOper = ')' AND FStr[ni].sColName != ''
.head 9 -  Set fIsError = TRUE
.head 8 +  If (fIsSingleOp AND FStr[ni].sLOper != '(') OR
   (NOT fIsSingleOp AND FStr[ni].sLOper = '(')
.head 9 -  Set fIsError = TRUE
.head 8 -  !
.head 8 +  If FStr[ni].sLOper != ')' AND FStr[ni].sColName = ''
.head 9 -  Set fIsSingleOp = TRUE
.head 8 +  Else
.head 9 -  Set fIsSingleOp = FALSE
.head 8 -  Set ni = ni + 1
.head 7 +  If nParanteses != 0
.head 8 -  Set fIsError = TRUE
.head 7 -  Return NOT fIsError
.head 5 -  !
.head 5 +  Function: NewString
.head 6 -  Description: Создать новую строку фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sLOper       ! семантика логической операции
.head 7 -  Number: nColId       ! код поля
.head 7 -  String: sColName ! имя поля
.head 7 -  Number: nRTabId      ! код связной таблицы
.head 7 -  String: sRTabName    ! имя связной таблицы
.head 7 -  String: sLSign       ! семантика логического оператора
.head 7 -  String: sValue       ! значение фильтра
.head 7 -  String: sSemantic    ! семантика фильтра
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set FStr[nStrNum].nColId = nColId
.head 7 -  Set FStr[nStrNum].nRTabId = nRTabId
.head 7 -  Set FStr[nStrNum].sColName = sColName
.head 7 -  Set FStr[nStrNum].sRTabName = sRTabName
.head 7 -  Set FStr[nStrNum].sLOper = sLOper
.head 7 -  Set FStr[nStrNum].sLSign = sLSign
.head 7 -  Set FStr[nStrNum].sValue = sValue
.head 7 -  Set FStr[nStrNum].sSemantic = sSemantic
.head 7 -  Set nStrNum = nStrNum + 1
.head 7 -  Return TRUE
.head 5 +  Function: GetFilterWhereClause
.head 6 -  Description: Получить часть запроса where из заданого фильтра
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: ni
.head 7 -  Number: nTagi
.head 7 -  String: strField
.head 7 -  String: sWhere
.head 7 -  String: sRWhere
.head 6 +  Actions
.head 7 -  Set sWhere  = ''
.head 7 -  Set sRWhere = ''
.head 7 -  Set ni = 0
.head 7 +  While ni < nStrNum
.head 8 -  Set sWhere = sWhere || FStr[ni].sLOper || ' '
.head 8 +  If FStr[ni].sLOper != ')'
.head 9 -  Set nTagi = GetTagByKey( SalStrTrimX(FStr[ni].sColName), SalStrTrimX(FStr[ni].sRTabName))
.head 9 +  If nTagi != -1
.head 10 -  Set strField = ''
.head 10 +  If Tag[nTagi].isAttached( )
.head 11 +  If Tag[nTagi].R.sRTabAlias != ''
.head 12 -  Set strField = Tag[nTagi].R.sRTabAlias 
.head 11 +  Else
.head 12 -  Set strField = Tag[nTagi].sQueryTab 
.head 11 -  Set strField = strField || '.' || Tag[nTagi].sQueryCol
.head 11 -  !
.head 11 -  ! Lets check special names of columns to apply sys function
.head 11 -  !
.head 11 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"  
.head 12 -  Set strField = 'ABS( ' || strField || ' )'
.head 11 +  Else If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'LIKE' OR
        SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT LIKE'
.head 12 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 11 -  !
.head 11 +  If sFTabAlias != ''
.head 12 -  Set sRWhere = sRWhere || ' AND ' || Tag[nTagi].GetAttachedTagWhereClause( sFTabAlias )
.head 11 +  Else
.head 12 -  Set sRWhere = sRWhere || ' AND ' || Tag[nTagi].GetAttachedTagWhereClause( sFTabName )
.head 10 +  Else
.head 11 +  If sFTabAlias != ''
.head 12 -  Set strField = sFTabAlias || '.' 
.head 11 -  Set strField = strField || Tag[nTagi].sQueryCol 
.head 11 -  !
.head 11 -  ! Lets check special names of columns to apply sys function
.head 11 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"  
.head 12 -  Set strField = 'ABS( ' || strField || ' )'
.head 11 +  Else If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'LIKE' OR
        SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT LIKE'
.head 12 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 11 -  !
.head 10 -  !
.head 10 -  Set sWhere = sWhere || strField 
.head 10 -  !
.head 10 +  If SalStrTrimX(FStr[ni].sLSign) = '=' AND Tag[nTagi].sTagType = 'D'
.head 11 -  Set sWhere = sWhere || ' BETWEEN ' || Tag[nTagi].CastValueToType( FStr[ni].sValue ) || 
' AND ' || Tag[nTagi].CastValueToType( FStr[ni].sValue ) || ' + 0.9999 '
.head 10 +  Else
.head 11 -  Set sWhere = sWhere || ' ' || FStr[ni].sLSign || ' '
.head 11 -  !
.head 11 +  If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) != 'IS NULL' AND
   SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) != 'IS NOT NULL'  
.head 12 +  If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'LIKE' OR
   SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT LIKE'
.head 13 -  Set sWhere = sWhere || '\'' ||
SalStrUpperX(VisStrSubstitute(VisStrSubstitute( FStr[ni].sValue,'*','%' ), '?','_')) || '\' '
.head 12 +  Else If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'IN' OR
        SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT IN'
.head 13 -  Set sWhere = sWhere || ' ( ' || FStr[ni].sValue || ' ) '
.head 12 +  Else
.head 13 -  Set sWhere = sWhere || Tag[nTagi].CastValueToType( FStr[ni].sValue )|| ' '
.head 8 -  Set ni = ni + 1
.head 7 +  If sWhere != ''
.head 8 -  Set sWhere = '( ' || sWhere || ') ' || sRWhere
.head 7 -  !
.head 7 +  If NOT fStandAlone
.head 8 -  ! Sabstitute Pseudo aliase name to real value from variables
.head 8 +  If fSystemFilterInUse AND strSysWhereClause != ''
.head 9 +  If sWhere
.head 10 -  Set sWhere = sWhere || ' AND ( ' || VisStrSubstitute( strSysWhereClause, '$~~ALIAS~~$', sFTabAlias ) || ' ) '
.head 9 +  Else
.head 10 -  Set sWhere = VisStrSubstitute( strSysWhereClause, '$~~ALIAS~~$', sFTabAlias )
.head 8 -  !
.head 8 +  If fUserFilterInUse AND strUserWhereClause != ''
.head 9 +  If sWhere
.head 10 -  Set sWhere = sWhere || ' AND ( ' || VisStrSubstitute( strUserWhereClause, '$~~ALIAS~~$', sFTabAlias ) || ' ) '
.head 9 +  Else
.head 10 -  Set sWhere = VisStrSubstitute( strUserWhereClause, '$~~ALIAS~~$', sFTabAlias )
.head 7 -  !
.head 7 -  Return sWhere
.head 5 +  Function: GetFilterFromClause
.head 6 -  Description: Получить список дополнительных таблиц из построенного
запроса
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: ni
.head 7 -  Number: nTagi
.head 7 -  String: sFrom
.head 7 -  String: sTable
.head 6 +  Actions
.head 7 -  Set sFrom = ''
.head 7 -  Set ni = 0
.head 7 +  While ni < nStrNum
.head 8 -  Set nTagi = GetTagByKey( SalStrTrimX(FStr[ni].sColName), SalStrTrimX(FStr[ni].sRTabName) )
.head 8 +  If nTagi != -1
.head 9 +  If Tag[nTagi].isAttached( )
.head 10 -  Set sTable = Tag[nTagi].sQueryTab 
.head 10 +  If Tag[nTagi].R.sRTabAlias != ''
.head 11 -  Set sTable = sTable || ' ' || Tag[nTagi].R.sRTabAlias 
.head 10 -  !
.head 10 +  If SalStrScan( sFrom, sTable ) = -1
.head 11 +  If sFrom != ''
.head 12 -  Set sFrom = sFrom || ', '
.head 11 -  Set sFrom = sFrom || ' ' || sTable || ' '
.head 8 -  Set ni = ni + 1
.head 7 -  !
.head 7 +  If NOT fStandAlone
.head 8 +  If fSystemFilterInUse AND strSysFromClause != ''
.head 9 +  If sFrom
.head 10 -  Call MergeFromClause( sFrom, strSysFromClause )
.head 9 +  Else
.head 10 -  Set sFrom = strSysFromClause
.head 8 -  !
.head 8 +  If fUserFilterInUse AND strUserFromClause != ''
.head 9 +  If sFrom
.head 10 -  Call MergeFromClause( sFrom, strUserFromClause )
.head 9 +  Else
.head 10 -  Set sFrom = strUserFromClause
.head 7 -  !
.head 7 -  Return sFrom
.head 5 +  Function: MergeFromClause
.head 6 -  Description: Слить разные FROM строки
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Receive String: strMainFrom
.head 7 -  String: strAdditionalFrom
.head 6 +  Static Variables
.head 7 -  String: strTblList[*]
.head 7 -  Number: nTblNum
.head 7 -  !
.head 7 -  String: strUppMain
.head 7 -  Number: nI
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If strMainFrom = ''
.head 8 -  Set strMainFrom = strAdditionalFrom
.head 8 -  Return TRUE
.head 7 -  !
.head 7 -  Set strUppMain = SalStrTrimX( SalStrUpperX( strMainFrom ))
.head 7 -  Call SalStrUpper( SalStrTrimX( strAdditionalFrom ), strAdditionalFrom )
.head 7 -  Set nTblNum = SalStrTokenize( strAdditionalFrom, ',', ',', strTblList )
.head 7 +  If nTblNum > 0
.head 8 -  Set nI = 0
.head 8 +  While nI < nTblNum
.head 9 +  If SalStrScan(' '||strUppMain||' ', ' '||SalStrTrimX(strTblList[nI])||' ') = -1
.head 10 -  Set strMainFrom = strMainFrom || ' ,' || strTblList[nI]
.head 9 -  Set nI = nI + 1
.head 7 -  Return TRUE
.head 3 +  Functional Class: cGenFilterEx
.head 4 -  Description: Общий класс фильтра с простым фильтром
.head 4 +  Derived From
.head 5 -  Class: cGenFilter
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  : cSimpleFilter
.head 6 -  Class: cGenSimpleFilter
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description: Инициализация фильтра для таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sTableName
.head 7 -  String: sTableAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  : cMain
.head 8 -  Class: cABSConnect
.head 7 -  : cAux
.head 8 -  Class: cABSConnect
.head 7 -  !
.head 7 -  Number: nFetchRes
.head 7 -  !
.head 7 -  Number: nColId
.head 7 -  Number: nTabId
.head 7 -  String: sCol
.head 7 -  String: sType
.head 7 -  String: sKey
.head 7 -  String: sATab
.head 7 -  String: sATabA
.head 7 -  String: sAATab
.head 7 -  String: sAKey
.head 7 -  String: sAAKey
.head 7 -  String: sACol
.head 7 -  String: sAType
.head 7 -  String: sName
.head 7 -  Number: nShowPos
.head 7 -  Boolean: fExtra
.head 7 -  !
.head 7 -  String: sSQL
.head 6 +  Actions
.head 7 -  Call XConnectGetParams(cMain)
.head 7 +  If NOT cMain.Connect()
.head 8 -  Return FALSE
.head 7 +  If NOT cAux.Clone(cMain, TRUE)
.head 8 -  Call cMain.Disconnect()
.head 8 -  Return FALSE
.head 7 -  Set sFTabName = SalStrUpperX(sTableName)
.head 7 -  Set sFTabAlias = SalStrTrimX(sTableAlias)
.head 7 -  Set nTagNum = 0
.head 7 -  Set nStrNum = 0
.head 7 -  Set nSysRow  = -1
.head 7 -  Set nUserRow = -1
.head 7 +  If NOT SqlPrepareAndExecute(cMain.hSql(), 'SELECT tabid INTO :nFTabId FROM meta_tables WHERE tabname=:sFTabName')
.head 8 -  Call cMain.Disconnect()
.head 8 -  Call cAux.Disconnect()
.head 8 -  Return FALSE
.head 7 -  Call SqlFetchNext(cMain.hSql(), nFetchRes)
.head 7 +  If nFTabId = NUMBER_Null
.head 8 -  Call cMain.Disconnect()
.head 8 -  Call cAux.Disconnect()
.head 8 -  Return FALSE
.head 7 -  !
.head 7 -  ! Поищем колонки пригодные для фильтра и принадлежащие самой таблице
.head 7 -  !
.head 7 -  Set sSQL = 
'SELECT c.colid, c.colname, c.semantic, c.coltype, c.extrnval, c.showpos 
   INTO :nColId, :sCol, :sName, :sType, :fExtra, :nShowPos
   FROM meta_columns c 
  WHERE c.tabid = :nFTabId AND c.showin_fltr = 1
  ORDER BY 6'
.head 7 +  If NOT SqlPrepareAndExecute(cMain.hSql(), T(sSQL)) 
.head 8 -  Call cMain.Disconnect()
.head 8 -  Call cAux.Disconnect()
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(cMain.hSql(), nFetchRes)
.head 8 +  If NOT fExtra OR fExtra = NUMBER_Null
.head 9 -  Call NewTag(sCol, sFTabName, VisStrSubstitute(sName,'~',' '), sType)
.head 8 +  Else
.head 9 -  Set sSQL = 'SELECT c.colname, t.tabname, s.colname 
 INTO :sAKey, :sATab, :sACol
 FROM meta_extrnval e, meta_columns c, meta_columns s,
      meta_tables t
 WHERE e.srctabid=t.tabid AND 
       e.srccolid=c.colid AND e.srctabid=c.tabid AND
       e.srctabid=s.tabid AND s.instnssemantic=1 AND
       e.tabid=:nFTabId   AND e.colid=:nColId'
.head 9 +  If NOT SqlPrepareAndExecute(cAux.hSql(), T(sSQL)) 
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 +  If NOT SqlFetchNext(cAux.hSql(), nFetchRes)
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 -  Call NewTagFK(sCol, VisStrSubstitute(sName,'~',' '), sType, sATab, sAKey, sACol)
.head 7 -  !
.head 7 -  ! А тут будем искать колонки примкнувшые к нашей таблице
.head 7 -  !
.head 7 -  Set sSQL = 
'SELECT var_colid, av.colname, cond_tag, av.coltype, av.extrnval, ta.tabname, ta.tabid, 
        addtabalias, hc.colname, ac.colname
   INTO :nColId, :sCol, :sName, :sType, :fExtra, :sATab, :nTabId, :sATabA, :sKey, :sAKey
   FROM meta_browsetbl, meta_tables ta, meta_columns hc, meta_columns ac, meta_columns av
  WHERE ta.tabid = addtabid
    AND hc.tabid = hosttabid AND hc.colid = hostcolkeyid
    AND ac.tabid = addtabid  AND ac.colid = addcolkeyid
    AND av.tabid = addtabid  AND av.colid = var_colid
    AND addtabid IS NOT NULL AND hosttabid = :nFTabId'
.head 7 +  If NOT SqlPrepareAndExecute( cMain.hSql(), T(sSQL))
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(cMain.hSql(), nFetchRes)
.head 8 +  If NOT fExtra OR fExtra = NUMBER_Null
.head 9 -  Call NewTagAttach( sCol, VisStrSubstitute(sName,'~',' '), sType, sATab, sATabA, sKey, sAKey )
.head 8 +  Else
.head 9 -  Set sSQL = 'SELECT c.colname, t.tabname, s.colname 
 INTO :sAAKey, :sAATab, :sACol
 FROM meta_extrnval e, meta_columns c, meta_columns s,
      meta_tables t
 WHERE e.srctabid=t.tabid AND 
       e.srccolid=c.colid AND e.srctabid=c.tabid AND 
       e.srctabid=s.tabid AND s.instnssemantic=1 AND
       e.tabid=:nTabId    AND e.colid=:nColId'
.head 9 +  If NOT SqlPrepareAndExecute(cAux.hSql(), T(sSQL)) 
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 +  If NOT SqlFetchNext(cAux.hSql(), nFetchRes)
.head 10 -  Call cMain.Disconnect()
.head 10 -  Call cAux.Disconnect()
.head 10 -  Return FALSE
.head 9 -  Call NewTagAttachFK( sCol, VisStrSubstitute(sName,'~',' '), sType, sATab, sATabA, sKey, sAKey, sAATab, sAAKey, sACol )
.head 7 -  !
.head 7 -  ! Инициализация простого фильтра
.head 7 +  If not cSimpleFilter.Init(sFTabName, sFTabAlias, nFTabId)
.head 8 -  Return FALSE
.head 7 -  !
.head 7 -  Set fSystemFilterInUse = FALSE
.head 7 -  Set fUserFilterInUse   = FALSE
.head 7 -  !
.head 7 -  Call cMain.Disconnect()
.head 7 -  Call cAux.Disconnect()
.head 7 -  Return TRUE
.head 5 +  Function: GetFilterWhereClause
.head 6 -  Description: Получить часть запроса where из заданого фильтра
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: ni
.head 7 -  Number: nTagi
.head 7 -  String: strField
.head 7 -  String: sWhere
.head 7 -  String: sRWhere
.head 7 -  String: sTmpWhere
.head 6 +  Actions
.head 7 -  Set sWhere  = ''
.head 7 -  Set sRWhere = ''
.head 7 -  Set ni = 0
.head 7 +  While ni < nStrNum
.head 8 -  Set sWhere = sWhere || FStr[ni].sLOper || ' '
.head 8 +  If FStr[ni].sLOper != ')'
.head 9 -  Set nTagi = GetTagByKey( SalStrTrimX(FStr[ni].sColName), SalStrTrimX(FStr[ni].sRTabName))
.head 9 +  If nTagi != -1
.head 10 -  Set strField = ''
.head 10 +  If Tag[nTagi].isAttached( )
.head 11 +  If Tag[nTagi].R.sRTabAlias != ''
.head 12 -  Set strField = Tag[nTagi].R.sRTabAlias 
.head 11 +  Else
.head 12 -  Set strField = Tag[nTagi].sQueryTab 
.head 11 -  Set strField = strField || '.' || Tag[nTagi].sQueryCol
.head 11 -  !
.head 11 -  ! Lets check special names of columns to apply sys function
.head 11 -  !
.head 11 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"  
.head 12 -  Set strField = 'ABS( ' || strField || ' )'
.head 11 +  Else If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'LIKE' OR
        SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT LIKE'
.head 12 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 11 -  !
.head 11 +  If sFTabAlias != ''
.head 12 -  Set sRWhere = sRWhere || ' AND ' || Tag[nTagi].GetAttachedTagWhereClause( sFTabAlias )
.head 11 +  Else
.head 12 -  Set sRWhere = sRWhere || ' AND ' || Tag[nTagi].GetAttachedTagWhereClause( sFTabName )
.head 10 +  Else
.head 11 +  If sFTabAlias != ''
.head 12 -  Set strField = sFTabAlias || '.' 
.head 11 -  Set strField = strField || Tag[nTagi].sQueryCol 
.head 11 -  !
.head 11 -  ! Lets check special names of columns to apply sys function
.head 11 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"  
.head 12 -  Set strField = 'ABS( ' || strField || ' )'
.head 11 +  Else If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'LIKE' OR
        SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT LIKE'
.head 12 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 11 -  !
.head 10 -  !
.head 10 -  Set sWhere = sWhere || strField 
.head 10 -  !
.head 10 +  If SalStrTrimX(FStr[ni].sLSign) = '=' AND Tag[nTagi].sTagType = 'D'
.head 11 -  Set sWhere = sWhere || ' BETWEEN ' || Tag[nTagi].CastValueToType( FStr[ni].sValue ) || 
' AND ' || Tag[nTagi].CastValueToType( FStr[ni].sValue ) || ' + 0.9999 '
.head 10 +  Else
.head 11 -  Set sWhere = sWhere || ' ' || FStr[ni].sLSign || ' '
.head 11 -  !
.head 11 +  If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) != 'IS NULL' AND
   SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) != 'IS NOT NULL'  
.head 12 +  If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'LIKE' OR
   SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT LIKE'
.head 13 -  Set sWhere = sWhere || '\'' ||
SalStrUpperX(VisStrSubstitute(VisStrSubstitute( FStr[ni].sValue,'*','%' ), '?','_')) || '\' '
.head 12 +  Else If SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'IN' OR
        SalStrTrimX(SalStrUpperX(FStr[ni].sLSign)) = 'NOT IN'
.head 13 -  Set sWhere = sWhere || ' ( ' || FStr[ni].sValue || ' ) '
.head 12 +  Else
.head 13 -  Set sWhere = sWhere || Tag[nTagi].CastValueToType( FStr[ni].sValue )|| ' '
.head 8 -  Set ni = ni + 1
.head 7 +  If sWhere != ''
.head 8 -  Set sWhere = '( ' || sWhere || ') ' || sRWhere
.head 7 -  !
.head 7 -  Set sTmpWhere = cSimpleFilter.getWhere()
.head 7 +  If sTmpWhere
.head 8 -  Set sWhere = IifS(sWhere='', '',  sWhere || ' AND (') || sTmpWhere || IifS(sWhere='', '', ')')
.head 7 -  !
.head 7 +  If NOT fStandAlone
.head 8 -  ! Sabstitute Pseudo aliase name to real value from variables
.head 8 +  If fSystemFilterInUse AND strSysWhereClause != ''
.head 9 +  If sWhere
.head 10 -  Set sWhere = sWhere || ' AND ( ' || VisStrSubstitute( strSysWhereClause, '$~~ALIAS~~$', sFTabAlias ) || ' ) '
.head 9 +  Else
.head 10 -  Set sWhere = VisStrSubstitute( strSysWhereClause, '$~~ALIAS~~$', sFTabAlias )
.head 8 -  !
.head 8 +  If fUserFilterInUse AND strUserWhereClause != ''
.head 9 +  If sWhere
.head 10 -  Set sWhere = sWhere || ' AND ( ' || VisStrSubstitute( strUserWhereClause, '$~~ALIAS~~$', sFTabAlias ) || ' ) '
.head 9 +  Else
.head 10 -  Set sWhere = VisStrSubstitute( strUserWhereClause, '$~~ALIAS~~$', sFTabAlias )
.head 7 -  !
.head 7 -  Return sWhere
.head 3 -  !
.head 3 +  Functional Class: cGenDFilter
.head 4 -  Description: Общий класс фильтра
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sFTabName	! Имя фильтруемой таблица
.head 5 -  String: sFTabAlias	! Псевдоним фильтруемой таблицы
.head 5 -  Number: nFTabId		! Id таблицы в мета базе
.head 5 -  !
.head 5 -  : cSysFilter
.head 6 -  Class: cFilterList
.head 5 -  : cUserFilter
.head 6 -  Class: cFilterList
.head 5 -  : cNewFilter
.head 6 -  Class: cGenNewFilter
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description: Инициализация фильтра для таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sTableName
.head 7 -  String: sTableAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nFetchRes
.head 7 -  Number: nUserId
.head 6 +  Actions
.head 7 -  Set sFTabName  = SalStrUpperX(sTableName)
.head 7 -  Set sFTabAlias = SalStrTrimX(sTableAlias)
.head 7 +  If not SqlPrepareAndExecute(hSql(), "SELECT tabid INTO :nFTabId FROM meta_tables WHERE tabname=:sFTabName")
.head 8 -  Return FALSE
.head 7 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 7 +  If nFTabId = NUMBER_Null
.head 8 -  Return FALSE
.head 7 -  ! Инициализация системного фильтра
.head 7 +  If not cSysFilter.Init(nFTabId, NUMBER_Null)
.head 8 -  ! Return FALSE
.head 7 -  ! Инициализация пользовательского фильтра
.head 7 -  Set nUserId = GetUserId()
.head 7 +  If not cUserFilter.Init(nFTabId, nUserId)
.head 8 -  ! Return FALSE
.head 7 -  ! Инициализация нового фильтра
.head 7 +  If not cNewFilter.Init(sFTabName, sFTabAlias, nFTabId)
.head 8 -  Return FALSE
.head 7 -  !
.head 7 -  Return TRUE
.head 5 +  Function: SaveFilterDB
.head 6 -  Description: Сохранить фильтр в базе данных
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nUserId
.head 7 -  String: strFilterName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  : cSave
.head 8 -  Class: cABSConnect
.head 7 -  !
.head 7 -  String: sFromClause
.head 7 -  Long String: sWhereClause
.head 7 -  !
.head 7 -  Boolean: fRet
.head 6 +  Actions
.head 7 -  Set fRet = TRUE
.head 7 -  Call XConnectGetParams( cSave )
.head 7 +  If NOT cSave.Connect()
.head 8 -  Return FALSE
.head 7 -  Set sFromClause = GetFilterFromClause( FILTER_StandAlone )
.head 7 -  ! Sabstitute table aliase with pseudo name
.head 7 -  Set sWhereClause = VisStrSubstitute( GetFilterWhereClause( FILTER_StandAlone ), ' '||sFTabAlias||'.', ' $~~ALIAS~~$.' )
.head 7 -  Call SqlSetLongBindDatatype( 5, 22 )
.head 7 +  If NOT SqlPrepareAndExecute(cSave.hSql(),
'INSERT INTO dyn_filter (filter_id, tabid, userid, semantic, from_clause, where_clause)
 VALUES (0, :nFTabId, :nUserId, :strFilterName, :sFromClause, :sWhereClause)')
.head 8 -  Call SqlRollback( cSave.hSql() )
.head 8 -  Set fRet = FALSE
.head 7 -  Call SqlCommitEx( cSave.hSql(), 'Сохранен пользовательский фильтр <' || strFilterName || '>' )
.head 7 -  Call cSave.Disconnect()
.head 7 -  ! Инициализация пользовательского фильтра
.head 7 +  If not cUserFilter.ReInit(nFTabId, nUserId)
.head 8 -  Return FALSE
.head 7 -  Return fRet
.head 5 -  !
.head 5 +  Function: TranslateLOper
.head 6 -  Description: Транслировать код логической опрации в семантику и обратно
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: sOp
.head 7 -  Boolean: fDirect
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nPos
.head 7 -  String: sOp2
.head 7 -  !
.head 7 -  String: sPrimary
.head 7 -  String: sSecondary
.head 6 +  Actions
.head 7 -  Set sOp =  SalStrTrimX(SalStrUpperX(sOp))
.head 7 +  If fDirect
.head 8 -  Set sPrimary   = LogicalOperId
.head 8 -  Set sSecondary = LogicalOperSm
.head 7 +  Else
.head 8 -  Set sPrimary   = LogicalOperSm
.head 8 -  Set sSecondary = LogicalOperId
.head 7 -  !
.head 7 -  Set nPos = SalStrScan(sPrimary, sOp)
.head 7 +  If nPos != -1
.head 8 -  Call SalStrRight(sSecondary, SalStrLength(sSecondary)-nPos, sSecondary)
.head 8 -  Set sOp2 = SalStrLeftX(sSecondary, SalStrScan(sSecondary || ';', ';'))
.head 7 +  Else
.head 8 -  Set sOp2 = sOp
.head 7 -  Return sOp2
.head 5 +  Function: TranslateLSign
.head 6 -  Description: Транслировать код логического знака в семантику и обратно
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: Sign
.head 7 -  Boolean: fDirect
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nPos
.head 7 -  String: sSign2
.head 7 -  !
.head 7 -  String: sPrimary
.head 7 -  String: sSecondary
.head 6 +  Actions
.head 7 -  Set Sign =  SalStrTrimX(SalStrUpperX(Sign))
.head 7 +  If fDirect
.head 8 -  Set sPrimary   = LogicalSignId
.head 8 -  Set sSecondary = LogicalSignSm
.head 7 +  Else
.head 8 -  Set sPrimary   = LogicalSignSm
.head 8 -  Set sSecondary = LogicalSignId
.head 7 -  !
.head 7 -  Set nPos = SalStrScan(sPrimary, Sign)
.head 7 +  If nPos != -1
.head 8 -  Call SalStrRight(sSecondary, SalStrLength(sSecondary )-nPos, sSecondary)
.head 8 -  Set sSign2 = SalStrLeftX(sSecondary, SalStrScan(sSecondary || ';', ';'))
.head 7 +  Else
.head 8 -  Set sSign2 = Sign
.head 7 -  Return sSign2
.head 5 -  !
.head 5 +  Function: GetFilterWhereClause
.head 6 -  Description: Получить часть запроса where из заданого фильтра
.head 6 +  Returns
.head 7 -  Long String:
.head 6 +  Parameters
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Long String: sWhere
.head 7 -  Long String: sTmpWhere
.head 6 +  Actions
.head 7 -  Set sWhere = cNewFilter.getWhere(sFTabAlias)
.head 7 +  If not fStandAlone
.head 8 -  Set sTmpWhere = cSysFilter.getWhere(sFTabAlias)
.head 8 +  If sTmpWhere
.head 9 -  Set sWhere = IifS(sWhere='', '',  sWhere || ' AND (') || sTmpWhere || IifS(sWhere='', '', ')')
.head 8 -  Set sTmpWhere = cUserFilter.getWhere(sFTabAlias)
.head 8 +  If sTmpWhere
.head 9 -  Set sWhere = IifS(sWhere='', '',  sWhere || ' AND (') || sTmpWhere || IifS(sWhere='', '', ')')
.head 7 -  Return sWhere
.head 5 +  Function: GetFilterFromClause
.head 6 -  Description: Получить список дополнительных таблиц из построенного
запроса
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sFrom
.head 7 -  String: sTmpFrom
.head 6 +  Actions
.head 7 -  Set sFrom = cNewFilter.getFrom()
.head 7 +  If not fStandAlone
.head 8 -  Set sTmpFrom = SalStrTrimX(cSysFilter.getFrom())
.head 8 +  If sTmpFrom
.head 9 -  Set sFrom = IifS(sFrom='', '', sFrom || ', ') || sTmpFrom
.head 8 -  Set sTmpFrom = SalStrTrimX(cUserFilter.getFrom())
.head 8 +  If sTmpFrom
.head 9 -  Set sFrom = IifS(sFrom='', '', sFrom || ', ') || sTmpFrom
.head 7 -  Return sFrom
.head 5 +  Function: MergeFromClause
.head 6 -  Description: Слить разные FROM строки
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Receive String: strMainFrom
.head 7 -  String: strAdditionalFrom
.head 6 +  Static Variables
.head 7 -  String: strTblList[*]
.head 7 -  Number: nTblNum
.head 7 -  !
.head 7 -  String: strUppMain
.head 7 -  Number: nI
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If strMainFrom = ''
.head 8 -  Set strMainFrom = strAdditionalFrom
.head 8 -  Return TRUE
.head 7 -  !
.head 7 -  Set strUppMain = SalStrTrimX( SalStrUpperX( strMainFrom ))
.head 7 -  Call SalStrUpper( SalStrTrimX( strAdditionalFrom ), strAdditionalFrom )
.head 7 -  Set nTblNum = SalStrTokenize( strAdditionalFrom, ',', ',', strTblList )
.head 7 +  If nTblNum > 0
.head 8 -  Set nI = 0
.head 8 +  While nI < nTblNum
.head 9 +  If SalStrScan(' '||strUppMain||' ', ' '||SalStrTrimX(strTblList[nI])||' ') = -1
.head 10 -  Set strMainFrom = strMainFrom || ' ,' || strTblList[nI]
.head 9 -  Set nI = nI + 1
.head 7 -  Return TRUE
.head 3 +  Functional Class: cGenDFilterEx
.head 4 -  Description: Общий класс фильтра
.head 4 +  Derived From
.head 5 -  Class: cGenDFilter
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  : cSimpleFilter
.head 6 -  Class: cGenSimpleFilter
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description: Инициализация фильтра для таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sTableName
.head 7 -  String: sTableAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nFetchRes
.head 7 -  Number: nUserId
.head 6 +  Actions
.head 7 -  Set sFTabName  = SalStrUpperX(sTableName)
.head 7 -  Set sFTabAlias = SalStrTrimX(sTableAlias)
.head 7 +  If not SqlPrepareAndExecute(hSql(), "SELECT tabid INTO :nFTabId FROM meta_tables WHERE tabname=:sFTabName")
.head 8 -  Return FALSE
.head 7 -  Call SqlFetchNext(hSql(), nFetchRes)
.head 7 +  If nFTabId = NUMBER_Null
.head 8 -  Return FALSE
.head 7 -  ! Инициализация системного фильтра
.head 7 +  If not cSysFilter.Init(nFTabId, NUMBER_Null)
.head 8 -  ! Return FALSE
.head 7 -  ! Инициализация пользовательского фильтра
.head 7 -  Set nUserId = GetUserId()
.head 7 +  If not cUserFilter.Init(nFTabId, nUserId)
.head 8 -  ! Return FALSE
.head 7 -  ! Инициализация нового фильтра
.head 7 +  If not cNewFilter.Init(sFTabName, sFTabAlias, nFTabId)
.head 8 -  Return FALSE
.head 7 -  ! Инициализация простого фильтра
.head 7 +  If not cSimpleFilter.Init(sFTabName, sFTabAlias, nFTabId)
.head 8 -  Return FALSE
.head 7 -  !
.head 7 -  Return TRUE
.head 5 +  ! Function: SaveFilterDB
.head 6 -  Description: Сохранить фильтр в базе данных
.head 6 +  Returns 
.head 7 -  Boolean: 
.head 6 +  Parameters 
.head 7 -  Number: nUserId
.head 7 -  String: strFilterName
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  : cSave
.winattr class
.head 8 -  Class: cABSConnect
.end
.head 7 -  !
.head 7 -  String: sFromClause
.head 7 -  Long String: sWhereClause
.head 7 -  !
.head 7 -  Boolean: fRet
.head 6 +  Actions 
.head 7 -  Set fRet = TRUE
.head 7 -  Call XConnectGetParams( cSave )
.head 7 +  If NOT cSave.Connect()
.head 8 -  Return FALSE
.head 7 -  Set sFromClause = GetFilterFromClause( FILTER_StandAlone )
.head 7 -  ! Sabstitute table aliase with pseudo name
.head 7 -  Set sWhereClause = VisStrSubstitute( GetFilterWhereClause( FILTER_StandAlone ), ' '||sFTabAlias||'.', ' $~~ALIAS~~$.' )
.head 7 -  Call SqlSetLongBindDatatype( 5, 22 )
.head 7 +  If NOT SqlPrepareAndExecute(cSave.hSql(),
'INSERT INTO dyn_filter (filter_id, tabid, userid, semantic, from_clause, where_clause)
 VALUES (0, :nFTabId, :nUserId, :strFilterName, :sFromClause, :sWhereClause)')
.head 8 -  Call SqlRollback( cSave.hSql() )
.head 8 -  Set fRet = FALSE
.head 7 -  Call SqlCommitEx( cSave.hSql(), 'Сохранен пользовательский фильтр <' || strFilterName || '>' )
.head 7 -  Call cSave.Disconnect()
.head 7 -  ! Инициализация пользовательского фильтра
.head 7 +  If not cUserFilter.ReInit(nFTabId, nUserId)
.head 8 -  Return FALSE
.head 7 -  Return fRet
.head 5 -  !
.head 5 +  ! Function: TranslateLOper
.head 6 -  Description: Транслировать код логической опрации в семантику и обратно
.head 6 +  Returns 
.head 7 -  String: 
.head 6 +  Parameters 
.head 7 -  String: sOp
.head 7 -  Boolean: fDirect
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  Number: nPos
.head 7 -  String: sOp2
.head 7 -  !
.head 7 -  String: sPrimary
.head 7 -  String: sSecondary
.head 6 +  Actions 
.head 7 -  Set sOp =  SalStrTrimX(SalStrUpperX(sOp))
.head 7 +  If fDirect
.head 8 -  Set sPrimary   = LogicalOperId
.head 8 -  Set sSecondary = LogicalOperSm
.head 7 +  Else 
.head 8 -  Set sPrimary   = LogicalOperSm
.head 8 -  Set sSecondary = LogicalOperId
.head 7 -  !
.head 7 -  Set nPos = SalStrScan(sPrimary, sOp)
.head 7 +  If nPos != -1
.head 8 -  Call SalStrRight(sSecondary, SalStrLength(sSecondary)-nPos, sSecondary)
.head 8 -  Set sOp2 = SalStrLeftX(sSecondary, SalStrScan(sSecondary || ';', ';'))
.head 7 +  Else 
.head 8 -  Set sOp2 = sOp
.head 7 -  Return sOp2
.head 5 +  ! Function: TranslateLSign
.head 6 -  Description: Транслировать код логического знака в семантику и обратно
.head 6 +  Returns 
.head 7 -  String: 
.head 6 +  Parameters 
.head 7 -  String: Sign
.head 7 -  Boolean: fDirect
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  Number: nPos
.head 7 -  String: sSign2
.head 7 -  !
.head 7 -  String: sPrimary
.head 7 -  String: sSecondary
.head 6 +  Actions 
.head 7 -  Set Sign =  SalStrTrimX(SalStrUpperX(Sign))
.head 7 +  If fDirect
.head 8 -  Set sPrimary   = LogicalSignId
.head 8 -  Set sSecondary = LogicalSignSm
.head 7 +  Else 
.head 8 -  Set sPrimary   = LogicalSignSm
.head 8 -  Set sSecondary = LogicalSignId
.head 7 -  !
.head 7 -  Set nPos = SalStrScan(sPrimary, Sign)
.head 7 +  If nPos != -1
.head 8 -  Call SalStrRight(sSecondary, SalStrLength(sSecondary )-nPos, sSecondary)
.head 8 -  Set sSign2 = SalStrLeftX(sSecondary, SalStrScan(sSecondary || ';', ';'))
.head 7 +  Else 
.head 8 -  Set sSign2 = Sign
.head 7 -  Return sSign2
.head 5 -  !
.head 5 +  Function: GetFilterWhereClause
.head 6 -  Description: Получить часть запроса where из заданого фильтра
.head 6 +  Returns
.head 7 -  Long String:
.head 6 +  Parameters
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Long String: sWhere
.head 7 -  Long String: sTmpWhere
.head 6 +  Actions
.head 7 -  Set sWhere = cNewFilter.getWhere(sFTabAlias)
.head 7 -  Set sTmpWhere = cSimpleFilter.getWhere()
.head 7 +  If sTmpWhere
.head 8 -  Set sWhere = IifS(sWhere='', '',  sWhere || ' AND (') || sTmpWhere || IifS(sWhere='', '', ')')
.head 7 +  If not fStandAlone
.head 8 -  Set sTmpWhere = cSysFilter.getWhere(sFTabAlias)
.head 8 +  If sTmpWhere
.head 9 -  Set sWhere = IifS(sWhere='', '',  sWhere || ' AND (') || sTmpWhere || IifS(sWhere='', '', ')')
.head 8 -  Set sTmpWhere = cUserFilter.getWhere(sFTabAlias)
.head 8 +  If sTmpWhere
.head 9 -  Set sWhere = IifS(sWhere='', '',  sWhere || ' AND (') || sTmpWhere || IifS(sWhere='', '', ')')
.head 7 -  Return sWhere
.head 5 +  ! Function: GetFilterFromClause
.head 6 -  Description: Получить список дополнительных таблиц из построенного
запроса
.head 6 +  Returns 
.head 7 -  String: 
.head 6 +  Parameters 
.head 7 -  Boolean: fStandAlone
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: sFrom
.head 7 -  String: sTmpFrom
.head 6 +  Actions 
.head 7 -  Set sFrom = cNewFilter.getFrom()
.head 7 +  If not fStandAlone
.head 8 -  Set sTmpFrom = SalStrTrimX(cSysFilter.getFrom())
.head 8 +  If sTmpFrom
.head 9 -  Set sFrom = IifS(sFrom='', '', sFrom || ', ') || sTmpFrom
.head 8 -  Set sTmpFrom = SalStrTrimX(cUserFilter.getFrom())
.head 8 +  If sTmpFrom
.head 9 -  Set sFrom = IifS(sFrom='', '', sFrom || ', ') || sTmpFrom
.head 7 -  Return sFrom
.head 5 +  ! Function: MergeFromClause
.head 6 -  Description: Слить разные FROM строки
.head 6 +  Returns 
.head 7 -  Boolean: 
.head 6 +  Parameters 
.head 7 -  Receive String: strMainFrom
.head 7 -  String: strAdditionalFrom
.head 6 +  Static Variables 
.head 7 -  String: strTblList[*]
.head 7 -  Number: nTblNum
.head 7 -  !
.head 7 -  String: strUppMain
.head 7 -  Number: nI
.head 6 -  Local variables 
.head 6 +  Actions 
.head 7 +  If strMainFrom = ''
.head 8 -  Set strMainFrom = strAdditionalFrom
.head 8 -  Return TRUE
.head 7 -  !
.head 7 -  Set strUppMain = SalStrTrimX( SalStrUpperX( strMainFrom ))
.head 7 -  Call SalStrUpper( SalStrTrimX( strAdditionalFrom ), strAdditionalFrom )
.head 7 -  Set nTblNum = SalStrTokenize( strAdditionalFrom, ',', ',', strTblList )
.head 7 +  If nTblNum > 0
.head 8 -  Set nI = 0
.head 8 +  While nI < nTblNum
.head 9 +  If SalStrScan(' '||strUppMain||' ', ' '||SalStrTrimX(strTblList[nI])||' ') = -1
.head 10 -  Set strMainFrom = strMainFrom || ' ,' || strTblList[nI]
.head 9 -  Set nI = nI + 1
.head 7 -  Return TRUE
.head 3 +  Functional Class: cFilter
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Number: nFilterId		! Id фильтра
.head 5 -  String: sFilterName		! Наименование фильтра
.head 5 -  String: sFromClause		! From
.head 5 -  Long String: sWhereClause	! Where
.head 5 -  Boolean: bFilterInUse		! фильтр в работе
.head 5 -  Boolean: bDeleted		! фильтр удален
.head 4 -  Functions
.head 3 +  Functional Class: cFilterList
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  : cFilter[*]
.head 6 -  Class: cFilter
.head 5 -  Number: nFilterNum
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nTabId
.head 7 -  Number: nUserId
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nFetchRes
.head 7 -  Number: nFilterId
.head 7 -  String: sFilterName
.head 7 -  String: sFromClause
.head 7 -  Long String: sWhereClause
.head 6 +  Actions
.head 7 -  Set nFilterNum = 0
.head 7 -  Call SqlSetLongBindDatatype(4, 22)
.head 7 -  Call SqlPrepareAndExecute(hSql(),
"SELECT filter_id, semantic, from_clause, where_clause
   INTO :nFilterId, :sFilterName, :sFromClause, :sWhereClause
   FROM dyn_filter
  WHERE tabid = :nTabId AND userid " || IifS(nUserId=NUMBER_Null, "is null", "= :nUserId" ) || "
  ORDER BY semantic")
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Call addFilter(nFilterId, sFilterName, sFromClause, sWhereClause, FALSE)
.head 7 -  Return TRUE
.head 5 +  Function: ReInit
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nTabId
.head 7 -  Number: nUserId
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nFetchRes
.head 7 -  Number: nFilterId
.head 7 -  String: sFilterName
.head 7 -  String: sFromClause
.head 7 -  Long String: sWhereClause
.head 7 -  Boolean: bFound
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Call SqlSetLongBindDatatype(4, 22)
.head 7 -  Call SqlPrepareAndExecute(hSql(),
"SELECT filter_id, semantic, from_clause, where_clause
   INTO :nFilterId, :sFilterName, :sFromClause, :sWhereClause
   FROM dyn_filter
  WHERE tabid = :nTabId AND userid " || IifS(nUserId=NUMBER_Null, "is null", "= :nUserId" ) || "
  ORDER BY semantic")
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Set bFound = FALSE
.head 8 -  Set i = 0 
.head 8 +  While i < nFilterNum
.head 9 +  If cFilter[i].nFilterId = nFilterId
.head 10 -  Set bFound = TRUE
.head 10 -  Break
.head 9 -  Set i = i + 1
.head 8 +  If not bFound
.head 9 -  Call addFilter(nFilterId, sFilterName, sFromClause, sWhereClause, FALSE)
.head 7 -  Return TRUE
.head 5 +  Function: addFilter
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nFilterId
.head 7 -  String: sFilterName
.head 7 -  String: sFromClause
.head 7 -  Long String: sWhereClause
.head 7 -  Boolean: bFilterInUse
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set cFilter[nFilterNum].nFilterId    = nFilterId
.head 7 -  Set cFilter[nFilterNum].sFilterName  = sFilterName
.head 7 -  Set cFilter[nFilterNum].sFromClause  = sFromClause
.head 7 -  Set cFilter[nFilterNum].sWhereClause = sWhereClause
.head 7 -  Set cFilter[nFilterNum].bFilterInUse = bFilterInUse
.head 7 -  Set cFilter[nFilterNum].bDeleted     = FALSE
.head 7 -  Set nFilterNum = nFilterNum + 1
.head 7 -  Return TRUE
.head 5 +  Function: delFilter
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nFilterId
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIndex
.head 6 +  Actions
.head 7 -  Set nIndex = GetIndexById(nFilterId)
.head 7 +  If nIndex != -1
.head 8 -  Set cFilter[nIndex].bFilterInUse = FALSE
.head 8 -  Set cFilter[nIndex].bDeleted = TRUE
.head 7 -  Return TRUE
.head 5 +  Function: getFilterByIndex
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nIndex
.head 7 -  Receive Number: nFilterId
.head 7 -  Receive String: sFilterName
.head 7 -  Receive String: sFromClause
.head 7 -  Receive String: sWhereClause
.head 7 -  Receive Boolean: bFilterInUse
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set nFilterId    = cFilter[nIndex].nFilterId
.head 7 -  Set sFilterName  = cFilter[nIndex].sFilterName
.head 7 -  Set sFromClause  = cFilter[nIndex].sFromClause
.head 7 -  Set sWhereClause = cFilter[nIndex].sWhereClause
.head 7 -  Set bFilterInUse = cFilter[nIndex].bFilterInUse
.head 7 -  Return TRUE
.head 5 +  Function: GetIndexById
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: nFilterId
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIndex
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set nIndex = -1
.head 7 -  Set i = 0
.head 7 +  While i < nFilterNum
.head 8 +  If cFilter[i].nFilterId = nFilterId
.head 9 -  Set nIndex = i 
.head 9 -  Break
.head 8 -  Set i = i + 1
.head 7 -  Return nIndex
.head 5 +  Function: setFilterInUse
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nFilterId
.head 7 -  Boolean: bInUse
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIndex
.head 6 +  Actions
.head 7 -  Set nIndex = GetIndexById(nFilterId)
.head 7 +  If nIndex != -1
.head 8 -  Set cFilter[nIndex].bFilterInUse = bInUse
.head 7 -  Return TRUE
.head 5 +  Function: setFilterName
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Number: nFilterId
.head 7 -  String: sName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIndex
.head 6 +  Actions
.head 7 -  Set nIndex = GetIndexById(nFilterId)
.head 7 +  If nIndex != -1
.head 8 -  Set cFilter[nIndex].sFilterName = sName
.head 7 -  Return TRUE
.head 5 +  Function: getWhere
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Long String:
.head 6 +  Parameters
.head 7 -  String: sTabAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Long String: sWhere
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set sWhere = STRING_Null
.head 7 -  Set i = 0
.head 7 +  While i < nFilterNum
.head 8 +  If cFilter[i].bFilterInUse
.head 9 +  If sWhere
.head 10 -  Set sWhere = sWhere || ' AND ( ' || VisStrSubstitute(cFilter[i].sWhereClause, '$~~ALIAS~~$', sTabAlias) || ' ) '
.head 9 +  Else
.head 10 -  Set sWhere = VisStrSubstitute(cFilter[i].sWhereClause, '$~~ALIAS~~$', sTabAlias )
.head 8 -  Set i = i + 1
.head 7 -  Return sWhere
.head 5 +  Function: getFrom
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sFrom
.head 7 -  Number: i
.head 7 -  String: sTable
.head 6 +  Actions
.head 7 -  Set sFrom = STRING_Null
.head 7 -  Set i = 0
.head 7 +  While i < nFilterNum
.head 8 +  If cFilter[i].bFilterInUse
.head 9 -  Set sTable = cFilter[i].sFromClause
.head 9 +  If sTable != ''
.head 10 +  If SalStrScan(sFrom, sTable) = -1
.head 11 +  If sFrom != ''
.head 12 -  Set sFrom = sFrom || ', '
.head 11 -  Set sFrom = sFrom || sTable || ' '
.head 8 -  Set i = i + 1
.head 7 -  Return sFrom
.head 3 +  ! Functional Class: cGenSysFilter
.winattr
.end
.head 4 -                Description: 
.head 4 -                Derived From 
.head 4 -                Class Variables 
.head 4 +                Instance Variables 
.head 5 -  ! Boolean: fFilterInUse	! Системный фильтр в работе
.head 5 -  ! Number: nFilterNum
.head 5 -                : cFilter
.head 5 -                Number: nFltNum
.head 4 +                Functions 
.head 5 +                Function: Init
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nTabId
.head 6 -                Static Variables 
.head 6 +                Local variables 
.head 7 -                Number: nFetchRes
.head 7 -                Number: nFilterId
.head 7 -                String: sFilterName
.head 7 -                String: sFromClause
.head 7 -                Long String: sWhereClause
.head 6 +                Actions 
.head 7 -  ! Set fFilterInUse = FALSE
.head 7 -  ! Set nFilterNum = 0
.head 7 -                Call cFilter.Init()
.head 7 -                Call SqlSetLongBindDatatype(4, 22)
.head 7 -                Call SqlPrepareAndExecute(hSql(),
"SELECT filter_id, semantic, from_clause, where_clause
   INTO :nFilterId, :sFilterName, :sFromClause, :sWhereClause
   FROM dyn_filter
  WHERE tabid = :nTabId AND userid is null
  ORDER BY semantic")
.head 7 +                While SqlFetchNext(hSql(), nFetchRes)
.head 8 -                Call cFilter.addFilter(nFilterId, sFilterName, sFromClause, sWhereClause, FALSE)
.head 8 -  ! Set cFilter[nFilterNum].nFilterId    = nFilterId
.head 8 -  ! Set cFilter[nFilterNum].sFilterName  = sFilterName
.head 8 -  ! Set cFilter[nFilterNum].sFromClause  = sFromClause
.head 8 -  ! Set cFilter[nFilterNum].sWhereClause = sWhereClause
.head 8 -  ! Set cFilter[nFilterNum].bFilterInUse = FALSE
.head 8 -  ! Set nFilterNum = nFilterNum + 1
.head 7 -                Set nFltNum = cFilter.nFilterNum
.head 7 -                Return TRUE
.head 5 +                Function: getFilterByIndex
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nIndex
.head 7 -                Receive Number: nFilterId
.head 7 -                Receive String: sFilterName
.head 7 -                Receive String: sFromClause
.head 7 -                Receive String: sWhereClause
.head 7 -                Receive Boolean: bFilterInUse
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Call cFilter.getFilterByIndex(nIndex, nFilterId, sFilterName, sFromClause, sWhereClause, bFilterInUse)
.head 7 -                Return TRUE
.head 5 +                Function: getFilterInUse
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 -                Parameters 
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.getFilterInUse()
.head 5 +                Function: setFilterInUse
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nIndex
.head 7 -                Boolean: bInUse
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.setFilterInUse(nIndex, bInUse)
.head 5 +                Function: setFilterName
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nIndex
.head 7 -                String: sName
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.setFilterName(nIndex, sName)
.head 5 +                Function: getWhere
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                String: 
.head 6 +                Parameters 
.head 7 -                String: sTabAlias
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.getWhere(sTabAlias)
.head 5 +                Function: getFrom
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                String: 
.head 6 -                Parameters 
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.getFrom()
.head 3 +  ! Functional Class: cGenUserFilter
.winattr
.end
.head 4 -                Description: 
.head 4 -                Derived From 
.head 4 -                Class Variables 
.head 4 +                Instance Variables 
.head 5 -                : cFilter
.head 4 +                Functions 
.head 5 +                Function: Init
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nTabId
.head 6 -                Static Variables 
.head 6 +                Local variables 
.head 7 -                Number: nUserId
.head 7 -                Number: nFetchRes
.head 7 -                Number: nFilterId
.head 7 -                String: sFilterName
.head 7 -                String: sFromClause
.head 7 -                Long String: sWhereClause
.head 6 +                Actions 
.head 7 -                Set nUserId = GetUserId()
.head 7 -  ! Set fFilterInUse = FALSE
.head 7 -  ! Set nFilterNum = 0
.head 7 -                Call cFilter.Init()
.head 7 -                Call SqlSetLongBindDatatype(4, 22)
.head 7 -                Call SqlPrepareAndExecute(hSql(),
"SELECT filter_id, semantic, from_clause, where_clause
   INTO :nFilterId, :sFilterName, :sFromClause, :sWhereClause
   FROM dyn_filter
  WHERE tabid = :nTabId AND userid = :nUserId
  ORDER BY semantic")
.head 7 +                While SqlFetchNext(hSql(), nFetchRes)
.head 8 -                Call cFilter.addFilter(nFilterId, sFilterName, sFromClause, sWhereClause, FALSE)
.head 8 -  ! Set cFilter[nFilterNum].nFilterId    = nFilterId
.head 8 -  ! Set cFilter[nFilterNum].sFilterName  = sFilterName
.head 8 -  ! Set cFilter[nFilterNum].sFromClause  = sFromClause
.head 8 -  ! Set cFilter[nFilterNum].sWhereClause = sWhereClause
.head 8 -  ! Set cFilter[nFilterNum].bFilterInUse = FALSE
.head 8 -  ! Set nFilterNum = nFilterNum + 1
.head 7 -                Return TRUE
.head 5 +                Function: getFilterByIndex
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nIndex
.head 7 -                Receive Number: nFilterId
.head 7 -                Receive String: sFilterName
.head 7 -                Receive String: sFromClause
.head 7 -                Receive String: sWhereClause
.head 7 -                Receive Boolean: bFilterInUse
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Call cFilter.getFilterByIndex(nIndex, nFilterId, sFilterName, sFromClause, sWhereClause, bFilterInUse)
.head 7 -                Return TRUE
.head 5 +                Function: getFilterInUse
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 -                Parameters 
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.getFilterInUse()
.head 5 +                Function: setFilterInUse
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nIndex
.head 7 -                Boolean: bInUse
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.setFilterInUse(nIndex, bInUse)
.head 5 +                Function: setFilterName
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                Boolean: 
.head 6 +                Parameters 
.head 7 -                Number: nIndex
.head 7 -                String: sName
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.setFilterName(nIndex, sName)
.head 5 +                Function: getWhere
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                String: 
.head 6 +                Parameters 
.head 7 -                String: sTabAlias
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.getWhere(sTabAlias)
.head 5 +                Function: getFrom
.head 6 -                Description: 
.head 6 +                Returns 
.head 7 -                String: 
.head 6 -                Parameters 
.head 6 -                Static Variables 
.head 6 -                Local variables 
.head 6 +                Actions 
.head 7 -                Return cFilter.getFrom()
.head 5 +  ! Function: setFilterInUse
.head 6 -                   Description: 
.head 6 -                   Returns 
.head 6 +                   Parameters 
.head 7 -                   Boolean: bInUse
.head 6 -                   Static Variables 
.head 6 -                   Local variables 
.head 6 +                   Actions 
.head 7 -                   Set fFilterInUse = bInUse
.head 5 +  ! Function: getWhere
.head 6 -                   Description: 
.head 6 +                   Returns 
.head 7 -                   String: 
.head 6 +                   Parameters 
.head 7 -                   String: sTabAlias
.head 6 -                   Static Variables 
.head 6 +                   Local variables 
.head 7 -                   String: sWhere
.head 7 -                   Number: i
.head 6 +                   Actions 
.head 7 -                   Set sWhere = STRING_Null
.head 7 -                   Set i = 0
.head 7 +                   While i < nFilterNum
.head 8 +                   If cFilter[i].bFilterInUse
.head 9 +                   If sWhere
.head 10 -                   Set sWhere = sWhere || ' AND ( ' || VisStrSubstitute(cFilter[i].sWhereClause, '$~~ALIAS~~$', sTabAlias) || ' ) '
.head 9 +                   Else 
.head 10 -                   Set sWhere = VisStrSubstitute(cFilter[i].sWhereClause, '$~~ALIAS~~$', sTabAlias )
.head 8 -                   Set i = i + 1
.head 7 -                   Return sWhere
.head 5 +  ! Function: getFrom
.head 6 -                   Description: 
.head 6 +                   Returns 
.head 7 -                   String: 
.head 6 -                   Parameters 
.head 6 -                   Static Variables 
.head 6 +                   Local variables 
.head 7 -                   String: sFrom
.head 7 -                   Number: i
.head 7 -                   String: sTable
.head 6 +                   Actions 
.head 7 -                   Set sFrom = STRING_Null
.head 7 -                   Set i = 0
.head 7 +                   While i < nFilterNum
.head 8 +                   If If cFilter[i].bFilterInUse
.head 9 -                   Set sTable = cFilter[i].sFromClause
.head 9 +                   If SalStrScan(sFrom, sTable) = -1
.head 10 +                   If sFrom != ''
.head 11 -                   Set sFrom = sFrom || ', '
.head 10 -                   Set sFrom = sFrom || sTable || ' '
.head 8 -                   Set i = i + 1
.head 7 -                   Return sFrom
.head 3 +  Functional Class: cGenNewFilter
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sFTabName	! Имя фильтруемой таблица
.head 5 -  String: sFTabAlias	! Псевдоним фильтруемой таблицы
.head 5 -  : Tag[*]		! Список тэгов фильтра
.head 6 -  Class: cGenFilterTag
.head 5 -  Number: nTagNum			! Количест тэгов в фильтре
.head 5 -  : FStr[*]	! Cтроки в фильтре
.head 6 -  Class: cGenFilterString
.head 5 -  Number: nStrNum			! Количество строк в фильтре
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sTabName
.head 7 -  String: sTabAlias
.head 7 -  Number: nTabId
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nFetchRes
.head 7 -  !
.head 7 -  Number: nColId
.head 7 -  String: sCol
.head 7 -  String: sType
.head 7 -  String: sKey
.head 7 -  String: sATab
.head 7 -  String: sATabA
.head 7 -  String: sAATab
.head 7 -  String: sAKey
.head 7 -  String: sAAKey
.head 7 -  String: sACol
.head 7 -  String: sAType
.head 7 -  String: sName
.head 7 -  Number: nShowPos
.head 7 -  Boolean: fExtra
.head 6 +  Actions
.head 7 -  Set sFTabName  = sTabName
.head 7 -  Set sFTabAlias = sTabAlias
.head 7 -  Set nTagNum = 0
.head 7 -  Set nStrNum = 0
.head 7 -  ! Поищем колонки пригодные для фильтра и принадлежащие самой таблице
.head 7 +  If NOT SqlPrepareAndExecute(hSql(),
"SELECT c.colid, c.colname, c.semantic, c.coltype, nvl(c.extrnval,0), c.showpos
   INTO :nColId, :sCol, :sName, :sType, :fExtra, :nShowPos
   FROM meta_columns c
  WHERE c.tabid = :nTabId AND nvl(c.showin_fltr,0) = 1
  ORDER BY c.showpos")
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If not fExtra
.head 9 -  Call NewTag(sCol, sFTabName, VisStrSubstitute(sName, '~', ' '), sType)
.head 8 +  Else
.head 9 +  If NOT SqlPrepareAndExecute(hSqlAux(),
"SELECT c.colname, t.tabname, s.colname
   INTO :sAKey, :sATab, :sACol
   FROM meta_extrnval e, meta_columns c, meta_columns s, meta_tables t
  WHERE e.srctabid = t.tabid
    AND e.srccolid = c.colid AND e.srctabid = c.tabid
    AND e.srctabid = s.tabid AND nvl(s.instnssemantic,0) = 1
    AND e.tabid    = :nTabId AND e.colid = :nColId")
.head 10 -  Return FALSE
.head 9 +  If not SqlFetchNext(hSqlAux(), nFetchRes)
.head 10 -  Return FALSE
.head 9 -  Call NewTagFK(sCol, VisStrSubstitute(sName, '~', ' '), sType, sATab, sAKey, sACol)
.head 7 -  !
.head 7 -  ! А тут будем искать колонки примкнувшые к нашей таблице
.head 7 +  If NOT SqlPrepareAndExecute(hSql(),
"SELECT var_colid, av.colname, cond_tag, av.coltype, nvl(av.extrnval,0), ta.tabname, ta.tabid,
        addtabalias, hc.colname, ac.colname
   INTO :nColId, :sCol, :sName, :sType, :fExtra, :sATab, :nTabId, :sATabA, :sKey, :sAKey
   FROM meta_browsetbl, meta_tables ta, meta_columns hc, meta_columns ac, meta_columns av
  WHERE ta.tabid = addtabid
    AND hc.tabid = hosttabid AND hc.colid = hostcolkeyid
    AND ac.tabid = addtabid  AND ac.colid = addcolkeyid
    AND av.tabid = addtabid  AND av.colid = var_colid
    AND addtabid IS NOT NULL AND hosttabid = :nTabId")
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 +  If not fExtra
.head 9 -  Call NewTagAttach(sCol, VisStrSubstitute(sName, '~', ' '), sType, sATab, sATabA, sKey, sAKey)
.head 8 +  Else
.head 9 +  If NOT SqlPrepareAndExecute(hSqlAux(),
"SELECT c.colname, t.tabname, s.colname
   INTO :sAAKey, :sAATab, :sACol
   FROM meta_extrnval e, meta_columns c, meta_columns s, meta_tables t
  WHERE e.srctabid = t.tabid
    AND e.srccolid = c.colid AND e.srctabid = c.tabid
    AND e.srctabid = s.tabid AND nvl(s.instnssemantic,0) = 1
    AND e.tabid    = :nTabId AND e.colid = :nColId")
.head 10 -  Return FALSE
.head 9 +  If not SqlFetchNext(hSqlAux(), nFetchRes)
.head 10 -  Return FALSE
.head 9 -  Call NewTagAttachFK(sCol, VisStrSubstitute(sName, '~', ' '), sType, sATab, sATabA, sKey, sAKey, sAATab, sAAKey, sACol)
.head 7 -  Return TRUE
.head 5 -  !
.head 5 +  Function: isTagListEmpty
.head 6 -  Description: Есть ли жизнь на марсе? В смысле: тэги фильтра описаны?
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return (nTagNum=0)
.head 5 +  Function: isFilterEmpty
.head 6 -  Description: А фильтр задали?
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return (nStrNum=0)
.head 5 -  !
.head 5 +  Function: NewTag
.head 6 -  Description: Добавляет тэг фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sQTab    ! таблица поля
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].sQueryCol = SalStrUpperX(sQCol)
.head 7 -  Set Tag[nTagNum].sQueryTab = SalStrUpperX(sQTab)
.head 7 -  Set Tag[nTagNum].sTagName  = SalStrUpperX(sName)
.head 7 -  Set Tag[nTagNum].sTagType  = SalStrUpperX(sType)
.head 7 -  Set nTagNum = nTagNum + 1
.head 7 -  Return TRUE
.head 5 +  Function: NewTagFK
.head 6 -  Description: Добавить тэг - FK
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 7 -  !
.head 7 -  String: sATab    ! таблица семантики
.head 7 -  String: sACol    ! колонка ключ связи
.head 7 -  String: sSCol    ! колонка семантики
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].S.sSTabName  = SalStrUpperX(sATab)
.head 7 -  Set Tag[nTagNum].S.sSColName  = SalStrUpperX(sACol)
.head 7 -  Set Tag[nTagNum].S.sSSemantic = SalStrUpperX(sSCol)
.head 7 -  !
.head 7 -  Return NewTag(sQCol, sFTabName, sName, sType)
.head 5 +  Function: NewTagAttach
.head 6 -  Description: Добавить тэг с полем чужой таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 7 -  !
.head 7 -  String: sATab    ! чужая таблица
.head 7 -  String: sATabA   ! псевдоним чужой таблицы
.head 7 -  String: sHCol    ! свое поле-ключ
.head 7 -  String: sACol    ! чужое поле-ключ
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].R.sHColName  = SalStrUpperX(sHCol)
.head 7 -  Set Tag[nTagNum].R.sRTabAlias = sATabA
.head 7 -  Set Tag[nTagNum].R.sRColName  = SalStrUpperX(sACol)
.head 7 -  !
.head 7 -  Return NewTag(sQCol, sATab, sName, sType)
.head 5 +  Function: NewTagAttachFK
.head 6 -  Description: Добавить тэг с полем чужой таблицы
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 7 -  !
.head 7 -  String: sATab    ! чужая таблица
.head 7 -  String: sATabA   ! псевдоним чужой таблицы
.head 7 -  String: sHCol    ! свое поле-ключ
.head 7 -  String: sACol    ! чужое поле-ключ
.head 7 -  !
.head 7 -  String: sSTab    ! Таблица семантики
.head 7 -  String: sSKey    ! колонка связи (PK)
.head 7 -  String: sSCol    ! колонка семантики
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].R.sHColName  = SalStrUpperX(sHCol)
.head 7 -  Set Tag[nTagNum].R.sRTabAlias = sATabA
.head 7 -  Set Tag[nTagNum].R.sRColName  = SalStrUpperX(sACol)
.head 7 -  !
.head 7 -  Set Tag[nTagNum].S.sSTabName  = SalStrUpperX(sSTab)
.head 7 -  Set Tag[nTagNum].S.sSColName  = SalStrUpperX(sSKey)
.head 7 -  Set Tag[nTagNum].S.sSSemantic = SalStrUpperX(sSCol)
.head 7 -  !
.head 7 -  Return NewTag(sQCol, sATab, sName, sType)
.head 5 -  !
.head 5 +  Function: GetTagByKey
.head 6 -  Description: Получить индех тэга в массиве по ключу
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: sColName ! Имя колонки
.head 7 -  String: sTabName ! Имя таблицы по связи
.head 7 -  ! для полей таблицы-субъекта второй параметр ВСЕГДА пустой
.head 7 -  ! для полей таблиц связаных с таблицей-субъетом - имя таблицы
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIterator
.head 7 -  Boolean: fFound
.head 6 +  Actions
.head 7 -  Set nIterator = 0
.head 7 -  Call SalStrUpper( sColName, sColName )
.head 7 -  Call SalStrUpper( sTabName, sTabName )
.head 7 -  Set fFound = FALSE
.head 7 +  Loop
.head 8 +  If nIterator >= nTagNum
.head 9 -  Break
.head 8 +  If Tag[nIterator].sQueryCol = sColName AND
   Tag[nIterator].sQueryTab = sTabName
.head 9 -  Set fFound = TRUE
.head 9 -  Break
.head 8 -  Set nIterator = nIterator + 1
.head 7 +  If fFound
.head 8 -  Return nIterator
.head 7 +  Else
.head 8 -  Return -1
.head 5 +  Function: GetTagByName
.head 6 -  Description: Получить индех тэга в массиве по наименованию
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: sName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIterator
.head 7 -  Boolean: fFound
.head 6 +  Actions
.head 7 -  Set nIterator = 0
.head 7 -  Set fFound = FALSE
.head 7 +  Loop
.head 8 +  If nIterator >= nTagNum
.head 9 -  Break
.head 8 +  If Tag[nIterator].sTagName = sName
.head 9 -  Set fFound = TRUE
.head 9 -  Break
.head 8 -  Set nIterator = nIterator + 1
.head 7 +  If fFound
.head 8 -  Return nIterator
.head 7 +  Else
.head 8 -  Return -1
.head 5 +  Function: CheckFilter
.head 6 -  Description: Проверить синтаксис фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: ni
.head 7 -  Number: nParanteses
.head 7 -  Boolean: fIsSingleOp
.head 7 -  Boolean: fIsError
.head 6 +  Actions
.head 7 -  Set ni = 0
.head 7 -  Set nParanteses = 0
.head 7 -  Set fIsSingleOp = FALSE
.head 7 -  Set fIsError = FALSE
.head 7 +  While ni < nStrNum AND NOT fIsError
.head 8 +  If FStr[ni].sLOper = '('
.head 9 -  Set nParanteses = nParanteses + 1
.head 8 +  If FStr[ni].sLOper = ')'
.head 9 -  Set nParanteses = nParanteses - 1
.head 8 -  !
.head 8 +  If FStr[ni].sLOper = ')' AND FStr[ni].sColName != ''
.head 9 -  Set fIsError = TRUE
.head 8 +  If (fIsSingleOp AND FStr[ni].sLOper != '(') OR
   (NOT fIsSingleOp AND FStr[ni].sLOper = '(')
.head 9 -  Set fIsError = TRUE
.head 8 -  !
.head 8 +  If FStr[ni].sLOper != ')' AND FStr[ni].sColName = ''
.head 9 -  Set fIsSingleOp = TRUE
.head 8 +  Else
.head 9 -  Set fIsSingleOp = FALSE
.head 8 -  Set ni = ni + 1
.head 7 +  If nParanteses != 0
.head 8 -  Set fIsError = TRUE
.head 7 -  Return NOT fIsError
.head 5 -  !
.head 5 +  Function: NewString
.head 6 -  Description: Создать новую строку фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sLOper       ! семантика логической операции
.head 7 -  Number: nColId       ! код поля
.head 7 -  String: sColName ! имя поля
.head 7 -  Number: nRTabId      ! код связной таблицы
.head 7 -  String: sRTabName    ! имя связной таблицы
.head 7 -  String: sLSign       ! семантика логического оператора
.head 7 -  String: sValue       ! значение фильтра
.head 7 -  String: sSemantic    ! семантика фильтра
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set FStr[nStrNum].nColId = nColId
.head 7 -  Set FStr[nStrNum].nRTabId = nRTabId
.head 7 -  Set FStr[nStrNum].sColName = sColName
.head 7 -  Set FStr[nStrNum].sRTabName = sRTabName
.head 7 -  Set FStr[nStrNum].sLOper = sLOper
.head 7 -  Set FStr[nStrNum].sLSign = sLSign
.head 7 -  Set FStr[nStrNum].sValue = sValue
.head 7 -  Set FStr[nStrNum].sSemantic = sSemantic
.head 7 -  Set nStrNum = nStrNum + 1
.head 7 -  Return TRUE
.head 5 -  !
.head 5 +  Function: getWhere
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: sTabAlias
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sWhere
.head 7 -  String: sRWhere
.head 7 -  Number: i
.head 7 -  Number: nTagi
.head 7 -  String: strField
.head 6 +  Actions
.head 7 -  Set sWhere  = ''
.head 7 -  Set sRWhere = ''
.head 7 -  Set i = 0
.head 7 +  While i < nStrNum
.head 8 -  Set sWhere = sWhere || FStr[i].sLOper || ' '
.head 8 +  If FStr[i].sLOper != ')'
.head 9 -  Set nTagi = GetTagByKey(SalStrTrimX(FStr[i].sColName), SalStrTrimX(FStr[i].sRTabName))
.head 9 +  If nTagi != -1
.head 10 -  Set strField = ''
.head 10 +  If Tag[nTagi].isAttached()
.head 11 +  If Tag[nTagi].R.sRTabAlias != ''
.head 12 -  Set strField = Tag[nTagi].R.sRTabAlias
.head 11 +  Else
.head 12 -  Set strField = Tag[nTagi].sQueryTab
.head 11 -  Set strField = strField || '.' || Tag[nTagi].sQueryCol
.head 11 -  !
.head 11 -  ! Lets check special names of columns to apply sys function
.head 11 -  !
.head 11 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"
.head 12 -  Set strField = 'ABS( ' || strField || ' )'
.head 11 +  Else If SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'LIKE' OR
        SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'NOT LIKE'
.head 12 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 11 -  !
.head 11 +  If sFTabAlias != ''
.head 12 -  Set sRWhere = sRWhere || ' AND ' || Tag[nTagi].GetAttachedTagWhereClause( sFTabAlias )
.head 11 +  Else
.head 12 -  Set sRWhere = sRWhere || ' AND ' || Tag[nTagi].GetAttachedTagWhereClause(sFTabName)
.head 10 +  Else
.head 11 +  If sFTabAlias != ''
.head 12 -  Set strField = sFTabAlias || '.'
.head 11 -  Set strField = strField || Tag[nTagi].sQueryCol
.head 11 -  !
.head 11 -  ! Lets check special names of columns to apply sys function
.head 11 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"
.head 12 -  Set strField = 'ABS( ' || strField || ' )'
.head 11 +  Else If SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'LIKE' OR
        SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'NOT LIKE'
.head 12 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 11 -  !
.head 10 -  !
.head 10 -  Set sWhere = sWhere || strField
.head 10 -  !
.head 10 +  If SalStrTrimX(FStr[i].sLSign) = '=' AND Tag[nTagi].sTagType = 'D'
.head 11 -  Set sWhere = sWhere || ' BETWEEN ' || Tag[nTagi].CastValueToType( FStr[i].sValue ) ||
' AND ' || Tag[nTagi].CastValueToType( FStr[i].sValue ) || ' + 0.9999 '
.head 10 +  Else
.head 11 -  Set sWhere = sWhere || ' ' || FStr[i].sLSign || ' '
.head 11 -  !
.head 11 +  If SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) != 'IS NULL' AND
   SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) != 'IS NOT NULL'
.head 12 +  If SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'LIKE' OR
   SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'NOT LIKE'
.head 13 -  Set sWhere = sWhere || '\'' ||
SalStrUpperX(VisStrSubstitute(VisStrSubstitute( FStr[i].sValue,'*','%' ), '?','_')) || '\' '
.head 12 +  Else If SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'IN' OR
        SalStrTrimX(SalStrUpperX(FStr[i].sLSign)) = 'NOT IN'
.head 13 -  Set sWhere = sWhere || ' ( ' || FStr[i].sValue || ' ) '
.head 12 +  Else
.head 13 -  Set sWhere = sWhere || Tag[nTagi].CastValueToType( FStr[i].sValue )|| ' '
.head 8 -  Set i = i + 1
.head 7 +  If sWhere != ''
.head 8 -  Set sWhere = '( ' || sWhere || ') ' || sRWhere
.head 7 -  Return sWhere
.head 5 +  Function: getFrom
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sFrom
.head 7 -  Number: i
.head 7 -  Number: nTagi
.head 7 -  String: sTable
.head 6 +  Actions
.head 7 -  Set sFrom  = ''
.head 7 -  Set sTable = ''
.head 7 -  Set i = 0
.head 7 +  While i < nStrNum
.head 8 -  Set nTagi = GetTagByKey( SalStrTrimX(FStr[i].sColName), SalStrTrimX(FStr[i].sRTabName) )
.head 8 +  If nTagi != -1
.head 9 +  If Tag[nTagi].isAttached( )
.head 10 -  Set sTable = Tag[nTagi].sQueryTab
.head 10 +  If Tag[nTagi].R.sRTabAlias != ''
.head 11 -  Set sTable = sTable || ' ' || Tag[nTagi].R.sRTabAlias
.head 10 -  !
.head 10 +  If SalStrScan( sFrom, sTable ) = -1
.head 11 +  If sFrom != ''
.head 12 -  Set sFrom = sFrom || ', '
.head 11 -  Set sFrom = sFrom || ' ' || sTable || ' '
.head 8 -  Set i = i + 1
.head 7 -  Return sFrom
.head 3 +  Functional Class: cGenSimpleFilter
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sFTabName	! Имя фильтруемой таблица
.head 5 -  String: sFTabAlias	! Псевдоним фильтруемой таблицы
.head 5 -  : Tag[*]		! Список тэгов фильтра
.head 6 -  Class: cGenFilterTag
.head 5 -  Number: nTagNum			! Количест тэгов в фильтре
.head 5 -  : FStr[*]	! Cтроки в фильтре
.head 6 -  Class: cGenFilterString
.head 5 -  Number: nStrNum			! Количество строк в фильтре
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sTabName
.head 7 -  String: sTabAlias
.head 7 -  Number: nTabId
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nFetchRes
.head 7 -  !
.head 7 -  String: sCol
.head 7 -  String: sName
.head 7 -  String: sType
.head 7 -  Number: nShowPos
.head 6 +  Actions
.head 7 -  Set sFTabName  = sTabName
.head 7 -  Set sFTabAlias = sTabAlias
.head 7 -  Set nTagNum = 0
.head 7 -  Set nStrNum = 0
.head 7 -  ! Поищем колонки пригодные для фильтра и принадлежащие самой таблице
.head 7 +  If NOT SqlPrepareAndExecute(hSql(),
"SELECT c.colname, c.semantic, c.coltype,  c.showpos
   INTO :sCol, :sName, :sType, :nShowPos
   FROM meta_columns c
  WHERE c.tabid = :nTabId AND nvl(c.simple_filter,0) = 1
  ORDER BY c.showpos")
.head 8 -  Return FALSE
.head 7 +  While SqlFetchNext(hSql(), nFetchRes)
.head 8 -  Call NewTag(sCol, sFTabName, VisStrSubstitute(sName, '~', ' '), sType)
.head 7 -  Return TRUE
.head 5 -  !
.head 5 +  Function: isTagListEmpty
.head 6 -  Description: Есть ли жизнь на марсе? В смысле: тэги фильтра описаны?
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return (nTagNum=0)
.head 5 +  Function: isFilterEmpty
.head 6 -  Description: А фильтр задали?
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return (nStrNum=0)
.head 5 -  !
.head 5 +  Function: NewTag
.head 6 -  Description: Добавляет тэг фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sQCol    ! поле фильтра
.head 7 -  String: sQTab    ! таблица поля
.head 7 -  String: sName    ! наименование
.head 7 -  String: sType    ! тип поля
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set Tag[nTagNum].sQueryCol = SalStrUpperX(sQCol)
.head 7 -  Set Tag[nTagNum].sQueryTab = SalStrUpperX(sQTab)
.head 7 -  Set Tag[nTagNum].sTagName  = SalStrUpperX(sName)
.head 7 -  Set Tag[nTagNum].sTagType  = SalStrUpperX(sType)
.head 7 -  Set nTagNum = nTagNum + 1
.head 7 -  Return TRUE
.head 5 -  !
.head 5 +  Function: GetTagByKey
.head 6 -  Description: Получить индех тэга в массиве по ключу
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: sColName ! Имя колонки
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIterator
.head 7 -  Boolean: fFound
.head 6 +  Actions
.head 7 -  Set nIterator = 0
.head 7 -  Call SalStrUpper( sColName, sColName )
.head 7 -  Set fFound = FALSE
.head 7 +  Loop
.head 8 +  If nIterator >= nTagNum
.head 9 -  Break
.head 8 +  If Tag[nIterator].sQueryCol = sColName
.head 9 -  Set fFound = TRUE
.head 9 -  Break
.head 8 -  Set nIterator = nIterator + 1
.head 7 +  If fFound
.head 8 -  Return nIterator
.head 7 +  Else
.head 8 -  Return -1
.head 5 +  Function: GetTagByName
.head 6 -  Description: Получить индех тэга в массиве по наименованию
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: sName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: nIterator
.head 7 -  Boolean: fFound
.head 6 +  Actions
.head 7 -  Set nIterator = 0
.head 7 -  Set fFound = FALSE
.head 7 +  Loop
.head 8 +  If nIterator >= nTagNum
.head 9 -  Break
.head 8 +  If Tag[nIterator].sTagName = sName
.head 9 -  Set fFound = TRUE
.head 9 -  Break
.head 8 -  Set nIterator = nIterator + 1
.head 7 +  If fFound
.head 8 -  Return nIterator
.head 7 +  Else
.head 8 -  Return -1
.head 5 -  !
.head 5 +  Function: NewString
.head 6 -  Description: Создать новую строку фильтра
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sColName	! имя поля
.head 7 -  String: sValue		! значение фильтра
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set FStr[nStrNum].nColId    = -1
.head 7 -  Set FStr[nStrNum].nRTabId   = -1
.head 7 -  Set FStr[nStrNum].sColName  = sColName
.head 7 -  Set FStr[nStrNum].sRTabName = ''
.head 7 -  Set FStr[nStrNum].sLOper = STRING_Null
.head 7 -  Set FStr[nStrNum].sLSign = STRING_Null
.head 7 -  Set FStr[nStrNum].sValue = sValue
.head 7 -  Set FStr[nStrNum].sSemantic = STRING_Null
.head 7 -  Set nStrNum = nStrNum + 1
.head 7 -  Return TRUE
.head 5 +  Function: GetValueByColName
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: sColName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sValue
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set sValue = ''
.head 7 -  Set i = 0
.head 7 +  While i < nStrNum
.head 8 +  If FStr[i].sColName = sColName
.head 9 -  Set sValue = FStr[i].sValue
.head 9 -  Break
.head 8 -  Set i = i + 1
.head 7 -  Return sValue
.head 5 -  !
.head 5 +  Function: getWhere
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sWhere
.head 7 -  Number: i
.head 7 -  Number: nTagi
.head 7 -  String: strField
.head 7 -  String: strValue
.head 7 -  String: sSign
.head 6 +  Actions
.head 7 -  Set sWhere  = ''
.head 7 -  Set i = 0
.head 7 +  While i < nStrNum
.head 8 -  Set nTagi    = GetTagByKey(SalStrTrimX(FStr[i].sColName))
.head 8 -  Set strValue = FStr[i].sValue
.head 8 +  If nTagi != -1 and strValue != ''
.head 9 -  Set sWhere = sWhere || IifS(sWhere='', ' ', ' and ')
.head 9 -  !
.head 9 -  Set strField = IifS(sFTabAlias != '', sFTabAlias || '.', '') || Tag[nTagi].sQueryCol
.head 9 -  !
.head 9 -  ! sSign:= '=' или 'like'-если есть *,%,?,_ или 'in'-если есть ','
.head 9 -  Set sSign = 
    IifS(SalStrScan(strValue, '*') >= 0
      or SalStrScan(strValue, '\\%') >= 0
      or SalStrScan(strValue, '?') >= 0
      or SalStrScan(strValue, '\\_') >= 0, 'LIKE', 
    IifS(SalStrScan(strValue, ',') >= 0, 'IN', '='))
.head 9 -  !
.head 9 -  ! Lets check special names of columns to apply sys function
.head 9 +  If SalStrUpperX(Tag[nTagi].sQueryCol) = "OST"  OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTC" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTF" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTB" OR
   SalStrUpperX(Tag[nTagi].sQueryCol) = "OSTQ"
.head 10 -  Set strField = 'ABS( ' || strField || ' )'
.head 9 +  Else If sSign = 'LIKE'
.head 10 -  Set strField = IifS(Tag[nTagi].sTagType='A', strField, 'UPPER( ' || strField || ' )')
.head 9 -  !
.head 9 -  Set sWhere = sWhere || strField
.head 9 -  !
.head 9 +  If sSign = '=' and Tag[nTagi].sTagType = 'D'
.head 10 -  Set sWhere = sWhere || ' BETWEEN ' || Tag[nTagi].CastValueToType(strValue) ||
' AND ' || Tag[nTagi].CastValueToType(strValue) || ' + 0.9999 '
.head 9 +  Else
.head 10 -  Set sWhere = sWhere || ' ' || sSign || ' '
.head 10 -  !
.head 10 +  If sSign = 'LIKE'
.head 11 -  Set sWhere = sWhere || '\'' ||
SalStrUpperX(VisStrSubstitute(VisStrSubstitute(strValue, '*', '%'), '?', '_')) || '\' '
.head 10 +  Else If sSign = 'IN'
.head 11 -  Set sWhere = sWhere || ' ( ' || strValue || ' ) '
.head 10 +  Else
.head 11 -  Set sWhere = sWhere || Tag[nTagi].CastValueToType(strValue) || ' '
.head 8 -  Set i = i + 1
.head 7 +  If sWhere != ''
.head 8 -  Set sWhere = '( ' || sWhere || ') '
.head 7 -  Return sWhere
.head 5 +  Function: getFrom
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sFrom
.head 7 -  Number: i
.head 7 -  Number: nTagi
.head 7 -  String: sTable
.head 6 +  Actions
.head 7 -  Return ''
.head 3 -  ! ---------------------------------
.head 3 +  Functional Class: cGenQuery
.head 4 -  Description: Класс строки SQL запроса
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  String: sAction      ! SQL действие
.head 5 -  String: sColumnList  ! список полей
.head 5 -  String: sBindList    ! список бинд переменных
.head 5 -  String: sTableList   ! список таблиц запроса
.head 5 -  String: sWhereClause ! строка WHERE
.head 5 -  String: sOrderClause ! список сортировки
.head 5 -  String: sGroupClause ! список группировки
.head 5 -  !
.head 5 -  Boolean: fChartLoad  ! флаг загрузки таблицы состояний
.head 4 +  Functions
.head 5 +  Function: GetNextToken
.head 6 -  Description: Получить следующую лексему
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Receive String: sSource
.head 7 -  String: sDelimeter
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 7 -  Number: nPos
.head 6 +  Actions
.head 7 -  Set nPos = SalStrScan(sSource, sDelimeter)
.head 7 +  If nPos = -1
.head 8 -  Set sToken = sSource
.head 8 -  Set sSource = ''
.head 7 +  Else
.head 8 -  Set sToken = SalStrLeftX(sSource, nPos)
.head 8 -  Set sSource = SalStrMidX(sSource, nPos+1, SalStrLength(sSource)-(nPos+1))
.head 7 -  Return sToken
.head 5 +  Function: isSQLKeyWord
.head 6 -  Description: является ли лексема ключевым слово SQL
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sToken
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call SalStrTrim( sToken, sToken )
.head 7 +  If sToken != ''
.head 8 +  If SalStrScan( ';'||SQLKeyWords||';', ';'||SalStrUpperX(sToken)||';' ) != -1
.head 9 -  Return TRUE
.head 8 +  Else
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Return FALSE
.head 5 +  Function: PrepareSQLString
.head 6 -  Description: Подготовить строку запроса для разбора
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: sSource
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 7 -  String: sTarget
.head 7 -  !
.head 7 -  Boolean: fIsWhereClause
.head 6 +  Actions
.head 7 -  Set sSource = VisStrTrim(VisStrSubstitute( sSource, PutCrLf(), '' ))
.head 7 -  Set sSource = VisStrTrim(VisStrSubstitute( sSource, PutLf(), '' ))
.head 7 -  Set sSource = VisStrTrim(VisStrSubstitute( sSource, ')', ' ) ' ))
.head 7 -  Set sSource = VisStrTrim(VisStrSubstitute( sSource, '(', ' ( ' ))
.head 7 -  Set fIsWhereClause = FALSE
.head 7 +  While sSource != ''
.head 8 -  Set sToken = GetNextToken(sSource,' ')
.head 8 -  !
.head 8 +  If fIsWhereClause
.head 9 +  If SalStrUpperX( VisStrTrim( sToken )) = 'GROUP' OR SalStrUpperX( VisStrTrim( sToken )) = 'ORDER'
.head 10 -  Set fIsWhereClause = FALSE
.head 8 -  !
.head 8 +  If isSQLKeyWord(sToken) AND NOT fIsWhereClause
.head 9 +  If SalStrUpperX( VisStrTrim( sToken )) = 'WHERE'
.head 10 -  Set fIsWhereClause = TRUE
.head 9 -  Set sTarget = sTarget || ' __KEY__' || VisStrTrim( SalStrUpperX( sToken ))
.head 8 +  Else
.head 9 -  Set sTarget = sTarget || ' ' || sToken
.head 7 -  Return sTarget
.head 5 -  !
.head 5 +  Function: ParseSQLSelect
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Receive String: sSource
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 7 -  Number: nKPos
.head 6 +  Actions
.head 7 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 7 -  Set sColumnList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 7 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 7 +  While sSource != ''
.head 8 -  Set sToken = GetNextToken(sSource, ' ')
.head 8 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 8 +  If nKPos = -1
.head 9 -  Set nKPos = SalStrLength(sSource)
.head 8 -  !
.head 8 +  If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__INTO'
.head 9 -  Set sBindList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__FROM'
.head 9 -  Set sTableList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__WHERE'
.head 9 -  Set sWhereClause = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__GROUP'
.head 9 -  Set sToken = GetNextToken(sSource, ' ')
.head 9 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 9 +  If nKPos = -1
.head 10 -  Set nKPos = SalStrLength(sSource)
.head 9 -  !
.head 9 -  Set sGroupClause = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__ORDER'
.head 9 -  Set sToken = GetNextToken(sSource, ' ')
.head 9 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 9 +  If nKPos = -1
.head 10 -  Set nKPos = SalStrLength(sSource)
.head 9 -  !
.head 9 -  Set sOrderClause = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else
.head 9 +  If SalStrTrimX(sToken)!= ''
.head 10 -  Call SalMessageBox('Непредвиденная лексема <'||SalStrUpperX(sToken)||'>!',
'Синтакстис SQL предложения', MB_Ok)
.head 7 -  Return TRUE
.head 5 +  Function: ParseSQLUpdate
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Receive String: sSource
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 7 -  Number: nKPos
.head 6 +  Actions
.head 7 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 7 -  Set sTableList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 7 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 7 +  While sSource != ''
.head 8 -  Set sToken = GetNextToken(sSource, ' ')
.head 8 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 8 +  If nKPos = -1
.head 9 -  Set nKPos = SalStrLength(sSource)
.head 8 -  !
.head 8 +  If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__SET'
.head 9 -  Set sBindList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__WHERE'
.head 9 -  Set sWhereClause = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else
.head 9 +  If SalStrTrimX(sToken)!= ''
.head 10 -  Call SalMessageBox('Непредвиденная лексема <'||SalStrUpperX(sToken)||'>!',
'Синтакстис SQL предложения', MB_Ok)
.head 7 -  Return TRUE
.head 5 +  Function: ParseSQLInsert
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Receive String: sSource
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 7 -  Number: nKPos
.head 6 +  Actions
.head 7 +  While sSource != ''
.head 8 -  Set sToken = GetNextToken(sSource, ' ')
.head 8 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 8 +  If nKPos = -1
.head 9 -  Set nKPos = SalStrLength(sSource)
.head 8 -  !
.head 8 +  If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__INTO'
.head 9 -  Set sTableList = VisStrTrim(GetNextToken(sSource, ' '))
.head 9 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 9 +  If nKPos = -1
.head 10 -  Set nKPos = SalStrLength(sSource)
.head 9 -  Set sColumnList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sColumnList = VisStrSubstitute( VisStrSubstitute( sColumnList, ')', '' ), '(', '' )
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__VALUES'
.head 9 -  Set sBindList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sBindList = VisStrSubstitute( VisStrSubstitute( sBindList, ')', '' ), '(', '' )
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else
.head 9 +  If SalStrTrimX(sToken)!= ''
.head 10 -  Call SalMessageBox('Непредвиденная лексема <'||SalStrUpperX(sToken)||'>!',
'Синтакстис SQL предложения', MB_Ok)
.head 7 -  Return TRUE
.head 5 +  Function: ParseSQLDelete
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Receive String: sSource
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 7 -  Number: nKPos
.head 6 +  Actions
.head 7 +  While sSource != ''
.head 8 -  Set sToken = GetNextToken(sSource, ' ')
.head 8 -  Set nKPos = SalStrScan(sSource, '\\_\\_KEY\\_\\_')
.head 8 +  If nKPos = -1
.head 9 -  Set nKPos = SalStrLength(sSource)
.head 8 -  !
.head 8 +  If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__FROM'
.head 9 -  Set sTableList = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else If VisStrTrim(SalStrUpperX(sToken)) = '__KEY__WHERE'
.head 9 -  Set sWhereClause = VisStrTrim(SalStrLeftX(sSource, nKPos))
.head 9 -  Set sSource = SalStrMidX(sSource, nKPos, SalStrLength(sSource)-nKPos)
.head 8 +  Else
.head 9 +  If SalStrTrimX(sToken)!= ''
.head 10 -  Call SalMessageBox('Непредвиденная лексема <'||SalStrUpperX(sToken)||'>!',
'Синтакстис SQL предложения', MB_Ok)
.head 7 -  Return TRUE
.head 5 -  !
.head 5 +  Function: Init
.head 6 -  Description: Инициализирует сновные части запроса
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: sSrcQuery
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sToken
.head 6 +  Actions
.head 7 -  Set sAction = ''
.head 7 -  Set sColumnList = ''
.head 7 -  Set sBindList = ''
.head 7 -  Set sTableList = ''
.head 7 -  Set sWhereClause = ''
.head 7 -  Set sOrderClause = ''
.head 7 -  Set sGroupClause = ''
.head 7 -  !
.head 7 +  If sSrcQuery != ''
.head 8 -  Set sSrcQuery = VisStrTrim(PrepareSQLString(sSrcQuery))
.head 8 +  While sSrcQuery != ''
.head 9 -  Set sToken = GetNextToken(sSrcQuery, ' ')
.head 9 -  Set sAction = SalStrTrimX(VisStrSubstitute( sToken, '__KEY__', '' ))
.head 9 +  If sAction = 'SELECT'
.head 10 -  Call ParseSQLSelect(sSrcQuery)
.head 9 +  Else If sAction = 'UPDATE'
.head 10 -  Call ParseSQLUpdate(sSrcQuery)
.head 9 +  Else If sAction = 'INSERT'
.head 10 -  Call ParseSQLInsert(sSrcQuery)
.head 9 +  Else If sAction = 'DELETE'
.head 10 -  Call ParseSQLDelete(sSrcQuery)
.head 9 +  Else
.head 10 -  Return FALSE
.head 7 -  Return TRUE 
.head 5 +  Function: GetFullSQLString
.head 6 -  Description: получить полную строку запроса
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  : F
.head 8 -  Class: cGenFilter
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sQuery
.head 7 -  String: sNewFrom
.head 7 -  String: sNewWhere
.head 6 +  Actions
.head 7 -  Set sNewWhere = F.GetFilterWhereClause( FILTER_Complex)
.head 7 -  Set sNewFrom = F.GetFilterFromClause( FILTER_Complex )
.head 7 +  If sNewWhere != ''
.head 8 +  If sWhereClause != ''
.head 9 -  Set sNewWhere = sWhereClause || ' AND ' || sNewWhere 
.head 7 +  Else
.head 8 -  Set sNewWhere = sWhereClause
.head 7 -  Call F.MergeFromClause ( sNewFrom, sTableList)
.head 7 -  !
.head 7 -  Set sQuery = sAction
.head 7 +  If sAction = 'SELECT'
.head 8 -  Set sQuery = sQuery || ' ' || sColumnList 
.head 8 +  If sBindList != ''
.head 9 -  Set sQuery = sQuery || ' INTO ' || sBindList
.head 8 -  Set sQuery = sQuery || ' FROM ' || sNewFrom
.head 8 +  If sNewWhere != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 8 +  If sGroupClause != ''
.head 9 -  Set sQuery = sQuery || ' GROUP BY ' || sGroupClause
.head 8 +  If sOrderClause != ''
.head 9 -  Set sQuery = sQuery || ' ORDER BY ' || sOrderClause
.head 7 +  Else If sAction = 'UPDATE'
.head 8 -  Set sQuery = sQuery || ' ' || sTableList || ' SET ' ||
sBindList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else If sAction = 'INSERT'
.head 8 -  Set sQuery = sQuery || ' INTO ' || sTableList ||
' (' || sColumnList || ') VALUES (' || sBindList || ')'
.head 7 +  Else If sAction = 'DELETE'
.head 8 -  Set sQuery = sQuery || ' FROM ' || sTableList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else
.head 8 -  Set sQuery = ''
.head 7 -  Return sQuery
.head 5 +  Function: GetFullSQLStringEx
.head 6 -  Description: получить полную строку запроса
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  : F
.head 8 -  Class: cGenFilterEx
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sQuery
.head 7 -  String: sNewFrom
.head 7 -  String: sNewWhere
.head 6 +  Actions
.head 7 -  Set sNewWhere = F.GetFilterWhereClause( FILTER_Complex)
.head 7 -  Set sNewFrom = F.GetFilterFromClause( FILTER_Complex )
.head 7 +  If sNewWhere != ''
.head 8 +  If sWhereClause != ''
.head 9 -  Set sNewWhere = sWhereClause || ' AND ' || sNewWhere 
.head 7 +  Else
.head 8 -  Set sNewWhere = sWhereClause
.head 7 -  Call F.MergeFromClause ( sNewFrom, sTableList)
.head 7 -  !
.head 7 -  Set sQuery = sAction
.head 7 +  If sAction = 'SELECT'
.head 8 -  Set sQuery = sQuery || ' ' || sColumnList 
.head 8 +  If sBindList != ''
.head 9 -  Set sQuery = sQuery || ' INTO ' || sBindList
.head 8 -  Set sQuery = sQuery || ' FROM ' || sNewFrom
.head 8 +  If sNewWhere != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 8 +  If sGroupClause != ''
.head 9 -  Set sQuery = sQuery || ' GROUP BY ' || sGroupClause
.head 8 +  If sOrderClause != ''
.head 9 -  Set sQuery = sQuery || ' ORDER BY ' || sOrderClause
.head 7 +  Else If sAction = 'UPDATE'
.head 8 -  Set sQuery = sQuery || ' ' || sTableList || ' SET ' ||
sBindList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else If sAction = 'INSERT'
.head 8 -  Set sQuery = sQuery || ' INTO ' || sTableList ||
' (' || sColumnList || ') VALUES (' || sBindList || ')'
.head 7 +  Else If sAction = 'DELETE'
.head 8 -  Set sQuery = sQuery || ' FROM ' || sTableList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else
.head 8 -  Set sQuery = ''
.head 7 -  Return sQuery
.head 5 +  Function: GetFullSQLStringD
.head 6 -  Description: получить полную строку запроса
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  : F
.head 8 -  Class: cGenDFilter
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sQuery
.head 7 -  String: sNewFrom
.head 7 -  String: sNewWhere
.head 6 +  Actions
.head 7 -  Set sNewWhere = F.GetFilterWhereClause( FILTER_Complex)
.head 7 -  Set sNewFrom = F.GetFilterFromClause( FILTER_Complex )
.head 7 +  If sNewWhere != ''
.head 8 +  If sWhereClause != ''
.head 9 -  Set sNewWhere = sWhereClause || ' AND ' || sNewWhere 
.head 7 +  Else
.head 8 -  Set sNewWhere = sWhereClause
.head 7 -  Call F.MergeFromClause ( sNewFrom, sTableList)
.head 7 -  !
.head 7 -  Set sQuery = sAction
.head 7 +  If sAction = 'SELECT'
.head 8 -  Set sQuery = sQuery || ' ' || sColumnList 
.head 8 +  If sBindList != ''
.head 9 -  Set sQuery = sQuery || ' INTO ' || sBindList
.head 8 -  Set sQuery = sQuery || ' FROM ' || sNewFrom
.head 8 +  If sNewWhere != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 8 +  If sGroupClause != ''
.head 9 -  Set sQuery = sQuery || ' GROUP BY ' || sGroupClause
.head 8 +  If sOrderClause != ''
.head 9 -  Set sQuery = sQuery || ' ORDER BY ' || sOrderClause
.head 7 +  Else If sAction = 'UPDATE'
.head 8 -  Set sQuery = sQuery || ' ' || sTableList || ' SET ' ||
sBindList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else If sAction = 'INSERT'
.head 8 -  Set sQuery = sQuery || ' INTO ' || sTableList ||
' (' || sColumnList || ') VALUES (' || sBindList || ')'
.head 7 +  Else If sAction = 'DELETE'
.head 8 -  Set sQuery = sQuery || ' FROM ' || sTableList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else
.head 8 -  Set sQuery = ''
.head 7 -  Return sQuery
.head 5 +  Function: GetFullSQLStringDEx
.head 6 -  Description: получить полную строку запроса
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  : F
.head 8 -  Class: cGenDFilterEx
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: sQuery
.head 7 -  String: sNewFrom
.head 7 -  String: sNewWhere
.head 6 +  Actions
.head 7 -  Set sNewWhere = F.GetFilterWhereClause( FILTER_Complex)
.head 7 -  Set sNewFrom = F.GetFilterFromClause( FILTER_Complex )
.head 7 +  If sNewWhere != ''
.head 8 +  If sWhereClause != ''
.head 9 -  Set sNewWhere = sWhereClause || ' AND ' || sNewWhere 
.head 7 +  Else
.head 8 -  Set sNewWhere = sWhereClause
.head 7 -  Call F.MergeFromClause ( sNewFrom, sTableList)
.head 7 -  !
.head 7 -  Set sQuery = sAction
.head 7 +  If sAction = 'SELECT'
.head 8 -  Set sQuery = sQuery || ' ' || sColumnList 
.head 8 +  If sBindList != ''
.head 9 -  Set sQuery = sQuery || ' INTO ' || sBindList
.head 8 -  Set sQuery = sQuery || ' FROM ' || sNewFrom
.head 8 +  If sNewWhere != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 8 +  If sGroupClause != ''
.head 9 -  Set sQuery = sQuery || ' GROUP BY ' || sGroupClause
.head 8 +  If sOrderClause != ''
.head 9 -  Set sQuery = sQuery || ' ORDER BY ' || sOrderClause
.head 7 +  Else If sAction = 'UPDATE'
.head 8 -  Set sQuery = sQuery || ' ' || sTableList || ' SET ' ||
sBindList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else If sAction = 'INSERT'
.head 8 -  Set sQuery = sQuery || ' INTO ' || sTableList ||
' (' || sColumnList || ') VALUES (' || sBindList || ')'
.head 7 +  Else If sAction = 'DELETE'
.head 8 -  Set sQuery = sQuery || ' FROM ' || sTableList
.head 8 +  If sWhereClause != ''
.head 9 -  Set sQuery = sQuery || ' WHERE ' || sNewWhere
.head 7 +  Else
.head 8 -  Set sQuery = ''
.head 7 -  Return sQuery
.head 2 +  Default Classes
.head 3 -  MDI Window: cBaseMDI
.head 3 -  Form Window:
.head 3 -  Dialog Box:
.head 3 -  Table Window:
.head 3 -  Quest Window:
.head 3 -  Data Field:
.head 3 -  Spin Field:
.head 3 -  Multiline Field:
.head 3 -  Pushbutton:
.head 3 -  Radio Button:
.head 3 -  Option Button:
.head 3 -  Check Box:
.head 3 -  Child Table:
.head 3 -  Quest Child Window: cQuickDatabase
.head 3 -  List Box:
.head 3 -  Combo Box:
.head 3 -  Picture:
.head 3 -  Vertical Scroll Bar:
.head 3 -  Horizontal Scroll Bar:
.head 3 -  Column:
.head 3 -  Background Text:
.head 3 -  Group Box:
.head 3 -  Line:
.head 3 -  Frame:
.head 3 -  Custom Control:
.head 2 -  Application Actions
