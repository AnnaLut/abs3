

PROMPT ===================================================================================== 
PROMPT *** Run *** ========== Scripts /Sql/BARS/Trigger/OVM_DELETE_33.sql =========*** Run *
PROMPT ===================================================================================== 


PROMPT *** Create  trigger OVM_DELETE_33 ***

  CREATE OR REPLACE TRIGGER BARS.OVM_DELETE_33 INSTEAD OF DELETE ON BARS.POLICY_TABLE_BASE FOR EACH ROW DECLARE dummy integer; curver integer; crStatus varchar2(20); isRef integer; l_state varchar(700); l_rowid2 rowid := :old.wm_rowid ; lockmode varchar2(2); par_lock_str varchar2(100); lock_status integer; wm$hasCRChild_var boolean := false; prev_wm$hasCRChild boolean := false; prev_old_nextver varchar2(1000); prev_l_state varchar2(100); prev_do_restrict_RIC_check boolean; /*** Begin needed for implementing RIC's ***/ needToFire boolean; nullsInFK boolean; dependent_rows boolean; es_sql_string varchar2(32000);/*** End needed for implementing RIC's ***/ BEGIN prev_wm$hasCRChild := wmsys.lt_ctx_pkg.wm$hasCRChild; l_state := nvl(sys_context('lt_ctx', 'state'), 'LIVE'); prev_old_nextver := wmsys.lt_ctx_pkg.old_nextver; wmsys.lt_ctx_pkg.old_nextver := :old.WM_nextver; prev_l_state := wmsys.lt_ctx_pkg.l_state; wmsys.lt_ctx_pkg.l_state := l_state; if (wmsys.lt_ctx_pkg.version != -1) then WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_11_NO); end if; wmsys.lt_ctx_pkg.checkFreezeStatus(l_state, curver, lock_status, crStatus, isRef); if (crStatus = wmsys.lt_ctx_pkg.CRSTATUS_ALLCR or crStatus = wmsys.lt_ctx_pkg.CRSTATUS_MIXED) then wmsys.lt_ctx_pkg.wm$hasCRChild := true; end if; BEGIN lockMode := wmsys.lt_ctx_pkg.lock_Mode; /* We found the row and it was updated by us */ if (:old.WM_version = curver) then UPDATE BARS.POLICY_TABLE_LT SET delstatus = -(delstatus+1), ltlock = wmsys.lt_ctx_pkg.checkngetlock(lockmode, ltlock, nextver, l_state, 1,'DELETE', version, delstatus, isRef) WHERE ROWID = :old.WM_rowid; else /* The row is in our ancestor(s) */ UPDATE BARS.POLICY_TABLE_LT SET ltlock = wmsys.lt_ctx_pkg.checkngetlock(lockmode, ltlock, nextver, l_state, 0,'DELETE', version, delstatus, isRef), nextver = wmsys.lt_ctx_pkg.getNextVer(nextver,curver,version,l_state,crStatus,33) WHERE ROWID = :old.WM_rowid; /* If lockmode is set, then generate the current lock info, else * carry-forward the parent lock to current version. */ /* Insert the changed row in our version. */ INSERT INTO BARS.POLICY_TABLE_LT(TABLE_NAME,SELECT_POLICY,INSERT_POLICY,UPDATE_POLICY,DELETE_POLICY,REPL_TYPE,POLICY_GROUP,OWNER,POLICY_COMMENT,CHANGE_TIME,APPLY_TIME,WHO_ALTER,WHO_CHANGE,VERSION,NEXTVER,DELSTATUS,LTLOCK) VALUES (:OLD.TABLE_NAME,:OLD.SELECT_POLICY,:OLD.INSERT_POLICY,:OLD.UPDATE_POLICY,:OLD.DELETE_POLICY,
:OLD.REPL_TYPE,:OLD.POLICY_GROUP,:OLD.OWNER,:OLD.POLICY_COMMENT,:OLD.CHANGE_TIME,:OLD.APPLY_TIME,:OLD.WHO_ALTER,:OLD.WHO_CHANGE, curver, wmsys.lt_ctx_pkg.CRCurNextver, -(:old.WM_delstatus+1), wmsys.lt_ctx_pkg.cur_lock_str) returning rowid into l_rowid2; end if; wmsys.lt_ctx_pkg.update_modified_tables('BARS','POLICY_TABLE', curver, l_state,33) ; wmsys.lt_ctx_pkg.wm$hasCRChild := prev_wm$hasCRChild; wmsys.lt_ctx_pkg.l_state := prev_l_state; wmsys.lt_ctx_pkg.old_nextver := prev_old_nextver; exception when others then wmsys.lt_ctx_pkg.wm$hasCRChild := prev_wm$hasCRChild; wmsys.lt_ctx_pkg.l_state := prev_l_state; wmsys.lt_ctx_pkg.old_nextver := prev_old_nextver; if (lock_status = 0) then wmsys.lt_ctx_pkg.releaseLock(wmsys.lt_ctx_pkg.state_lock_id); end if; raise ; end; END;
/
ALTER TRIGGER BARS.OVM_DELETE_33 ENABLE;


PROMPT ===================================================================================== 
PROMPT *** End *** ========== Scripts /Sql/BARS/Trigger/OVM_DELETE_33.sql =========*** End *
PROMPT ===================================================================================== 
