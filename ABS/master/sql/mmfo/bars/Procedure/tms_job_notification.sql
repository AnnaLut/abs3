DECLARE
    E_ALREADY_SUBSCRIBER EXCEPTION;
    PRAGMA EXCEPTION_INIT(E_ALREADY_SUBSCRIBER, -24034);
BEGIN
    DBMS_SCHEDULER.ADD_EVENT_QUEUE_SUBSCRIBER;
EXCEPTION
    WHEN E_ALREADY_SUBSCRIBER THEN
        NULL;
    WHEN OTHERS THEN 
        RAISE;
END;
/

CREATE OR REPLACE PROCEDURE BARS.TMS_JOB_NOTIFICATION(CONTEXT RAW,
                                                      REGINFO SYS.AQ$_REG_INFO,
                                                      DESCR SYS.AQ$_DESCRIPTOR,
                                                      PAYLOAD RAW,
                                                      PAYLOADL NUMBER)
AS
    DEQUEUE_OPTIONS    DBMS_AQ.DEQUEUE_OPTIONS_T;
    MESSAGE_PROPERTIES DBMS_AQ.MESSAGE_PROPERTIES_T;
    MESSAGE_HANDLE     RAW(16);
    MESSAGE            SYS.SCHEDULER$_EVENT_INFO;
    L_ID_TASK          TMS_TASK_LOG.ID_TASK%TYPE;
    L_TASK_ID_GROUP    TMS_LIST_TASKS.TASK_ID_GROUP%TYPE;
    L_START_TIME       TMS_TASK_LOG.START_TIME%TYPE;
    L_ID_GROUP_LOG     TMS_TASK_LOG.ID_GROUP_LOG%TYPE;
    L_FAILED_ACTION    TMS_LIST_TASKS.FAILED_ACTION%TYPE;
BEGIN
    DEQUEUE_OPTIONS.MSGID := DESCR.MSG_ID;
    DEQUEUE_OPTIONS.CONSUMER_NAME := DESCR.CONSUMER_NAME;
    DEQUEUE_OPTIONS.DEQUEUE_MODE := DBMS_AQ.BROWSE;
    DEQUEUE_OPTIONS.VISIBILITY :=  DBMS_AQ.IMMEDIATE;
    DBMS_AQ.DEQUEUE(QUEUE_NAME         => DESCR.QUEUE_NAME,
                      DEQUEUE_OPTIONS    => DEQUEUE_OPTIONS,
                      MESSAGE_PROPERTIES => MESSAGE_PROPERTIES,
                      PAYLOAD            => MESSAGE,
                      MSGID              => MESSAGE_HANDLE);
    SELECT TTL.ID_TASK, TLT.TASK_ID_GROUP, TTL.START_TIME, TTL.ID_GROUP_LOG, TLT.FAILED_ACTION INTO L_ID_TASK, L_TASK_ID_GROUP, L_START_TIME, L_ID_GROUP_LOG, L_FAILED_ACTION
    FROM TMS_LIST_TASKS TLT
    JOIN TMS_TASK_LOG TTL ON TLT.TASK_ID = TTL.ID_TASK AND
                             TLT.JOB_NAME = MESSAGE.OBJECT_NAME AND
                             TTL.STATUS_TASK = TMS_UTL.GET_C_STATUS_RUNNING;

    IF SQL%ROWCOUNT = 1 THEN
        CASE MESSAGE.EVENT_TYPE
            WHEN 'JOB_SUCCEEDED' THEN
                UPDATE TMS_TASK_LOG TTL SET TTL.STATUS_TASK = TMS_UTL.GET_C_STATUS_SUCCESSED,
                                        TTL.DURATION = SYSTIMESTAMP - L_START_TIME
                WHERE TTL.ID_TASK = L_ID_TASK AND
                      TTL.ID_GROUP_LOG = L_ID_GROUP_LOG;
                BARS.TMS_UTL.RUN_GROUP(P_ID_GROUP_LOG => L_ID_GROUP_LOG);
                DEQUEUE_OPTIONS.DEQUEUE_MODE := DBMS_AQ.REMOVE;
                DBMS_AQ.DEQUEUE(QUEUE_NAME         => DESCR.QUEUE_NAME,
                                  DEQUEUE_OPTIONS    => DEQUEUE_OPTIONS,
                                  MESSAGE_PROPERTIES => MESSAGE_PROPERTIES,
                                  PAYLOAD            => MESSAGE,
                                  MSGID              => MESSAGE_HANDLE);
            WHEN 'JOB_FAILED' THEN
                UPDATE TMS_TASK_LOG TTL SET TTL.STATUS_TASK = TMS_UTL.C_STATUS_FAILED,
                                            TTL.DURATION = SYSTIMESTAMP - L_START_TIME,
                                            TTL.ERR_MSG = MESSAGE.ERROR_MSG
                WHERE TTL.ID_TASK = L_ID_TASK AND
                      TTL.ID_GROUP_LOG = L_ID_GROUP_LOG;
                COMMIT;
                DEQUEUE_OPTIONS.DEQUEUE_MODE := DBMS_AQ.REMOVE;
                DBMS_AQ.DEQUEUE(QUEUE_NAME         => DESCR.QUEUE_NAME,
                                  DEQUEUE_OPTIONS    => DEQUEUE_OPTIONS,
                                  MESSAGE_PROPERTIES => MESSAGE_PROPERTIES,
                                  PAYLOAD            => MESSAGE,
                                  MSGID              => MESSAGE_HANDLE);
                COMMIT;
                CASE L_FAILED_ACTION 
                    WHEN TMS_UTL.C_FAILED_ACTION_CONTINUED THEN
                        BARS.TMS_UTL.RUN_GROUP(P_ID_GROUP_LOG => L_ID_GROUP_LOG);
                END CASE;
        END CASE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

BEGIN
    DBMS_AQ.REGISTER (SYS.AQ$_REG_INFO_LIST(SYS.AQ$_REG_INFO('SYS.SCHEDULER$_EVENT_QUEUE:BARS',DBMS_AQ.NAMESPACE_AQ,'PLSQL://BARS.TMS_JOB_NOTIFICATION',HEXTORAW('FF'))),1);
END;
/

--BEGIN
--    DBMS_AQ.UNREGISTER(SYS.AQ$_REG_INFO_LIST(SYS.AQ$_REG_INFO('SYS.SCHEDULER$_EVENT_QUEUE:BARS',DBMS_AQ.NAMESPACE_AQ,'PLSQL://BARS.TMS_JOB_NOTIFICATION',HEXTORAW('FF'))), 1);
--END;
--/

--SELECT * FROM SYS.REG$
--/
