set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_tabselect_statement meta_tables.select_statement%type;
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'CP_KOD: Коди ЦП';
  l_tablinesdef := '50';
  l_tabselect_statement := '';
  l_tabname     := 'CP_KOD';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic, l_tabselect_statement);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- обновляем select_statement таблицы
    bars_metabase.set_tabselect_statement(l_tabid, l_tabselect_statement);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'COUNTRY', 'N', 'Країна~емітента~ЦП', '', null, 19, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'CP_ID', 'C', 'ISIN~Зовнішний~код ЦП', '', null, 1, 1, 0, 1, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'DATP', 'D', 'Дата~погашення~номіналу', '', null, 15, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'IR', 'N', 'Річна~номінальна~% ставка', '', null, 16, 1, 0, 0, 0, '', '#0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'KV', 'N', 'Валюта~емісії~ЦП', '', null, 14, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'NAME', 'C', 'Назва~емітента ЦП', '', null, 2, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'DOX', 'N', 'Вид~доходності ЦП~(довідник)', '', null, 12, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'EMI', 'N', 'Вид~емітента~(довідник)', '', null, 10, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'ID', 'N', 'Номер п/п -~первинний ключ~внутр. код ЦП~ID', '1.9', null, 0, 1, 1, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 1);
  bars_metabase.add_column(l_tabid, 10, 'TIP', 'N', 'Розміщення~(чужі ЦП)~Залучення~(свої ЦП)', '', null, 7, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'DAT_EM', 'D', 'Дата емісії', '', null, 11, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'AMORT', 'N', 'Код варт-ті~Аморт.варт. = 1,~Справ.варт. =0', '', null, 20, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'DCP', 'N', '1-є в ДЦП,~0-немає', '', null, 8, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'CENA', 'N', 'Поточна~Номiнальна~вартiсть ЦП', '', null, 13, 1, 0, 0, 0, '', '# ##0.00', 1, 0, 'sum(CENA)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'BASEY', 'N', 'Код бази~нарахування', '', null, 3, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'CENA_KUP', 'N', 'Ціна~купону~1 шт. ЦП~(в грн.коп)', '', null, 30, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(CENA_KUP)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'KY', 'N', 'Кiл-сть~сплат~купону~в році', '', null, 4, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'DOK', 'D', 'Дата сплати~Остан. Купону', '', null, 5, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, 'sPar=V_CP_DATES[NSIFUNCTION][PROC=>PUL.PUT(''CP_ID'',:ID)][EXEC=>BEFORE][ACCESSCODE=>0][CONDITIONS=>ID= :ID][showDialogWindow=>false]', 'Sel008( hWndMDI, 49, :ID ,"Пл.Календар", "  " )', 0);
  bars_metabase.add_column(l_tabid, 19, 'DNK', 'D', 'Дата сплати~Наступ.Купону', '', null, 6, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, 'sPar=V_CP_DATES[NSIFUNCTION][PROC=>PUL.PUT(''CP_ID'',:ID)][EXEC=>BEFORE][ACCESSCODE=>0][CONDITIONS=>ID= :ID][showDialogWindow=>false]', 'Sel008( hWndMDI, 49, :ID ,"Пл.Календар", "  " )', 0);
  bars_metabase.add_column(l_tabid, 20, 'RNK', 'N', 'Реєстраційний~№~емітента ЦП', '', null, 17, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'PERIOD_KUP', 'N', 'Купонний~період (днів)', '', null, 31, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'IDT', 'C', 'Тип ЦП~довід-к~(CP_TYPE)', '', null, 999, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'PR1_KUP', 'N', 'Спосіб округлення~купону~на 1 ЦП/на пакет~(2/1)', '', null, 31, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'PR_AMR', 'N', '5=~Аморт. Диск/Прем~по еф.ставці~(алг-м Куценко)', '', null, 32, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'PR_AKT', 'N', 'Ознака~актуальності~ЦП~для банку', '', null, 25, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'CENA_START', 'N', 'Стартова~Номiнальна~вартiсть ЦП', '', null, 35, 1, 0, 0, 0, '', '# ##0.00', 1, 0, 'sum(CENA_START)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 27, 'METR', 'N', 'Метод~нарах-ня~купону~(metr)', '', null, 36, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 28, 'QUOT_SIGN', 'N', 'Ознака~котирування~на біржі~ 1/0', '', null, 35, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 29, 'IN_BR', 'N', 'Включено~до біржового~реєстру 0/1', '', null, 27, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 30, 'K23', 'N', 'Коеф-т~Показник~ризику~по НБУ-23', '', null, 30, 1, 0, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 35, 'EXPIRY', 'N', 'Кількість~днів~прострочення', '', null, 40, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 36, 'ZAL_CP', 'N', 'Забезпечення~на~1 шт. ЦП', '', null, 38, 0, 0, 0, 0, '', '#0.00', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 37, 'PAWN', 'N', 'Вид~забезпечення', '', null, 37, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'HIERARCHY_ID', 'N', 'Рівень~ієрархії', '', null, 39, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'VNCRP', 'C', 'Первинний ВКР', '', null, 41, 1, 0, 0, 0, '', '', 1, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 40, 'VNCRR', 'C', 'Внутрiшнiй~кредитний~рейтiнг', '', null, 42, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 41, 'KAT23', 'C', 'Категорiя~якостi~за кредитом~по НБУ-23', '', null, 30, 1, 0, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 42, 'PD', 'N', 'Імовірність~дефолту~PD~(пост.351)', '', null, 29, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 43, 'FIN_351', 'N', 'Клас~боржника~(пост.351)', '', null, 28, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 44, 'FAIR_METHOD_ID', 'N', 'Метод~розрахунку~справедливої~вартості', '', null, 46, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_DOX');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'DOX');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 7, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_DOX для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_EMI');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'EMI');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 8, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_EMI для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CC_TIPD');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'TIPD');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 10, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CC_TIPD для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_VR');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'VR');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 12, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_VR для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('BASEY');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'BASEY');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 15, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица BASEY для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CUSTOMER');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'RNK');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 20, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CUSTOMER для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_TYPE');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'IDT');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 22, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_TYPE для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CC_PAWN');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'PAWN');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 37, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CC_PAWN для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_HIERARCHY');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 38, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_HIERARCHY для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_FAIR_METHOD');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 44, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_FAIR_METHOD для описания сложного поля таблицы CP_KOD.');
  end if;

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 9, 1, 'DESC');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
