set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'Виконання заявок на підкріплення кас';
  l_tablinesdef := '10';
  l_tabname     := 'V_KASS';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'NSM', 'N', 'Номер~зміни', 1, null, 1, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'BRANCH', 'C', 'Код~бранчу', 2, null, 2, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'NAME', 'C', 'Назва~бранчу', 3, null, 3, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'DAT2', 'D', 'Дата~поставки', 1.3, null, 4, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'IDZ', 'N', 'Сист. №~заявки', 1.2, null, 5, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'SVID', 'C', 'Тип заявки', 1.5, null, 6, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'KV', 'N', 'Код~валюти', 1, null, 7, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'KODV', 'C', 'Код~виробу', 1.1, null, 8, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'NAMEV', 'C', 'Назва виробу', 2.5, null, 9, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'S1', 'N', 'Сума~готівки', 1.2, null, 10, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'K2', 'N', 'Кількість~виробів з БМ', 1.3, null, 11, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'K3', 'N', 'Кількість~монет', 1.3, null, 12, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'K4', 'N', 'Кількість~цінн.98*', 1.3, null, 13, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'NOMS', 'C', 'Номер~інкас.сумки~(мішка)', 1, null, 15, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'IDS', 'N', 'Сист.№~Сумки', 1, null, 14, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'CENA', 'N', 'Облікова ціна~виробу', 1.4, null, 17, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'SUMK_REF', 'N', 'Довідник~інкас.сумок~відділення', 1.4, null, 16, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, 'sPar=KAS_U[ACCESSCODE=>1][CONDITIONS=>KAS_U.D_CLOS is null and KAS_U.IDS in (select ids from kas_bu where kas_bu.BRANCH=:BRANCH )][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'VID', 'N', 'VID', 1.5, null, 18, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'SOS', 'N', 'SOS', 1.5, null, 19, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'REFA', 'N', 'REFA', 1.5, null, 20, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'REFB', 'N', 'REFB', 1, null, 21, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'IDM', 'N', 'IDM', 1, null, 22, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'D', 'N', 'IDZ', 1.5, null, 23, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'DD', 'N', 'IDS', 1.5, null, 24, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'UPDATE', 'kasz_w.KASS_UPD(:S1,:K2,:K3,:K4,:IDZ,:IDS,:CENA,:BRANCH,:VID)');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Уточнити поточний склад інкасаторів маршруту', '', '', 'ONCE', '', '', '', '', 'sPar=KAS_MF[CONDITIONS=>KAS_MF.IDM=:IDM][ACCESSCODE=>7][PROC=>PUL.Set_Mas_Ini(''KAS_IDM'',:IDM,''Код марш.інкас'')][EXEC=>BEFORE][showDialogWindow=>false]', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Зняти(відмовити) вибрану заявку', 'KASZ.UPD_SOS(-2,:D)', '', 'EACH', 'Зняти(відмовити) вибрану заявку?', 'Виконано', '', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 3, 'Забрати заявки вибранного маршруту по вказану дату поставки', 'kasz_w.LOCK1_IDZ(:DAT)', ':DAT(SEM=Введіть дату поставки,TYPE=D)', 'ONCE', 'Забрати заявки по маршруту?', 'Виконано', '', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 4, 'Задовольнити відмічені заявки', 'kasz_w.OPL1_(:REFA,:SOS,:S1,:K2,:K3,:K4,:D,:DD)', '', 'EACH', 'Задовольнити відмічені заявки?', 'Виконано', '', '', '', null);

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SVID');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, ':VID=1 and :KV=980', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SVID');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 2, l_newcolid, ':VID=1 and :KV<>980', 2, 'COLOR_Green');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SVID');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 3, l_newcolid, ':VID=2', 2, 'COLOR_Yellow');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SVID');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 4, l_newcolid, ':VID=3', 2, 'COLOR_Sky');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SVID');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 5, l_newcolid, ':VID=4', 2, 'COLOR_LightGray');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAMEV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 6, l_newcolid, ':VID=1 and :KV=980', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAMEV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 7, l_newcolid, ':VID=1 and :KV<>980', 2, 'COLOR_Green');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAMEV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 8, l_newcolid, ':VID=2', 2, 'COLOR_Yellow');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAMEV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 9, l_newcolid, ':VID=3', 2, 'COLOR_Sky');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAMEV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 10, l_newcolid, ':VID=4', 2, 'COLOR_LightGray');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'S1');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 11, l_newcolid, ':VID=1 and :KV=980', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'S1');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 12, l_newcolid, ':VID=1 and :KV<>980', 2, 'COLOR_Green');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KODV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 13, l_newcolid, ':VID=2', 2, 'COLOR_Yellow');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KODV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 14, l_newcolid, ':VID=3', 2, 'COLOR_Sky');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KODV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 15, l_newcolid, ':VID=4', 2, 'COLOR_LightGray');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 16, l_newcolid, ':VID=1 and :KV=980', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 17, l_newcolid, ':VID=1 and :KV<>980', 2, 'COLOR_Green');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KV');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 18, l_newcolid, ':VID=2', 2, 'COLOR_Yellow');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'K2');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 19, l_newcolid, ':VID=2', 2, 'COLOR_Yellow');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'K3');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 20, l_newcolid, ':VID=3', 2, 'COLOR_Sky');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'K4');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 21, l_newcolid, ':VID=4', 2, 'COLOR_LightGray');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
