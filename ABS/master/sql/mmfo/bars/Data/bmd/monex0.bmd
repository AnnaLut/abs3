set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_tabselect_statement meta_tables.select_statement%type;
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := '0.Системи переводiв(СП), що дiють в ОБ';
  l_tablinesdef := '';
  l_tabselect_statement := 'select m0.kod_nbu, swi.id, m0.name as name_monex0, swi.name as name_swi, swi.description as desc_swi, 
       decode (m0.IS_ACTIVE, 1, 0, 1) as IS_NOT_ACTIVE, m0.ob22 as ob22_2909, m0.ob22_2809 as ob22_2809, m0.ob22_kom as ob22_kom, m0.NLST, m0.MFOB, m0.nlsb,
(select case when count(a.acc) > 0 then ''Рахунки заблоковано'' else ''Рахунки не заблоковано'' end 
  from ACCOUNTS a
 where a.dazs is null--не закрытые
   and ((a.ob22 in (select substr(m.ob22_2909, 5, 2)
                      from MONEX_MV_UO m
                     where m.mv = m0.kod_nbu
                       and m.uo = 0) and a.nbs = ''2909'' and a.blkk = 1) or
       (a.ob22 in (select substr(m.ob22_2809, 5, 2)
                      from MONEX_MV_UO m
                     where m.mv = m0.kod_nbu
                       and m.uo = 0) and a.nbs = ''2809'') and a.blkd = 1)
) as blk  
from monex0 m0
left join monex_mv_uo mmu on m0.kod_nbu = mmu.mv and mmu.uo = 0
left join SWI_MTI_LIST swi on m0.kod_nbu = swi.kod_nbu
order by 1';
  l_tabname     := 'MONEX0';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic, l_tabselect_statement);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- обновляем select_statement таблицы
    bars_metabase.set_tabselect_statement(l_tabid, l_tabselect_statement);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'NAME_SWI', 'C', 'Назва~системи~(по вал)', '', null, 2, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'ID', 'C', 'Ідентифікатор~Profix', '', null, 1, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'KOD_NBU', 'C', 'Код~системи~по "НБУ"', '', null, 0, 0, 1, 0, 1, '', '', 1, 0, '', 0, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'NAME_MONEX0', 'C', 'Назва~системи~(Фронт)', '', null, 3, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'DESC_SWI', 'C', 'Опис~системи~(Фронт)', '', null, 4, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'NLSB', 'C', 'Транз.рах системи~(в ГОУ)', '', null, 5, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'IS_NOT_ACTIVE', 'B', 'Ознака~блокування~ПС', '', null, 6, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'OB22_2909', 'C', 'ob22_2909', '', null, 10, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'OB22_2809', 'C', 'ob22_2809', '', null, 11, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'OB22_KOM', 'C', 'ob22_kom', '', null, 12, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'NLST', 'C', 'Транзитний~рахунок~платіжної~системи', '', null, 7, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'MFOB', 'C', 'Банк~обслуговування~системи', '', null, 8, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'BLK', 'C', 'Наявність~заблокованих~ рахунків', '', null, 13, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('KL_D060');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'D060');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 6, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица KL_D060 для описания сложного поля таблицы MONEX0.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('SWI_MTI_CURR');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('MONEX0_VAL', 'Система переводів (по вал)', '$~~ALIAS~~$.NUM in (select l.NUM from SWI_MTI_LIST l where l.ob22_2909 = :OB22 ) ');
    bars_metabase.add_filtertbl(l_tabid, 1, l_newtabid, 'MONEX0_VAL', 0, 0, 0);
  else
    dbms_output.put_line('В БМД не описана таблица SWI_MTI_CURR для описания вложенности таблицы MONEX0.');
  end if;

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'INSERT', 'MONEX_RU.add_kod_nbu(:KOD_NBU, :ID, :NAME_SWI, :NAME_MONEX0, :DESC_SWI, :NLST, :MFOB, :NLSB, :OB22_2909, :OB22_2809, :OB22_KOM)');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'UPDATE', 'MONEX_RU.upd_kod_nbu (:KOD_NBU, :ID, :NAME_SWI, :NAME_MONEX0, :DESC_SWI, :NLST, :MFOB, :NLSB, :OB22_2909, :OB22_2809, :OB22_KOM)');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Зупинити розрахунки з вибраною ситемою', 'MONEX_RU.STOP_START_OPERATIONS (1,:KOD_NBU)', '', 'SELECTED_ONE', 'Призупинити розрахунки з вибраною системою?', 'Готово!', '', '', '', 104);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Відновити розрахунки з вибраною ситемою', 'MONEX_RU.STOP_START_OPERATIONS  (0,:KOD_NBU)', '', 'SELECTED_ONE', 'Відновити розрахунки з вибраною системою?', 'Готово!', '', '', '', 63);

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'BLK');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, 'BLK = ''Рахунки заблоковано''', 2, 'COLOR_Red');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'OB22_2909');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 2, l_newcolid, 'BLK = ''Рахунки заблоковано''', 1, 'COLOR_Red');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'OB22_2809');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 3, l_newcolid, 'BLK = ''Рахунки заблоковано''', 1, 'COLOR_Red');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAME_SWI');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 4, l_newcolid, 'IS_NOT_ACTIVE > 0', 1, 'COLOR_Red');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'KOD_NBU');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 5, l_newcolid, 'IS_NOT_ACTIVE > 0', 1, 'COLOR_Red');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NAME_MONEX0');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 6, l_newcolid, 'IS_NOT_ACTIVE > 0', 1, 'COLOR_Red');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
