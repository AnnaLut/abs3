set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_tabselect_statement meta_tables.select_statement%type;
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'FOREX: Перегляд та Переоцінка/Закриття/Анулювання угод';
  l_tablinesdef := '30';
  l_tabselect_statement := '';
  l_tabname     := 'V_SWAP';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic, l_tabselect_statement);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- обновляем select_statement таблицы
    bars_metabase.set_tabselect_statement(l_tabid, l_tabselect_statement);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'DAT', 'D', 'Дата~заключення', '1.1', null, 6, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'DAT_A', 'D', 'Дата~надходження А', '1.4', null, 11, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'DAT_B', 'D', 'Дата~відправки Б', '1.4', null, 21, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'DEAL_TAG', 'N', 'Сист.№ кінцевої~(єдиної) угоди', '1.2', null, 66, 0, 1, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'KVA', 'N', 'Вал А', '.7', null, 10, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'KVB', 'N', 'Вал Б', '.7', null, 20, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'NTIK', 'C', 'Тiкет~Бух.док', '1.3', null, 7, 0, 0, 1, 0, '', '', 1, 0, '', 1, 0, 0, '/barsroot/DocView/Docs/DocumentDateFilter?type=1', 'ShowAllDocs(hWndMDI,1,0," a.ref in (select r.ref from FX_DEAL_REF r,fx_deal x where x.deal_tag=r.deal_tag and (x.swap_tag=:SWAP_TAG or x.deal_tag=:DEAL_TAG )) ", " Бух.док по угоді " )', 0);
  bars_metabase.add_column(l_tabid, 16, 'PVX', 'N', 'PVq прав.варт~поточна + або -', '', null, 26, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'Sum(PVX)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'RNK', 'N', 'РНК~партнера', '1.2', null, 8, 0, 0, 0, 1, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'SUMA', 'N', 'Сума~надходження А', '', null, 12, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'SUMB', 'N', 'Сума~відправки Б', '', null, 22, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'SWAP_TAG', 'N', 'Сист.№ почат~СВОП угоди', '1.3', null, 64, 0, 0, 0, 0, '', '', 1, 1, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'IRA', 'N', '% ст А', '.5', null, 92, 0, 0, 0, 0, '', '#0.0000', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'IRB', 'N', '% ст Б', '.5', null, 94, 0, 0, 0, 0, '', '#0.0000', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 30, 'B', 'D', 'Звiтна дата', '1.1', null, 80, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 31, 'OTM', 'B', '!!! Виконати~ПЕРЕОЦІНКУ~угоди', '1.2', null, 32, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 32, 'PVX1', 'N', 'PVq1 прав.варт~поперед + або -', '', null, 25, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(PVX1)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 33, 'REF', 'N', 'Реф блоку~проводок~End_SWAP', '1.3', null, 35, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '/barsroot/documentview/default.aspx?ref=:REF', 'DocViewContentsEx(hWndForm, :REF)', 0);
  bars_metabase.add_column(l_tabid, 34, 'OTM1', 'B', '!!! Виконати~ЗАКРИТТЯ~угоди', '1.2', null, 68, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 35, 'SOS', 'N', 'Поточний~Стан~Угоди', '.9', null, 99, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 36, 'IRAE', 'N', 'Эф.% ст по~МБ дл PV~вал.А', '1.1', null, 27, 0, 0, 0, 0, '', '#0.0000', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 37, 'IRBE', 'N', 'Эф.% ст  по~МБ дл PV~вал.Б', '1.1', null, 28, 0, 0, 0, 0, '', '#0.0000', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'TERMA', 'N', 'Залиш~днів вал.А', '.9', null, 73, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'TERMB', 'N', 'Залиш~днів вал.Б', '.9', null, 74, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 40, 'KOD', 'C', 'Тип угоди 2', '1.1', null, 72, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 41, 'KODF', 'C', 'Тип угоди 1', '1.1', null, 70, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 42, 'BVQ', 'N', 'Різниця~екв A` -  B` ', '', null, 75, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'Sum(BVQ)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 43, 'BVQA', 'N', 'На Зв.дату~екв A` ', '', null, 76, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'Sum(BVQA)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 44, 'BVQB', 'N', 'На Зв.дату~екв B` ', '', null, 77, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'Sum(BVQB)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 45, 'DEL1', 'C', 'Анул гол(поч)~угоду', '', null, 65, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', 'F1_Select(13,"FOREX.FX_DEL (1,:SWAP_TAG);Анул.поч.угоду "|| Str( :SWAP_TAG) || " ?; ОК !" )', 0);
  bars_metabase.add_column(l_tabid, 46, 'DELX', 'C', 'Анул~ВСЮ угоду', '', null, 67, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', 'F1_Select(13,"FOREX.FX_DEL  (0,:DEAL_TAG);Анул.ВСЮ.угоду "|| Str( :DEAL_TAG) || " ?; ОК !" )', 0);
  bars_metabase.add_column(l_tabid, 47, 'NMK', 'A', 'Найменування контрагента', '3', null, 9, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CUSTOMER');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'RNK');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 19, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CUSTOMER для описания сложного поля таблицы V_SWAP.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_FOREX');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('V_FOREX_SWAP', 'Складовi SWAP', '( $~~ALIAS~~$.SWAP_TAG =   :SWAP_TAG  or   $~~ALIAS~~$.DEAL_TAG  = :DEAL_TAG  ) ');
    bars_metabase.add_filtertbl(l_tabid, 23, l_newtabid, 'V_FOREX_SWAP', 0, 0, 0);
  else
    dbms_output.put_line('В БМД не описана таблица V_FOREX для описания вложенности таблицы V_SWAP.');
  end if;

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 2, 3, 'ASC ');

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 23, 0, 'DESC');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'UPDATE', 'FOREX.UPD1( :OTM1, :OTM, :DEAL_TAG, :PVX, :PVX1, :IRAE, :IRBE ) ');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Документи по угоді', '', '', 'ONCE', '', '', '', '', 'sPar=V_FOREX_DEAL_DOCUMENTS[NSIFUNCTION][CONDITIONS=> V_FOREX_DEAL_DOCUMENTS.ref in (select ref from FX_DEAL_REF where deal_tag=:DEAL_TAG)][DESCR=>Документи по угоді][ACCESSCODE=>1][showDialogWindow=>false] [OpenInWindow]', 55);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Документ FOREX', '', '', 'ONCE', '', '', '', '', '/barsroot/documentview/default.aspx?ref=:REF'||chr(38)||'OpenInWindow=true', 111);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 30, 'FOREX/SWAP-Угоди', '', '', 'ONCE', '', '', '', '', 'sPar=V_FOREX[CONDITIONS=>V_FOREX.swap_tag=:SWAP_TAG][DESCR=>FOREX/SWAP-Угоди][ACCESSCODE=>1][showDialogWindow=>false] [OpenInWindow]', 112);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 40, 'Анулювати поч.угоду', 'FOREX.FX_DEL (1,:SWAP_TAG)', '', 'EACH', 'Анулювати поч.угоду?', 'Готово!', '', '', '', 110);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 50, 'Анулювати ВСЮ угоду', 'FOREX.FX_DEL  (0,:DEAL_TAG)', '', 'EACH', 'Анулювати ВСЮ угоду?', 'Готово!', '', '', '', 158);

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'DAT_A');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, ':DAT_A = :B', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'DAT_B');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 2, l_newcolid, ':DAT_B = :B', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SOS');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 3, l_newcolid, ':DAT_B = :B and :DAT_A = :B and :SOS <12 ', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  bars_metabase.add_tblcolor(l_tabid, 4, null, ':DAT_B = :B and :DAT_A = :B and :SOS >=12 ', 2, 'COLOR_LightGreen');

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'NTIK');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 5, l_newcolid, '1=1', 2, 'COLOR_Sky');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'DELX');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 6, l_newcolid, '1=1', 2, 'COLOR_Gray');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'DEL1');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 7, l_newcolid, '1=1', 2, 'COLOR_Gray');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
