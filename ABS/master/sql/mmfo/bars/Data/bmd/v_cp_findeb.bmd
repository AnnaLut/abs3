set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'ЦП Форма винос на ФДЗ';
  l_tablinesdef := '';
  l_tabname     := 'V_CP_FINDEB';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'FLAG_RUN', 'B', 'Запуск~переносу~в ФД', null, 22, 19, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'ID', 'N', 'ID~внутр. ідентифікатор~ЦП', 2.3, 22, 1, 1, 1, 0, 1, '', '', 1, 0, '', 1, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'NLSD', 'C', 'Рахунок дисконту', 2, 15, 12, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'NLSFD', 'C', 'Консол.~рахунок ФД', null, 15, 3, 1, 0, 0, 0, '', '', 1, 0, '', 1, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'NLSN', 'C', 'Рахунок номінала', 2, 15, 4, 1, 0, 0, 0, '', '', 1, 0, '', 1, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'NLSP', 'C', 'Рахунок~премії', null, 15, 14, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'NLSR', 'C', 'Рахунок купона', null, 15, 6, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'NLSR2', 'C', 'Рахунок НКД', null, 15, 8, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'NLSR3', 'C', 'Рахунок "кривого"~купона', 2, 15, 10, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'NLSS', 'C', 'Рахунок~переоцінки', null, 15, 16, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'OSTD', 'N', 'Залишок~дисконта', 2.5, 22, 13, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTD)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'OSTN', 'N', 'Залишок~номінала', 2.5, 22, 5, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTN)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'OSTP', 'N', 'Залишок~премії', 2.5, 22, 15, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTP)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'OSTR', 'N', 'Залишок~купона', 2.5, 22, 7, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTR)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'OSTR2', 'N', 'Залишок~НКД', 2.5, 22, 9, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTR2)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'OSTR3', 'N', 'Залишок~"кривого купона"', 2.5, 22, 10, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTR3)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'OSTS', 'N', 'Залишок~переоцінки', 2.5, 22, 17, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTS)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'REF', 'N', 'Референс~угоди', null, 22, 3, 1, 1, 0, 0, '', '', 1, 0, '', 1, 0, 1, 'sPar=V_CP_FDZ_REFS[ACCESSCODE=>2][CONDITIONS=>V_CP_FDZ_REFS.OPER_REF = :REF]', 'FunNSIEditFFiltered("V_CP_FDZ_REFS",2, "(V_CP_FDZ_REFS.OPER_REF = :REF)")', 0);
  bars_metabase.add_column(l_tabid, 19, 'RYN', 'N', 'Код~Субпортфеля', null, 22, 2, 1, 1, 1, 1, '', '', 1, 0, '', 1, 0, 1, 'sPar=CP_ACCC[ACCESSCODE=>2][CONDITIONS=>cp_accc.ryn = :RYN]', 'FunNSIEditFFiltered("CP_ACCC",2, "(CP_ACCC.ryn = :RYN)")', 0);
  bars_metabase.add_column(l_tabid, 20, 'INITIAL_REF', 'N', 'Референс~початкової~угоди', null, 22, 0, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'CP_ID', 'C', 'ISIN~Зовн. код ЦП', null, 20, 0, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'RNK', 'N', 'РНК дебітора', 4, 22, 18, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'NLSEXPR', 'C', 'Рахунок простр~купона', 2, 15, 11, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'OSTEXPR', 'N', 'Залишок~простр купона"', 2.5, 22, 11, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'sum(OSTR3)', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_KOD');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 2, l_newtabid, l_newcolid, 'CK', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_KOD для описания сложного поля таблицы V_CP_FINDEB.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CP_RYN');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'RYN');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 19, l_newtabid, l_newcolid, 'CR', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CP_RYN для описания сложного поля таблицы V_CP_FINDEB.');
  end if;

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'INSERT', 'p_cp_takeout(:REF,:NLSFD,:RNK,:OSTN,:OSTR,:OSTR2,:OSTR3,:OSTEXPR)');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'UPDATE', 'p_cp_takeout(:REF,:NLSFD,:RNK,:OSTN,:OSTR,:OSTR2,:OSTR3,:OSTEXPR)');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'INITIAL_REF');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, ':INITIAL_REF is not null', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  bars_metabase.add_tblcolor(l_tabid, 2, null, ':REF in (select initial_ref from v_cp_findeb)', 2, 'COLOR_Salmon');

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
