set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'форма №503(6А) (Валютний Контроль)';
  l_tablinesdef := '100';
  l_tabname     := 'CIM_F503';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'CONTR_ID', 'N', 'Внутрішній ~код ~контракту', null, 6, 1, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'P1000', 'C', 'Найменування ~позичальника', 3, 27, 2, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'Z', 'C', 'Код ~позичальника', null, 10, 3, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'P0100', 'N', 'Вид ~позичальника', null, 2, 4, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'F503_ID', 'N', 'Ідентифікатор ~унікальний', null, 2, 5, 0, 1, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'P1300', 'C', 'Назва ~нерезидента-~кредитора', 5.5, 54, 6, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'P0300', 'C', 'Код ~країни ~кредитора', null, 3, 7, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'P1400', 'N', 'Тип ~кредитора', null, 2, 8, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'P1900', 'N', 'Строковість ~кредиту', null, 2, 9, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'PVAL', 'C', 'Код ~валюти', null, 3, 10, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'P1500', 'N', 'Тип ~кредиту', null, 2, 11, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'M', 'N', 'Ознака ~кредиту', null, 2, 12, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'P1600', 'N', 'Дострокове ~погашення', null, 2, 13, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'P9800', 'C', 'Зміна ~строковості ~кредиту', null, 2, 14, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'P1700', 'N', 'Код ~періодичності ~здійснення ~платежів', null, 2, 15, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'P0200', 'C', 'Номер ~балансового ~рахунку', null, 4, 16, 1, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'R_AGREE_NO', 'C', 'Номер ~реєстрації ~договору ~(свідоцтва)', null, 5, 17, 1, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'P1200', 'D', 'Дата ~реєстраційного ~свідоцтва', null, null, 18, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'P1800', 'N', 'Підстава ~подання ~звіту', null, 2, 19, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'T', 'C', 'Номер ~траншу', null, 1, 20, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'P9500', 'N', 'Величина ~процентної ~ставки', null, 3, 21, 0, 0, 0, 0, '', '#0.000', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'P9600', 'N', 'Цілі ~використання ~кредиту', null, 2, 22, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'P3100', 'D', 'Строк ~погашення ~кредиту', null, null, 23, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'P9900', 'C', 'Примітка', null, 108, 24, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'P0400', 'N', 'Тип ~процентної ~ставки', null, 2, 25, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'P0800_1', 'C', 'База ~плаваючої ~процентної ~ставки(1із3)', null, 10, 26, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 27, 'P0800_2', 'C', 'База ~плаваючої ~процентної ~ставки(2із3)', null, 3, 27, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 28, 'P0800_3', 'C', 'База ~плаваючої ~процентної ~ставки(3із3)', null, 3, 28, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 29, 'P0700', 'N', 'Розмір ~маржі ~процентної ~ставки', null, 4, 29, 0, 0, 0, 0, '', '#0.0000', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 30, 'P0900', 'N', 'Загальна ~сума ~кредиту', null, 10, 30, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 31, 'P0500', 'C', 'Номер ~кредитної ~угоди', null, 16, 31, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 32, 'P0600', 'D', 'Дата ~кредитної ~угоди', null, null, 32, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 33, 'P2010', 'N', '(2010)~Сума ~заборг. ~за одержаним, ~але ще не ~погашеним ~кредитом', null, 10, 33, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 34, 'P2011', 'N', '(2011)~Прострочена ~заборгованість ~за основною ~сумою боргу', null, 10, 34, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 35, 'P2012', 'N', '(2012)~Прострочені ~процентні ~платежі', null, 10, 35, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 36, 'P2013', 'N', '(2013)~Прострочені ~комісійні ~та інші ~платежі', null, 10, 36, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 37, 'P2014', 'N', '(2014)~Несплачена ~пеня за ~прострочені ~платежі', null, 10, 37, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'P2016', 'N', '(2016)~Одержано ~суму ~кредиту', null, 10, 38, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'P2017', 'N', '(2017)~Планові ~платежі ~в рахунок ~погашення ~основної суми ~боргу', null, 10, 39, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 40, 'P2018', 'N', '(2018)~Планові ~процентні ~платежі', null, 10, 40, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 41, 'P2020', 'N', '(2020)~Планові ~комісійні ~та інші ~платежі', null, 10, 41, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 42, 'P2021', 'N', '(2021)~Пеня ~за простр. ~платежі, ~що підлягала ~сплаті у ~звітному періоді', null, 10, 42, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 43, 'P2022', 'N', '(2022)~Фактично ~сплачено ~платежів у рах. ~погаш. основної ~суми боргу', null, 10, 43, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 44, 'P2023', 'N', '(2023)~Достроково ~сплачено ~платежів у рах. ~погаш. основної ~суми боргу', null, 10, 44, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 45, 'P2024', 'N', '(2024)~Прострочена ~заборг. ~сплач. платежів у ~рахунок ~погашення ~ОС боргу', null, 10, 45, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 46, 'P2025', 'N', '(2025)~Реорганіз. ~платежів ~у рахунок ~погашення ~основної ~суми боргу', null, 10, 46, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 47, 'P2026', 'N', '(2026)~Реорганіз. ~шляхом ~збільш. частки ~в стат. ~капіталі ~позичальника', null, 10, 47, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 48, 'P2027', 'N', '(2027)~Реорганіз. ~прощення ~боргу', null, 10, 48, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 49, 'P2028', 'N', '(2028)~Реорганіз. ~шляхом ~взаємозаліку', null, 10, 49, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 50, 'P2029', 'N', '(2029)~Фактично ~сплачено ~процентів', null, 10, 50, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 51, 'P2030', 'N', '(2030)~Достроково ~сплачено ~процентів ', null, 10, 51, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 52, 'P2031', 'N', '(2031)~Фактично ~сплачена ~прострочена ~заборг. ~у процентах', null, 10, 52, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 53, 'P2032', 'N', '(2032)~Реорганіз. ~платежів ~у рахунок ~погашення ~процентів', null, 10, 53, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 54, 'P2033', 'N', '(2033)~Реорганіз. ~платежів ~шляхом збіл. ~частки в ~стат. капіт. ~позич-ка', null, 10, 54, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 55, 'P2034', 'N', '(2034)~Реорганіз. ~шляхом ~прощення боргу', null, 10, 55, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 56, 'P2035', 'N', '(2035)~Реорганіз. ~шляхом ~взаємозаліку', null, 10, 56, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 57, 'P2036', 'N', '(2036)~Фактично ~сплачено ~комісійних та ~інших платежів', null, 10, 57, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 58, 'P2037', 'N', '(2037)~Фактично ~сплачено ~пені за ~прострочені ~платежі', null, 10, 58, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 59, 'P2038', 'N', '(2038)~Прострочена ~заборгов. за ~основною ~сумою боргу', null, 10, 59, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 60, 'P2042', 'N', '(2042)~Прострочені ~процентні ~платежі', null, 10, 60, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 61, 'P3000', 'N', '(3000)~Код стану ~розрахунків ~за кредитом', null, 2, 61, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 63, 'P_DATE_TO', 'D', 'Сформовано ~на дату', null, null, 63, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 64, 'DATE_REG', 'D', 'Створено', 3, null, 64, 0, 0, 0, 0, '', 'dd/MM/yyyy hhhh:mm:ss', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 65, 'USER_REG', 'C', 'Користувач ~додав у ~звіт', null, 30, 65, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 66, 'DATE_CH', 'D', 'Остання ~зміна', 3, null, 66, 0, 0, 0, 0, '', 'dd/MM/yyyy hhhh:mm:ss', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 67, 'USER_CH', 'C', 'Користувач ~редагування', null, 30, 67, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 68, 'BRANCH', 'C', 'Відділення', null, 30, 68, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 69, 'KF', 'C', 'МФО', null, 6, 69, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 70, 'P3200', 'N', '(3200)~Код ~типу ~реорганізації', null, 2, 61, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 71, 'P3300', 'C', '(3300)~Код ~валюти~розрахунків', null, 3, 61, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 72, 'F057', 'C', 'Код ~виду ~запозичення', null, 3, 72, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_51_1');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'P102');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 4, l_newtabid, l_newcolid, 'a', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_51_1 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_r040');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'COUNTRY');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 7, l_newtabid, l_newcolid, 'b', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_r040 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z200');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z200');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 8, l_newtabid, l_newcolid, 'c', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z200 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_s184');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'S184');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 9, l_newtabid, l_newcolid, 'd', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_s184 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_r030');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'KV');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 10, l_newtabid, l_newcolid, 'e', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_r030 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z203');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z203');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 11, l_newtabid, l_newcolid, 'f', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z203 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_34_1');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 12, l_newtabid, l_newcolid, 'g', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_34_1 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z201');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z201');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 13, l_newtabid, l_newcolid, 'k', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z201 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_change_info');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 14, l_newtabid, l_newcolid, 'l', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_change_info для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z202');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z202');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 15, l_newtabid, l_newcolid, 'm', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z202 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_reason');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 19, l_newtabid, l_newcolid, 'n', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_reason для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_credit_f503_purpose');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 22, l_newtabid, l_newcolid, 'o', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_credit_f503_purpose для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_percent_type');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 25, l_newtabid, l_newcolid, 'p', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_percent_type для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_p_base');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'BASE');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 26, l_newtabid, l_newcolid, 'r', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_p_base для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_p_base_t');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'TERM');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 27, l_newtabid, l_newcolid, 's', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_p_base_t для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_p_base_val');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'VAL');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 28, l_newtabid, l_newcolid, 't', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_p_base_val для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_34_2');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 61, l_newtabid, l_newcolid, 'x', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_34_2 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('V_CIM_KOD_6A_3');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'P3200');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 70, l_newtabid, l_newcolid, 'y', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица V_CIM_KOD_6A_3 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_r030');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'KV');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 71, l_newtabid, l_newcolid, 'z', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_r030 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F057');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F057');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 72, l_newtabid, l_newcolid, 'q', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F057 для описания сложного поля таблицы CIM_F503.');
  end if;


  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Вигрузити все в текстовий файл', 'cim_reports.get_text_file_f503', '', 'ONCE', '', 'Збережено', '', '', 'sPar=[DESCR=>Вигрузити все в текстовий файл][EXEC=>GET_FILE_ONCE][PROC=>cim_reports.get_text_file_f503(:p_clob, :p_namefile)][OUT_PARAMS=>:p_clob(SEM=ФАЙЛ,TYPE=CLOB),:p_namefile(SEM=ИМЯ ФАЙЛА,TYPE=fileName)]', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Синхронізувати з модулем ВК', 'cim_reports.sync_f503', '', 'ONCE', 'Ви дійсно бажаєте змінити данні згідно значень у ВК?', 'Данні синхронізовано з ВК', '', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 3, 'Історія змін при синхронізаціях контракту', '', '', 'ONCE', '', '', '', '', 'sPar=CIM_F503_AUTO_CHANGE_HIST[CONDITIONS=> F503_ID=:F503_ID][DESCR=>Історія змін при синхронізаціях][ACCESSCODE=>1][showDialogWindow=>false][OpenInWindow]', null);

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
