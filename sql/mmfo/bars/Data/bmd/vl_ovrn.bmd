set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'OVRN-L) «Овердрафт Холдингу». Ліміти.';
  l_tablinesdef := '';
  l_tabname     := 'VL_OVRN';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'ACC', 'N', 'ACC', null, null, 90, 0, 1, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'ACCC', 'N', 'ACCC', null, null, 91, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'DATM', 'D', 'Дата-min~ЧКО', null, null, 25, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'DATX', 'D', 'Дата-max~ЧКО', null, null, 26, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'DEL10', 'N', '% зміни~Ліміту~N=10%', .5, null, 14, 0, 0, 0, 0, '', '#0.00', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'FDAT', 'D', 'Дата~нового~Ліміту', 1, null, 24, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'LIM_NEW', 'N', 'Новий~Ліміт~ГЛО +', 1.5, null, 13, 0, 0, 0, 0, '', '# ##0.00', 0, 0, '', 0, 0, 0, 'sPar=S3_OVRN[CONDITIONS=>ND=:ND and acc=:ACC][ACCESSCODE=>2][NSIFUNCTION][PROC=>OVRN.PUL_OVR(1,:ND,:ACC)][EXEC=>BEFORE]   ', 'FunNSIEditF("V3_OVRN[NSIFUNCTION][PROC=>OVRN.PUL_OVR( 1, "||Str(:ND)||","||Str(:ACC)||")][EXEC=>BEFORE]",0 )', 0);
  bars_metabase.add_column(l_tabid, 9, 'LIM_OLD', 'N', 'Діючий~Ліміт', 1.5, null, 8, 0, 0, 0, 0, '', '# ##0.00', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'ND', 'N', 'Реф.дог~ПОДІЇ ДОГ', 1.5, null, 0, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 1, 'sPar=CC_SOB_W[NSIFUNCTION][ACCESSCODE=>4][PROC=>PUL.Set_Mas_Ini(''ND'',:ND, ''X'' )][EXEC=>BEFORE]', 'FunNSIEditFFiltered("CC_SOB", 0, "nd = "|| Str( :ND)  ) ', 0);
  bars_metabase.add_column(l_tabid, 11, 'NLS', 'C', 'Рахунок~ІСТОРІЯ РАХ', 2, null, 6, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '/barsroot/customerlist/showhistory.aspx?acc=:ACC'||chr(38)||'type=1', 'Show_Sal_Day_P(:ACC, STRING_Null, NUMBER_Null, :DATM, :DATX )', 0);
  bars_metabase.add_column(l_tabid, 12, 'NMK', 'C', 'Клієнт~ШАБЛОН ПОВІД.~ПРО ЗМІНУ ГЛО', 2, null, 3, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, 'sPar=VZ_OVRN[PROC=>OVRN.PUL_OVR( 2, :ND, :ACC ) ][EXEC=>BEFORE][ACCESSCODE=>2]', 'FunNSIEditF("VZ_OVRN[PROC=>OVRN.PUL_OVR( 2, "||Str(:ND)||","||Str(:ACC)||")][EXEC=>BEFORE]" , 2  )', 0);
  bars_metabase.add_column(l_tabid, 13, 'OKPO', 'C', 'Ід.код~~КАРТКА КЛ.', 1, null, 20, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '/barsroot/clientregister/registration.aspx?readonly=1'||chr(38)||'rnk=:RNK', 'EditCustomer( 2 , NUMBER_Null, :RNK, CVIEW_ReadOnly, hWndForm, 0, "", FALSE)', 0);
  bars_metabase.add_column(l_tabid, 14, 'RNK', 'N', 'РНК ~кл.', 1, null, 22, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'AL', 'B', 'Ліміт~авториз~на 21', .3, null, 9, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'CC_ID', 'C', '№ ~дог~РАХУНКИ ', 1, null, 1, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '/barsroot/customerlist/custacc.aspx?type=3'||chr(38)||'nd=:ND', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'SDATE', 'D', 'Дата~Початку~дог', 1.5, null, 2, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'NK', 'B', 'Нов~кл.', .3, null, 4, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'LIMIT', 'N', 'Ліміт~по дог', 1.5, null, 7, 0, 0, 0, 0, '', '# ##0.00', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'CHKO3', 'N', 'ЧКО за~поперед~міс.', 1.5, null, 10, 0, 0, 0, 0, '', '# ##0.00', 0, 0, '', 0, 0, 0, 'sPar=V7_OVRN[NSIFUNCTION][PROC=>OVRN.PUL_OVRD(:ND,:ACC,to_char(:X,''dd.mm.yyyy''), Null)][EXEC=>BEFORE][ACCESSCODE=>4][PAR=>:X(SEM=Міс для ЧКО,TYPE=D)]', 'FunNSIEditF("V7_OVRN[NSIFUNCTION][PROC=>OVRN.PUL_OVRD(:ND,:ACC,''"||SalFmtFormatDateTime(:DATX,"dd.MM.yyyy")||"'',STRING_Null )]", 4)', 0);
  bars_metabase.add_column(l_tabid, 21, 'CHKO13', 'N', 'Сума ЧКО~за ост.~ 3 міс', 1.5, null, 12, 0, 0, 0, 0, '', '# ##0.00', 0, 0, '', 0, 0, 0, '', 'FunNSIEditF("V6_OVRN[PROC=>PUL.Set_Mas_Ini(''ACC26'','' "||Str(:ACC)||"'',''ACC262'')][EXEC=>BEFORE]",0)', 0);
  bars_metabase.add_column(l_tabid, 23, 'SOS', 'N', 'Стан', .3, null, 16, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'WDATE', 'D', 'Дата~Заверш~дог', 1, null, 21, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'DATXS', 'C', 'DATXS', null, null, 99, 0, 1, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'PD', 'N', 'Ліміт~ від ЧКО~(%)', .7, null, 11, 0, 0, 0, 0, '', '#0.00', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 27, 'DONOR', 'B', 'Учасник ГК~Без~оверд', .3, null, 5, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 28, 'KF', 'C', 'Код~МФО', .5, null, 30, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CC_SOS');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'SOS');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 23, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CC_SOS для описания сложного поля таблицы VL_OVRN.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('BANKS_RU');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'MFO');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 28, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица BANKS_RU для описания сложного поля таблицы VL_OVRN.');
  end if;

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 10, 1, 'ASC ');

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 11, 2, 'DESC');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'DELETE', '');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Договірні Ліміти ОВР ', '', '', 'EACH', '', '', '', '', 'sPar=V3D_OVRN[ACCESSCODE=>1][PROC=>PUL.PUT ( ''ND'', :ND) ][EXEC=>BEFORE][showDialogWindow=>false]', 47);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 5, 'Аналіз  і розрах.ЧКО', '', '', 'EACH', '', '', '', '', 'sPar=V7_OVRN[NSIFUNCTION][PROC=>OVRN.PUL_OVRD(:ND,:ACC,to_char(:X,''dd.mm.yyyy''), Null)][EXEC=>BEFORE][ACCESSCODE=>4][PAR=>:X(SEM=Міс для ЧКО,TYPE=D)]', 80);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 6, 'Підсумки ЧКО', '', '', 'EACH', '', '', '', '', 'sPar=V6_OVRN[PROC=>PUL.Set_Mas_Ini(''ACC26'', :ACC ,''ACC262'' )][EXEC=>BEFORE][ACCESSCODE=>0]', 73);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 10, 'Сформувати Повідомлення лієнту', 'OVRN.REP_LIM ( :NLS, :ACC) ', '', 'EACH', '', '', '', '', '', 10);

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'LIM_OLD');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 0, l_newcolid, ':AL = 0', 2, 'COLOR_Red');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'ND');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, ':ACCC is null', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'CC_ID');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 2, l_newcolid, ':ACCC is null', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'SDATE');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 3, l_newcolid, ':ACCC is null', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'LIM_NEW');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 4, l_newcolid, ':AL = 0', 2, 'COLOR_Red');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
