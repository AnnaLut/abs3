set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := '15/06/17.V_XOZREFI. Інвентаризаційна відомость по госп ДЗ';
  l_tablinesdef := '10';
  l_tabname     := 'V_XOZREFI';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 2, 'DATD', 'D', 'Дата~док~Деб', 1.3, null, 35, 0, 0, 0, 0, '', '', 1, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'ID_B', 'C', 'Iд.код~отримувача', 1.3, null, 38, 0, 0, 0, 0, '', '', 1, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'MFOB', 'C', 'МФО~Б', .7, null, 40, 0, 0, 0, 0, '', '', 1, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'NAM_B', 'C', 'Назва~отримувача', 1.5, null, 36, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'NAZN', 'C', 'Призначен~пл-1', 2, 160, 37, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'ND', 'C', '№ ~док~Деб', .8, null, 34, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'NLS', 'C', 'Рах~Деб.заборг.', 1.3, null, 2, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'NLSB', 'C', 'Рах~отримувача', 1.3, null, 45, 0, 0, 0, 0, '', '', 1, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'REF1', 'N', 'Реф-1~Деб~ДОКУМЕНТ', 1, null, 6, 0, 1, 0, 0, '', '', 1, 0, '', 1, 0, 0, '/barsroot/documentview/default.aspx?ref=:REF1', 'DocViewContentsEx(hWndForm, :REF1)', 0);
  bars_metabase.add_column(l_tabid, 14, 'VDAT', 'D', 'Дата ~ВИНИКНЕННЯ~Деб.заборг.', 1.5, null, 8, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'DNI', 'N', 'Залишк.~термiн~днiв', .5, null, 31, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'DNIP', 'N', 'Початк.~термiн~днiв', .5, null, 32, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'S0', 'N', 'Сума~ВИНИКНЕННЯ~Деб.заборг.', 1.5, null, 9, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'OB22', 'C', 'Ob22', .3, null, 0, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'BRANCH', 'C', 'Бранч', 1, null, 1, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'REFD', 'N', 'Реф-D~Реф.Деб.зап~до ЦА', 1, null, 47, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'MDATE', 'D', 'План-дата~закриття', 1, null, 10, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 9, 1, 'ASC ');

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 12, 2, 'ASC ');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'UPDATE', 'XOZ.UPD_REF1( :REF1, :STMT1, :VDAT, :MDATE, :NOTP)');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Повне РУЧНЕзактиття  (обнулення) ', 'XOZ.OPL_REF_H2( :ACC, :REF1, :STMT1, :VDAT, :S0, :R ,:Z, :S0, null ) ', ':R(SEM=Реф.документу закриття (за наявності) ,TYPE=N),:Z(SEM=Признак закриття корр.проводками=1,TYPE=N)', 'EACH', 'Всю суму документу :S0 буде закрито з введеним признаком корригуючих', 'ОК', '', '', '', 11);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 3, 'Часткове Ручне закриття (зменшення) БЕЗ поновлення дати для залишку ', 'XOZ.OPL_REF_H2( :ACC, :REF1, :STMT1, :VDAT, :S0, :R, :Z, :P, null ) ', ':R(SEM=Реф.док закриття...,TYPE=N),:Z(SEM=Прз закриття корр=1,TYPE=N),:P(SEM=Сума ЧАСТКИ закриття,TYPE=N)', 'EACH', 'Введену частку суми документу буде закрито з  введеним признаком корригуючих', 'ОК', '', '', '', 112);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 5, 'Часткове Ручне закриття (зменшення) З поновленням дати для залишку ', 'XOZ.OPL_REF_H2( :ACC, :REF1, :STMT1, :VDAT, :S0, :R, :Z, :P, gl.BD ) ', ':R(SEM=Реф.док закриття...,TYPE=N),:Z(SEM=Прз закриття корр=1,TYPE=N),:P(SEM=Сума ЧАСТКИ закриття,TYPE=N)', 'EACH', 'Введену частку суми документу буде закрито з  введеним признаком корригуючих', 'ОК', '', '', '', 108);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 10, 'Повне  АВТО закриття ( з ПРОВОДКОЮ ) ', 'XOZ.OPL_REF2(:ACC, :REF1, :STMT1, :VDAT, :S0, :Z, :S0, null, :T, :X, null, :O, :A )', ':A(SEM=Рах Деб,REF=V_XOZOB22_NLS),:Z(SEM=Корр=1,TYPE=N),:T(SEM=Підстава),:X(SEM=Код ДЗ,REF=KOD_DZ),:O(SEM=OB40 для ф40,REF=KF_OB40)
', 'EACH', 'Всю суму документу :S0 буде закрито з введеним признаком корригуючих', 'ОК', '', '', '', 157);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 12, 'Часткове  АВТО закриття ( з ПРОВОДКОЮ )   БЕЗ поновлення дати для залишку ', 'XOZ.OPL_REF2(:ACC, :REF1, :STMT1, :VDAT, :S0, :Z, :P, null, :T, :X, null, :O, :A )', ':P(SEM=Сума ЧАСТКИ закриття,TYPE=N),:A(SEM=Рах Деб,REF=V_XOZOB22_NLS),:Z(SEM=Корр=1,TYPE=N),:T(SEM=Підстава),:X(SEM=Код ДЗ,REF=KOD_DZ),:O(SEM=OB40 для ф40,REF=KF_OB40)', 'EACH', 'Введену частку суми документу буде закрито з  введеним признаком корригуючих', 'ОК', '', '', '', 85);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 13, 'Часткове  АВТО закриття ( з ПРОВОДКОЮ )  З поновленням дати для залишку ', 'XOZ.OPL_REF2(:ACC, :REF1, :STMT1, :VDAT, :S0, :Z, :P, GL.BD, :T, :X,  NULL,  :O, :A )', ':P(SEM=Сума ЧАСТКИ закриття,TYPE=N),:A(SEM=Рах Деб,REF=V_XOZOB22_NLS),:Z(SEM=Корр=1,TYPE=N),:T(SEM=Підстава),:X(SEM=Код ДЗ,REF=KOD_DZ),:O(SEM=OB40 для ф40,REF=KF_OB40)', 'EACH', 'Введену частку суми документу буде закрито з  введеним признаком корригуючих', 'ОК', '', '', '', 84);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 14, 'Деб.запит до ЦА на  АВТО закриття ', 'XOZ.OPL_REFD( :ACC, :REF1, :STMT1, gl.bd, :S0, 0, 0, gl.bd, '''', '''', '''', '''', '''' )', '', 'EACH', '', 'ОК', '', '', '', 71);

  -- добавляем описание раскраски
  bars_metabase.add_tblcolor(l_tabid, 1, null, 'REFD is not null', 1, 'COLOR_Red');

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'MDATE');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 2, l_newcolid, 'MDATE < gl.BD', 2, 'COLOR_LightGray');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;