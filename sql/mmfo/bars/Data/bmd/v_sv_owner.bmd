set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_tabselect_statement meta_tables.select_statement%type;
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'Вiдомостi про структуру власностi банку';
  l_tablinesdef := '';
  l_tabselect_statement := '';
  l_tabname     := 'V_SV_OWNER';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic, l_tabselect_statement);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- обновляем select_statement таблицы
    bars_metabase.set_tabselect_statement(l_tabid, l_tabselect_statement);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'ID', 'N', '~Ид.', '', 22, 1, 0, 1, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'NM1', 'C', '~Прізвище/найменування', '3', 254, 2, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'NM2', 'C', '~Ім’я~(скорочене найменування)', '3', 50, 3, 0, 0, 1, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'NM3', 'C', '~По батькові', '3', 50, 4, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'TYPE', 'N', 'Тип учасника:~0-Держава,1-ЮО,~ 2-ФО,~3 – міжнарод.', '2', 22, 6, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'COD', 'C', '~Ідентифікаційний~код', '1.5', 20, 7, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'OZN', 'N', '~Ознака особи', '.8', 22, 9, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'POS', 'C', '~Посада', '2', 254, 11, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'DOC', 'C', '~Документ', '1.2', 8, 12, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'ADR', 'C', '~Адреса', '1.2', 6, 13, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'UCH', 'C', '~Участь', '1.2', 6, 14, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'NAT', 'C', '~Громадянство', '', 254, 8, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'NM_UA', 'C', '~Ім’я/найменування~(трансліт. українською мовою)', '', 254, 5, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'OPRUCH', 'C', '~Опосередкована~ участь', '', 21, 16, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'OWNER_GROUP', 'C', '~Належить до групи', '2', 17, 17, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'OWNER_OZN', 'N', 'Ід.~істотної~участі', '1', 22, 10, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'REL_TYPE', 'N', '~Тип~зв''язків', '', 22, 15, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'VOICE', 'C', '~Передані~голоси', '', 15, 18, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'NBU_DOC_DATE', 'D', '~Дата рішення~НБУ', '', 10, 21, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'NBU_DOC_NUM', 'C', '~Номер рішення~НБУ', '', 100, 20, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'CONDITION', 'C', 'Обставини~вирішального~впливу', '', 29, 19, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'MANAGER', 'C', '~Керівник', '', null, 22, 0, 0, 0, 0, '', '', 0, 1, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('SV_OZN');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 7, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица SV_OZN для описания сложного поля таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('SV_OWNER_OZN');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 17, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица SV_OWNER_OZN для описания сложного поля таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('SV_REL_TYPE');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 18, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица SV_REL_TYPE для описания сложного поля таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_OWNERDOC');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 9, l_newtabid, 'ID', 0, 0, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_OWNERDOC для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_OWNERADR');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 10, l_newtabid, 'ID', 0, 0, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_OWNERADR для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_OWNERUCH');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 11, l_newtabid, 'ID', 0, 0, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_OWNERUCH для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_OPRUCH_REL');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 15, l_newtabid, 'ID', 1, 1, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_OPRUCH_REL для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_OWNER_GROUP');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 16, l_newtabid, 'ID', 0, 0, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_OWNER_GROUP для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_VOICE');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 19, l_newtabid, 'ID', 1, 1, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_VOICE для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_OWNER_COND');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('ID', 'Фильтр по ID', '$~~ALIAS~~$.ID=:ID');
    bars_metabase.add_filtertbl(l_tabid, 22, l_newtabid, 'ID', 0, 0, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_OWNER_COND для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание вложенных таблиц
  l_newtabid := bars_metabase.get_tabid('V_SV_BANK');
  if (l_newtabid is not null) then
    bars_metabase.change_filter('MANAGER', 'Фільтр керівник', '1=1');
    bars_metabase.add_filtertbl(l_tabid, 23, l_newtabid, 'MANAGER', 1, 1, 1);
  else
    dbms_output.put_line('В БМД не описана таблица V_SV_BANK для описания вложенности таблицы V_SV_OWNER.');
  end if;

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 2, 1, 'ASC ');

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 3, 2, 'ASC ');

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 4, 3, 'ASC ');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'DELETE', 'bars_sv.set_owner(:ID, ''DELETE'', :NM2, :NM3, :TYPE, :COD, :OZN, :POS,:NAT,:OWNER_OZN,:NM_UA,:REL_TYPE,:NBU_DOC_NUM,:NBU_DOC_DATE)');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'INSERT', 'bars_sv.set_owner(:ID, :NM1, :NM2, :NM3, :TYPE, :COD, :OZN, :POS,:NAT,:OWNER_OZN,:NM_UA,:REL_TYPE,:NBU_DOC_NUM,:NBU_DOC_DATE)');

  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'UPDATE', 'bars_sv.set_owner(:ID, :NM1, :NM2, :NM3, :TYPE, :COD, :OZN, :POS,:NAT,:OWNER_OZN,:NM_UA,:REL_TYPE,:NBU_DOC_NUM,:NBU_DOC_DATE)');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Iнформацiя про Набуття права голосу', '', '', '', '', '', 'FunNSIEditF(''SV_GOLOS'', 0)', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Iнформацiя про Вiдсотки статутного капiталу, кiлькiсть голосiв, керiвника банку', '', '', '', '', '', 'FunNSIEditF(''SV_BANK'', 0)', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 3, 'Iмпорт файлу Iнформацiя про власникiв iстотної участi', '', '', '', '', '', 'GeneralImpExp(hWndMDI, 3, 3, ''bars_sv.import_file(sFileName, 1)'', '''')', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 4, 'Iмпорт файлу Схематичне зображення структури власностi банку', '', '', '', '', '', 'GeneralImpExp(hWndMDI, 3, 3, ''bars_sv.import_file(sFileName, 2)'', '''')', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 5, 'Формування файлу P7', '', '', '', '', '', 'GeneralImpExp(hWndMDI, 3, 2, ''bars_sv.form_p7(sFileName)'', '''')', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 6, 'Iмпорт квитанцiї P8', '', '', '', '', '', 'GeneralImpExp(hWndMDI, 3, 1, ''bars_sv.import_tick(sFileName)'', '''')', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 7, 'Файли та квитанцiї', '', '', '', '', '', 'FunNSIEditF(''SV_FILES'', 1)', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 8, 'Довiдник параметрiв', '', '', '', '', '', 'FunNSIEditF(''SV_PARAMS'', 0)', '', '', null);

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
