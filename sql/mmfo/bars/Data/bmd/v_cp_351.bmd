set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_tabselect_statement meta_tables.select_statement%type;
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := '2.6. Перегляд кредитного ризику (Цінні папери)';
  l_tablinesdef := '25';
  l_tabselect_statement := '';
  l_tabname     := 'V_CP_351';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic, l_tabselect_statement);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- обновляем select_statement таблицы
    bars_metabase.set_tabselect_statement(l_tabid, l_tabselect_statement);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'ACC', 'N', 'Вн. номер рах.', '', 22, null, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'COUNTRY', 'N', 'Код країни контра-гента', '', 22, null, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'CR', 'N', 'Розмір~кредитного~ризику~351~CR (ном.)~14', '', 22, 23, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'DATE_V', 'D', 'Дата виникнення боргу/наданих фінансових зобов"яза', '', 10, null, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'EAD', 'N', 'Експозиція~під риз-ком~EAD (ном.)~~~9(а)', '', 22, 14, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'BVQ', 'N', 'Балансова~вартість~екв.~(BVQ)~~8(б)', '', 22, 13, 0, 0, 0, 0, '', '# ##0.00', 0, 0, 'SUM(BVQ)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'FIN', 'N', 'Клас~боржника~~~~10(a)', '', 22, 16, 0, 0, 0, 0, '', '# ##0', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'FIN23', 'N', 'Клас позич.~пост.23~~~~24', '', 22, 45, 0, 0, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'S080_Z', 'C', 'S080~класу~контр.~визн~на основі~інтегр.пок.~10(г)', '', null, 19, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'ISE', 'C', 'Код інститу-ційного сектора економіки', '', 5, null, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'KOL', 'N', 'К-ть днів~прострочення~~~~16', '', 22, 26, 0, 0, 0, 0, '', '# ##0', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'KV', 'N', 'Код~валюти~~~~7(г)', '', 22, 11, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'BV', 'N', 'Балансова~вартість~ном.~(BV)~~8(а)', '', 22, 12, 0, 0, 0, 0, '', '# ##0.00', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'K_FAKTOR', 'N', 'PD :Код фактору, на підставі якого скоригований клас боржника', '', 22, null, 0, 0, 0, 0, '', '', 0, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'LGD', 'N', 'Значення~коефіцієнта~LGD~~~18(в)', '', 22, 33, 0, 0, 0, 0, '', '# ##0.00000000', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'ND', 'N', 'Реф.~договору~~~~3', '', 22, 3, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'NLS', 'C', 'Номер~рахунку~~~~7(в)', '', 15, 10, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'NMK', 'C', 'Назва~клієнта~~~~4', '', 70, 4, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'PAWN', 'N', 'Код виду~забезпечення~~~~21', '', 22, 35, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'PD', 'N', 'Значення~коефіцієнта~PD~~~12', '', 22, 21, 0, 0, 0, 0, '', '# ##0.00000', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'PRINSIDER', 'N', 'Код типу пов"язаної з банком особи', '', 22, null, 0, 0, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'RC', 'N', 'Інші~надход-ження~ (RС)~~~22', '', 22, 36, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'RNK', 'N', 'РНК~~~~~2', '', 22, 2, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'SDATE', 'D', 'Дата~договору~~~~6(а)', '', 10, 6, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'WDATE', 'D', 'Дата~погаш.боргу~наданих~фінан-х~зобов"язань~6(б)', '', 10, 7, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'ZAL', 'N', 'Сума~забезпечення~(CV*k)~(ном.)~~17', '', 22, 27, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 27, 'TEXT', 'C', 'Комент', '', 250, 46, 0, 0, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 28, 'CRQ', 'N', 'Розмір~кредитного~ризику~351~CRQ (екв.)~15', '', 22, 24, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'SUM(CRQ)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 29, 'EADQ', 'N', 'Експозиція~під риз-ком~EADQ (екв.)~~~9(б)', '', 22, 15, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'SUM(EADQ)', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 30, 'FDAT', 'D', 'Звітна~дата~~~~1', '', 10, 1, 0, 1, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 31, 'IDF', 'N', 'Тип для~визначення PD~~~~26', '', 22, 62, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 32, 'KPZ', 'N', 'Коефіцієнт~покриття~забезпеченням~~~18(а)', '', 22, 31, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 33, 'TIPA', 'N', 'Тип~актива~~~~28', '', 22, 64, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 34, 'TIP_ZAL', 'N', 'Тит~забезпечення~~~~27', '', 22, 63, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 35, 'VIDD', 'N', 'Вид~договору~~~~25', '', 22, 59, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 36, 'VKR', 'C', 'Внутрішній~кредитний~рейтинг~(ВКР)~~11', '', 3, 20, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 37, 'KL_351', 'N', 'Коеф.~ліквідності~забезпечення~~~18(б)', '', null, 32, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'CCF', 'N', 'Значення~коефіцієнта~кредитної~конверсії~(CCF)~13', '', null, 22, 0, 0, 0, 0, '', '##0', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'CR_LGD', 'N', 'Кредитний ризик~~CR=EAD*PD*LGD', '', null, 25, 0, 0, 0, 0, '', '', 1, 0, '', 0, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 40, 'ISTVAL', 'C', 'Джерело~валютної~виручки~~~32', '', null, 75, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 41, 'S250', 'C', 'Портфельный~s250=8~~~~29', '', null, 70, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 42, 'DV', 'N', '%~державної~власності~~~19', '', null, 34, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 43, 'RZ', 'C', 'Резидентність~1- резидент~2- нерезидент~~~20', '', null, 34, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 44, 'CC_ID', 'C', 'Номер~договору~~~~5', '', null, 5, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 45, 'NBS', 'C', 'Бал.~рахунок~~~~7(а)', '', null, 8, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 46, 'OVKR', 'C', 'Ознаки~високого~кредитного~ризику~~23(а)', '', null, 37, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 47, 'P_DEF', 'C', 'Події~дефолту~~~~23(б)', '', null, 38, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 48, 'OVD', 'C', 'Ознаки~визнання~дефолту~~~23(в)', '', null, 39, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 49, 'OPD', 'C', 'Ознаки~припинення~дефолту~~~23(г)', '', null, 40, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 50, 'FIN_Z', 'N', 'Клас~контр.~визнач~на основі~інтегр.пок.~10(в)', '', null, 18, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 51, 'OB22', 'C', 'ОБ22~~~~~7(б)', '', null, 9, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 52, 'GRP', 'N', 'Группа~портфельного~метода~~~30', '', null, 71, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 53, 'ZAL_BV', 'N', 'Справедлива~варт.~забезпечення~(ном.)~~17(а)', '', 22, 29, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', 'ZAL_BV/100', 0);
  bars_metabase.add_column(l_tabid, 54, 'ZAL_BVQ', 'N', 'Справедлива~варт.~забезпечення~(екв.)~~17(б)', '', 22, 30, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'SUM(ZAL_BVQ/100)', 0, 0, 0, '', 'ZAL_BVQ/100', 0);
  bars_metabase.add_column(l_tabid, 55, 'ZALQ', 'N', 'Сума~забезпечення~(CVQ*k)~(екв.)~~17', '', null, 28, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 56, 'KOL24', 'C', 'KOL24~~~~~33', '', 500, 80, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 57, 'KOL25', 'C', 'KOL25~~~~~34', '', 500, 81, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 58, 'KOL26', 'C', 'KOL26~~~~~35', '', 500, 82, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 59, 'KOL27', 'C', 'KOL27~~~~~36', '', 500, 83, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 60, 'KOL28', 'C', 'KOL28~~~~~37', '', 500, 84, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 61, 'KOL29', 'C', 'KOL29~~~~~38', '', 500, 85, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 62, 'KOL30', 'C', 'KOL30~~~~~39', '', 500, 86, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 63, 'S080', 'C', 'S080~~~~~10(б)', '', null, 17, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CC_PAWN');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'PAWN');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 19, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CC_PAWN для описания сложного поля таблицы V_CP_351.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('GRP_PORTFEL');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'GRP');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 52, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица GRP_PORTFEL для описания сложного поля таблицы V_CP_351.');
  end if;

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
