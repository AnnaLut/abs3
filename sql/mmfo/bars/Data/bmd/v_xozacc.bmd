set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_tabselect_statement meta_tables.select_statement%type;
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := '06.12.2018. V_XOZACC. ДЗ за госп діяльністю. Рахунки.';
  l_tablinesdef := '20';
  l_tabselect_statement := ' SELECT a.RNK,  a.ob22,  a.ACC, a.KV, a.NLS, a.NMS, a.ISP, a.BRANCH, c.nmk, c.custtype TYPE, null s180, a.OSTC, NVL(x.KC,0) KOL, NVL(x.SC,0) S,
     (-a.ostc+NVL(x.SC,0)) DEL, a.OSTB, NVL(x.KB,0) KOLB,  NVL(x.SB,0) SB, (-a.ostB+NVL(x.SB,0)) DELB,  ''Архiв'' ARC,  a.NBS||a.ob22 prod,
     ( SELECT MAX (fdat)  FROM saldoa  WHERE acc = a.acc AND ostf >= 0 AND ostf-dos+kos <= 0 ) DAT0
FROM customer c,
     (SELECT RNK, ob22, ACC, KV, NLS, NMS, ISP, tobo BRANCH, -ostc/100 OSTC, -(ostb+ostf)/100 OSTB, nbs
      FROM accounts   WHERE tip IN (''XOZ'', ''W4X'') ) a,
     (SELECT acc, SUM(kc) kc, SUM(kb) kb, SUM(sc)/100 sc, SUM(sb)/100 sb FROM (SELECT r.acc, 1 KC, 1 KB, r.s SC, r.s SB FROM xoz_ref r WHERE r.s > 0 AND r.ref2 IS NULL)  GROUP BY acc) x
 WHERE a.rnk = c.rnk   AND a.acc = x.acc(+)   AND (a.ostc <> 0 OR NVL (x.SC, 0) <> 0 OR a.ostb <> 0)';
  l_tabname     := 'V_XOZACC';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic, l_tabselect_statement);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- обновляем select_statement таблицы
    bars_metabase.set_tabselect_statement(l_tabid, l_tabselect_statement);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 1, 'ACC', 'N', 'ACC', '.3', null, 99, 0, 1, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 2, 'BRANCH', 'C', 'Бранч', '1', null, 19, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'DEL', 'N', 'Факт~Вiдхилення', '1', null, 12, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(DEL) ', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'KOL', 'N', 'Кiл.в~картотецi', '.3', null, 8, 0, 0, 0, 0, '', '', 1, 0, 'Sum(KOL)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'KV', 'N', 'Вал', '.3', null, 22, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'NLS', 'C', 'Рахунок~~КАРТКА', '1.3', null, 2, 0, 0, 0, 0, '', '', 1, 0, 'to_char(Count(*)) ', 1, 0, 0, '/barsroot/viewaccounts/accountform.aspx?type=2'||chr(38)||'acc=:ACC'||chr(38)||'rnk='||chr(38)||'accessmode=1', 'OperWithAccountNN(AVIEW_CUST, :ACC, :RNK, ACCESS_READONLY, hWndForm, "", FALSE)', 0);
  bars_metabase.add_column(l_tabid, 7, 'NMS', 'C', 'Назва~рах.', '1.5', null, 4, 0, 0, 1, 0, '', '', 1, 0, '''Р А З О М :''', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'OSTC', 'N', 'Факт~Зал.рах~IСТОРIЯ', '1.3', null, 5, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(OSTC) ', 1, 0, 0, '/barsroot/customerlist/showhistory.aspx?acc=:ACC'||chr(38)||'type=1', 'Show_Sal_Day_P(:ACC, STRING_Null, NUMBER_Null, GetBankDate(), GetBankDate())', 0);
  bars_metabase.add_column(l_tabid, 9, 'S', 'N', 'Сума в~картотецi~Розкрити', '1', null, 10, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(S) ', 1, 0, 0, 'sPar=V_XOZREF[NSIFUNCTION][PROC=>PUL.PUT(''PROD'',:PROD);PUL.PUT(''XOZ_NLS'',:NLS);PUL.PUT(''XOZ_ACC'',:ACC);PUL.PUT(''XOZ_KV'',:KV)][EXEC=>BEFORE][ACCESSCODE=>2][CONDITIONS=>V_XOZREF.ACC=:ACC][showDialogWindow=>false]', 'FunNSIEditFFiltered("V_XOZREF",2," V_XOZREF.ACC=:ACC ")', 0);
  bars_metabase.add_column(l_tabid, 10, 'RNK', 'N', 'Рег №~кл~КАРТКА', '1', null, 20, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '/barsroot/clientregister/registration.aspx?readonly=1'||chr(38)||'rnk=:RNK', 'EditCustomer(:TYPE, NUMBER_Null, :RNK, CVIEW_ReadOnly, hWndForm, 0, "", FALSE)', 0);
  bars_metabase.add_column(l_tabid, 11, 'ISP', 'N', 'Вiдп~вик', '.3', null, 99, 0, 0, 0, 1, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'NMK', 'C', 'Назва РНК', '2', null, 21, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'TYPE', 'N', 'TYPE', '.3', null, 98, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'S180', 'C', 'S180', '.3', null, 23, 0, 0, 0, 0, '', '', 1, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'OB22', 'C', 'Об22~~', '.3', null, 1, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'ARC', 'C', 'Розкрити', '.3', null, 24, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, 'sPar=V_XOZREF2[NSIFUNCTION][ACCESSCODE=>1][CONDITIONS=>V_XOZREF2.ACC=:ACC]', 'FunNSIEditFFiltered("V_XOZREF2",2," ACC=:ACC ")', 0);
  bars_metabase.add_column(l_tabid, 17, 'OSTB', 'N', 'План~Зал.рах~', '1.3', null, 99, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(OSTB) ', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'SB', 'N', 'План~Сума в~картотецi', '1.3', null, 99, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(SB) ', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'DELB', 'N', 'План~Вiдхилення', '1', null, 99, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(DELB) ', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'PROD', 'C', 'NBS+OB22', '', null, 99, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'DAT0', 'D', 'Остан~дата~0-залишку', '1.2', null, 6, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('STAFF');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 11, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица STAFF для описания сложного поля таблицы V_XOZACC.');
  end if;

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 2, 1, 'ASC ');

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 6, 2, 'ASC ');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Розкрити картотеку по вибраному рахунку ', '', '', 'EACH', '', '', '', '', 'sPar=V_XOZREF[NSIFUNCTION][PROC=>PUL.PUT(''PROD'',:PROD);PUL.PUT(''XOZ_NLS'',:NLS);PUL.PUT(''XOZ_ACC'',:ACC);PUL.PUT(''XOZ_KV'',:KV)][EXEC=>BEFORE][ACCESSCODE=>2][CONDITIONS=>V_XOZREF.ACC=:ACC][showDialogWindow=>false]', 55 );

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Протокол закриття ДЗ за день', '', '', 'ONCE', '', 'ОК', '', '', 'sPar=V_XOZKWT[NSIFUNCTION][PROC=>PUL.PUT(''DATZ'',to_char( :D, ''dd.mm.yyyy'' ))][PAR=>:D(SEM=Дата_закриття,TYPE=D)][EXEC=>BEFORE][ACCESSCODE=>1][showDialogWindow=>false]', 22  );

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 13, 'Дебетові запити до ЦА, що знаходяться на контролі', '', '', 'ONCE', '', 'ОК', '', '', 'sPar=V_XOZ_RU_CA[ACCESSCODE=>1][showDialogWindow=>false]', 71 );

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 15, 'АРХІВ відшкодувань госп.ДЗ, що виникла в РУ', '', '', 'ONCE', '', '', '', '', 'sPar=V_XOZ_RU_CA[showDialogWindow=>false][ACCESSCODE=>1][CONDITIONS=>V_XOZ_RU_CA.REC NOT in (1,2)]', 36  );

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 16, 'Інвентаризаційна відомість станом на дату :D  ', '', '', 'ONCE', '', 'ОК', '', '', 'sPar=V_XOZREF_INV[ACCESSCODE=>1][PROC=>PUL.PUT(''DATZ'',to_char(:D,''dd.mm.yyyy''))][PAR=>:D(SEM=Звітна_дата,TYPE=D)][EXEC=>BEFORE]', 51 );

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 25, '---X Закрити заборг коштами з ЦА, що надійшли по ВПС', '------XOZ.OPL_CA (0)', '', 'ONCE', '', 'ОК', '', '', '', 78 );

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 30, 'Авто-Закриття по закритим рахункам', 'XOZ.CLS (0)', '', 'ONCE', 'Закрити автоматично всю картотеку по рахункам, які закрито ?
', 'ОК', '', '', '', 61 );

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'DEL');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, 'DEL <> 0', 1, 'COLOR_Red');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
