set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'форма №504(35) (Валютний Контроль)';
  l_tablinesdef := '100';
  l_tabname     := 'CIM_F504';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 2, 'CONTR_ID', 'N', 'Внутрішній ~код ~контракту', null, 6, 2, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'P_DATE_TO', 'D', 'Сформовано ~на ~дату', null, null, 3, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'P101', 'C', 'Найменування ~позичальника', null, 27, 4, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'Z', 'C', 'Код ~позичальника', null, 10, 5, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'R_AGREE_NO', 'C', 'Номер ~реєстрації ~договору ~(свідоцтва)', null, 5, 6, 1, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'P103', 'D', 'Дата ~реєстраційного ~свідоцтва', null, null, 7, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'PVAL', 'C', 'Код ~валюти', null, 3, 8, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 9, 'T', 'C', 'Номер ~траншу', null, 1, 9, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'M', 'N', 'Ознака ~кредиту', null, 2, 10, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'P107', 'C', 'Назва ~нерезидента-~кредитора', null, 54, 11, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'P108', 'N', 'Тип ~кредитора', null, 2, 12, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'P184', 'N', 'Строковість ~кредиту', null, 2, 13, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'P140', 'N', 'Тип ~кредиту', null, 2, 14, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'P142', 'N', 'Код ~періодичності ~здійснення платежів', null, 2, 15, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 16, 'P141', 'N', 'Дострокове ~погашення', null, 2, 16, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'P020', 'C', 'Номер ~балансового ~рахунку', null, 4, 17, 1, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'P143', 'N', 'Підстава ~подання ~звіту', null, 2, 18, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'P050', 'C', 'Номер ~кредитної ~угоди', null, 16, 19, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'P060', 'D', 'Дата ~кредитної ~угоди', null, null, 20, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 21, 'P090', 'N', 'Загальна ~сума ~кредиту', null, 10, 21, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'P960', 'N', 'Цілі ~використання ~кредиту', null, 2, 22, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'P310', 'D', 'Строк ~погашення ~кредиту', null, null, 23, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'P999', 'C', 'Примітка', null, 108, 24, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'P212', 'C', '(212)сума платежів ~ОС боргу(без ~урахування майбутніх ~надходжень кредиту)', null, 1, 25, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, 'sPar=CIM_F504_DETAIL2[CONDITIONS=>CIM_F504_DETAIL2.F504_ID=:F504_ID and CIM_F504_DETAIL2.INDICATOR_ID=212][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,212)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'P213', 'C', '(213)сума платежів ~проц. платежів(без ~урахування майб ~надх кредиту)', null, 1, 26, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, 'sPar=CIM_F504_DETAIL2[CONDITIONS=>CIM_F504_DETAIL2.F504_ID=:F504_ID and CIM_F504_DETAIL2.INDICATOR_ID=213][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,213)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 27, 'P201', 'C', '(201)сума майбутнього ~надходження ~кредиту', null, 1, 27, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, 'sPar=CIM_F504_DETAIL[CONDITIONS=>CIM_F504_DETAIL.F504_ID=:F504_ID and CIM_F504_DETAIL.INDICATOR_ID=201][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,201)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 28, 'P222', 'C', '(222)сума строкових ~платежів ~зі сплати ~ОС боргу', null, 1, 28, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, 'sPar=CIM_F504_DETAIL2[CONDITIONS=>CIM_F504_DETAIL2.F504_ID=:F504_ID and CIM_F504_DETAIL2.INDICATOR_ID=222][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,222)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 29, 'P223', 'C', '(223)сума строкових ~платежів ~зі сплати ~проц. платежів', null, 1, 29, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, 'sPar=CIM_F504_DETAIL2[CONDITIONS=>CIM_F504_DETAIL2.F504_ID=:F504_ID and CIM_F504_DETAIL2.INDICATOR_ID=223][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,223)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 30, 'P292', 'C', '(292)сума прогнозних ~платежів простроченої ~заборгованості ~за ОС боргу', null, 1, 30, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, 'sPar=CIM_F504_DETAIL[CONDITIONS=>CIM_F504_DETAIL.F504_ID=:F504_ID and CIM_F504_DETAIL.INDICATOR_ID=292][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,292)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 31, 'P293', 'C', '(293)сума прогнозних ~платежів простроченої ~заборгованості ~за проц плат', null, 1, 31, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, 'sPar=CIM_F504_DETAIL[CONDITIONS=>CIM_F504_DETAIL.F504_ID=:F504_ID and CIM_F504_DETAIL.INDICATOR_ID=293][ACCESSCODE=>0][PROC=>cim_reports.set_context_f504_detail(:F504_ID,293)][EXEC=>BEFORE][showDialogWindow=>false]', '', 0);
  bars_metabase.add_column(l_tabid, 32, 'F504_ID', 'N', 'Ідентифікатор ~унікальний', null, null, 32, 0, 1, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 33, 'DATE_REG', 'D', 'Створено', null, null, 33, 0, 0, 0, 0, '', 'dd/MM/yyyy hhhh:mm:ss', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 34, 'USER_REG', 'C', 'Користувач ~додав у ~звіт', null, 30, 34, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 35, 'DATE_CH', 'D', 'Остання ~зміна', null, null, 35, 0, 0, 0, 0, '', 'dd/MM/yyyy hhhh:mm:ss', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 36, 'USER_CH', 'C', 'Користувач ~редагування', null, 30, 36, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 37, 'BRANCH', 'C', 'Відділення', null, 30, 37, 0, 0, 0, 0, '', '', 0, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'KF', 'C', 'МФО', null, 6, 38, 0, 0, 0, 0, '', '', 0, 0, '', 1, 1, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'P010', 'N', 'Вид ~позичальника', null, 2, 24, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 40, 'P320', 'N', 'Код ~типу ~реорганізації', null, 2, 24, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 41, 'P040', 'N', 'Тип ~процентної ~ставки', null, 2, 24, 0, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 42, 'P330', 'C', 'Код ~валюти~розрахунків', null, 3, 24, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 43, 'P080', 'C', 'База~ для обчислення~ плаваючої ставки', null, 15, 24, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 44, 'P070', 'N', 'Розмір ~маржі ~процентної ~ставки', null, 4, 24, 0, 0, 0, 0, '', '#0.0000', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 45, 'P950', 'N', 'Величина ~процентної ~ставки', null, 3, 24, 0, 0, 0, 0, '', '#0.000', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 46, 'P030', 'C', 'Код ~країни ~кредитора', null, 3, 11, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 47, 'F057', 'C', 'Код ~виду ~запозичення', null, 3, 47, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 48, 'F009', 'C', 'Код типу ~джерела ~фінансування', null, 3, 48, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 49, 'F010', 'C', 'Код типу~ угоди', null, 3, 49, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 50, 'F011', 'C', 'Код графіка~ погашення~ платежів', null, 3, 50, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 51, 'F012', 'C', 'Код типу~ форми власності', null, 3, 51, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 52, 'F014', 'C', 'Код виду~ подання звіту', null, 3, 52, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 53, 'F036', 'C', 'Код використання~ процентної ставки~ за кредитом', null, 3, 53, 1, 0, 0, 1, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 54, 'Q001_2', 'C', 'ГАРАНТ ~З БОКУ ~ПОЗИЧАЛЬНИКА', null, 70, 54, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 55, 'Q001_4', 'C', 'ГАРАНТ ~З БОКУ ~КРЕДИТОРА', null, 70, 55, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 56, 'Q007_1', 'D', 'ДАТА ПЕРШОГО ~АМАРТИЗАЦІЙНОГО ~ПЛАТЕЖУ', 3, null, 56, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 57, 'Q007_2', 'D', 'ДАТА ОСТАННЬОГО ~АМАТТИЗАЦІЙНОГО~ ПЛАТЕЖУ', 3, null, 57, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 58, 'Q007_3', 'D', 'ПОЧАТКОВА ДАТА ~ПЕРІОДУ КОНСОЛІДАЦІЇ', 3, null, 58, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 59, 'Q007_4', 'D', 'КІНЦЕВА ДАТА ~ПЕРІОДУ КОНСОЛІДАЦІЇ', 3, null, 59, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 60, 'Q007_6', 'D', 'ДАТА ПЕРШОГО ~ПЛАТЕЖУ ЗА ПРОЦЕНТАМИ', 3, null, 60, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 61, 'Q007_7', 'D', 'ДАТА ОСТАННЬОГО ~ПЛАТЕЖУ З ПРОЦЕНТАМИ', 3, null, 61, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 62, 'Q007_8', 'D', 'ДАТА , ПОЧИНАЮЧИ ~З ЯКОЇ ПРОЦЕНТИ ~СПЛАЧИВАЮТЬСЯ ЗА ДР. ~ПРОЦ. СТАВКОЮ', 3, null, 62, 0, 0, 0, 0, '', 'dd/MM/yyyy', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 63, 'Q009', 'C', 'МЕТА ПОЗИКИ', null, 108, 63, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 64, 'Q010_1', 'N', 'ПЕРІОД ~ЧАСУ У ~МІСЯЦЯХ', null, 2, 64, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 65, 'Q011_1', 'N', 'КІЛЬ-СТЬ ~АМОРТИЗАЦІЙНИХ ~ПЛАТЕЖІВ', null, 2, 65, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 66, 'Q011_2', 'N', 'КІЛЬ-СТЬ ~ПЛАТЕЖІВ ~ЗА РІК', null, 2, 66, 0, 0, 0, 0, '', '', 0, 0, '', 0, 0, 0, '', '', 0);


  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_r030');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'KV');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 8, l_newtabid, l_newcolid, 'a', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_r030 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_34_1');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 10, l_newtabid, l_newcolid, 'b', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_34_1 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z200');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z200');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 12, l_newtabid, l_newcolid, 'c', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z200 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_s184');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'S184');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 13, l_newtabid, l_newcolid, 'd', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_s184 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z203');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z203');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 14, l_newtabid, l_newcolid, 'e', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z203 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z202');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z202');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 15, l_newtabid, l_newcolid, 'f', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z202 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_z201');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'Z201');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 16, l_newtabid, l_newcolid, 'g', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_z201 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_reason');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 18, l_newtabid, l_newcolid, 'k', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_reason для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_credit_f503_purpose');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 22, l_newtabid, l_newcolid, 'l', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_credit_f503_purpose для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kod_51_1');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'P102');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 39, l_newtabid, l_newcolid, 'm', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kod_51_1 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_f503_percent_type');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 41, l_newtabid, l_newcolid, 'n', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_f503_percent_type для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('V_CIM_KOD_6A_3');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'P3200');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 40, l_newtabid, l_newcolid, 'o', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица V_CIM_KOD_6A_3 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_r030');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'KV');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 42, l_newtabid, l_newcolid, 'p', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_r030 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('v_cim_kl_r040');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'COUNTRY');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 46, l_newtabid, l_newcolid, 'r', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица v_cim_kl_r040 для описания сложного поля таблицы CIM_F503.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F057');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F057');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 47, l_newtabid, l_newcolid, 's', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F057 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F009');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F009');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 48, l_newtabid, l_newcolid, 'u', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F009 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F010');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F010');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 49, l_newtabid, l_newcolid, 'v', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F010 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F011');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F011');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 50, l_newtabid, l_newcolid, 'w', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F011 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F012');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F012');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 51, l_newtabid, l_newcolid, 'h', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F012 для описания сложного поля таблицы CIM_F504.');
  end if;


  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F014');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F014');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 52, l_newtabid, l_newcolid, 'i', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F014 для описания сложного поля таблицы CIM_F504.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('F036');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'F036');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 53, l_newtabid, l_newcolid, 'j', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица F036 для описания сложного поля таблицы CIM_F504.');
  end if;



  -- добавляем описание процедур
  bars_metabase.add_actiontbl(l_tabid, 'INSERT', 'cim_reports.add_f504_row(:P101,:Z,:R_AGREE_NO,:P103,:PVAL,:T,:M,:P107,:P108,:P184,:P140,:P142,:P020,:p141,:p143,:p960,:p310,:p050,:p060,:p090,:P999)');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 1, 'Вигрузити все в текстовий файл', 'cim_reports.get_text_file_f504', '', 'ONCE', '', 'Збережено', '', '', 'sPar=[DESCR=>Вигрузити все в текстовий файл][EXEC=>GET_FILE_ONCE][PROC=>cim_reports.get_text_file_f504(:p_clob, :p_namefile)][OUT_PARAMS=>:p_clob(SEM=ФАЙЛ,TYPE=CLOB),:p_namefile(SEM=ИМЯ ФАЙЛА,TYPE=fileName)]', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 2, 'Синхронізувати з модулем ВК', 'cim_reports.sync_f504', '', 'ONCE', 'Ви дійсно бажаєте змінити данні згідно значень у ВК?', 'Данні синхронізовано з ВК', '', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 3, 'Історія змін при синхронізаціях контракту', '', '', 'ONCE', '', '', '', '', 'sPar=CIM_F504_AUTO_CHANGE_HIST[CONDITIONS=> F504_ID=:F504_ID][DESCR=>Історія змін при синхронізаціях][ACCESSCODE=>1][showDialogWindow=>false][OpenInWindow]', null);

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
