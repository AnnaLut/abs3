MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  2 as ID,
  'NBU_DOCUMENT_FO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  3 as ID,
  'NBU_ADDRESS_FO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  7 as ID,
  'NBU_PERSON_UO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  8 as ID,
  'NBU_FINPERFORMANCE_UO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  10 as ID,
  'NBU_FINPERFORMANCEGR_UO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  11 as ID,
  'NBU_PARTNERS_UO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  13 as ID,
  'NBU_OWNERPP_UO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  14 as ID,
  'NBU_OWNERJUR_UO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  16 as ID,
  'NBU_CREDIT' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  17 as ID,
  'NBU_CREDIT_PLADGE' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

MERGE INTO TRANSP_SEND_TYPE A USING
 (SELECT
  1 as ID,
  'NBU_PERSON_FO' as TYPE_NAME,
  'QQQ' as TYPE_DESC,
  1 as SESS_TYPE,
  0 as IS_PARALLEL,
  'POST' as HTTP_METHOD,
  600 as MAIN_TIMEOUT,
  5 as TRYS,
  NULL as PROC_CHK,
  1 as LOGING,
  1 as S_PRIOR,
  60 as CHK_PAUSE,
  360 as CHK_TIMEOUT,
  'XML' as DATA_TYPE,
  'text/plain' as CONT_TYPE,
  'text/plain' as ACC_CONT_TYPE,
  0 as CONV_2_JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as BASE_64,
  'MD5' as CHECK_SUM,
  0 as STORE_SESS_ID
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, IS_PARALLEL, 
  HTTP_METHOD, MAIN_TIMEOUT, TRYS, PROC_CHK, LOGING, 
  S_PRIOR, CHK_PAUSE, CHK_TIMEOUT, DATA_TYPE, CONT_TYPE, 
  ACC_CONT_TYPE, CONV_2_JSON, COMPRESS_TYPE, BASE_64, CHECK_SUM, 
  STORE_SESS_ID)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.IS_PARALLEL, 
  B.HTTP_METHOD, B.MAIN_TIMEOUT, B.TRYS, B.PROC_CHK, B.LOGING, 
  B.S_PRIOR, B.CHK_PAUSE, B.CHK_TIMEOUT, B.DATA_TYPE, B.CONT_TYPE, 
  B.ACC_CONT_TYPE, B.CONV_2_JSON, B.COMPRESS_TYPE, B.BASE_64, B.CHECK_SUM, 
  B.STORE_SESS_ID)
WHEN MATCHED THEN
UPDATE SET 
  A.TYPE_NAME = B.TYPE_NAME,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.IS_PARALLEL = B.IS_PARALLEL,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.MAIN_TIMEOUT = B.MAIN_TIMEOUT,
  A.TRYS = B.TRYS,
  A.PROC_CHK = B.PROC_CHK,
  A.LOGING = B.LOGING,
  A.S_PRIOR = B.S_PRIOR,
  A.CHK_PAUSE = B.CHK_PAUSE,
  A.CHK_TIMEOUT = B.CHK_TIMEOUT,
  A.DATA_TYPE = B.DATA_TYPE,
  A.CONT_TYPE = B.CONT_TYPE,
  A.ACC_CONT_TYPE = B.ACC_CONT_TYPE,
  A.CONV_2_JSON = B.CONV_2_JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.BASE_64 = B.BASE_64,
  A.CHECK_SUM = B.CHECK_SUM,
  A.STORE_SESS_ID = B.STORE_SESS_ID;

COMMIT;
