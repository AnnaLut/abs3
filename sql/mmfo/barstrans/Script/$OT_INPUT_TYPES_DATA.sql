MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  1 as ID,
  'NBU_DOCUMENT_FO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_document_fo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  2 as ID,
  'NBU_ADDRESS_FO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_address_fo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  3 as ID,
  'NBU_PERSON_UO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_person_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  4 as ID,
  'NBU_FINPERFORMANCE_UO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_finperformance_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  5 as ID,
  'NBU_FINPERFORMANCEGR_UO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_finperformancegr_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  6 as ID,
  'NBU_OWNERJUR_UO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_ownerjur_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  7 as ID,
  'NBU_OWNERPP_UO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_ownerpp_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  8 as ID,
  'NBU_PARTNERS_UO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_partners_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  9 as ID,
  'NBU_CREDIT' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_credit(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  10 as ID,
  'NBU_CREDIT_PLEDGE' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_credit_pledge(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  11 as ID,
  'NBU_PERSON_FO' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_person_fo(:id); end; ' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  12 as ID,
  'NBU_PLEDGE_DEP' as TYPE_NAME,
  'qqq' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_pledge_dep(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  13 as ID,
  'EDECL_GET_PDF' as TYPE_NAME,
  'EDECL_GET_PDF' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin bars.eds_intg.create_report(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  0 as INPUT_DECOMPRESS,
  0 as OUTPUT_COMPRESS,
  0 as INPUT_BASE_64,
  0 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  14 as ID,
  'BILLS_REQUEST' as TYPE_NAME,
  'Request from region to cdb' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin bills.bill_service_mgr.bypass_request(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  0 as INPUT_DECOMPRESS,
  0 as OUTPUT_COMPRESS,
  0 as INPUT_BASE_64,
  0 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  15 as ID,
  'EDECL_REQ_TO_MMFO' as TYPE_NAME,
  'EDECL_REQ_TO_MMFO' as TYPE_DESC,
  'ASYNCH' as SESS_TYPE,
  'begin bars.eds_intg.pocess_request(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  0 as INPUT_DECOMPRESS,
  0 as OUTPUT_COMPRESS,
  0 as INPUT_BASE_64,
  0 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  16 as ID,
  'EDECL_GET_DECL' as TYPE_NAME,
  'EDECL_GET_DECL' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin bars.eds_utl.search_decl(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  0 as INPUT_DECOMPRESS,
  0 as OUTPUT_COMPRESS,
  0 as INPUT_BASE_64,
  0 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  17 as ID,
  'NBU_GROUPUR_UO' as TYPE_NAME,
  'form_601' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_groupur_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  18 as ID,
  'NBU_FINPERFORMANCEPR_UO' as TYPE_NAME,
  'form_601' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_finperformancepr_uo(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

MERGE INTO BARSTRANS.INPUT_TYPES A USING
 (SELECT
  19 as ID,
  'NBU_CREDIT_TRANCHE' as TYPE_NAME,
  'form_601' as TYPE_DESC,
  'SYNCH' as SESS_TYPE,
  'begin nbu_gateway.nbu_601_parse_xml.p_parse_credit_tranche(:id); end;' as ACT_TYPE,
  'CLOB' as OUTPUT_DATA_TYPE,
  'CLOB' as INPUT_DATA_TYPE,
  1 as PRIORITY,
  93 as CONT_TYPE,
  0 as JSON2XML,
  0 as XML2JSON,
  'GZIP' as COMPRESS_TYPE,
  1 as INPUT_DECOMPRESS,
  1 as OUTPUT_COMPRESS,
  1 as INPUT_BASE_64,
  1 as OUTPUT_BASE_64,
  0 as STORE_HEAD,
  0 as ADD_HEAD,
  NULL as CHECK_SUM,
  1 as LOGING,
  NULL as EXEC_TIMEOUT
  FROM DUAL) B
ON (A.TYPE_NAME = B.TYPE_NAME)
WHEN NOT MATCHED THEN 
INSERT (
  ID, TYPE_NAME, TYPE_DESC, SESS_TYPE, ACT_TYPE, 
  OUTPUT_DATA_TYPE, INPUT_DATA_TYPE, PRIORITY, CONT_TYPE, JSON2XML, 
  XML2JSON, COMPRESS_TYPE, INPUT_DECOMPRESS, OUTPUT_COMPRESS, INPUT_BASE_64, 
  OUTPUT_BASE_64, STORE_HEAD, ADD_HEAD, CHECK_SUM, LOGING, 
  EXEC_TIMEOUT)
VALUES (
  B.ID, B.TYPE_NAME, B.TYPE_DESC, B.SESS_TYPE, B.ACT_TYPE, 
  B.OUTPUT_DATA_TYPE, B.INPUT_DATA_TYPE, B.PRIORITY, B.CONT_TYPE, B.JSON2XML, 
  B.XML2JSON, B.COMPRESS_TYPE, B.INPUT_DECOMPRESS, B.OUTPUT_COMPRESS, B.INPUT_BASE_64, 
  B.OUTPUT_BASE_64, B.STORE_HEAD, B.ADD_HEAD, B.CHECK_SUM, B.LOGING, 
  B.EXEC_TIMEOUT)
WHEN MATCHED THEN
UPDATE SET 
  A.ID = B.ID,
  A.TYPE_DESC = B.TYPE_DESC,
  A.SESS_TYPE = B.SESS_TYPE,
  A.ACT_TYPE = B.ACT_TYPE,
  A.OUTPUT_DATA_TYPE = B.OUTPUT_DATA_TYPE,
  A.INPUT_DATA_TYPE = B.INPUT_DATA_TYPE,
  A.PRIORITY = B.PRIORITY,
  A.CONT_TYPE = B.CONT_TYPE,
  A.JSON2XML = B.JSON2XML,
  A.XML2JSON = B.XML2JSON,
  A.COMPRESS_TYPE = B.COMPRESS_TYPE,
  A.INPUT_DECOMPRESS = B.INPUT_DECOMPRESS,
  A.OUTPUT_COMPRESS = B.OUTPUT_COMPRESS,
  A.INPUT_BASE_64 = B.INPUT_BASE_64,
  A.OUTPUT_BASE_64 = B.OUTPUT_BASE_64,
  A.STORE_HEAD = B.STORE_HEAD,
  A.ADD_HEAD = B.ADD_HEAD,
  A.CHECK_SUM = B.CHECK_SUM,
  A.LOGING = B.LOGING,
  A.EXEC_TIMEOUT = B.EXEC_TIMEOUT;

COMMIT;
