set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'Види вкладів';
  l_tablinesdef := '';
  l_tabname     := 'DPT_VIDD';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 2, 'BASEM', 'N', 'Ознака~фікс.~ставки', null, 22, 13, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 3, 'BASEY', 'N', 'Код~бази~нарах.', null, 22, 14, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 4, 'BR_ID', 'N', 'Код~процентної~ставки', null, 22, 12, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'BSD', 'C', 'Бал.~рахунок~депозиту', null, 4, 9, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 6, 'BSN', 'C', 'Бал.~рахунок~процентів', null, 4, 10, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 7, 'COMMENTS', 'C', 'Коментар', null, 128, 38, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 8, 'DURATION', 'N', 'Термін~дії~в міс.', null, 22, 6, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 10, 'FREQ_N', 'N', 'Період-ть~нарах.~процентів', null, 22, 18, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 11, 'METR', 'N', 'Метод~нарахуванняї~процентів', null, 22, 15, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 12, 'MIN_SUMM', 'N', 'Мінімальна~сума~вкладу', null, 22, 22, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 14, 'TYPE_NAME', 'C', 'Назва~виду вкладу', null, 50, 4, 1, 0, 1, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 15, 'VIDD', 'N', 'Числ.~код виду~вкладу', null, 22, 2, 1, 1, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'ACC7', 'N', 'Рахунок~процентних~видатків', null, 22, 21, 0, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'BR_ID_L', 'N', 'Код~ставки~пролонг.', null, 22, 33, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'FLAG', 'N', 'Флаг~актив-~ності', null, 22, 1, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'FL_DUBL', 'N', 'Флаг~автопере-~оформлення', null, 22, 30, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'ID_STOP', 'N', 'Код~штрафу', null, 22, 28, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 27, 'KV', 'N', 'Валюта~виду~вкладу', null, 22, 5, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 31, 'COMPROC', 'N', 'Ознака~капіталі-~зації', null, 22, 20, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 38, 'DURATION_DAYS', 'N', 'Термін~дії~в днях', null, 22, 7, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 39, 'EXTENSION_ID', 'N', 'Код~метода~автопере-~оформлення', null, 22, 32, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 42, 'FREQ_K', 'N', 'Період-ть~виплати~процентів', null, 22, 19, 1, 0, 0, 1, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 43, 'IDG', 'N', 'Код групи~перекриття~процентів', null, 22, 34, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 44, 'IDS', 'N', 'Код схеми~перекриття~процентів', null, 22, 35, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 45, 'LIMIT', 'N', 'Мінім.~сума~поповнення', null, 22, 23, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 48, 'TERM_ADD', 'N', 'Термін~поповнення', null, 22, 25, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 49, 'TERM_DUBL', 'N', 'Макс.кіл-ть~автопере-~оформлень', null, 22, 31, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 50, 'AMR_METR', 'N', 'Метод~амортизації~процентів', null, 22, 16, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 51, 'AUTO_ADD', 'N', 'Флаг~автопо-~повнення', null, 22, 26, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 54, 'BR_WD', 'N', 'Код~ставки~частк.зняття', null, 22, 27, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 55, 'BSA', 'C', 'Бал.~рахунок~амортизації', null, 4, 11, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 58, 'FL_2620', 'N', 'Ознака~відкриття~техн.рах.', null, 22, 29, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 60, 'MAX_LIMIT', 'N', 'Макс.~сума~поповненя', null, 22, 24, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 61, 'NLSN_K', 'C', 'Консолід.~процентний~рахунок', null, 14, 37, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 62, 'NLS_K', 'C', 'Консолід.~депозитний~рахунок', null, 15, 36, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 63, 'TERM_TYPE', 'N', 'Тип строку:~1-фікс,~0-плав,~2-діапазон', null, 22, 8, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 64, 'TIP_OST', 'N', 'Тип~обчислення~залишку', null, 22, 17, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 66, 'TYPE_COD', 'C', 'Симв.~код виду~вкладу', null, 4, 3, 1, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('BASEY');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'BASEY');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 3, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица BASEY для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('BRATES');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'BR_ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 4, l_newtabid, l_newcolid, 'b1', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица BRATES для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('INT_METR');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'METR');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 11, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица INT_METR для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('ACCOUNTS');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ACC');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 17, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица ACCOUNTS для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('BRATES');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'BR_ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 18, l_newtabid, l_newcolid, 'b2', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица BRATES для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('DPT_STOP');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'ID');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 26, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица DPT_STOP для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('TABVAL');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'KV');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 27, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица TABVAL для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('FREQ');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'FREQ');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 42, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица FREQ для описания сложного поля таблицы DPT_VIDD.');
  end if;

  -- добавляем описание для условий фильтра
  l_newtabid := bars_metabase.get_tabid('DPT_VIDD_BRANCH');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'VIDD');
  l_varcolid := bars_metabase.get_colid(l_newtabid, 'BRANCH');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_browsetbl(l_tabid, l_newtabid, '', '15', l_newcolid, l_varcolid, 'Код~подразделения');
  else
    dbms_output.put_line('В БМД не описана таблица DPT_VIDD_BRANCH для описания условий фильтра таблицы DPT_VIDD.');
  end if;

  -- добавляем описание для условий фильтра
  l_newtabid := bars_metabase.get_tabid('DPT_OB22');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'VIDD');
  l_varcolid := bars_metabase.get_colid(l_newtabid, 'OB22_DEP');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_browsetbl(l_tabid, l_newtabid, 'o1', '15', l_newcolid, l_varcolid, 'ОБ22~депозиту');
  else
    dbms_output.put_line('В БМД не описана таблица DPT_OB22 для описания условий фильтра таблицы DPT_VIDD.');
  end if;

  -- добавляем описание для условий фильтра
  l_newtabid := bars_metabase.get_tabid('DPT_OB22');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'VIDD');
  l_varcolid := bars_metabase.get_colid(l_newtabid, 'OB22_INT');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_browsetbl(l_tabid, l_newtabid, 'o2', '15', l_newcolid, l_varcolid, 'ОБ22~відсотків');
  else
    dbms_output.put_line('В БМД не описана таблица DPT_OB22 для описания условий фильтра таблицы DPT_VIDD.');
  end if;

  -- добавляем описание сортировки
  bars_metabase.add_sortorder(l_tabid, 15, 1, 'ASC ');

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
