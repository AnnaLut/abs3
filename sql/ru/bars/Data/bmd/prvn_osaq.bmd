set serveroutput on

declare

  type t_rec_extrnval is record (
    tabid            meta_extrnval.tabid%type,
    colid            meta_extrnval.colid%type,
    srccolname       meta_columns.colname%type,
    tab_alias        meta_extrnval.tab_alias%type,
    tab_cond         meta_extrnval.tab_cond%type,
    src_cond         meta_extrnval.src_cond%type,
    col_dyn_tabname  varchar2(30));
  type t_tab_extrnval is table of t_rec_extrnval;
  l_extrnval     t_tab_extrnval := t_tab_extrnval();

  type t_rec_browsetbl is record (
    hosttabid   meta_browsetbl.hosttabid%type,
    hostcolid   meta_browsetbl.hostcolkeyid%type,
    addcolname  meta_columns.colname%type,
    varcolname  meta_columns.colname%type,
    addtabalias meta_browsetbl.addtabalias%type,
    cond_tag    meta_browsetbl.cond_tag%type);
  type t_tab_browsetbl is table of t_rec_browsetbl;
  l_browsetbl    t_tab_browsetbl := t_tab_browsetbl();

  type t_rec_filtertbl is record (
    tabid       meta_filtertbl.tabid%type,
    colid       meta_filtertbl.colid%type,
    fltcode     meta_filtertbl.filter_code%type,
    flag_ins    meta_filtertbl.flag_ins%type,
    flag_del    meta_filtertbl.flag_del%type,
    flag_upd    meta_filtertbl.flag_upd%type);
  type t_tab_filtertbl is table of t_rec_filtertbl;
  l_filtertbl    t_tab_filtertbl := t_tab_filtertbl();

  type t_rec_dependency is record (
    id               meta_dependency_cols.id%type,
    tabid            meta_dependency_cols.tabid%type,
    colid            meta_dependency_cols.colid%type,
    event            meta_dependency_cols.event%type,
    depcolid         meta_dependency_cols.depcolid%type,
    action_type      meta_dependency_cols.action_type%type,
    action_name      meta_dependency_cols.action_name%type,
    default_value    meta_dependency_cols.default_value%type,
    condition        meta_dependency_cols.condition%type);
  type t_tab_dependency is table of t_rec_dependency;
  l_dependency     t_tab_dependency := t_tab_dependency();

  l_tabid        meta_tables.tabid%type;
  l_tabname      meta_tables.tabname%type;
  l_tabsemantic  meta_tables.semantic%type;
  l_tablinesdef  varchar2(16);
  l_newtabid     meta_tables.tabid%type;
  l_newcolid     meta_columns.colid%type;
  l_varcolid     meta_columns.colid%type;
  l_colname      meta_columns.colname%type;

begin

  l_tabsemantic := 'Еквівалент-Вітрина "Резерв-МСФЗ"';
  l_tablinesdef := '';
  l_tabname     := 'PRVN_OSAQ';

  -- получаем код таблицы
  l_tabid := bars_metabase.get_tabid(l_tabname);

  -- если таблица не описана в БМД
  if l_tabid is null then

    -- получаем код для новой таблицы
    l_tabid := bars_metabase.get_newtabid();

    -- добавляем описание таблицы в БМД
    bars_metabase.add_table(l_tabid, l_tabname, l_tabsemantic);

  -- если таблица описана в БМД
  else

    -- обновляем семантику таблицы
    bars_metabase.set_tabsemantic(l_tabid, l_tabsemantic);

    -- обновляем linesdef таблицы
    bars_metabase.set_tablinesdef(l_tabid, l_tablinesdef);

    -- сохраняем ссылки сложных полей других таблиц на поля нашей таблицы
    select e.tabid, e.colid, c.colname, e.tab_alias, e.tab_cond, e.src_cond, e.col_dyn_tabname
      bulk collect
      into l_extrnval
      from meta_extrnval e, meta_columns c
     where e.srctabid = l_tabid
       and e.srctabid = c.tabid and e.srccolid = c.colid;

    -- сохраняем ссылки для условий фильтра полей других таблиц на поля нашей таблицы
    select b.hosttabid, b.hostcolkeyid, c.colname, v.colname, b.addtabalias, v.semantic
      bulk collect
      into l_browsetbl
      from meta_browsetbl b, meta_columns c, meta_columns v
     where b.addtabid = l_tabid
       and b.addtabid = c.tabid and b.addcolkeyid = c.colid
       and b.addtabid = v.tabid and b.var_colid = v.colid;

    -- сохраняем ссылки полей других таблиц на нашу вложенную таблицу
    select tabid, colid, filter_code, flag_ins, flag_del, flag_upd
      bulk collect
      into l_filtertbl
      from meta_filtertbl
     where filter_tabid = l_tabid and tabid <> l_tabid;

    -- сохраняем зависимости между колонками таблицы
    select id, tabid, colid, event, depcolid, action_type, action_name, default_value, condition
      bulk collect
      into l_dependency
      from meta_dependency_cols
     where tabid = l_tabid;

    -- удаляем описание полей
    bars_metabase.delete_metatables(l_tabid);

  end if;

  -- добавляем описание полей
  bars_metabase.add_column(l_tabid, 2, 'TIP', 'N', 'UNIQUE_~BARS_IS~Тип_Акт/*~в АБС', null, null, 2, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 5, 'COMM', 'C', 'COMM~Протокол обр~NBU23_REZ', null, 100, 10, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 1, '', 'FunNSIEditFFiltered("PRVN_NBU",2,"nd="||Str(:ND) )', 0);
  bars_metabase.add_column(l_tabid, 8, 'ID_PROV_TYPE', 'C', 'ID_~PROV_TYPE~Кол/Инд~основа', null, null, 51, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 13, 'IS_DEFAULT', 'B', 'Метка~дефолта', null, null, 50, 0, 0, 0, 0, '', '', 1, 0, '', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 17, 'REZB', 'N', 'PROV_~BALANCE_q~Резерв по~бал.акт', null, null, 20, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(REZB) ', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 18, 'REZ9', 'N', 'PROV_~OFFBALANCE_q~Резерв по~вне/бал.акт', null, null, 22, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(REZ9)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 19, 'RNK', 'N', 'RNK_~CLIENT~РНК~клиента', null, null, 1, 0, 0, 0, 1, '', '', 1, 0, '', 1, 0, 1, '', '', 0);
  bars_metabase.add_column(l_tabid, 20, 'ND', 'N', 'UNIQUE_~BARS_IS~*/Реф_Дог~в АБС.Рах.', null, null, 3, 0, 0, 1, 0, '', '', 1, 0, '', 1, 0, 1, '', 'ShowAccList(0,AVIEW_ALL,AVIEW_ReadOnly|AVIEW_AllOptions,"(:TIP=3 and a.acc in (select acc from nd_acc where nd=:ND) OR :TIP=9 and exists (select 1 from cp_deal where ref=:ND and a.acc in (acc,accd,accp,accr,accs,accr2,ACCEXPN,ACCEXPR,ACCR3,ACCUNREC)))" )', 0);
  bars_metabase.add_column(l_tabid, 21, 'AIRC_CCY', 'N', 'AIRC_~q~Итого~НЕприз.дох', null, null, 32, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(AIRC_CCY)', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 22, 'FV_ABS', 'N', 'FV мiнус~ABS~НЕ прийнято~резерву', null, null, 25, 0, 0, 0, 0, '', '# ##0.00', 1, 0, 'Sum(FV_ABS) ', 1, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 23, 'REZ9_R', 'N', 'Ручной~Резерв~ по~вне/бал.акт', null, null, 23, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 24, 'REZB_R', 'N', 'Ручной~Резерв~ по~бал.акт', null, null, 21, 0, 0, 0, 0, '', '# ##0.00', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 25, 'KV', 'N', 'Код~валюты', null, null, 4, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);
  bars_metabase.add_column(l_tabid, 26, 'VIDD', 'N', 'Вид кредита', null, null, 60, 0, 0, 0, 0, '', '', 1, 0, '', 0, 0, 0, '', '', 0);

  -- добавляем описание сложного поля
  l_newtabid := bars_metabase.get_tabid('CUSTOMER');
  l_newcolid := bars_metabase.get_colid(l_newtabid, 'RNK');
  if (l_newtabid is not null and l_newcolid is not null) then
    bars_metabase.add_extrnval(l_tabid, 19, l_newtabid, l_newcolid, '', '', '', '');
  else
    dbms_output.put_line('В БМД не описана таблица CUSTOMER для описания сложного поля таблицы PRVN_OSAQ.');
  end if;

  -- очищаем описание функций на справочник
  bars_metabase.delete_nsifunction(l_tabid);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 10, '1) OSA: Прийом та стиснення', 'PRVN_FLOW.div39 ( 1, DATETIME_Null ) ', '', 'ONCE', 'Робимо ?', 'ОК !', '', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 20, '2) IRR: Формування проводок  по "НеВизнаним"', '', '', 'ONCE', 'Підтвердіть ЗВІТНУ дату !', 'Виконано !', 'FunNSIEdit("[PROC=>PRVN_FLOW.D_SNA(:D)][PAR=>:D(SEM=Звіт.дата 01.mm.yyyy>,TYPE=D)]")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 30, '3) CR-351: *Пере-Формування Кредитного ризику НБУ-351', '', '', 'ONCE', 'Підтвердіть ЗВІТНУ дату !', 'Виконано !', 'FunNSIEdit("[PROC=>PRVN_FLOW.REC_23(:D)][PAR=>:D(SEM=Звіт.дата 01.mm.yyyy>,TYPE=D)]")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 40, '4) RR-351:  Тільки Розподіл + Рівчачок для проводок', '', '', 'ONCE ', 'Підтвердіть ЗВІТНУ дату !', 'ОК !', 'FunNSIEdit("[PROC=>PRVN_FLOW.div39( 2, :D)][PAR=>:D(SEM=Звіт.дата 01.mm.yyyy>,TYPE=D)]")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 41, '4.1 для ЦА =  Тільки ПЕРЕ-Розподіл ручних + Рівчачок', '', '', 'ONCE', 'Робимо ?', 'ОК !', 'FunNSIEdit("[PROC=>PRVN_FLOW.div39( 12, :D)][PAR=>:D(SEM=Звіт.дата 01.mm.yyyy>,TYPE=D)]")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 50, '5) MAK Створити/Переглянути Макет проводок по "Резерв-МСФЗ"', '', '', 'ONCE', 'Створити МАКЕТ ?', 'Виконано !', 'FunNSIEditFFiltered("REZ_DOC_MAKET[PROC=>PAY_23(:A,1,NUMBER_Null,0)][PAR=>:A(SEM=Зв_дата_01,TYPE=D)][EXEC=>BEFORE]",1,"DK>=0")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 55, '2902 - Звіт-помилки при формуванні резерву', '', '', 'ONCE', '', 'Перегляньте результат', 'FunNSIEditF("SREZERV_ERRORS",1) ', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 60, '6) ARE: Формування проводок по "Резерв-МСФЗ"', '', '', 'ONCE', 'Проводки виконуються по ФАКТУ. Сформувати ПРОВОДКИ = "ARE"  ?', 'Виконано !', 'FunNSIEditFFiltered("REZ_DOC_MAKET[PROC=>PAY_23(:A,0,NUMBER_Null,0)][PAR=>:A(SEM=Зв_дата_01,TYPE=D)][EXEC=>BEFORE]",1,"DK>=0")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 70, '7 ) #02 *Формування #02 ', '', '', 'ONCE', 'Підтвердіть  Остан робочий день ЗВІТНОГО місяця ', '', 'ShowFilesNbu(hWndMDI) ', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 79, '?) Підсумки з початку року', '', '', 'ONCE', '', '', 'FunNSIEditF("PRVN_ITOG_YYYY", 0)', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 80, 'Звіт 97. Обсяг формування резерву', '', '', 'ONCE', 'Підтвердіть ЗВІТНУ дату !', 'ОК !', 'FunNSIEditF("TEST_FINREZ[PROC=>finrez_SB(:A)][PAR=>:A(SEM=Зв_дата_01,TYPE=D)][EXEC=>BEFORE]",1)', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 91, 'n) Перевірка 100%-ї Готовністі', '', '', 'ONCE', 'Підтвердіть ЗВІТНУ дату !', 'Перегляньте результат', 'FunNSIEditF("SREZERV_ERRORS[PROC=>PRVN_FLOW.ERR_23(:D)][PAR=>:D(SEM=Зв_дата_01,TYPE=D)][EXEC=>BEFORE]",1) ', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 92, 'd) Установити локальну Банк.Дату ', '', '', 'ONCE', 'Підтвердіть Лок. БАНКІВСЬКУ  дату для корр.проводок!', 'ОК !', 'FunNSIEdit("[PROC=>PRVN_FLOW.LOC_DAT(:D)][PAR=>:D(SEM=Лок.Банк-дата LD.mm.yyyy>,TYPE=D)]")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 98, '-- Технічний пункт =  Тільки <<Рівчачок>> ', '', '', 'ONCE', 'Підтвердіть ЗВІТНУ дату !', 'ОК !', 'FunNSIEdit("[PROC=>rezerv_23 (:D)][PAR=>:D(SEM=Звіт.дата 01.mm.yyyy>,TYPE=D)]")', '', '', null);

  -- добавляем описание функции на справочник
  bars_metabase.add_nsifunction(l_tabid, 99, '-- Технічний пункт *) SNP: Пере-Формування місячного знімоку ', 'PRVN_FLOW.DRAPS02 (  DATETIME_Null )  ', '', 'ONCE', 'Робимо ?', 'Виконано !', '', '', '', null);

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'ND');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 1, l_newcolid, '1 = 1', 2, ' SalColorFromRGB( 220,255,255 )');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'REZB');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 2, l_newcolid, ':REZB <> 0 ', 2, 'COLOR_Sky');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'REZ9');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 3, l_newcolid, ':REZ9 <> 0', 2, 'COLOR_Yellow');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'FV_ABS');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 4, l_newcolid, ':FV_ABS <> 0 ', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'AIRC_CCY');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 5, l_newcolid, ':AIRC_CCY <> 0 ', 2, 'COLOR_Gray');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'COMM');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 6, l_newcolid, ':COMM like ''NOT%''', 2, 'COLOR_Salmon');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'COMM');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 7, l_newcolid, ':COMM  like ''OK%''', 2, 'COLOR_LightGreen');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'TIP');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 9, l_newcolid, '1 = 1', 2, ' SalColorFromRGB( 220,255,255 )');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'RNK');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 10, l_newcolid, '1 = 1 ', 2, ' SalColorFromRGB( 220,255,255 )');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'REZB_R');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 11, l_newcolid, '1 = 1', 2, 'COLOR_Orchid');
  end if;

  -- добавляем описание раскраски
  l_newcolid := bars_metabase.get_colid(l_tabid, 'REZ9_R');
  if (l_newcolid is not null) then
    bars_metabase.add_tblcolor(l_tabid, 12, l_newcolid, '1 = 1', 2, 'COLOR_Periwinkle');
  end if;

  -- восстанавливаем ссылки сложных полей других таблиц
  for i in 1..l_extrnval.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_extrnval(i).srccolname);
    if (l_newcolid is not null) then
      bars_metabase.add_extrnval(
        l_extrnval(i).tabid,
        l_extrnval(i).colid,
        l_tabid,
        l_newcolid,
        l_extrnval(i).tab_alias,
        l_extrnval(i).tab_cond,
        l_extrnval(i).src_cond,
        l_extrnval(i).col_dyn_tabname);
    end if;
  end loop;

  -- восстанавливаем ссылки полей для условий фильтра других таблиц
  for i in 1..l_browsetbl.count loop
    l_newcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).addcolname);
    l_varcolid := bars_metabase.get_colid(l_tabid, l_browsetbl(i).varcolname);
    if (l_newcolid is not null and l_varcolid is not null) then
      bars_metabase.add_browsetbl( 
        l_browsetbl(i).hosttabid,
        l_tabid,
        l_browsetbl(i).addtabalias,
        l_browsetbl(i).hostcolid,
        l_newcolid,
        l_varcolid,
        l_browsetbl(i).cond_tag);
    end if;
  end loop;

  -- восстанавливаем ссылки полей других таблиц на нашу вложенную таблицу
  for i in 1..l_filtertbl.count loop
    bars_metabase.add_filtertbl(
      l_filtertbl(i).tabid,
      l_filtertbl(i).colid,
      l_tabid,
      l_filtertbl(i).fltcode,
      l_filtertbl(i).flag_ins,
      l_filtertbl(i).flag_del,
      l_filtertbl(i).flag_upd);
  end loop;

  -- восстанавливаем зависимости между колонками таблицы
  for i in 1..l_dependency.count loop
    bars_metabase.add_dependency(
      l_dependency(i).tabid,
      l_dependency(i).colid,
      l_dependency(i).event ,
      l_dependency(i).depcolid  ,
      l_dependency(i).action_type ,
      l_dependency(i).action_name ,
      l_dependency(i).default_value ,
      l_dependency(i).condition );
  end loop;

end;
/

commit;
