

PROMPT ===================================================================================== 
PROMPT *** Run *** ========== Scripts /Sql/BARS/Trigger/OVM_INSERT_33.sql =========*** Run *
PROMPT ===================================================================================== 


PROMPT *** Create  trigger OVM_INSERT_33 ***

  CREATE OR REPLACE TRIGGER BARS.OVM_INSERT_33 INSTEAD OF INSERT ON BARS.POLICY_TABLE_BASE FOR EACH ROW DECLARE dummy integer; l_version integer; l_nextver varchar2(500) default '-1'; l_rowid UROWID; l_rowid2 rowid ; l_delstat integer; l_ltlock varchar2(80) default null; curver integer; crStatus varchar2(20); isRef integer; l_state varchar2(30); vdummy varchar2(100); par_lock_str varchar2(100); lockMode varchar2(2); lock_status integer; wm$hasCRChild_var boolean := false; prev_wm$hasCRChild boolean := false; ndf_exc boolean := false; prev_l_nextver varchar2(1000); prev_op_ctx varchar2(100); op_status varchar2(10) ; type inttabtype is table of integer ; ver_tab inttabtype ; pkvs inttabtype ; type ltlocktabtype is table of varchar2(100) ; ltlock_tab ltlocktabtype ; type rowflagtabtype is table of varchar2(15) ; row_flag_tab rowflagtabtype ; type rowidtabtype is table of rowid ; rids rowidtabtype ; all_nextver varchar2(500) default '-1' ; cr_nextver varchar2(500) default '-1' ; pos integer ; /*** Begin needed for implementing RIC's ***/ needToFire boolean; nullsInFK boolean; dependent_rows boolean; es_sql_string varchar2(32000); /*** End needed for implementing RIC's ***/ ricLockStatus integer; dummyLockStatus integer; op_ctx_var varchar2(100); N$TABLE_NAME VARCHAR2(30) := :NEW.TABLE_NAME; N$SELECT_POLICY VARCHAR2(10) := :NEW.SELECT_POLICY; N$INSERT_POLICY VARCHAR2(10) := :NEW.INSERT_POLICY; N$UPDATE_POLICY VARCHAR2(10) := :NEW.UPDATE_POLICY; N$DELETE_POLICY VARCHAR2(10) := :NEW.DELETE_POLICY; N$REPL_TYPE VARCHAR2(10) := :NEW.REPL_TYPE; N$POLICY_GROUP VARCHAR2(30) := :NEW.POLICY_GROUP; N$OWNER VARCHAR2(30) := :NEW.OWNER; N$POLICY_COMMENT VARCHAR2(4000) := :NEW.POLICY_COMMENT; N$CHANGE_TIME DATE := :NEW.CHANGE_TIME; N$APPLY_TIME DATE := :NEW.APPLY_TIME; N$WHO_ALTER VARCHAR2(256) := :NEW.WHO_ALTER; N$WHO_CHANGE VARCHAR2(256) := :NEW.WHO_CHANGE; procedure apply_unique_constraints is begin null ; end; BEGIN prev_l_nextver := wmsys.lt_ctx_pkg.l_nextver; prev_wm$hasCRChild := wmsys.lt_ctx_pkg.wm$hasCRChild; prev_op_ctx := wmsys.lt_ctx_pkg.op_ctx; wmsys.lt_ctx_pkg.op_ctx := nvl(SYS_CONTEXT('lt_ctx','opContext'),'DML'); wmsys.lt_ctx_pkg.initializeRicLockingVars; l_state := nvl(sys_context('lt_ctx', 'state'), 'LIVE'); if (wmsys.lt_ctx_pkg.version != -1) then WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_12_NO); end if; if (wmsys.lt_ctx_pkg.useDefaultValuesForNulls) then if (N$POLICY_GROUP
is null) then N$POLICY_GROUP := 'FILIAL'; end if;if (N$OWNER is null) then N$OWNER := 'BARS' ; end if; end if; wmsys.lt_ctx_pkg.checkFreezeStatus(l_state, curver, lock_status, crStatus, isRef); wmsys.lt_ctx_pkg.curver := curver; if (crStatus = wmsys.lt_ctx_pkg.CRSTATUS_ALLCR or crStatus = wmsys.lt_ctx_pkg.CRSTATUS_MIXED) then wmsys.lt_ctx_pkg.wm$hasCRChild := true; end if; BEGIN lockMode := wmsys.lt_ctx_pkg.lock_Mode; if (wmsys.lt_ctx_pkg.rowlock_status != 'F') then if ( wmsys.lt_ctx_pkg.dml_var = 'ON' or (wmsys.lt_ctx_pkg.triggerOpCtx != 'DML' and ( wmsys.lt_ctx_pkg.tab_merge_wo_remove_var = 'ON' or wmsys.lt_ctx_pkg.tab_merge_w_remove_var = 'ON' or wmsys.lt_ctx_pkg.wspc_merge_wo_remove_var = 'ON' or wmsys.lt_ctx_pkg.wspc_merge_w_remove_var = 'ON' or wmsys.lt_ctx_pkg.table_refresh_var = 'ON' ))) then BARS.wm$TBIU_POLICYTABLE_io(N$TABLE_NAME, :OLD.TABLE_NAME, N$SELECT_POLICY, :OLD.SELECT_POLICY, N$INSERT_POLICY, :OLD.INSERT_POLICY, N$UPDATE_POLICY, :OLD.UPDATE_POLICY, N$DELETE_POLICY, :OLD.DELETE_POLICY, N$REPL_TYPE, :OLD.REPL_TYPE, N$POLICY_GROUP, :OLD.POLICY_GROUP, N$OWNER, :OLD.OWNER, N$POLICY_COMMENT, :OLD.POLICY_COMMENT, N$CHANGE_TIME, :OLD.CHANGE_TIME, N$APPLY_TIME, :OLD.APPLY_TIME, N$WHO_ALTER, :OLD.WHO_ALTER, N$WHO_CHANGE, :OLD.WHO_CHANGE, l_rowid2, :old.wm_rowid); end if; null; end if;apply_unique_constraints; BEGIN select nextver, ltlock, delstatus, version, rowid into l_nextver, l_ltlock, l_delstat, l_version, l_rowid from BARS.POLICY_TABLE_LT where TABLE_NAME = N$TABLE_NAME AND POLICY_GROUP = N$POLICY_GROUP AND OWNER = N$OWNER and (version in (select parent_vers from wmsys.wm$table_parvers_view where table_name = 'BARS.POLICY_TABLE'))and (nextver = '-1' or not exists(select 1 from wmsys.wm$current_nextvers_view where nextver = next_vers)) for update; wmsys.lt_ctx_pkg.l_nextver := l_nextver; /* We found the row and it was not deleted. */ if (l_delstat >= 0) then WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_10_NO); end if; if(l_version = curver) then par_lock_str := wmsys.lt_ctx_pkg.checkngetlock(lockmode, l_ltlock, l_nextver, l_state, 1,'INSERT', l_version, l_delstat, isRef) ; else par_lock_str := wmsys.lt_ctx_pkg.checkngetlock(lockmode, l_ltlock, l_nextver, l_state, 0,'INSERT', l_version, l_delstat, isRef) ; end if; /* We found the row and it was deleted by us */ if (l_version = curver ) then update BARS.POLICY_TABLE_LT set TABLE_NAME = N$TABLE_NAME,
SELECT_POLICY = N$SELECT_POLICY,INSERT_POLICY = N$INSERT_POLICY,UPDATE_POLICY = N$UPDATE_POLICY,DELETE_POLICY = N$DELETE_POLICY,REPL_TYPE = N$REPL_TYPE,POLICY_GROUP = N$POLICY_GROUP,OWNER = N$OWNER,POLICY_COMMENT = N$POLICY_COMMENT,CHANGE_TIME = N$CHANGE_TIME,APPLY_TIME = N$APPLY_TIME,WHO_ALTER = N$WHO_ALTER,WHO_CHANGE = N$WHO_CHANGE, delstatus = abs(delstatus)+1, ltlock = par_lock_str where rowid = l_rowid; else update BARS.POLICY_TABLE_LT set ltlock = par_lock_str, nextver = wmsys.lt_ctx_pkg.getNextVer(nextver,curver,version,l_state,crStatus,33) where rowid = l_rowid; INSERT INTO BARS.POLICY_TABLE_LT(TABLE_NAME,SELECT_POLICY,INSERT_POLICY,UPDATE_POLICY,DELETE_POLICY,REPL_TYPE,POLICY_GROUP,OWNER,POLICY_COMMENT,CHANGE_TIME,APPLY_TIME,WHO_ALTER,WHO_CHANGE,VERSION,NEXTVER,DELSTATUS,LTLOCK) VALUES(N$TABLE_NAME,N$SELECT_POLICY,N$INSERT_POLICY,N$UPDATE_POLICY,N$DELETE_POLICY,N$REPL_TYPE,N$POLICY_GROUP,N$OWNER,N$POLICY_COMMENT,N$CHANGE_TIME,N$APPLY_TIME,N$WHO_ALTER,N$WHO_CHANGE, curver, wmsys.lt_ctx_pkg.CRCurNextver, abs(l_delstat)+1, wmsys.lt_ctx_pkg.cur_lock_str) returning rowid into l_rowid; end if; /* Row not found. Insert a new row with our version. */ exception when no_data_found then ndf_exc := true; end; if (ndf_exc ) then /* Insert the row with ltlock(1) = N (No Ancestor) for orphan rows */ /* snapshots start at +10 */ INSERT INTO BARS.POLICY_TABLE_LT(TABLE_NAME,SELECT_POLICY,INSERT_POLICY,UPDATE_POLICY,DELETE_POLICY,REPL_TYPE,POLICY_GROUP,OWNER,POLICY_COMMENT,CHANGE_TIME,APPLY_TIME,WHO_ALTER,WHO_CHANGE,VERSION,NEXTVER,DELSTATUS,LTLOCK) VALUES (N$TABLE_NAME,N$SELECT_POLICY,N$INSERT_POLICY,N$UPDATE_POLICY,N$DELETE_POLICY,N$REPL_TYPE,N$POLICY_GROUP,N$OWNER,N$POLICY_COMMENT,N$CHANGE_TIME,N$APPLY_TIME,N$WHO_ALTER,N$WHO_CHANGE, -1, -1, 10, null) returning rowid into l_rowid ; BEGIN select row_flag, version, ltlock, pkv, rid bulk collect into row_flag_tab, ver_tab, ltlock_tab, pkvs, rids from ( select 'other_row' row_flag, version, ltlock, decode(pv.parent_vers, null, 0, 1) pkv, lt1.rowid rid from BARS.POLICY_TABLE_LT lt1, wmsys.wm$parvers_view pv where TABLE_NAME = N$TABLE_NAME AND POLICY_GROUP = N$POLICY_GROUP AND OWNER = N$OWNER and not exists (select 1 from wm$current_child_versions_view cv where cv.version = lt1.version) and lt1.version = pv.parent_vers(+) union all select 'child_row' row_flag, version, ltlock, 0 pkv, null from BARS.POLICY_TABLE_LT lt2 where
TABLE_NAME = N$TABLE_NAME AND POLICY_GROUP = N$POLICY_GROUP AND OWNER = N$OWNER and exists (select 1 from wm$current_child_versions_view cv where cv.version = lt2.version) ) dlt where instr(ltlock,',-1*',-1,1) > 0 and version != -1 and not exists ( select 1 from BARS.POLICY_TABLE_LT ilt, wmsys.wm$version_table vt, wmsys.all_version_hview vht where vt.workspace = (select workspace from wmsys.all_version_hview ivht where ivht.version = dlt.version) and vht.workspace = vt.anc_workspace and vht.version <= vt.anc_version and TABLE_NAME = N$TABLE_NAME AND POLICY_GROUP = N$POLICY_GROUP AND OWNER = N$OWNER and ilt.version = vht.version ) ; if(ltlock_tab.first is not null) then all_nextver := ',' ; l_ltlock := ltlock_tab(1) ; for pos in ver_tab.first..ver_tab.last loop if(row_flag_tab(pos) = 'child_row') then if(cr_nextver = '-1') then cr_nextver := ',' ; end if; cr_nextver := cr_nextver || ver_tab(pos) || ',' ; else if (ver_tab(pos)=curver) then WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_10_NO); end if ; if (pkvs(pos)=1) then begin select 1 into dummy from BARS.POLICY_TABLE_LT where rowid = rids(pos) and delstatus > 0 ; WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_10_NO); exception when no_data_found then null; end ; end if ; end if; all_nextver := all_nextver || ver_tab(pos) || ',' ; end loop ; end if; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END ; if(cr_nextver != '-1') then vdummy := wmsys.lt_ctx_pkg.getNextVer(cr_nextver) ; end if ; par_lock_str := wmsys.lt_ctx_pkg.checkngetlock( lockmode, l_ltlock, all_nextver, l_state, 0,'INSERT', -1, -9, isRef) ; /* Update version, nextver, ltlock */ update BARS.POLICY_TABLE_LT set version = curver, nextver = cr_nextver, ltlock = wmsys.lt_ctx_pkg.cur_lock_str where rowid = l_rowid ; end if; l_rowid2 := cast(l_rowid as rowid) ; if (wmsys.lt_ctx_pkg.rowlock_status != 'F') then if ( wmsys.lt_ctx_pkg.dml_var = 'ON' or (wmsys.lt_ctx_pkg.triggerOpCtx != 'DML' and ( wmsys.lt_ctx_pkg.tab_merge_wo_remove_var = 'ON' or wmsys.lt_ctx_pkg.tab_merge_w_remove_var = 'ON' or wmsys.lt_ctx_pkg.wspc_merge_wo_remove_var = 'ON' or wmsys.lt_ctx_pkg.wspc_merge_w_remove_var = 'ON' or wmsys.lt_ctx_pkg.table_refresh_var = 'ON' ))) then BARS.wm$TAIU_POLICY_TABLE(N$TABLE_NAME, :OLD.TABLE_NAME, N$SELECT_POLICY, :OLD.SELECT_POLICY, N$INSERT_POLICY, :OLD.INSERT_POLICY, N$UPDATE_POLICY, :OLD.UPDATE_POLICY, N$DELETE_POLICY, :OLD.DELETE_POLICY, N$REPL_TYPE, :OLD.REPL_TYPE,
 N$POLICY_GROUP, :OLD.POLICY_GROUP, N$OWNER, :OLD.OWNER, N$POLICY_COMMENT, :OLD.POLICY_COMMENT, N$CHANGE_TIME, :OLD.CHANGE_TIME, N$APPLY_TIME, :OLD.APPLY_TIME, N$WHO_ALTER, :OLD.WHO_ALTER, N$WHO_CHANGE, :OLD.WHO_CHANGE, l_rowid2, :old.wm_rowid); end if; null; end if; wmsys.lt_ctx_pkg.update_modified_tables('BARS','POLICY_TABLE', curver, l_state,33) ; if (wmsys.lt_ctx_pkg.do_ct_ric_check) then nullsInFK := false;if ( N$POLICY_GROUP IS NULL ) then nullsInFK := true; end if; if ( not nullsInFK ) then BEGIN ricLockStatus := wmsys.lt_ctx_pkg.request(10000001,4, wmsys.lt_ctx_pkg.MAXWAIT, true); if ( ricLockStatus = 0 ) then wmsys.lt_ctx_pkg.addToRicLocksList( 'BARS.POLICY_GROUPS', 'S' ); else if ( ricLockStatus = 4 ) then if ( wmsys.lt_ctx_pkg.hasRicLockOn('BARS.POLICY_GROUPS', 'RE')) then ricLockStatus := wmsys.lt_ctx_pkg.request(10000002, 6, 0, true); if ( ricLockStatus != 0 and ricLockStatus != 4 ) then WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_171_NO, 'deadlock detected while trying to acquire lock on BARS.POLICY_GROUPS'); end if; ricLockStatus := wmsys.lt_ctx_pkg.convert(10000001, 6, wmsys.lt_ctx_pkg.MAXWAIT); if ( ricLockStatus != 0 ) then dummyLockStatus := wmsys.lt_ctx_pkg.release(10000002); WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_171_NO, 'error while trying to acquire lock on BARS.POLICY_GROUPS, status = ' || ricLockStatus ); end if; end if; else WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_171_NO, 'error while trying to acquire lock on BARS.POLICY_GROUPS, status = ' || ricLockStatus ); end if; end if; select 1 into dummy from BARS.POLICY_GROUPS where (POLICY_GROUP = N$POLICY_GROUP); EXCEPTION when NO_DATA_FOUND then WMSYS.WM_ERROR.RAISEERROR(WMSYS.LT.WM_ERROR_6_NO, 'BARS', 'FK_POLICYTABLE_POLICYGROUPS'); when others then RAISE; END; end if; end if; wmsys.lt_ctx_pkg.wm$hasCRChild := prev_wm$hasCRChild; wmsys.lt_ctx_pkg.l_nextver := prev_l_nextver; wmsys.lt_ctx_pkg.op_ctx := prev_op_ctx; exception when others then wmsys.lt_ctx_pkg.wm$hasCRChild := prev_wm$hasCRChild; wmsys.lt_ctx_pkg.l_nextver := prev_l_nextver; wmsys.lt_ctx_pkg.op_ctx := prev_op_ctx; if (lock_status = 0) then wmsys.lt_ctx_pkg.releaseLock(wmsys.lt_ctx_pkg.state_lock_id); end if; RAISE; end; end;
/
ALTER TRIGGER BARS.OVM_INSERT_33 ENABLE;


PROMPT ===================================================================================== 
PROMPT *** End *** ========== Scripts /Sql/BARS/Trigger/OVM_INSERT_33.sql =========*** End *
PROMPT ===================================================================================== 
