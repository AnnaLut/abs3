CREATE OR REPLACE package body BARS.migraAS
as
  version_body  constant  varchar2(64) := 'version 3.00 17.08.2018';

-- v.1.05 12.05.2009 19:29 - Миграция АСВО6.3: поставлена защита от пропуска
--                           дублей вкладов с одинаковыми "Идентификатором
--                           счёта" и "Номером счёта" АСВО. В связи с этим в
--                           номер депозитного (или социального) договора
--                           включены три последние символа имени файла, в
--                           котором находится вклад в АСВО

-- v.1.06 13.05.2009 11:27 - Дату последнего начисления %% берём НЕ из АСВО,
--                           а СТРОГО банковскую

-- v.1.07 13.05.2009 15:47 - Проставляется количество пролонгаций депозитов

-- v.1.08 25.05.2009 17:33 - Уникальный номер ОСЗ ищется сначала для текущего
--                           "бранча", если не найден - то для родительского
--                           "бранча"

-- v.1.09 28.05.2009 15:47 - Миграция АСВО6.3: выполняется проверка на
--                           соответствие валюты вклада АСВО валюте вида вклада
--                           БАРС

-- v.1.10 01.06.2009 18:11 - Сделано наполнение справочников для миграции
--                           вкладов АСВО6.3 из DBF-файлов предопределёной
--                           структуры:

--                           DBF (NLS.dbf) для справочников

--                           1. виды вкладов (переходник) - DPT_VIDD_ASVO
--                           2. соответствие кодов видов вкладов АСВО
--                              котловым счетам           - ASVO_NLS

--                           NAMEV    Character  50   - наименование вида вклада АСВО
--                           KODASVO  Character   3   - код вида вклада (картотеки) АСВО
--                           KODBAR   Character   3   - код вида вклада БАРС
--                           NAMEBAR  Character  70   - наименование вида вклада БАРС
--                           VAL      Character   3   - код валюты (980,840,978,643,826,...)
--                           TVBV     Character   5   - код ТВБВ в АСВО
--                           VKLAD    Numeric    14   - котловой счёт вкладов по виду вклада
--                           NARAXP   Numeric    14   - котловой счёт начисленных %% по виду вклада
--                           ZARAXP   Numeric    14   - котловой счёт зачисленных %% по виду вклада

--                           DBF (PRC.dbf) для справочника

--                           1. процентных ставок картотек АСВО - ASVO_FFF_PERCENT

--                           TVBV     Character   5   - код ТВБВ в АСВО
--                           KODBAR   Character   3   - код вида вклада БАРС
--                           KODASVO  Character   3   - код вида вклада (картотеки) АСВО
--                           SHKALA   Numeric     9,2 - шкала в валюте без копеек (например 100.00USD=100)
--                           DATPRC   Date        8   - дата установки %% ставки
--                           PERCN    Numeric     6,2 - %% ставка

--                           DBF (NOT.dbf) для справочника

--                           1. видов вкладов АСВО, не подлежащих импорту

--                           TVBV     Character   5   - код ТВБВ в АСВО
--                           KODASVO  Character   3   - код вида вклада (картотеки) АСВО

-- v.1.11 01.06.2009 19:34 - В процедуры импорта вкладов и открытия клиентов и
--                           счетов перед началом импорта добавлены проверки
--                           (наличие необходимых счетов, принадлежность счетов
--                           соответствующим ТВБВ, наличие видов вкладов АСВО,
--                           описанных в DPT_VIDD_ASVO, в ASVO_NLS)

-- v.1.12 02.06.2009 18:46 - Добавлена процедура сворачивания КОТЛОВЫХ и
--                           процедура отката сворачивания КОТЛОВЫХ

-- v.1.13 03.06.2009 19:46 - Миграция АСВО6.3: выкидываю ВСЕ символы ; (точка с
--                           запятой) из описания вида вклада (в системных
--                           ресурсах)

-- v.1.14 03.06.2009 20:34 - Сообщение об ошибке при сворачивании котловых
--                           счетов, если на счёте ostc=0 или ostc<>ostb

-- v.1.15 05.06.2009 17:44 - В DPT_VIDD_ASVO введено поле DEPOSIT_NAME -
--                           наименование вида вклада в АСВО
--                           1. alter table dpt_vidd_asvo
--                              add deposit_name VARCHAR2(50 BYTE);
--                           2. COMMENT ON COLUMN dpt_vidd_asvo.deposit_name
--                              IS 'Наименование вида вклада в АСВО';

-- v.1.16 09.07.2009 19:09 - Упраздняется SOCIAL_CONTRACTS и всё, что с ним

-- v.1.17 14.07.2009 13:51 - Для доверенных лиц проставляется дата окончания
--                           действия доверенности (при её наличии)

-- v.1.18 27.08.2009 13:20 - Миграция АСВО6.3: в анкетных данных клиента
--                           пропускается "мусор"

-- v.1.19 03.09.2009 12:36 - Не принимается вклад, если одновременно
--                           отсутствуют даты открытия и договора

-- v.1.20 03.09.2009 18:11 - Вставлены сообщения об ошибках при загрузке
--                           депозитных счетов в случае отсутствия транзитных
--                           счетов

-- v.1.21 23.09.2009 11:59 - Справочник процентных ставок в АСВО (PRC.DBF)
--                           изменение размерности поля с 8,2 на 9,2
--                           SHKALA   Numeric     9,2 - шкала в валюте без копеек (например 100.00USD=100)

-- v.1.22 23.09.2009 20:15 - При открытии вкладов ТВБВ счета депозитов
--                           "привязываются" к пользователю ТВБВ, который
--                           обладает правом подписи

-- v.1.23 24.09.2009 12:46 - Миграция АСВО6.3: ускорение работы в ситуациях:
--                           - Нет соответствия кода картотеки АСВО
--                             виду вклада БАРС
--                           - Код валюты вклада АСВО не соответствует
--                             коду валюты вида вклада БАРС

-- v.1.24 07.10.2009 10:00 - Проверка размерностей данных в файлах NLS.DBF,
--                           PRC.DBF, NOT.DBF сделана с учётом реальных длин
--                           полей справочников (таблиц АБС)

-- v.1.25 07.10.2009 10:54 - При открытии вкладов ТВБВ счета депозитов
--                           "привязываются" к пользователю ТВБВ, который
--                           обладает правом подписи (если таковой есть)

-- v.1.26 07.10.2009 13:16 - Вставлена обработка ошибки при отсутствии
--                           котловых счетов для открытых счетов вкладов
--                           (хотя такого НЕ должно быть)

-- v.1.27 07.10.2009 17:31 - Миграция АСВО6.3: при выполнении пунктов "Загрузка
--                           депозитных счетов (остатки)" и "ОТКАТ: вкладов +
--                           удаление клиентов и счетов" усилен контроль на то,
--                           что вклад импортился из АСВО

-- v.1.28 07.10.2009 18:39 - Уточнена диагностика ошибок при выполнении пункта
--                           "Сворачивание реальных котловых счетов"

-- v.1.29 13.10.2009 13:30 - Миграция АСВО6.3: если дата выдачи документа и
--                           следующие за ней данные отсутствуют в анкете
--                           клиента, то всем присваивается значение NULL

-- v.1.30 25.10.2009 12:51 - Проверка котловых счетов для вкладов АСВО ОПЧ:
--                           котловой счёт может принадлежить не только бранчу
--                           ОПЧ, но и вышестоящему бранчу

-- v.1.31 26.10.2009 10:25 - Миграция АСВО6.3: при откате вкладов и удалении
--                           клиентов и счетов дополнительно чистятся таблицы
--                           системы накопления

-- v.1.32 02.11.2009 12:23 - Миграция АСВО6.3: дата начисления процентов из
--                           DBF-файлов вкладов АСВО НЕ импортится (берётся
--                           банковская дата)

-- v.1.33 04.11.2009 15:27 - Миграция АСВО6.3: в анкетных данных клиента
--                           пропускается "мусор-2"

-- v.1.34 04.11.2009 18:58 - Миграция АСВО6.3: в анкетных данных улица не в
--                           одинарных, а в двойных кавычках (отныне
--                           обрабатывается) + в анкетных данных улица в
--                           одинарных кавычках, но в наименовании улицы
--                           встречается двойная кавычка (тоже уже
--                           обрабатывается)

-- v.1.35 11.11.2009 12:54 - Если по вкладу были пролонгации, то к процентной
--                           ставке добавляется бонус, высчитанный на основании
--                           вида вклада (таблица DPT_VIDD)

-- v.1.36 20.11.2009 14:46 - Вставлено отключение/включение триггера
--                           tbiu_specparamint_ob22 для импорта вкладов со
--                           "старыми" датами открытия вкладов

-- v.1.37 24.11.2009 14:17 - Миграция АСВО6.3: обработка ситуации в анкетных
--                           данных клиента (в номера телефона встречаются
--                           запятые)

-- v.1.38 24.11.2009 17:09 - Миграция АСВО6.3: дополнительно в схему БАРСа
--                           загружаются файлы операций Dккккк с прицелом на
--                           создание в АБС оборотов по вкладам; создаётся набор
--                           архивных файлов - ресурcы (OBJ), состояния счетов
--                           (Sккккк), анкеты (Aккккк), операции (Dккккк), маска
--                           таблиц в схеме БАРСа: ASVO_FFF_Пккккк, где FFF -
--                           номер ТВБВ в АСВО, П=S, A или D или Пккккк=OBJ

-- v.1.39 01.12.2009 12:16 - Не принимается вклад, если дата открытия вклада
--                           больше текущей банковской даты

-- v.1.40 15.12.2009 12:51 - Миграция вкладов АСВО6.5

--                           Наполнение справочников для миграции вкладов
--                           АСВО6.5 можно (и нужно) делать из DBF-файлов
--                           предопределённой структуры:

--                           DBF (NLS65.dbf) для справочников

--                           1. виды вкладов (переходник) - DPT_VIDD_ASVO
--                           2. соответствие кодов видов вкладов АСВО
--                              котловым счетам           - ASVO_NLS

--                           NAMEV    Character  50   - наименование вида вклада АСВО
--                           KODASVO  Character  18   - код вида вклада (картотеки) АСВО
--                           KODBAR   Numeric     3   - код вида вклада БАРС
--                           NAMEBAR  Character  70   - наименование вида вклада БАРС
--                           VAL      Numeric     3   - код валюты (980,840,978,643,826,...)
--                           TVBV     Character   3   - код ТВБВ в АСВО
--                           VKLAD    Numeric    14   - котловой счёт вкладов по виду вклада
--                           NARAXP   Numeric    14   - котловой счёт начисленных %% по виду вклада
--                           ZARAXP   Numeric    14   - котловой счёт зачисленных %% по виду вклада

--                           DBF (PRC65.dbf) для справочника

--                           1. процентных ставок картотек АСВО - ASVO_FFF_PERCENT

--                           TVBV     Character   3   - код ТВБВ в АСВО
--                           KODBAR   Numeric     3   - код вида вклада БАРС
--                           KODASVO  Character  18   - код вида вклада (картотеки) АСВО
--                           SHKALA   Numeric     9,2 - шкала в валюте без копеек (например 100.00USD=100)
--                           DATPRC   Date        8   - дата установки %% ставки
--                           PERCN    Numeric     6,2 - %% ставка

--                           DBF (NOT65.dbf) для справочника

--                           1. видов вкладов АСВО, не подлежащих импорту

--                           TVBV     Character   3   - код ТВБВ в АСВО
--                           KODASVO  Character  18   - код вида вклада (картотеки) АСВО

--                           Код вида вклада (картотеки) АСВО для версии 6.5
--                           является составным, из трёх полей таблицы SYMB:
--                           TYPV, ID_CF, ID_RH. Разделителем между значениями
--                           этих полей является точка. Пример: TYPV=462,
--                           ID_CF=1110040, ID_RH=462, в этом случае код вида
--                           вклада АСВО будет равен 462.1110040.462

-- v.1.41 17.12.2009 12:28 - Откат вкладов и счетов делается только для тех
--                           вкладов, остаток на счетах которых равен 0;
--                           сделано также удаление клиентов по вкладам,
--                           счета по которым откатились (т.е. удалились)

-- v.1.42 18.12.2009 18:33 - Миграция АСВО6.3: анкета клиента - меняем гадость в
--                           почтовом индексе ("'" на '')

-- v.1.43 21.12.2009 16:19 - При откате вкладов и удалении счетов и клиентов
--                           для ускорения используется временная таблица

-- v.1.44 21.12.2009 21:15 - Миграция АСВО6.3: при загрузке файлов вкладов кроме
--                           файлов анкет счетов (A) и файлов состояния счетов
--                           (S) дополнительно загружаются файлы операций (D) и
--                           архива операций (G)

-- v.1.45 22.12.2009 16:27 - Если дата открытия вклада больше или равна дате
--                           окончания, то выдаётся сообщение об ошибке

-- v.1.46 28.12.2009 15:45 - Модернизация отката вкладов, счетов и клиентов

-- v.1.47 05.01.2010 17:07 - ВСЕ виды вкладов изменяются на активные
--                           (dpt_vidd.flag=1) на период процедуры импорта

-- v.1.48 28.01.2010 16:52 - Миграция АСВО6.3: выборка описания картотек из
--                           системных ресурсов ограничена одной строкой для
--                           предотвращения ошибки выборки + детализация
--                           некоторых ошибок

-- v.1.49 01.02.2010 16:52 - Уточнение обработки ошибок при загрузке остатков

-- v.1.50 01.02.2010 15:11 - Миграция АСВО6.3: добавлен анализ ошибки - нет
--                           описания вида вклада OTYPE=CFTILE, ONAME=... в
--                           файле системных ресурсов

-- v.1.51 08.02.2010 18:27 - Добавлено на всякий случай удаление счетов из
--                           SALDOB при выполнении пункта "ОТКАТ: вкладов +
--                           удаление клиентов и счетов"

-- v.1.52 12.02.2010 14:53 - Миграция АСВО6.5: DROP INDEX PK_ASVO_65_CLIENT
--                           перед созданием

-- v.1.53 13.02.2010 03:09 - Миграция АСВО6.3 и АСВО6.5: введена локальная дата
--                           миграции вкладов АСВО

-- v.1.54 16.02.2010 20:09 - Миграция АСВО6.3: если анкетные данные по одному и
--                           тому же клиенту записаны в файле А несколько раз,
--                           то берётся информация по равенству идентификатора
--                           счёта в файлах A и S (сигнализировал Житомир)

-- v.1.55 17.02.2010 11:48 - Миграция АСВО6.5: если дата окончания вклада равна
--                           30/12/1899, то она считается пустой

-- v.1.56 18.02.2010 16:36 - Миграция АСВО6.5: правильная установка бранча при
--                           откате вкладов и удалении клиентов и счетов

-- v.1.57 18.02.2010 18:55 - При импорте вкладов и открытии клиентов и счетов
--                           неверно подчитывалось количество возникших ошибок,
--                           исправлено

-- v.1.58 24.02.2010 16:58 - После пунктов "Загрузка депозитных счетов" и
--                           "Сворачивание реальных котловых счетов"
--                           автоматически выполняется переоценка за дату
--                           миграции вкладов ТВБВ

-- v.1.59 28.02.2010 23:59 - Миграция АСВО6.3: обработка запятой внутри описания
--                           вида вклада (в названии)

-- v.1.60 01.03.2010 11:08 - При загрузке остатков депозитных счетов дата
--                           открытия транзитных счетов 3739... устанавливается
--                           не больше даты миграции ТВБВ (при необходимости)

-- v.1.61 02.03.2010 10:20 - Доведена до ума переоценка

-- v.1.62 05.03.2010 17:44 - Миграция АСВО6.3 и АСВО6.5: копии таблиц АСВО по
--                           ТВБВ делаются только при НЕПУСТОМ значении кода
--                           ТВБВ в АСВО

-- v.1.63 08.03.2010 00:55 - Миграция АСВО6.5: Изменение кода вида вклада
--                           (картотеки) АСВО на составное значение из полей
--                           TYPV, ID_CF, ID_RH таблицы SYMB (после анализа
--                           информации Херсона и Винницы)

-- v.1.64 08.03.2010 22:08 - Миграция АСВО6.3 и АСВО6.5: мигрируются вклады АСВО
--                           с нулевым остатком, если атрибут (ATTR) равен
--                           значению 'Я'; НЕ мигрируются вклады АСВО с
--                           НЕнулевым остатком, если атрибут (ATTR) равен
--                           значению 'DZ' (по просьбам Ивано-Франковска и
--                           Житомира)

-- v.1.65 09.03.2010 15:27 - Миграция АСВО6.3: проверка на соответствие
--                           балансовых счетов вклада АСВО и вида вклада БАРС
--                           (по просьбе Житомира)

-- v.1.66 10.03.2010 17:39 - Исключение ошибки "Заданий термін дії депозиту не
--                           відповідає бал.рахунку 2635 (x != у)" при миграции
--                           вида вклада 110 "Термінові" и видов вкладов без
--                           срока вклада

-- v.1.67 12.03.2010 10:10 - Миграция АСВО6.5: расширение кода картотеки в
--                           NOT65.DBF до 18 байт

-- v.1.68 13.03.2010 09:49 - Миграция АСВО6.3 и АСВО6.5: не импортились вклады,
--                           у которых в поле атрибута было ПУСТОЕ значение.
--                           Исправлено

-- v.1.69 22.03.2010 16:17 - Уточнение даты окончания вклада;
--                           небольшая детализация возможных ошибок;
--                           информация о количестве вкладов (Client_Info)

-- v.1.70 22.03.2010 17:31 - Миграция АСВО6.3: дата начала вклада в БАРСе
--                           определяется из поля DATP "Дата договора" файла
--                           состояния счетов, ранее же бралась из поля DATO
--                           "Дата открытия", что для некоторых видов вкладов
--                           являлось неправильным

-- v.1.71 23.03.2010 20:15 - Миграция АСВО6.3 и АСВО6.5: процентная ставка по
--                           вкладу определяется исходя из "Даты договора"
--                           вклада (DATP) или "Даты открытия" вклада (DATO) в
--                           зависимости от кода метода автопереоформления вида
--                           вклада БАРС

-- v.1.72 25.03.2010 20:02 - Миграция АСВО6.3 и АСВО6.5: не прибавлялся бонус
--                           после первой пролонгации из-за неверной трактовки
--                           даты открытия вклада. Исправлено

-- v.1.73 28.03.2010 15:49 - Миграция АСВО6.5: выполняется корректировка даты
--                           рождения, если она некорректна

-- v.1.74 29.03.2010 12:59 - Миграция АСВО6.5: код картотеки АСВО изменён с
--                           числового на символьный (=TYPV.ID_CF.ID_RH)

-- v.1.75 29.03.2010 20:44 - Миграция АСВО6.5: улучшение определения процентной
--                           ставки по вкладу

-- v.1.76 09.04.2010 12:56 - Миграция АСВО6.3: выполняется корректировка даты
--                           рождения, если она некорректна

-- v.1.77 14.04.2010 16:02 - Улучшение работы с контекстами

-- v.1.78 27.04.2010 17:20 - Миграция АСВО6.3 и АСВО6.5: поставлена
--                           дополнительная проверка - если коду картотеки АСВО
--                           соответствует более одного вида вклада БАРС, то
--                           выдаётся ошибка

-- v.1.79 02.06.2010 13:52 - Миграция АСВО6.5: копирование таблиц АСВО (для
--                           сохранения истории по ТВБВ) выполняется только для
--                           нужных таблиц (была ошибка в выборке, что приводило
--                           к дублированию копий и "пожиранию" табличного
--                           пространства базы данных)

-- v.1.80 10.06.2010 18:25 - Миграция АСВО6.3: разбор списка доверенных лиц
--                           выполняется в обратном порядке (для обеспечения
--                           правильной даты окончания доверенности)

-- v.1.81 17.06.2010 15:12 - Миграция АСВО6.3: перед обработкой процентных
--                           ставок выбрасываются комментарии и пробелы в
--                           описании картотеки АСВО

-- v.1.82 29.06.2010 13:40 - Миграция АСВО6.5: добавлена обработка ситуации при
--                           отсутствии информации в NOT65.DBF

-- v.1.83 29.06.2010 18:57 - Миграция АСВО6.3: добавлена обработка ситуации при
--                           отсутствии информации в NOT.DBF

-- v.1.84 20.07.2010 22:49 - Миграция АСВО6.3: изменение в разборе списка
--                           доверенных лиц ("пустые" лица не обрабатываются)

-- v.1.85 21.07.2010 14:28 - Миграция АСВО6.3: адекватно выдаётся сообщение об
--                           ошибке в случае шифрованного ФИО

-- v.1.86 21.07.2010 17:26 - При миграции НЕ берутся вклады с отрицательным
--                           остатком

-- v.1.87 30.07.2010 16:58 - Небольшое уточнение при выдаче Client_Info

-- v.1.88 10.08.2010 13:25 - При Загрузке депозитных счетов добавлено
--                           принудительное удаление референсов документов
--                           загрузки из таблицы OPER_EXT

-- v.1.89 30.08.2010 13:03 - Модернизация отката вкладов

-- v.1.90 02.09.2010 15:16 - Миграция АСВО6.3: увеличение буфера обработки для
--                           возможности загрузки описания БОЛЬШОГО количества
--                           файлов картотек

-- v.1.91 09.09.2010 13:09 - При ЛЮБОМ изменении даты окончания вклада
--                           (пролонгация) заменяются на эту дату:
--                           accounts.mdate для депозитного и процентного
--                           счетов;
--                           int_accn.stp_dat в процентной карточке депозитного
--                           счета

-- v.1.92 10.09.2010 14:19 - Устранение дублирования записей в справочнике
--                           соответствия кодов видов вкладов (картотек) АСВО
--                           котловым счетам (таблица ASVO_NLS) в процедуре
--                           загрузки этого справочника из NLS.DBF - при наличии
--                           дублированных записей получался неверный результат
--                           Проверки №2

-- v.1.93 14.09.2010 15:55 - Миграция АСВО6.3: немецкие марки интерпертируются
--                           как ЕВРО

-- v.1.94 01.10.2010 15:03 - Миграция АСВО6.3: если метод автопереоформления
--                           вида вклада БАРС отсутствует, то процентная ставка
--                           по вкладу определяется исходя из "Даты договора"
--                           вклада (поле DATP в файле состояния), ранее же
--                           процентная ставка определялась исходя из "Даты
--                           открытия" (поле DATO в файле состояния)

-- v.1.95 05.10.2010 17:38 - Миграция АСВО6.3: увеличена размерность переменной
--                           параметра "улица"

-- v.1.96 06.10.2010 17:49 - Миграция АСВО6.3: при разборе списка доверенных лиц
--                           обрабатывается ситуация, когда в наименовании
--                           доверенного лица встречаются запятые

-- v.1.97 07.10.2010 17:39 - Устранение неработоспособности пакета при наличии
--                           пустого значения кода картотеки в таблице
--                           ASVO_FFF_NOT (Справочник кодов видов вкладов АСВО
--                           ТВБВ, не подлежащих импорту);
--                           отключение/включение алертера для ускорения работы

-- v.1.98 13.10.2010 18:02 - Миграция АСВО6.3: можно импортить канадские
--                           доллары, в этом случае в идентификаторе вида вклада
--                           АСВО (картотеки) второй символ должен быть K;
--                           при миграции вклада в поле DATZ (дата заключения
--                           вклада) заносится значение поля DATO (дата
--                           открытия), ранее же заносилось значение поля DATP
--                           (дата договора) из файла состояния счетов АСВО

-- v.1.99 20.10.2010 17:33 - Миграция АСВО6.3: уточнены условия по установке
--                           сроков вкладов (по умолчанию)

-- v.2.00 21.10.2010 12:02 - Расширен буфер сообщениий об ошибке с 512 до 1024

-- v.2.01 25.10.2010 19:09 - Миграция АСВО6.3: обработка одинарной кавычки в
--                           фамилии доверенного лица, которая заключена в
--                           двойные кавычки

-- v.2.02 18.11.2010 15:44 - Миграция АСВО6.3 и АСВО6.5: НЕ мигрируются вклады
--                           АСВО, у которых в поле атрибутов (ATTR)
--                           присутствует символ D или Z

-- v.2.03 20.12.2010 16:49 - Уточнён контроль дублирования сообщений при
--                           групповых ошибках

-- v.2.04 16.03.2011 16:00 - Импорт вкладов МЕГАБАНК

-- v.2.05 05.04.2011 18:02 - Миграция АСВО6.3: при разборе списка доверенных лиц
--                           обрабатывается ситуация, когда в наименовании
--                           доверенного лица встречается кавычка

-- v.2.06 07.04.2011 13:44 - Миграция АСВО6.3: корректная обработка информации
--                           при неполных анкетных данных

-- v.2.07 16.05.2011 15:07 - Миграция АСВО6.3: увеличена размерность переменной
--                           для улицы (в анкетных данных клиента)

-- v.2.08 01.06.2011 13:54 - Миграция АСВО6.3: переделана обработка данных (для
--                           устранения ошибки при размере оных более 32767)
--                           ресурса CFDictR (из файла ресурсов АСВО)

-- v.2.09 01.06.2011 18:01 - Импорт вкладов СБОН

-- v.2.10 06.07.2011 13:21 - После Импорта вкладов и открытия клиентов и счетов
--                           автоматически запускается сбор статистики

-- v.2.11 03.09.2011 19:00 - Миграция АСВО6.5: можно импортить канадские доллары
--                           и польские злотые;
--                           Миграция АСВО6.3: можно импортить польские злотые,
--                           в этом случае в идентификаторе вида вклада АСВО
--                           (картотеки) второй символ должен быть Z

-- v.2.12 08.09.2011 16:03 - Миграция АСВО6.3: при наличии индивидуальной
--                           процентной ставки по вкладу (в анкете) берём её,
--                           описание местонахождения такой процентной ставки
--                           описано в документе предоставленном Департаментом
--                           информатизации

-- v.2.13 09.10.2011 14:37 - Миграция АСВО6.5: при нарушении условий вклада
--                           (в поле ls_attr таблицы вкладов есть аттрибуты n
--                           или N) процентная ставка устанавливается равной 0;
--                           если в поле ls_attr присутствует аттрибут o, то
--                           формируется доп.соглашение о третьем лице

-- v.2.14 12.10.2011 11:15 - Миграция МЕГАБАНК и СБОН: были перепутаны
--                           доверенные лица и наследники, исправлено

-- v.2.15 20.10.2011 18:50 - Миграция АСВО: в PRC.DBF (или PRC65.DBF для 6.5)
--                           количество знаков после запятой может быть от 2-х
--                           до 4-х (поле PERCN), т.е. допустимы комбинации:
--                           PERCN    Numeric     6,2
--                           PERCN    Numeric     7,3
--                           PERCN    Numeric     8,4

-- v.2.16 03.11.2011 16:54 - Миграция вкладов: учитывается трёхзначный код ТВБВ
--                           (для избежания проблем, возникающих при откатах в
--                           "домиграциях" мигрированных ранее ТВБВ)

-- v.2.17 29.11.2011 18:53 - Миграция АСВО6.3: при обработке описаний картотек
--                           учитывается регистр в логических параметрах

-- v.2.18 30.11.2011 16:37 - Миграция МЕГАБАНК и СБОН: разрядность строковых
--                           параметров вклада приведена в соответствие с
--                           разрядностью соответствующих полей таблиц АБС БАРС

-- v.2.19 24.01.2012 21:01 - Миграция АСВО6.3: доверенные лица обрабатываются
--                           с учётом даты действия доверенности (сортировка по
--                           этой дате в обратном порядке)

-- v.2.20 25.01.2012 21:34 - Миграция вкладов: ускорение процесса миграции за
--                           счёт сбора статистики по всем связанным со вкладами
--                           таблицам после открытия каждых 5000 вкладов.
--                           Миграция АСВО6.3 и АСВО6.5: для счетов депозитов и
--                           начисленных процентов, которые открываются на этапе
--                           миграции, заполняются Финансовые реквизиты
--                           «Блокировка по Дебету» и «Блокировка по Кредиту»,
--                           если в поле атрибутов вклада ATTR (файл импорта
--                           Sxxnnn.DBF) значение первого символа равняется «h»,
--                           то в оба реквизита заносится значение
--                           «Заарештований», если же значение первого символа
--                           равняется «Q», то в оба реквизита заносится
--                           значение «Блоковані всі»

-- v.2.21 01.02.2012 18:21 - Миграция АСВО6.3: алгоритм подсчёта количества
--                           пролонгаций депозитов учитывает возможные выходные
--                           дни в дате окончания вклада в АСВО

-- v.2.22 08.02.2012 19:08 - Миграция АСВО6.3: в доверенностях корректно
--                           обрабытывается кавычка (') в текстовых полях

-- v.2.23 10.02.2012 17:57 - Миграция МЕГАБАНК: уникальный код вида вклада
--                           формируется так -> DEPCODE||substr(BALNLS,8,2)

-- v.2.24 21.02.2012 16:20 - Миграция АСВО6.3 и АСВО6.5: при наличии в карточке
--                           клиента в поле атрибутов вклада ATTR (файл импорта
--                           Sxxnnn.DBF) атрибута «R» в карточку счёта в поле
--                           NLSB "Счёт получателя для выплаты %%" прописывается
--                           депозитный счёт клиента

-- v.2.25 24.02.2012 17:40 - Миграция АСВО6.3: запись предупреждающего сообщения
--                           в журнал безопасности при ошибочной или пустой
--                           анкете клиента

-- v.2.26 28.02.2012 20:39 - Миграция АСВО6.3: доверенности обрабатываются в
--                           порядке уменьшения даты окончания оных

-- v.2.27 11.04.2012 13:36 - Миграция МЕГАБАНК: добавлена обработка нескольких
--                           доп.соглашений (доверенностей, завещаний,
--                           бенефициаров), а также даты начала и окончания
--                           действия доп.соглашения (см. документ "Структура
--                           файла Мега.txt", поля 58 и 59)

-- v.2.28 08.06.2012 15:53 - Миграция АСВО6.3: более корректно обрабатываются
--                           продолжительность вклада и дата окончания вклада

-- v.2.29 12.09.2012 16:51 - Миграция вкладов: при импорте вкладов учитывается
--                           тип срока вида вклада;
--                           Миграция АСВО6.3: в описании видов вкладов АСВО
--                           корректно обрабатывается не только одинарная
--                           кавычка ('), но и двойная кавычка (")

-- v.2.30 11.10.2012 16:24 - Миграция АСВО6.3: в анкетных данных клиента
--                           пропускается "мусор-3"

-- v.2.31 28.10.2012 00:24 - Миграция АСВО6.3: исправлена ошибка при обработке
--                           анкетных данных клиента, возникавшая в случае, если
--                           ОТСУТСТВУЮЩАЯ информация о наследниках и доверенных
--                           лицах НЕ заключалась в фигурные скобки, т.е. вместо
--                           {},{}, было указано ,,

-- v.2.32 19.02.2013 14:58 - Миграция АСВО6.3: изменение для польских злотых,
--                           в идентификаторе вида вклада АСВО (картотеки)
--                           второй символ должен быть Z или P;
--                           исключена переоценка (по просьбе Львова);
--                           миграция неподвижных вкладов АСВО (начало)

-- v.2.33 20.03.2013 17:13 - Миграция АСВО6.3: дата окончания вклада
--                           устанавливается по описанию вида вклада БАРС (из
--                           таблицы dpt_vidd), если анкетные данные клиента
--                           отсутствуют или ошибочны (о ситуации сигнализировал
--                           Днепропетровск)

-- v.2.34 01.04.2013 17:39 - Миграция АСВО6.3: лояльная обработка некорректных
--                           данных по доверенным лицам в анкете клиента (о
--                           ситуации сигнализировали Черкассы)

-- v.2.35 18.04.2013 17:12 - Миграция вкладов: из процедуры сбора статистики
--                           исключены таблицы, которые не изменяются при
--                           импорте вкладов

-- v.2.36 24.04.2013 17:59 - Миграция МЕГАБАНК: серия документа (поле PASP_S)
--                           корректно обрабатывается для любого типа документа
--                           (поле DOCTYPE)

-- v.2.37 02.05.2013 00:37 - Миграция АСВО6.3: обработка нестандартных данных по
--                           доверенным лицам в анкете клиента (в данных запятые
--                           вместо точек - сигнализировала Одесса)

-- v.2.38 15.05.2013 11:59 - Миграция вкладов: вставлено отключение/включение
--                           триггера TBIU_DPTVIDD_FLAG

-- v.2.39 01.07.2013 15:26 - Миграция МЕГАБАНК: убраны лишние коментарии

-- v.2.40 12.09.2013 13:29 - Миграция вкладов: изменён вызов процедуры
--                           dpt_web.p_open_vklad_rnk (для универсальности)

-- v.2.41 24.09.2013 18:05 - Миграция вкладов АСВО: в связи с изменением
--                           технологии контроля сроков депозитов по Депозитным
--                           продуктам незначительно изменилась логика
--                           пролонгаций

-- v.2.42 28.11.2013 17:20 - Миграция вкладов АСВО: обработка "длинных" адресов
--                           (о ситуации сигнализировал Львов)

-- v.2.43 13.12.2013 15:34 - Миграция вкладов МЕГАБАНК: код вида вклада БАРС
--                           (поле KODBAR в файле NLS.DBF) расширен с
--                           трёхзначного до четырёхзначного - Numeric 4 (о
--                           ситуации сигнализировал Киев)

-- v.2.44 22.01.2014 18:49 - Миграция вкладов МЕГАБАНК: при нарушении структуры
--                           входного файла (mega0fff.dbf) программа
--                           отрабатывает корректно

-- v.2.45 28.01.2014 19:00 - Миграция вкладов МЕГАБАНК: реализована возможность
--                           импорта вкладов с нулевым остатком; в структуру
--                           входного файла mega0fff.dbf добавлено поле
--                           D_FIL Сharacter 5, в котором при необходимости
--                           можно указать код "влитого" филиала

-- v.2.46 30.01.2014 17:55 - Миграция вкладов АСВО6.3: очередная перетрубация
--                           с пролонгациями

-- v.2.47 31.01.2014 16:54 - Миграция неподвижных вкладов из депозитного
--                           портфеля АБС БАРС (процедура)

-- v.2.48 06.02.2014 12:15 - Миграция вкладов АСВО: дата окрытия вклада и дата
--                           договора записываются в нужные места

-- v.2.49 10.02.2014 10:49 - Миграция неподвижных вкладов из депозитного
--                           портфеля АБС БАРС (изменение процедуры)

-- v.2.50 18.02.2014 16:57 - Миграция вкладов МЕГАБАНК и СБОН: обрабатывается
--                           реквизит пол согласно описанию; значение типа
--                           госреестра для вновь открываемых клиентов =2

-- v.2.51 17.03.2014 14:31 - Миграция вкладов АСВО6.3: более корректно
--                           обрабатывается описание вида вклада из ресурсов
--                           АСВО (из OTYPE='BRANCH'), что влияет на определение
--                           балансового счёта и кода валюты вида вклада АСВО

-- v.2.52 18.03.2014 18:45 - Миграция вкладов АСВО6.5: устранена ошибка,
--                           возникавшая при некорректной информации по
--                           доверенным лицам и (или) наследникам

-- v.2.53 25.03.2014 13:12 - Миграция вкладов АСВО6.3: устранена ошибка,
--                           возникавшая при некорректной информации по
--                           доверенным лицам и (или) наследникам

-- v.2.54 26.03.2014 15:45 - Миграция вкладов МЕГАБАНК и СБОН: выполняется
--                           анализ поля LANDCODE файла mega0fff.dbf, и в
--                           случае, если это поле отличается от кода 804
--                           (Украина - резидент), при открытии клиентов и
--                           счетов в параметрах клиента устанавливается
--                           признак - нерезидент

-- v.2.55 14.04.2014 18:42 - Миграция вкладов: изменение вызова
--                           dpt_web.p_open_vklad_rnk (добавлен параметр
--                           p_usagemode >= 'IO')

-- v.2.56 15.05.2014 11:27 - Миграция неподвижных вкладов АСВО: добавлено
--                           сворачивание котловых и соответствующий ОТКАТ

-- v.2.57 26.06.2014 13:36 - Миграция неподвижных вкладов АСВО: реализована
--                           обработка однозначных кодов ОБ22 во входной
--                           информации

-- v.2.58 15.07.2014 15:03 - Миграция вкладов СБОН: код вида вклада БАРС
--                           (поле KODBAR в файле NLS.DBF) расширен с
--                           трёхзначного до четырёхзначного - Numeric 4 (о
--                           ситуации сигнализировал Киев)

  procedure get_fff_for_tvbv (p_tvbv in  char  ,
                              p_open out number,
                              p_code out number,
                              p_fff3 out varchar2)
  is
    tile_   varchar2(32767);
    tile2_  varchar2(32767);
    tile3_  varchar2(32767);
    i_      number;
    k_      number;
    j1_     number;
    j2_     number;
    el_     varchar2(10);

  begin

    for k in (select table_name
              from   user_tables
              where  table_name like 'ASVO_A_____' or
                     table_name like 'ASVO_S_____' or
                     table_name like 'ASVO_D_____' or
                     table_name like 'ASVO_G_____')
    loop
      begin
        execute immediate 'drop table '||k.table_name;
      exception when OTHERS then
        null;
      end;
    end loop;

    delete from asvo_fff_load where FFF=p_tvbv;
    delete from asvo_log      where FFF=p_tvbv;
    commit;

    execute immediate 'select substr(tile,    1,32767),
                              substr(tile,32768,32767),
                              substr(tile,65535,32767)
                       from   ASVO_OBJ
                       where  oname='''||p_tvbv||''' and
                              otype=''BRANCH''       and
                              rownum<2'
                       into   tile_ ,
                              tile2_,
                              tile3_;
    p_fff3 := '';
    i_     := 1;
    k_     := 0;

    while i_>0
    loop
      i_ := instr(tile_,'{');
      if i_>0 then
        k_ := k_+1;
        if k_>2 then
          j1_ := instr(substr(tile_,i_+1),'''',1);
          j2_ := instr(substr(tile_,i_+1),'''',2);

--        bars_audit.info('tile_'||tile_);
--        bars_audit.info('j1_  '||j1_  );
--        bars_audit.info('j2_  '||j2_  );

          el_ := substr(substr(tile_,i_+1),j1_+1,j2_-j1_-1);

          if length(el_)=5 then
            if length(p_fff3)>0 then
              if instr(p_fff3,substr(el_,-3,3))=0 or
                (instr(p_fff3,substr(el_,-3,3))>0 and
                 mod(instr(p_fff3,substr(el_,-3,3)),3)<>1) then
                p_fff3 := p_fff3||substr(el_,-3,3);
              end if;
            else
              p_fff3 := p_fff3||substr(el_,-3,3);
            end if;
          end if;
        end if;
        tile_ := substr(tile_,i_+1);
        if length(tile2_)>0 or length(tile3_)>0 then
          if length(tile2_)>0 then
            if length(tile_)+length(tile2_)<=32767 then
              tile_  := tile_||tile2_;
              tile2_ := '';
            end if;
          else -- length(tile3_)>0 then
            if length(tile_)+length(tile3_)<=32767 then
              tile_  := tile_||tile3_;
              tile3_ := '';
            end if;
          end if;
        end if;
      end if;
    end loop;

--  bars_audit.info(p_fff3);

  end get_fff_for_tvbv;

--

  procedure get_tvbv_from_asvo (p_open out number,
                                p_code out number,
                                p_tvbv out varchar2)
  is

    type    cur is ref cursor;
    cur_    cur;
    sql_    varchar2(1024);
    oname_  varchar2(30);

  begin

    p_tvbv := '';

    sql_ := 'select oname
             from   ASVO_OBJ
             where  otype=''BRANCH''
             order  by 1';

    open cur_ for sql_;

    loop

      fetch cur_ into oname_;
      exit when cur_%notfound;

      p_tvbv := p_tvbv||oname_;

    end loop;

    close cur_;

--  bars_audit.info(p_tvbv);

  end get_tvbv_from_asvo;

--

  procedure copy_asvo_tables (p_tvbv in char)
  is
  begin

    if p_tvbv is not null and length(p_tvbv)=3 then
      for k in (select table_name
                from   user_tables
                where  table_name like 'ASVO_'||p_tvbv||'_A_____' or
                       table_name like 'ASVO_'||p_tvbv||'_S_____' or
                       table_name like 'ASVO_'||p_tvbv||'_D_____' or
                       table_name like 'ASVO_'||p_tvbv||'_G_____')
      loop
        begin
          execute immediate 'drop table '||k.table_name;
        exception when OTHERS then
          null;
        end;
      end loop;

      begin
        execute immediate 'drop table ASVO_'||p_tvbv||'_OBJ';
      exception when OTHERS then
        null;
      end;

      for k in (select table_name
                from   user_tables
                where  table_name like 'ASVO_A_____' or
                       table_name like 'ASVO_S_____' or
                       table_name like 'ASVO_D_____' or
                       table_name like 'ASVO_G_____')
      loop
        begin
          execute immediate
                  'create table '||substr(k.table_name,1,5)||p_tvbv||
                                   substr(k.table_name,5)||
                  ' as select * from '||k.table_name;
        exception when OTHERS then
          null;
        end;
      end loop;

      begin
        execute immediate
                'create table ASVO_'||p_tvbv||'_OBJ as select * from ASVO_OBJ';
      exception when OTHERS then
        null;
      end;
    end if;

  end copy_asvo_tables;

--

  procedure NLStoSPR (p_open in out number  ,
                      p_code in out number  ,
                      p_errmask     varchar2,
                      p_nlsmask     varchar2,
                      p_dfNLS       varchar2)
  is

    fff_               char(3);
    cnt_               number;
    mfo_               varchar2(12);
    nls_depo_          varchar2(15);
    nls_procn_         varchar2(15);
    nls_procz_         varchar2(15);

    type               cur is ref cursor;
    cur_               cur;
    sql_               varchar2(1024);

    deposit_cod_       varchar2(3);
    deposit_name_      varchar2(50);
    vidd_              number;
    type_name_         varchar2(70);
    kv_                number;
--  fff_               char(3);
    nls0_depo_         varchar2(15);
    nls0_procn_        varchar2(15);
    nls0_procz_        varchar2(15);

    nlsmask_           varchar2(15);
    podr_              char(2);

    len_DEPOSIT_NAME_  number;
    len_TYPE_NAME_     number;

  begin

    select val
    into   mfo_
    from   params
    where  par='GLB-MFO';

    select data_length
    into   len_DEPOSIT_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='DEPOSIT_NAME';

    select data_length
    into   len_TYPE_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='TYPE_NAME';

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMP_NLS' and
             column_name in ('NAMEV'  ,
                             'KODASVO',
                             'KODBAR' ,
                             'NAMEBAR',
                             'VAL'    ,
                             'TVBV'   ,
                             'VKLAD'  ,
                             'NARAXP' ,
                             'ZARAXP');
      if cnt_<>9 then
        bars_audit.error(p_errmask||'(7): неверна структура '||p_dfNLS);
        p_code := p_code+1;
        goto konec1;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMP_NLS'
               )
      loop
        if (k.column_name='NAMEV'   and (k.data_type<>'VARCHAR2' or k.data_length>len_DEPOSIT_NAME_)) or
           (k.column_name='KODASVO' and (k.data_type<>'VARCHAR2' or k.data_length<3))                 or
           (k.column_name='KODBAR'  and (k.data_type<>'VARCHAR2' or k.data_length<3))                 or
           (k.column_name='NAMEBAR' and (k.data_type<>'VARCHAR2' or k.data_length>len_TYPE_NAME_))    or
           (k.column_name='VAL'     and (k.data_type<>'VARCHAR2' or k.data_length<>3))                or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3))                 or
           (k.column_name='VKLAD'   and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='NARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='ZARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) then
          bars_audit.error(p_errmask||'(8): неверна структура '||p_dfNLS);
          p_code := p_code+1;
          goto konec1;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_temp_nls'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(22): в '||p_dfNLS||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec1;
      end;

      delete
      from    DPT_VIDD_ASVO
      where   fff=fff_;

      delete
      from    asvo_nls
      where   tvbv=fff_;

      if p_nlsmask is null then
        begin
          select p.podr
          into   podr_
          from   asvo_fff_branch b,
                 asvo_fff_podr   p
          where  b.fff=fff_ and
                 p.fff=substr(b.branch,12,3);
          nlsmask_ := '3739K9'||podr_||'000FFFN';
        exception when OTHERS then
          if    mfo_='333368' then
            nlsmask_ := '3739K916000FFFN';
          elsif mfo_='303398' then
            nlsmask_ := '3739K900000FFFN';
          else
            nlsmask_ := '3739K000000FFFN';
          end if;
        end;
      else
        nlsmask_ := p_nlsmask;
      end if;

      nls_depo_  := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','0'));
      nls_procn_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));
      nls_procz_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));

--    for k in (select distinct
--                     kodasvo           deposit_cod,
--                     to_number(kodbar) vidd       ,
--                     namebar           type_name  ,
--                     to_number(val)    kv         ,
--                     substr(tvbv,1,3)  fff        ,
--                     to_char(vklad)    nls0_depo  ,
--                     to_char(naraxp)   nls0_procn ,
--                     to_char(zaraxp)   nls0_procz
--              from   asvo_temp_nls
--             )
--    loop

      sql_:='select distinct
                    namev                                        ,
                    upper(substr(kodasvo,1,2))||substr(kodasvo,3),
                    to_number(kodbar)                            ,
                    namebar                                      ,
                    to_number(val)                               ,
                    substr(tvbv,1,3)                             ,
                    to_char(vklad)                               ,
                    to_char(naraxp)                              ,
                    to_char(zaraxp)
             from   asvo_temp_nls';

      open cur_ for sql_;

      loop
        fetch cur_ into deposit_name_,
                        deposit_cod_ ,
                        vidd_        ,
                        type_name_   ,
                        kv_          ,
                        fff_         ,
                        nls0_depo_   ,
                        nls0_procn_  ,
                        nls0_procz_;
        exit when cur_%notfound;

        if type_name_ is null then
          begin
            select type_name
            into   type_name_
            from   dpt_vidd
            where  vidd=vidd_ and
                   rownum<2;
          exception when no_data_found then
            type_name_ :=null;
          end;
        end if;

        if nls0_depo_  is not null and length(nls0_depo_)<5 then
          nls0_depo_ :=null;
        end if;
        if nls0_procn_ is not null and length(nls0_procn_)<5 then
          nls0_procn_:=null;
        end if;
        if nls0_procz_ is not null and length(nls0_procz_)<5 then
          nls0_procz_:=null;
        end if;

        insert
        into   DPT_VIDD_ASVO(VIDD        ,
                             TYPE_NAME   ,
                             DEPOSIT_COD ,
                             DEPOSIT_NAME,
                             KV          ,
                             FFF)
                     values (vidd_        ,
                             type_name_   ,
                             deposit_cod_ ,
                             deposit_name_,
                             kv_          ,
                             fff_);
        p_open := p_open+1;

        delete
        from   asvo_nls
        where  TVBV               =fff_                 and
               KK                 =deposit_cod_         and
               NLS_DEPO           =nls_depo_            and
               NLS_PROCN          =nls_procn_           and
               NLS_PROCZ          =nls_procz_           and
               NLS0_DEPO          =nls0_depo_           and
               nvl(NLS0_PROCN,'0')=nvl(nls0_procn_,'0') and
               nvl(NLS0_PROCZ,'0')=nvl(nls0_procz_,'0') and
               KV                 =kv_;

        insert
        into   asvo_nls (TVBV      ,
                         KK        ,
                         NLS_DEPO  ,
                         NLS_PROCN ,
                         NLS_PROCZ ,
                         NLS0_DEPO ,
                         NLS0_PROCN,
                         NLS0_PROCZ,
                         KV)
                 values (fff_        ,
                         deposit_cod_,
                         nls_depo_   ,
                         nls_procn_  ,
                         nls_procz_  ,
                         nls0_depo_  ,
                         nls0_procn_ ,
                         nls0_procz_ ,
                         kv_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(9): ошибка обработки '||p_dfNLS||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(10): ошибка обработки '||p_dfNLS||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(11): ошибка обработки '||p_dfNLS||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec1>> null;

  end NLStoSPR;

--

  procedure PRCtoSPR (p_open in out number  ,
                      p_code in out number  ,
                      p_errmask     varchar2,
                      p_dfPRC       varchar2)
  is

    fff_      char(3);
    cnt_      number;

    type      cur is ref cursor;
    cur_      cur;
    sql_      varchar2(1024);

    kkmark_   varchar2(3);
    shkala_   number(10,2);
    datperc_  date;
    percent_  number(10,4);

  begin

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMP_PRC' and
             column_name in ('KODASVO',
                             'TVBV'   ,
                             'SHKALA' ,
                             'DATPRC' ,
                             'PERCN');
      if cnt_<>5 then
        bars_audit.error(p_errmask||'(12): неверна структура '||p_dfPRC);
        p_code := p_code+1;
        goto konec2;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMP_PRC'
               )
      loop
        if (k.column_name='KODASVO' and (k.data_type<>'VARCHAR2' or k.data_length<3)) or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3)) or
           (k.column_name='SHKALA'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_scale<>2)) or
           (k.column_name='DATPRC'  and (k.data_type<>'DATE'))   or
           (k.column_name='PERCN'   and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_scale<2 or k.data_scale>4)) then
          bars_audit.error(p_errmask||'(13): неверна структура '||p_dfPRC);
          p_code := p_code+1;
          goto konec2;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_temp_prc'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(23): в '||p_dfPRC||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec2;
      end;

      delete
      from    ASVO_FFF_PERCENT
      where   fff=fff_;

--    for k in (select distinct
--                     substr(tvbv,1,3) fff    ,
--                     kodasvo          kkmark ,
--                     shkala                  ,
--                     datprc           datperc,
--                     percn            percent
--              from   asvo_temp_prc
--             )
--    loop

      sql_:='select distinct
                    substr(tvbv,1,3)                             ,
                    upper(substr(kodasvo,1,2))||substr(kodasvo,3),
                    shkala                                       ,
                    datprc                                       ,
                    percn
             from   asvo_temp_prc';

      open cur_ for sql_;

      loop
        fetch cur_ into fff_    ,
                        kkmark_ ,
                        shkala_ ,
                        datperc_,
                        percent_;
        exit when cur_%notfound;

        insert
        into   ASVO_FFF_PERCENT(FFF    ,
                                KKMARK ,
                                SHKALA ,
                                DATPERC,
                                PERCENT)
                        values (fff_    ,
                                kkmark_ ,
                                shkala_ ,
                                datperc_,
                                percent_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(14): ошибка обработки '||p_dfPRC||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(15): ошибка обработки '||p_dfPRC||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(16): ошибка обработки '||p_dfPRC||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec2>> null;

  end PRCtoSPR;

--

  procedure NOTtoSPR (p_open in out number  ,
                      p_code in out number  ,
                      p_errmask     varchar2,
                      p_dfNOT       varchar2)
  is

    fff_    char(3);
    cnt_    number;

    type    cur is ref cursor;
    cur_    cur;
    sql_    varchar2(1024);

    kknot_  varchar2(3);

  begin

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMP_NOT' and
             column_name in ('KODASVO',
                             'TVBV');
      if cnt_<>2 then
        bars_audit.error(p_errmask||'(17): неверна структура '||p_dfNOT);
        p_code := p_code+1;
        goto konec3;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMP_NOT'
               )
      loop
        if (k.column_name='KODASVO' and (k.data_type<>'VARCHAR2' or k.data_length<2)) or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3)) then
          bars_audit.error(p_errmask||'(18): неверна структура '||p_dfNOT);
          p_code := p_code+1;
          goto konec3;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_temp_NOT'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(24): в '||p_dfNOT||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec3;
                when no_data_found then
        begin
          execute immediate 'select distinct
                                    substr(TVBV,1,3)
                             from   asvo_temp_nls'
                             into   fff_;
        exception when TOO_MANY_ROWS then
          bars_audit.error(p_errmask||'(25): '||p_dfNOT||' невозможно определить ТВБВ для загрузки данных...');
          p_code := p_code+1;
          goto konec3;
        end;
      end;

      delete
      from    ASVO_FFF_NOT
      where   fff=fff_;

--    for k in (select distinct
--                     substr(tvbv,1,3)    fff,
--                     substr(kodasvo,1,2) kknot
--              from   asvo_temp_NOT
--             )
--    loop

      sql_:='select distinct
                    substr(tvbv,1,3),
                    upper(substr(kodasvo,1,2))
             from   asvo_temp_NOT';

      open cur_ for sql_;

      loop
        fetch cur_ into fff_  ,
                        kknot_;
        exit when cur_%notfound;

        insert
        into   ASVO_FFF_NOT(FFF,
                            KKNOT)
                    values (fff_,
                            kknot_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(19): ошибка обработки '||p_dfNOT||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(20): ошибка обработки '||p_dfNOT||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(21): ошибка обработки '||p_dfNOT||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec3>> null;

  end NOTtoSPR;

--

  procedure create_dpstsAS (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    type                cur is ref cursor;
    cur_                cur;
    sql_                varchar2(4000);
    cur2_               cur;
    sql2_               varchar2(4000);
    nsc_                varchar2(14);
    fio_                varchar2(50);
    dato_               date;
    ost_                number;
    prv_                number;
    npr_                number;
    zpr_                number;
    mark_               varchar2(1);
    attr_               varchar2(64);
--  ver_                number;
    id_                 varchar2(8);
    icod_               varchar2(10);
    datp_               date;
--  datn_               date;
    tile_               varchar2(32767);
    kkall_              varchar2(32767);
    kkal2_              varchar2(32767);
    kkall2_             varchar2(32767);
    kkall3_             varchar2(32767);
    kkallG_             varchar2(32767);
    kkallG2_            varchar2(32767);
    kkallG3_            varchar2(32767);
    kkallZ_             varchar2(32767);
    kkallZ2_            varchar2(32767);
    kkel_               varchar2(4096);
    kkidtile_           varchar2(32767);
    kktemp_             varchar2(32767);
    branch_             varchar2(30);
    i_                  int;
    y_                  int;
    z_                  int;
    j_                  int;
    k_                  int;
    l_                  int;
    m_                  int;
    o_                  int;
--  nls6pos_            char(1);
--  podr_               char(2);
    kktokens_           varchar2_list;
    doverlist_          varchar2_list;
    naslelist_          varchar2_list;
    FiliT_              varchar2(32);
    nlsKOTLOdepo_       varchar2(14);
    nlsKOTLOperc_       varchar2(14);
    nlsKOTLOperz_       varchar2(14);
    kkid_               varchar2(12);
    kkmark_             varchar2(3);
    nbsdepo_            varchar2(4);
    ob22depo_           varchar2(2);
    dptvidd_            number;
    dptkv_              number;
    nbsperc_            varchar2(4);
    ob22perc_           varchar2(2);
    nbsperz_            varchar2(4);
    ob22perz_           varchar2(2);
    prcdate_            date;
    prcdateTEK_         date;
    prcstav_            number;
    prcskal_            number;
    prcskalTEK_         number;
--  percent_            varchar2(20);
    percent_            number;
    percenz_            number;
    prbonus_            number;
    ips_                number;

    type                t_rec is record (prcdatem_ date,
                                         prcstavm_ number,
                                         prcskalm_ number);
    type                t_array is table of t_rec index by binary_integer;
    l_array             t_array;

    fl_                 number;
    flkart_             number;
    flkall_             number;
    tmp_                varchar2(32764);
    prcdats_            varchar2(20);
    uliza_              varchar2(1024);
    phone_              varchar2(1024);
    prcskas_            varchar2(32);
    s_                  varchar2(2048);
    sday_               varchar2(1024);
    seria_              varchar2(1024);
    nomer_              varchar2(1024);
    kevid_              varchar2(1024);
    sdvid_              varchar2(1024);
    tidok_              varchar2(1024);
    city_               varchar2(1024);
    bday_               date;
    david_              date;
    nPASP_              number;
    dom_                varchar2(1024);
    kvar_               varchar2(1024);
    kvarkvar_           varchar2(1024);
    index_              varchar2(1024);
    obl_                varchar2(1024);
    rajon_              varchar2(1024);
    rnk_                number;
    accdepo_            number;
    accperc_            number;
    text_               varchar2(1024);
    address_            varchar2(1024);
    fulladdress_        varchar2(1024);
    glbd_               date;

    dptid_              number;
--  typeid_             number;
--  agencyid_           number;
--  contractacc_        number;

    sDatEnd_            varchar2(128);
    dDatEnd_            date;
    dDatEnd1_           date;
    dDatEnd2_           date;

    nasledniki_         varchar2(32764);
    doverennie_         varchar2(32764);
--  nasle_              varchar2(32764);
--  dover_              varchar2(32764);
    rekv5_              varchar2(32764);

    nmkn_               varchar2(70);
    nmkd_               varchar2(70);
    okpon_              varchar2(64);
    okpod_              varchar2(64);

    RNKdover_           number;
    sdayd_              varchar2(1024);
    sdavd_              varchar2(1024);
    bdayd_              date;
    ddavd_              date;
    adrd_               varchar2(1024);
    teldd_              varchar2(1024);
    serid_              varchar2(1024);
    nomed_              varchar2(1024);
    vidad_              varchar2(1024);

    RNKnasle_           number;
    sdayn_              varchar2(1024);
    sdavn_              varchar2(1024);
    bdayn_              date;
    ddavn_              date;
    adrn_               varchar2(1024);
    teldn_              varchar2(1024);
    serin_              varchar2(1024);
    nomen_              varchar2(1024);
    vidan_              varchar2(1024);

--  pensTIPosz_         char(1);
--  TIPosz_             char(1);

--  ND_                 varchar2(35);
--  trustid_            number;

    agrmntid_           dpt_agreements.agrmnt_id%type;
    duration_           dpt_vidd.duration%type;
    duration_days_      dpt_vidd.duration_days%type;
    term_type_          dpt_vidd.term_type%type;
    fl_dubl_            dpt_vidd.fl_dubl%type;
    cnt_                number;
    datb_               date;
    date_               date;
    type_cod_           dpt_vidd.type_cod%type;
--  diti_               number;

    nbsacrb_            char(4);
    oszfind_            int;
    sddov_              varchar2(1024);
    dddov_              date;

    auid_               number;
    glauid_             number;

    netvida_            varchar2(32764);
    kkmarkm_            varchar2(32764);
    raznkod_            varchar2(32764);
    raznbal_            varchar2(32764);

    j1_                 number;
    j2_                 number;
    j3_                 number;

--  type                t_viddf is record (vidd  dpt_vidd.vidd%type);
--  type                t_listf is table of t_viddf;
--  vidd_flag           t_listf;

    ind_                number;
    bsd_                char(4);
    srok_               number;

    datmet_             date;
    method_id_          dpt_vidd_extdesc.method_id%type;
    Job_                number;
    nlsb_               varchar2(14);
    namb_               varchar2(38);

    tilenull_           int;

    duration_max_       dpt_vidd.duration_max%type;
    duration_days_max_  dpt_vidd.duration_days_max%type;
    numdays_            number;

  begin

    p_code := 0;
    p_open := 0;

    bars_alerter(0);

--  execute immediate 'alter session set events ''10046 trace name context forever, level 12''';
--  execute immediate 'alter session set tracefile_identifier=serg';

    execute immediate 'select substr(tile,    1,32767),
                              substr(tile,32768,32767),
                              substr(tile,65535,32767)
                       from   ASVO_OBJ
                       where  OTYPE=''BRANCH'' and
                              rownum<2'
                       into   kkallG_ ,
                              kkallG2_,
                              kkallG3_;

    execute immediate 'select substr(tile,    1,32767),
                              substr(tile,32768,32767)
                       from   ASVO_OBJ
                       where  ONAME=''CFDictR'' and
                              rownum<2'
                       into   kkallZ_,
                              kkallZ2_;

--  bars_audit.info('create_dpstsAS - kkallG_='||kkallG_);

--  bars_audit.info('create_dpstsAS - kkallZ_='||kkallZ_);

    begin
      select branch
      into   branch_
      from   ASVO_FFF_BRANCH
      where  FFF=p_tvbv and
             rownum<2;
    exception when no_data_found then
      select '/'||val||'/'
      into   branch_
      from   params
      where  par='GLB-MFO';
    end;

--  проверки

--1.select * from asvo_nls where tvbv='060' and NLS_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(9): не описан в справочнике транзитный счёт депозита для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--2.select * from asvo_nls where tvbv='060' and NLS_PROCN is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCN is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(10): не описан в справочнике транзитный счёт начисленных %% для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--3.select * from asvo_nls where tvbv='060' and NLS_PROCZ is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCZ is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(11): не описан в справочнике транзитный счёт зачисленных %% для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--4.select * from asvo_nls where tvbv='060' and NLS0_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS0_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(12): не описан в справочнике КОТЛОВОЙ счёт депозитов для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--5.select n.tvbv, n.kk, n.nls0_depo, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_DEPO,'0')<>'0'
--   and n.nls0_depo=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_DEPO
--           and kv=n.kv and branch='/333368/000000/000060/')
--order by kk;

    for k in (select n.kk       ,
                     n.nls0_depo,
                     n.kv       ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv             and
                     nvl(n.NLS0_DEPO,'0')<>'0' and
                     n.nls0_depo=a.nls         and
                     n.kv=a.kv                 and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_DEPO      and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(13): КОТЛОВОЙ счёт депозитов ('||
                       k.nls0_depo||'('||to_char(k.kv)||
                       ') для вида вклада (картотеки) АСВО - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--6.select n.tvbv, n.kk, n.nls0_procn, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCN,'0')<>'0'
--   and n.nls0_procn=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCN
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procn,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCN,'0')<>'0' and
                     n.nls0_procn=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCN     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(14): КОТЛОВОЙ счёт начисленных %% ('||
                       k.nls0_procn||'('||to_char(k.kv)||
                       ') для вида вклада (картотеки) АСВО - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--7.select n.tvbv, n.kk, n.nls0_procz, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCZ,'0')<>'0'
--   and n.nls0_procz=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCZ
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procz,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCZ,'0')<>'0' and
                     n.nls0_procz=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCZ     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(15): КОТЛОВОЙ счёт зачисленных %% ('||
                       k.nls0_procz||'('||to_char(k.kv)||
                       ') для вида вклада (картотеки) АСВО - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

    if p_code>0 then
      goto proverkineprosli; -- даже не начинать создание вкладов в АБС БАРС
    end if;

--8.проверка остатков на реальных котловых (ostc>0 and ostc=ostb)
--  возможно в будущем будет сделана, пока же ниже при ОПЛАТЕ(2) выдаётся

--9.наличие видов вкладов АСВО, описанных в DPT_VIDD_ASVO, в ASVO_NLS

    for k in (select upper(substr(deposit_cod,1,2))||substr(deposit_cod,3) kk
              from   dpt_vidd_asvo
              where  fff=p_tvbv and
                     upper(substr(deposit_cod,1,2))||
                     substr(deposit_cod,3) not in (select upper(substr(kk,1,2))||
                                                          substr(kk,3)
                                                   from   asvo_nls
                                                   where  tvbv=p_tvbv)
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(16): вид вклада (картотека) АСВО - '||
                       k.kk||' не описан в справочнике ASVO_NLS');
    end loop;

    if p_code>0 then
      goto proverkineprosli; -- даже не начинать создание вкладов в АБС БАРС
    end if;

--  begin
--    select podr
--    into   podr_
--    from   ASVO_FFF_PODR
--    where  FFF=p_tvbv and
--           rownum<2;
--  exception when no_data_found then
--    podr_ := '16';
--  end;

/*
    if    substr(branch_,2,6)='333368' then
      nls6pos_ := '9';
--  elsif substr(branch_,2,6)='xxxxxx' then
--    nls6pos_ := 'y';
    end if;
*/
    netvida_ := ',';
    kkmarkm_ := ',';
    raznkod_ := ',';
    raznbal_ := ',';

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_vidd_flag0 (vidd NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'INSERT
                         INTO   ASVO_TEMP_dpt_vidd_flag0
                         select vidd
                         FROM   dpt_vidd
                         where  flag=0';
    exception when OTHERS then
      null;
    end;

--  select vidd bulk collect
--  into   vidd_flag
--  from   (select vidd
--          from   dpt_vidd
--          where  flag=0);

    toroot;
    update dpt_vidd
    set    flag=1
    where  flag=0;
    commit;

    tokf;
    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;
    toroot;

    for k in (select FFF,FFFACTUAL,KKFFFACTUAL,FL
              from   ASVO_FFF_LOAD
              where  fl in (0,1) and
                     FFF=p_tvbv  and
                     upper(substr(KKFFFACTUAL,1,2)) not in (select upper(nvl(kknot,'--'))
                                                            from   ASVO_FFF_NOT
                                                            where  FFF=p_tvbv)
             )
    loop

      bars_audit.info('create_dpstsAS - файл='||k.KKFFFACTUAL);

      sql_:='select s.nsc    ,
                    s.fio    ,
                    s.dato   ,
                    s.ost*100,
                    s.prv*100,
                    s.npr*100,
                    s.zpr*100,
                    s.mark   ,
                    s.attr   ,
                    s.id     ,
                    s.icod   ,
                    s.datp   ,
                  --s.datn   ,
                    a.tile
             from   ASVO_A'||k.KKFFFACTUAL||' a,
                    ASVO_S'||k.KKFFFACTUAL||' s
             where  s.nsc=a.nsc(+) and
                    s.id=a.id(+)   and
                    a.f(+)=''a''   and
                    ((nvl(s.ost,0)>0 and nvl(s.attr,'' '') not like ''%D%'' and
                                         nvl(s.attr,'' '') not like ''%Z%'') or
                     (nvl(s.ost,0)=0 and nvl(s.attr,'' '')=''Я''))';

      open cur_ for sql_;

      flkart_ := 0;
      flkall_ := 0;

      loop
        begin
          fetch cur_ into nsc_ ,
                          fio_ ,
                          dato_,
                          ost_ ,
                          prv_ ,
                          npr_ ,
                          zpr_ ,
                          mark_,
                          attr_,
                          id_  ,
                          icod_,
                          datp_,
                        --datn_,
                          tile_;
          exit when cur_%notfound;
        exception when OTHERS then
          text_  := 'Ошибка чтения исходных данных (возможно шифрованное ФИО)';
          bars_audit.error(p_errmask       ||'(0): '      ||
                           'код ТВБВ АСВО='||k.FFF        ||
                           ', файл='       ||k.KKFFFACTUAL||' '||text_);
          p_code  := p_code+1;
          flkart_ := flkart_+1;
          goto ugezaimpotili;
        end;

        dbms_application_info.set_client_info('open='||to_char(p_open)||
                                           ', error='||to_char(p_code));

        bars_audit.info('create_dpstsAS - картотека='           ||
                        substr(k.KKFFFACTUAL,1,2)||nvl(mark_,'')||
                        ' файл=' ||k.KKFFFACTUAL                ||
                        ' nsc_=' ||nsc_                         ||
                        ' id_='  ||id_                          ||
                        ' ost_=' ||ost_                         ||
                        ' prv_=' ||prv_                         ||
                        ' npr_=' ||npr_                         ||
                        ' zpr_=' ||zpr_                         ||
                        ' icod_='||nvl(icod_,'000000000')       ||
                        ' fio_=' ||fio_);

        tilenull_     := 0;
        percent_      := null;
        prbonus_      := null;
        nbsdepo_      := null;
        ob22depo_     := null;
        nbsperc_      := null;
        ob22perc_     := null;
        nbsperz_      := null;
        ob22perz_     := null;
        nlsKOTLOdepo_ := null;
        nlsKOTLOperc_ := null;
        nlsKOTLOperz_ := null;
        uliza_        := null;
        phone_        := null;
        bday_         := null;
        seria_        := null;
        nomer_        := null;
        kevid_        := null;
        david_        := null;
        tidok_        := null;
        city_         := null;
        dom_          := null;
        kvar_         := null;
        index_        := null;
        obl_          := null;
        rajon_        := null;
        fulladdress_  := null;
        address_      := null;
        dptvidd_      := null;
        dptkv_        := null;
        dptid_        := null;
--      typeid_       := null;
--      agencyid_     := null;
--      contractacc_  := null;
        dDatEnd_      := null;
        nasledniki_   := null;
        doverennie_   := null;
        rnk_          := null;

        flkall_ := flkall_+1;

        if datp_ is null then
          datp_ := dato_;
        end if;

        if dato_ is null then
          dato_ := datp_;
        end if;

        kkmark_     := upper(substr(k.KKFFFACTUAL,1,2))||trim(mark_);
--      pensTIPosz_ := substr(attr_,1,1);

        BEGIN

          if nvl(instr(kkmarkm_,','||kkmark_||','),0)>0 then
            goto kkmarkmnogovidd;
          end if;

          if nvl(instr(netvida_,','||kkmark_||','),0)>0 then
            goto netvidadeposita;
          end if;

          if nvl(instr(raznkod_,','||kkmark_||','),0)>0 then
            goto razniekodivalut;
          end if;

          if nvl(instr(raznbal_,','||kkmark_||','),0)>0 then
            goto razniebalscheta;
          end if;

          if datp_ is null then
            goto netdatiotkritia;
          end if;

--        депозиты обычные

          begin

--          на этой проверке надо ЧТО_ТО сделать ЕЩЁ, поскольку
--          если есть одинаковые номера вкладов в картотеке, то КАПЕЦ
--          вроде-бы d.dat_begin=dato_ решает эту проблему
--          оказалось, что d.dat_begin=dato_ НЕ решает
--          решаю через включение id_ в ND
--          id_ - это внутренний идентификатор для счёта nsc_ в АСВО

            select d.deposit_id
            into   dptid_
            from   accounts    a,
                   dpt_deposit d,
                   accountsw   w
            where  a.nlsalt=nsc_                            and
                   d.nd=kkmark_||'_'||p_tvbv||'_'||id_||
                        '_'||upper(k.FFFACTUAL)||'_'||nsc_  and
--                 d.dat_begin=dato_                        and
                   a.branch=branch_                         and
                   a.branch=d.branch                        and
                   a.acc=d.acc                              and
                   w.acc=a.acc                              and
                   d.comments like '%Imported from ASVO6.3' and
                   w.tag='KKASV'                            and
                   w.value=substr(k.KKFFFACTUAL,1,2)||trim(mark_);
            goto ugezaimpotili;
          exception when no_data_found then
            null;
          end;

--        bars_audit.info('create_dpstsAS - after proverka ugezaimpotili');

          fl_ := 0;

          icod_  := TRIM(icod_);
          begin
            i_ := to_number(icod_);
          exception when OTHERS then
            icod_ := '000000000';
          end;
          if length(icod_)=0 or icod_ is null then
            icod_ := '000000000';
          end if;

          kkall_  := replace(replace(kkallG_ ,chr(13)),chr(10));
          kkall2_ := replace(replace(kkallG2_,chr(13)),chr(10));
          kkall3_ := replace(replace(kkallG3_,chr(13)),chr(10));

--        парсить kkall_ на предмет выборки значения 3-го подполя (kkid_)
--                       по известным 1-му (substr(KKFFFACTUAL,1,2))
--                                  и 4-му полю (mark_)
          i_ := instr(kkall_,'{{');

--        kkall_ := substr(kkall_,2,length(kkall_)-1);
--        kkall_ := substr(kkall_,i_+1,length(kkall_)-i_-2);

--        bars_audit.info('length(kkall2_)='||length(kkall2_));

          if length(kkall2_)>0 then
            if length(kkall3_)>0 then
              if length(kkall3_)=1 then
                kkall3_ := '';
                kkall2_ := substr(kkall2_,1,length(kkall2_)-1);
              else
                kkall3_ := substr(kkall3_,1,length(kkall3_)-2);
              end if;
            else
              if length(kkall2_)=1 then
                kkall2_ := '';
                kkall_  := substr(kkall_,i_+1,length(kkall_)-i_-1);
              else
                kkall2_ := substr(kkall2_,1,length(kkall2_)-2);
                kkall_  := substr(kkall_,i_+1);
              end if;
            end if;
          else
            kkall_ := substr(kkall_,i_+1,length(kkall_)-i_-2);
          end if;
          kkid_  := null;
/*
          bars_audit.info('G_kkall_='||substr(kkall_,    1,4000));
          bars_audit.info('G_kkall_='||substr(kkall_, 4001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_, 8001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_,12001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_,16001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_,20001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_,24001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_,28001,4000));
          bars_audit.info('G_kkall_='||substr(kkall_,32001,4000));

          bars_audit.info('G_kkall2_='||substr(kkall2_,    1,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_, 4001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_, 8001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_,12001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_,16001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_,20001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_,24001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_,28001,4000));
          bars_audit.info('G_kkall2_='||substr(kkall2_,32001,4000));

          bars_audit.info('G_kkall3_='||substr(kkall3_,    1,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_, 4001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_, 8001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_,12001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_,16001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_,20001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_,24001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_,28001,4000));
          bars_audit.info('G_kkall3_='||substr(kkall3_,32001,4000));
*/

--        while length(kkall_) is not null and length(kkall_)>0
--        bars_audit.info('G_kkall(1)_='||substr(kkall_,    1,3900));
--        bars_audit.info('G_kkall(2)_='||substr(kkall_, 3901,3900));
--        bars_audit.info('G_kkall(3)_='||substr(kkall_, 7801,3900));
--        bars_audit.info('G_kkall(4)_='||substr(kkall_,11701,3900));
          while nvl(length(kkall_),0)>0
          loop
            i_ := instr(kkall_,',;');
            if i_>0 then
              kkel_  := substr(kkall_,1,i_-1);
              kkall_ := trim(substr(kkall_,i_+2));
              if length(kkall2_)>0 or length(kkall3_)>0 then
                if length(kkall2_)>0 then
                  if length(kkall_)+length(kkall2_)<=32767 then
                    kkall_  := kkall_||kkall2_;
                    kkall2_ := '';
                  end if;
                else -- length(kkall3_)>0 then
                  if length(kkall_)+length(kkall3_)<=32767 then
                    kkall_  := kkall_||kkall3_;
                    kkall3_ := '';
                  end if;
                end if;
              end if;
            else
              kkel_  := kkall_;
              kkall_ := '';
            end if;

--          разбор kkel_ на 7 полей

-- пример
-- kkel_ =  {'10000','До запитання',''    ,'r_v','' ,.T. ,1,'','vv000'} действующие
--           1*      2              3      4#    5*  6    7 8  9
-- kkel_ =  {'10000','До запитання/аукцiон','','r_v3','4',.T.,2,'',}
--           1       2                      3  4      5   6   7 8  9

--          bars_audit.info('G_kkel_='||kkel_);
--          bars_audit.info('kkall_='||kkall_);

            kkel_ := ltrim(kkel_);                    -- выброс начальных пробелов
            kkel_ := substr(kkel_,2,length(kkel_)-2); -- выброс {}

            migraAS.get_tokens(kkel_,',',kktokens_);

            if    upper(trim(kktokens_(6))) in ('.T.','.F.') then
              ind_ := 4;
            elsif upper(trim(kktokens_(7))) in ('.T.','.F.') then
              ind_ := 5;
            elsif upper(trim(kktokens_(8))) in ('.T.','.F.') then
              ind_ := 6;
            elsif upper(trim(kktokens_(9))) in ('.T.','.F.') then
              ind_ := 7;
            else
              ind_ := 8;
            end if;

/*
            if lower(substr(k.KKFFFACTUAL,1,2))                          ||
               trim(mark_)=
--             lower(substr(replace(kktokens_(1),''''),1,2))             ||
--             trim(replace(kktokens_(5),'''')) then
               lower(substr(replace(replace(kktokens_(1),''''),'"'),1,2))||
               trim(replace(replace(kktokens_(ind_+1),'"'),''''))           then
--            kkid_   := replace(kktokens_(4),'''');
              kkid_   := replace(replace(kktokens_(ind_),'"'),'''');
              kkall_  := '';
            end if;
*/

            if lower(substr(k.KKFFFACTUAL,1,5))                          ||
               trim(mark_)=
--             lower(substr(replace(kktokens_(1),''''),1,2))             ||
--             trim(replace(kktokens_(5),'''')) then
               lower(substr(replace(replace(kktokens_(1),''''),'"'),1,5))||
               trim(replace(replace(kktokens_(ind_+1),'"'),''''))           then
--            kkid_   := replace(kktokens_(4),'''');
              kkid_   := replace(replace(kktokens_(ind_),'"'),'''');
              kkall_  := '';
            end if;

          end loop;

--        если идентификатор картотеки не найден в описании "действующих"
--        видов вкладов, то ищем ещё и в описании ВСЕХ возможных видов вкладов

          if kkid_ is null or length(kkid_)=0 then

            kkall_ := replace(
                      replace(
                      replace(
                      replace(kkallZ_,chr(13)),
                                      chr(10)),
                                      ';'),
                                      '/');
            kkal2_ := replace(
                      replace(
                      replace(
                      replace(kkallZ2_,chr(13)),
                                       chr(10)),
                                       ';'),
                                       '/');

--          bars_audit.info('Z_kkall_='||substr(kkall_,    1,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_, 4001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_, 8001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_,12001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_,16001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_,20001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_,24001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_,28001,4000));
--          bars_audit.info('Z_kkall_='||substr(kkall_,32001,4000));

            i_ := instr(kkall_,'{{');
            if nvl(length(kkal2_),0)=0 then
              kkall_ := substr(kkall_,i_+1,length(kkall_)-i_-1);
            else
              kkall_ := substr(kkall_,i_+1);
              kkal2_ := substr(kkal2_,1,length(kkal2_)-1);
            end if;

            while nvl(length(kkall_),0)>0
            loop
              if nvl(length(kkal2_),0)>0 and length(kkall_)+nvl(length(kkal2_),0)<=32767 then
                kkall_ := kkall_||kkal2_;
                kkal2_ := '';
              end if;
              i_ := instr(kkall_,'}');
              if i_>0 then
                kkel_  := substr(kkall_,1,i_);
                kkall_ := trim(substr(kkall_,i_+2));
              else
                kkel_  := substr(kkall_,1,length(kkall_)-1);
                kkall_ := '';
              end if;

              i_ := instr(kkel_,'{');
              kkel_ := substr(kkel_,i_);

--            bars_audit.info('Z_kkel_='||kkel_||' '||
--                            lower(substr(k.KKFFFACTUAL,1,2))||trim(mark_));

--            разбор kkel_ на 7 полей (для действующих надо было на 9)

-- пример
-- kkel_ =    {"7h"   ,"Деп 2620 UAH","r_xJ","J"  ,.f.,""  ,""}           ВСЕ !!!
--             1*      2              3#     4*    5   6    7

              kkel_ := substr(kkel_,2,length(kkel_)-2); -- выброс {}

              migraAS.get_tokens(kkel_,',',kktokens_);

--            bars_audit.info('карто_='||
--                 lower(substr(replace(replace(kktokens_(1),''''),'"'),1,2))||
--                 trim(replace(replace(kktokens_(4),''''),'"')));

              if lower(substr(k.KKFFFACTUAL,1,2))                          ||
                 trim(mark_)=
                 lower(substr(replace(replace(kktokens_(1),''''),'"'),1,2))||
                 trim(replace(replace(kktokens_(4),''''),'"')) then
                kkid_   := replace(replace(kktokens_(3),''''),'"');
                kkall_  := '';
              end if;
            end loop;

          end if;

--        bars_audit.info('kkid_='||kkid_||', kkmark_='||kkmark_||', icod_='||icod_);

          begin
            select distinct
                   d.vidd                ,
                   d.kv                  ,
                   d.bsd                 ,
                   nvl(d.duration,0)     ,
                   nvl(d.duration_days,0),
                   d.term_type           ,
                   d.fl_dubl             ,
                   d.type_cod            ,
                   nvl(de.method_id,1)   ,
                   d.duration_max        ,
                   d.duration_days_max
            into   dptvidd_      ,
                   dptkv_        ,
                   bsd_          ,
                   duration_     ,
                   duration_days_,
                   term_type_    ,
                   fl_dubl_      ,
                   type_cod_     ,
                   method_id_    ,
                   duration_max_ ,
                   duration_days_max_
            from   dpt_vidd_asvo    da,
                   dpt_vidd         d ,
                   dpt_vidd_extdesc de
            where  upper(substr(da.deposit_cod,1,2))||
                   substr(da.deposit_cod,3,1)=kkmark_ and
                   da.vidd=d.vidd                     and
                   da.fff=p_tvbv                      and
                   de.type_id(+)=d.extension_id;
          exception when too_many_rows then
            goto kkmarkmnogovidd;
                    when no_data_found then
            goto netvidadeposita;
          end;
--        bars_audit.info('create_dpstsAS - after proverka netvidadeposita');

--        проверка на соответствие валюты вклада АСВО валюте вида вклада БАРС

          if (dptkv_=980 and kkid_ is null)         or   --гривна
             (dptkv_=980 and substr(kkid_,2,1)='_') or   --гривна
             (dptkv_=978 and substr(kkid_,2,1)='E') or   --евро
             (dptkv_=978 and substr(kkid_,2,1)='M') or   --евро (немецкие марки)
             (dptkv_=124 and substr(kkid_,2,1)='K') or   --канадский доллар
             (dptkv_=985 and substr(kkid_,2,1)='Z') or   --польские злотые
             (dptkv_=985 and substr(kkid_,2,1)='P') or   --польские злотые
             (dptkv_=840 and substr(kkid_,2,1)='$') or   --доллар
             (dptkv_=643 and substr(kkid_,2,1)='R') or   --рубль
             (dptkv_=826 and substr(kkid_,2,1)='S') then --фунт
            null;
          else
            goto razniekodivalut;
          end if;

--        определить КОТЛОВЫЕ счета для kkmark_
--        но сначала определить балансовые счета для счёта депозита
--                                             и для счёта начисл%%
--        для этого надо "залезть" в ASVO_OBJ и вытащить TILE для
--            otype='CFTILE' и oname=kkid_

          if kkid_ is null then
            p_code := p_code+1;
            text_  := 'Нет описания картотеки в файле системных ресурсов';
            toroot;
            bars_audit.error(p_errmask                ||'(4): '      ||
                             'код ТВБВ АСВО='         ||k.FFF        ||
                             ', файл='                ||k.KKFFFACTUAL||
                             ', код картотеки='       ||kkmark_      ||
                             ', код вида вклада БАРС='||dptvidd_     ||
                             ', номер вклада='        ||nsc_         ||
                             ', код ОКПО='            ||icod_ ||' - '||text_);
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            flkart_ := flkart_+1;
            goto normgeroiobxod;
          end if;

--        bars_audit.info('create_dpstsAS - kkid_='||kkid_);
--        bars_audit.info('create_dpstsAS - before TILE into kkidtile_');
          begin
            execute immediate 'select TILE
                               from   ASVO_OBJ
                               where  OTYPE=''CFTILE''      and
                                      ONAME='''||kkid_||''' and
                                      rownum<2'
                               into   kkidtile_;
          exception when no_data_found then
            p_code := p_code+1;
            text_  := 'Нет описания вида вклада OTYPE=CFTILE, ONAME='||kkid_||' в файле системных ресурсов';
            toroot;
            bars_audit.error(p_errmask                ||'(20): '     ||
                             'код ТВБВ АСВО='         ||k.FFF        ||
                             ', файл='                ||k.KKFFFACTUAL||
                             ', код картотеки='       ||kkmark_      ||
                             ', код вида вклада БАРС='||dptvidd_     ||
                             ', номер вклада='        ||nsc_         ||
                             ', код ОКПО='            ||icod_ ||' - '||text_);
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            flkart_ := flkart_+1;
            goto normgeroiobxod;
          end;

--        bars_audit.info('create_dpstsAS - after TILE into kkidtile_:'||
--                        chr(13)||chr(10)||kkidtile_);

--        выбрасываются комментарии в kkidtile_ (// комментарий)

          while instr(kkidtile_,'//')>0
          loop
            i_ := instr(kkidtile_,'//');
            j_ := instr(kkidtile_,chr(13)||chr(10),i_);
            if j_>0 then
              kkidtile_ := substr(kkidtile_,1,i_-1)||
                           substr(kkidtile_,j_);
            else
              kkidtile_ := substr(kkidtile_,1,i_-1)||
                           substr(kkidtile_,i_+2);
            end if;
          end loop;

--        bars_audit.info('create_dpstsAS - after del comments in kkidtile_:'||
--                        chr(13)||chr(10)||kkidtile_);

          kkidtile_ := replace(replace(kkidtile_,chr(13)),chr(10));

--        выкидываю нахер ВСЕ символы ; (точка с запятой)

          kkidtile_ := replace(kkidtile_,';');

--        выкидываю нахер ВСЕ пробелы

          kkidtile_ := replace(kkidtile_,' ');

--        bars_audit.info('create_dpstsAS - after del 0D0A;sp in kkidtile_:'||
--                        chr(13)||chr(10)||kkidtile_);

--        определение процентной ставки депозита (строка: 0.140000 - 14%)

--        percent_ := to_number(substr(kkidtile_,instr(kkidtile_,',',1,6)+2,
--                    instr(kkidtile_,',',1,7)-instr(kkidtile_,',',1,6)-2))*100;

--        bars_audit.info('create_dpstsAS - symbolic percent_ in kkidtile_:'||
--                        chr(13)||chr(10)||
--                        substr(substr(kkidtile_,instr(kkidtile_,',{',1,2)+2),1,
--                        instr(substr(kkidtile_,instr(kkidtile_,',{',1,2)+2),',')-1));

          percent_ := to_number(substr(substr(kkidtile_,instr(kkidtile_,',{',1,2)+2),1,
                      instr(substr(kkidtile_,instr(kkidtile_,',{',1,2)+2),',')-1))*100;

--        определение балансового счёта депозита и кода OB22 для него

          kktemp_ := kkidtile_;

          i_ := instr(kktemp_,',{');
          kktemp_ := substr(kktemp_,i_+1);
          i_ := instr(kktemp_,'}');
          kktemp_ := substr(kktemp_,2,i_-2);
          migraAS.get_tokens(kktemp_,',',kktokens_);

          nbsdepo_  := kktokens_(1);             -- балансовый счёт депозита
          ob22depo_ := lpad(kktokens_(2),2,'0'); -- OB22  для счёта депозита

--        определение балансового счёта начисл.%% и кода OB22 для него
--        nbsperc_
--        ob22perc_

          kktemp_ := kkidtile_;

--        идти сзади по строке и искать ВТОРОЕ {
--        далее: если в {xyz...} первый символ x не равен ни 2 ни 3,
--               то счёта начисленных процентов не надо открывать
--               т.е. присвоить ему значение null, то же для OB22
--        если же x равен 2 или 3, то
--        nbsperc_  := (1-e значение массива)
--        ob22perc_ := (2-e значение массива)

          i_ := instr(kktemp_,'{',-1,2);
          kktemp_ := substr(kktemp_,i_,length(kktemp_)-i_+1);

--        bars_audit.info('kktemp_(1)='||kktemp_);

          i_ := instr(kktemp_,'}');
          kktemp_ := substr(kktemp_,2,i_-2);

--        bars_audit.info('kktemp_(2)='||kktemp_);

          migraAS.get_tokens(kktemp_,',',kktokens_);

          if substr(kktokens_(1),1,1)='2' or substr(kktokens_(1),1,1)='3' then
            nbsperc_  := kktokens_(1);             -- балансовый счёт начисл%%
            ob22perc_ := lpad(kktokens_(2),2,'0'); -- OB22  для счёта начисл%%
          else
            nbsperc_  := null;
            ob22perc_ := null;
          end if;

          kktemp_ := kkidtile_;

--        идти сзади по строке и искать ПЕРВОЕ {
--        далее: если в {xyz...} первый символ x не равен ни 2 ни 3,
--               то счёта начисленных процентов не надо открывать
--               т.е. присвоить ему значение null, то же для OB22
--        если же x равен 2 или 3, то
--        nbsperz_  := (1-e значение массива)
--        ob22perz_ := (2-e значение массива)

          i_ := instr(kktemp_,'{',-1,1);
          kktemp_ := substr(kktemp_,i_,length(kktemp_)-i_+1);

--        bars_audit.info('kktemp_(1)='||kktemp_);

          i_ := instr(kktemp_,'}');
          kktemp_ := substr(kktemp_,2,i_-2);

--        bars_audit.info('kktemp_(2)='||kktemp_);

          migraAS.get_tokens(kktemp_,',',kktokens_);

          if substr(kktokens_(1),1,1)='2' or substr(kktokens_(1),1,1)='3' then
            nbsperz_  := kktokens_(1);             -- балансовый счёт начисл%%
            ob22perz_ := lpad(kktokens_(2),2,'0'); -- OB22  для счёта начисл%%
          else
            nbsperz_  := null;
            ob22perz_ := null;
          end if;

--        проверка на соответствие бал. счетов вклада АСВО и вида вклада БАРС

--        bars_audit.info('::::::::
--        lower(substr(k.KKFFFACTUAL,1,2))||trim(mark_)='||
--        lower(substr(k.KKFFFACTUAL,1,2))||trim(mark_))  ;
--        bars_audit.info('::::::::kkid_    ='||kkid_)    ;
--        bars_audit.info('::::::::kkidtile_='||kkidtile_);
--        bars_audit.info('::::::::percent_ ='||percent_) ;
--        bars_audit.info('::::::::bsd_     ='||bsd_)     ;
--        bars_audit.info('::::::::nbsdepo_ ='||nbsdepo_) ;

          if bsd_<>nbsdepo_ then
            goto razniebalscheta;
          end if;

--        определение котловых счетов по таблице ASVO_NLS

          begin
            select NLS_DEPO ,
                   NLS_PROCN,
                   NLS_PROCZ
            into   nlsKOTLOdepo_,
                   nlsKOTLOperc_,
                   nlsKOTLOperz_
            from   ASVO_NLS
            where  TVBV=p_tvbv and
                   rownum<2    and
                   lower(substr(KK,1,2))     ||substr(KK,3,1)=
                   lower(substr(kkmark_,1,2))||substr(kkmark_,3,1);
          exception when no_data_found then
            nlsKOTLOdepo_ := null;
            nlsKOTLOperc_ := null;
            nlsKOTLOperz_ := null;
          end;
--        bars_audit.info('create_dpstsAS - after определение котловых по ASVO_NLS');
/*
--        определение котлового счёта депозита в СКАРБЕ для текущего ТВБВ
--        по коду подразделения (есть такая таблица) + коду OB22

          begin
            select nls
            into   nlsKOTLOdepo_
            from   accounts
            where  branch=branch_                                          and
                   nls like nbsdepo_||'_'||nls6pos_||podr_||ob22depo_||'%' and
                   kv=dptkv_                                               and
                   rownum<2;
          exception when no_data_found then
            nlsKOTLOdepo_ := null;
          end;

--        определение котлового счёта начисл%% в СКАРБЕ для текущего ТВБВ
--        по коду подразделения (есть такая таблица) + коду OB22

          if nbsperc_ is not null then
            begin
              select nls
              into   nlsKOTLOperc_
              from   accounts
              where  branch=branch_                                          and
                     nls like nbsperc_||'_'||nls6pos_||podr_||ob22perc_||'%' and
                     kv=dptkv_                                               and
                     rownum<2;
            exception when no_data_found then
              nlsKOTLOperc_ := null;
            end;
          end if;
*/

--        выбрать из ASVO_A... и ASVO_S... реквизиты для карточки клиента
--        и реквизиты для открываемых счетов
--        A --> NSC + распарсить TILE (адрес, паспорт ...)
--        S --> NSC, FIO, DATO, OST, PRV, NPR, ZPR, ICOD, DATP

/*
--        блок "выпаривания" %%-ных ставок с датами

--        bars_audit.info('create_dpstsAS - kkidtile_='||kkidtile_);

          tmp_ := kkidtile_;

--        если шкала=предыдущей шкале и
--             дата <предыдущей даты, то ФИНИШ

--        bars_audit.info('tmp_='||tmp_);

          j_ := 1;
          k_ := 1;
          l_array.delete;
          prcskalTEK_ := null;
          prcdateTEK_ := to_date('11/11/1911','DD/MM/YYYY');
          loop
            i_       := instr(tmp_,'STOD',1,j_);
            if i_=0 then
              exit;
            end if;
            prcdats_ := trim(substr(tmp_,i_+6,8));
            if length(prcdats_)=8 then
              prcdate_ := to_date(prcdats_,'YYYYMMDD');
              k_ := instr(tmp_,'}',1,i_);
              prcstav_ := to_number(substr(tmp_,i_+17,k_-i_+17))*100;
              l_ := instr(tmp_,'{',i_-length(tmp_),3);
              m_ := instr(tmp_,',',l_+1);
              prcskas_ := substr(tmp_,l_+1,m_-l_+1);
              begin
                prcskal_ := to_number(prcskas_)*100;
                if prcskal_=0 then
                  prcskal_ := null;
                end if;
              exception when OTHERS then
                prcskal_ := prcskalTEK_;
              end;
              if nvl(prcskal_,-1)=nvl(prcskalTEK_,-1) and prcdate_<prcdateTEK_ then
                exit;
              else
                prcskalTEK_ := prcskal_;
                prcdateTEK_ := prcdate_;
              end if;
--            запихнуть в массив prcdate_,prcstav_,prcskal_

--            bars_audit.info('        j_='||j_      ||
--                            '  prcdate_='||prcdate_||
--                            ', prcstav_='||prcstav_||
--                            ', prcskal_='||prcskal_);

              l_array(k_).prcdatem_ := prcdate_;
              l_array(k_).prcstavm_ := prcstav_;
              l_array(k_).prcskalm_ := prcskal_;
              k_ := k_+1;
            end if;
            j_ := j_+1;
          end loop;
*/

--        определение процентной ставки по конкретному вкладу

          select decode(method_id_,0,dato_,datp_)
          into   datmet_
          from   dual;

--        begin
          select max(percent) -- защита от баранячих %% (distinct не годится - max годится)
          into   percenz_
          from   ASVO_FFF_PERCENT
          where  FFF=p_tvbv                                      and
                 lower(substr(KKMARK,1,2)) ||substr(KKMARK,3,1)=
                 lower(substr(kkmark_,1,2))||substr(kkmark_,3,1) and
                 (datperc,nvl(shkala,0))=(
                 select max(datperc),nvl(shkala,0)
                 from   ASVO_FFF_PERCENT
                 where  FFF=p_tvbv                                      and
                        lower(substr(KKMARK,1,2)) ||substr(KKMARK,3,1)=
                        lower(substr(kkmark_,1,2))||substr(kkmark_,3,1) and
                        datmet_>=datperc                                and
                        nvl(shkala,0)=(
                        select max(nvl(shkala,0))
                        from   ASVO_FFF_PERCENT
                        where  ost_/100>=nvl(SHKALA,0) and
                               datmet_>=datperc        and
                               FFF=p_tvbv              and
                               lower(substr(KKMARK,1,2)) ||substr(KKMARK,3,1)=
                               lower(substr(kkmark_,1,2))||substr(kkmark_,3,1))
                 group by nvl(shkala,0));
--        exception when no_data_found then
--          percenz_ := null;
--        end;
--        bars_audit.info('create_dpstsAS - after определение процентной ставки');

          if percenz_ is not null then
            percent_ := percenz_;
          end if;

--        bars_audit.info('ANKETA klienta: (1) tile_='||tile_);

--        для обхода всякой херни типа - ЛN  +R  гPШSPi  ҐQ  ыM  СPn
--        и обхода, если блок анкетых данных начинается на {{

          i_ := instr(tile_,'{');
          if i_=0 or substr(tile_,1,2)='{{' then
            tile_ := null;
          else
            tile_ := substr(tile_,i_);
          end if;

--        для обхода всякой херни прочего типа с наличием скобки {

          if tile_ is not null and
             length(replace(tile_,'{'))<>length(replace(tile_,'}')) then
            tile_ := null;
          end if;
          if tile_ is not null and
             (substr(tile_,1,1)<>'{' or substr(tile_,-1,1)<>'}') then
            tile_ := null;
          end if;

--        обработка анкетных данных

--        bars_audit.info('ANKETA klienta: (2) tile_='||tile_);

          if tile_ is not null then

            tile_ := replace(replace(tile_,chr(13)),chr(10));

--          меняем индекс "'" на '' точечно
            tile_ := replace(tile_,',"''",',','''',');

            tmp_  := tile_;
            if substr(tmp_,1,2)='{,' then
              uliza_ := '';
              i_     := 2;
              goto   afteruliza;
            else
              i_  := instr(tmp_,',');
              j1_ := instr(tmp_,'"');
              if j1_>0 and i_>0 and j1_<i_ then -- улица в двойных кавычках (капец)
                j2_ := instr(tmp_,'"',1,2);     -- двойная кавычка в улице (капец2)
                j3_ := instr(tmp_,'{',j1_+1);
                if j2_>0 and j2_>i_ and j2_<j3_ then
                  uliza_ := trim(substr(tmp_,j1_+1,j2_-j1_-1));
                  tmp_   := substr(tmp_,j2_+1);
                  i_     := instr(tmp_,',');
                  goto   afteruliza;
                end if;
              end if;
              o_ := i_;
              y_ := instr(tmp_,'''',3);
              z_ := 2;
              while i_<y_
              loop
                i_ := instr(tmp_,',',o_,z_); -- обалдеть можно (на хера там запятые)
                z_ := z_+1;
              end loop;
              uliza_ := trim(replace(substr(tmp_,2,i_-2),''''));
            end if;
<<afteruliza>>
--          bars_audit.info('ANKETA klienta: uliza_='||uliza_);
            tmp_   := substr(tmp_,i_+1);
            i_     := instr(tmp_,''',');
            phone_ := trim(replace(substr(tmp_,1,i_),''''));
--          bars_audit.info('ANKETA klienta: phone_='||phone_);
            tmp_   := substr(tmp_,i_+2);

--          bars_audit.info('ANKETA klienta: (pered naslednikami) tmp_='||tmp_);

--          наследники

            j_ := 1;
            loop
              i_ := instr(tmp_,',',1,j_);
              s_ := trim(substr(substr(tmp_,1,i_-1),1,2048));
              if nvl(aminc(s_,'{')-aminc(s_,'}'),0)=0 or j_>256 then
--              nasledniki_ := trim(substr(s_,2,length(s_)-2));  -- это решается ниже
                nasledniki_ := s_;
                tmp_ := substr(tmp_,i_+1);
                exit;  -- the end
              end if;
              j_ := j_+1;
            end loop;

--          доверенные лица

            j_ := 1;
            loop
              i_ := instr(tmp_,',',1,j_);
              s_ := trim(substr(substr(tmp_,1,i_-1),1,2048));
              if nvl(aminc(s_,'{')-aminc(s_,'}'),0)=0 or j_>256 then
--              doverennie_ := trim(substr(s_,2,length(s_)-2));  -- это решается ниже
                doverennie_ := s_;
                tmp_ := substr(tmp_,i_+1);
                exit;  -- the end
              end if;
              j_ := j_+1;
            end loop;

            i_    := instr(tmp_,',');
            sday_ := substr(tmp_,1,i_-1); -- STOD("19200101")
            if substr(sday_,1,4)='STOD' and
               length(sday_)=length(replace(sday_,' ')) then
              begin
                bday_ := to_date(substr(sday_,7,8),'YYYYMMDD');
              exception when others then
                bday_ := null;
              end;
              if bday_ is not null and bday_<to_date('19000101','YYYYMMDD') then
                bday_ := null;
              end if;
            else
              bday_ := null;
            end if;
            tmp_ := substr(tmp_,i_+1);

--          "рихтовка" даты рождения
            bday_ := CorrectBdayOkpo(bday_,icod_);

--          продолжительность вклада (P) и дата окончания вклада (D)

--          bars_audit.info('ANKETA klienta: tmp_='||tmp_);

            ips_ := null;
            j_   := 1;
            loop
              i_ := instr(tmp_,',',1,j_);
              s_ := substr(tmp_,1,i_-1);
              if aminc(s_,'{')-aminc(s_,'}')=0 then
                s_ := substr(s_,2,length(s_)-2);
                k_ := instr(s_,'STOD');  -- STOD("20090819")
                if k_>1 and substr(s_,k_-1,1)=',' then
--              if k_>0 then
                  sDatEnd_ := trim(substr(s_,k_+6,8));

                  if length(sDatEnd_)=8 then
                    begin
                      dDatEnd_ := to_date(sDatEnd_,'YYYYMMDD');
                    exception when OTHERS then
                      dDatEnd_ := null;
                    end;
                  else
                    dDatEnd_ := null;
                  end if;

--                ищем индивидуальную процентную ставку по вкладу

                  s_ := substr(s_,k_+6);
                  k_ := instr(s_,'STOD');
                  if k_>0 then
                    s_ := substr(s_,k_+6);
                    k_ := instr(s_,',');
                    if k_>0 then
                      l_   := instr(s_,'}');
                      begin
                        ips_ := to_number(substr(s_,k_+1,l_-k_-1))*100;
                      exception when others then
                        ips_ := null;
                      end;
                    end if;
                  end if;
                else
                  dDatEnd_ := null;
                end if;

                if dDatEnd_ is null then -- проставим дату окончания по DPV_VIDD
                  if duration_+duration_days_>0 then
                    dDatEnd_ := dpt.f_duration(datp_,duration_,duration_days_);
                  end if;
                end if;

                tmp_ := substr(tmp_,i_+1);
                exit;  -- the end
              end if;
              j_ := j_+1;
            end loop;

            if ips_ is not null and percenz_ is null then
              percent_ := ips_;
            end if;

--          рихтовка даты завершения вклада для
--          видов вкладов "Дитячий" (картотека 20 и подобные)

            if type_cod_='CHIL' then
              if datp_ is not null then
                dDatEnd1_ := dpt.f_duration(datp_,duration_,duration_days_);
              else
                dDatEnd1_ := add_months(trunc(sysdate),-1200);
              end if;
              if bday_ is not null then
                dDatEnd2_ := add_months(bday_,192);
                dDatEnd_  := greatest(dDatEnd1_,dDatEnd2_);
              else
                dDatEnd_  := dDatEnd1_;
              end if;
            end if;

--          проверка на соответствие дат начала и окончания вклада

            if datp_>=dDatEnd_ then
              goto datbegbordatend;
            end if;

--          какая-то херня (пока пропускаем)

--          bars_audit.info('ANKETA klienta: (x1) tmp_='||tmp_);
            j_ := 1;
            loop
              if j_>99 then
                tmp_ := null;
                exit;
              end if;
              i_ := instr(tmp_,',',1,j_);
              s_ := substr(tmp_,1,i_-1);
              if nvl(aminc(s_,'{')-aminc(s_,'}'),0)=0 then
                tmp_ := substr(tmp_,i_+1);
                exit;
              end if;
              j_ := j_+1;
            end loop;
--          bars_audit.info('ANKETA klienta: (x2) tmp_='||tmp_);

            if tmp_ is null then
              bars_audit.warning('create_dpstsAS - картотека='           ||
                                 substr(k.KKFFFACTUAL,1,2)||nvl(mark_,'')||
                                 ' файл='||k.KKFFFACTUAL                 ||
                                 ' nsc_='||nsc_                          ||
                                 ' id_=' ||id_                           ||
                                 ': ошибочна анкета клиента (1)');
              goto kapeztile;
            end if;

            i_ := instr(tmp_,'{');
            j_ := instr(tmp_,'}');

            kkel_ := substr(tmp_,i_+1,j_-i_-1);

--          bars_audit.info('create_dpstsAS - kkel_='||kkel_);

            if kkel_ is null then
              goto kapeztile;
            end if;

            migraAS.get_tokens(kkel_,',',kktokens_);

            begin
              if mod(aminc(kktokens_(3),''''),2)=1 and
                 mod(aminc(kktokens_(4),''''),2)=1 then
                kktokens_(3) := kktokens_(3)||kktokens_(4);
                begin
                  kktokens_(4) := kktokens_(5);
                  begin
                    kktokens_(5) := kktokens_(6);
                  exception when OTHERS then
                    null;
                  end;
                exception when OTHERS then
                  kktokens_(4) := '';
                end;
              end if;
            exception when OTHERS then
              bars_audit.warning('create_dpstsAS - картотека='           ||
                                 substr(k.KKFFFACTUAL,1,2)||nvl(mark_,'')||
                                 ' файл='||k.KKFFFACTUAL                 ||
                                 ' nsc_='||nsc_                          ||
                                 ' id_=' ||id_                           ||
                                 ': ошибочна анкета клиента (3)');
              goto kapeztile;
            end;

            seria_ := trim(replace(kktokens_(1),''''));
            seria_ := replace(seria_,'-');
            seria_ := replace(seria_,'.');
            seria_ := replace(seria_,'0');
            seria_ := replace(seria_,'1');
            seria_ := replace(seria_,'2');
            seria_ := replace(seria_,'3');
            seria_ := replace(seria_,'4');
            seria_ := replace(seria_,'5');
            seria_ := replace(seria_,'6');
            seria_ := replace(seria_,'7');
            seria_ := replace(seria_,'8');
            seria_ := replace(seria_,'9');
            seria_ := substr(seria_,1,2);
--          bars_audit.info('ANKETA klienta: seria_='||seria_);

            nomer_ := trim(replace(kktokens_(2),''''));
            nomer_ := replace(nomer_,'-');
            nomer_ := replace(nomer_,'.');
            nomer_ := substr(nomer_,1,6);
--          bars_audit.info('ANKETA klienta: nomer_='||nomer_);

            kevid_ := trim(replace(kktokens_(3),''''));
--          bars_audit.info('ANKETA klienta: kevid_='||kevid_);

            begin
              sdvid_ := trim(replace(kktokens_(4),''''));

              if substr(sdvid_,1,4)='STOD' and
                 length(sdvid_)=length(replace(sdvid_,' ')) then
                begin
                  david_ := to_date(substr(sdvid_,7,8),'YYYYMMDD');
                  if david_<to_date('19000101','YYYYMMDD') then
                    david_ := null;
                  end if;
                exception when OTHERS then
                  david_ := null;
                end;
              else
                david_ := null;
              end if;

              if david_ is not null and bday_ is not null and david_<bday_ then
                david_ := bday_;
              end if;
--            bars_audit.info('ANKETA klienta: david_='||david_);
            exception when OTHERS then
              david_ := null;
            end;

            begin
              tidok_ := trim(replace(kktokens_(5),''''));
            exception when OTHERS then
              tidok_ := null;
            end;

            if tidok_ is null or tidok_='П' then
              -- это паспорт
              nPASP_ := 1;
            else
              -- не паспорт
              nPASP_ := -1;
            end if;
--          bars_audit.info('ANKETA klienta: tidok_='||tidok_);

            if length(seria_)=2 then
              begin
                seria_ := kl.recode_passport_serial(seria_);
              exception when OTHERS then
                seria_ := null;
              end;
            else
              seria_ := null;
            end if;

            if length(nomer_)=6 /* and seria_ is not null */ then
              begin
                nomer_ := kl.recode_passport_number(nomer_);
              exception when OTHERS then
                nomer_ := null;
              end;
            else
              nomer_ := null;
            end if;

            tmp_ := substr(tmp_,j_+2,length(tmp_)-j_-1);

            i_    := instr(tmp_,',');
            city_ := replace(trim(substr(tmp_,1,i_-1)),'''');
--          bars_audit.info('ANKETA klienta: city_='||city_);
            tmp_  := substr(tmp_,i_+1);

            i_    := instr(tmp_,',');
            dom_  := replace(trim(substr(tmp_,1,i_-1)),'''');
--          bars_audit.info('ANKETA klienta: dom_='||dom_);
            tmp_  := substr(tmp_,i_+1);

            i_    := instr(tmp_,',');
            kvar_ := replace(trim(substr(tmp_,1,i_-1)),'''');
--          bars_audit.info('ANKETA klienta: kvar_='||kvar_);
            tmp_  := substr(tmp_,i_+1);

            i_    := instr(tmp_,',');
            index_:= replace(trim(substr(tmp_,1,i_-1)),'''');
--          bars_audit.info('ANKETA klienta: index_='||index_);
            if length(index_)<5 then
              index_ := null;
            end if;
            tmp_  := substr(tmp_,i_+1);

            i_    := instr(tmp_,',');
            obl_  := replace(trim(substr(tmp_,1,i_-1)),'''');
--          bars_audit.info('ANKETA klienta: obl_='||obl_);
            tmp_  := substr(tmp_,i_+1);

            i_    := instr(tmp_,',');
            rajon_:= replace(trim(substr(tmp_,1,i_-1)),'''');
--          bars_audit.info('ANKETA klienta: rajon_='||rajon_);

            if kvar_ is null or length(kvar_)=0 then
              kvarkvar_ := '';
            else
              kvarkvar_ := ' кв.'||kvar_;
            end if;
            fulladdress_     := replace(trim(obl_||' '||rajon_||' '||city_||' '||uliza_||','||dom_||kvarkvar_),'  ',' ');
            if length(fulladdress_)>70 then
              fulladdress_   := replace(trim(rajon_||' '||city_||' '||uliza_||','||dom_||kvarkvar_),'  ',' ');
              if length(fulladdress_)>70 then
                fulladdress_ := replace(trim(city_||' '||uliza_||','||dom_||kvarkvar_),'  ',' ');
              end if;
            end if;
            address_ := trim(uliza_||','||dom_||kvarkvar_);

          else
            bars_audit.warning('create_dpstsAS - картотека='           ||
                               substr(k.KKFFFACTUAL,1,2)||nvl(mark_,'')||
                               ' файл='||k.KKFFFACTUAL                 ||
                               ' nsc_='||nsc_                          ||
                               ' id_=' ||id_                           ||
                               ': отсутствует или ошибочна анкета клиента (2)');
            tilenull_ := 1;
          end if;

--        присвоение даты окончания вклада, если анкеты нет или анкета ошибочна

          if tilenull_=1 then

            if duration_+duration_days_>0 then
              dDatEnd_ := dpt.f_duration(datp_,duration_,duration_days_);
            end if;

            if type_cod_='CHIL' then
              if datp_ is not null then
                dDatEnd1_ := dpt.f_duration(datp_,duration_,duration_days_);
              else
                dDatEnd1_ := add_months(trunc(sysdate),-1200);
              end if;
              if bday_ is not null then
                dDatEnd2_ := add_months(bday_,192);
                dDatEnd_  := greatest(dDatEnd1_,dDatEnd2_);
              else
                dDatEnd_  := dDatEnd1_;
              end if;
            end if;

          end if;

<<kapeztile>> null;

--        dpt.get_expenseacc - определение счёта расходов для %% карточки

--        select dpt.get_expenseacc(dptvidd_,nbsperc_,dptkv_,branch_)
--        into   nls67_
--        from   dual;

--        определяем есть ли клиент с серией и номером паспорта
--        если есть - берём RNK, иначе регистрируем и получаем RNK (rnk_)
--        (этого всего не надо -- использовать две нижние процедуры)

--        dpt_web.p_open_vklad_rnk

          begin
            bc.subst_branch(branch_);
            rnk_     := null;
            savepoint sp_openrnk;
--          bars_audit.info('create_dpstsAS - before dpt_web.p_open_vklad_rnk');
            dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'        ,
                                     p_clientname       => fio_        ,  --p_clientname       IN  customer.nmk%type,
                                     p_client_name      => null        ,  --p_client_name      IN  varchar2 default null,
                                     p_client_surname   => null        ,  --p_client_surname   IN  varchar2 default null,
                                     p_client_patr      => null        ,  --p_client_patr      IN  varchar2 default null,
                                     p_country          => 804         ,  --p_country          IN  customer.country%type,
                                     p_index            => index_      ,  --p_index            IN  varchar2,
                                     p_obl              => obl_        ,  --p_obl              IN  varchar2,
                                     p_district         => rajon_      ,  --p_district         IN  varchar2,
                                     p_settlement       => city_       ,  --p_settlement       IN  varchar2,
                                     p_adress           => address_    ,  --p_adress           IN  varchar2,
                                     p_fulladdress      => fulladdress_,  --p_fulladdress      IN  customer.adr%type,
                                     p_clientcodetype   => null        ,  --p_clientcodetype   IN  customer.tgr%type,
                                     p_clientcode       => icod_       ,  --p_clientcode       IN  customer.okpo%type,
                                     p_doctype          => nPASP_      ,  --p_doctype          IN  person.passp%type,
                                     p_docserial        => seria_      ,  --p_docserial        IN  person.ser%type,
                                     p_docnumber        => nomer_      ,  --p_docnumber        IN  person.numdoc%type,
                                     p_docorg           => kevid_      ,  --p_docorg           IN  person.organ%type,
                                     p_docdate          => david_      ,  --p_docdate          IN  person.pdate%type,
                                     p_clientbdate      => bday_       ,  --p_clientbdate      IN  person.bday%type,
                                     p_clientbplace     => null        ,  --p_clientbplace     IN  person.bplace%type,
                                     p_clientsex        => 0           ,  --p_clientsex        IN  person.sex%type,
                                     p_clientHomePh     => phone_      ,  --p_clienthomeph     IN  person.teld%type,
                                     p_clientWorkPh     => null        ,  --p_clientworkph     IN  person.telw%type,
                                     p_clientname_gc    => null        ,  --p_clientname_gc    IN  customerw.value%type,
                                     p_resid_code       => 1           ,  --p_resid_code       IN  number,
                                     p_resid_index      => index_      ,  --p_resid_index      IN  varchar2,
                                     p_resid_obl        => obl_        ,  --p_resid_obl        IN  varchar2,
                                     p_resid_district   => rajon_      ,  --p_resid_district   IN  varchar2,
                                     p_resid_settlement => city_       ,  --p_resid_settlement IN  varchar2,
                                     p_resid_adress     => address_    ,  --p_resid_adress     IN  varchar2,
                                     p_clientid         => rnk_        ,  --p_clientid     IN OUT  number,
                          /* null */ p_registrydate     => datp_);        --p_registrydate     IN  date default null

--          bars_audit.info('create_dpstsAS - after dpt_web.p_open_vklad_rnk');
            bc.set_context;
          exception when OTHERS then
            rollback to sp_openrnk;
            bc.set_context;
            p_code := p_code+1;
            text_ := 'Ошибка при выполнении p_open_vklad_rnk: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            toroot;
            bars_audit.error(p_errmask                ||'(2): '      ||
                             'код ТВБВ АСВО='         ||k.FFF        ||
                             ', файл='                ||k.KKFFFACTUAL||
                             ', код картотеки='       ||kkmark_      ||
                             ', код вида вклада БАРС='||dptvidd_     ||
                             ', номер вклада='        ||nsc_         ||
                             ', код ОКПО='            ||icod_ ||' - '||text_);
            fl_     := 1;
            flkart_ := flkart_+1;
          end;

--        dpt_web.create_deposit or dpt_social.create_contract

          if fl_=0 then
            begin
              bc.subst_branch(branch_);

              gl.pl_dat(p_dasvox);
              gl.amfo := f_ourmfo_g;

              if datp_>gl.bdate then
                goto baddataotkritia;
              end if;

              glbd_    := gl.bdate;
              gl.bdate := datp_;

              glauid_  := gl.aUid;
              select max(id)
              into   auid_
              from   staff
              where  tabn is not null and
                     bax=1;
              if auid_ is null then
                select max(id)
                into   auid_
                from   staff
                where  tabn is not null;
                if auid_ is null then
                  select max(id)
                  into   auid_
                  from   staff;
                  if auid_ is null then
                    auid_ := gl.aUid;
                  end if;
                end if;
              end if;
              gl.aUid := auid_;
/*
              if typeid_ is null then
--              ND_ := kkmark_||'_'||p_tvbv||'_'||id_||'_'||nsc_;
--              loop
--                begin
--                  select deposit_id
--                  into   dptid_
--                  from   dpt_deposit
--                  where  nd=ND_;
--                  ND_ := ND_||'*';
--                exception when no_data_found then
--                  exit;
--                end;
--              end loop;
                dptid_ := null;
                dpt_web.create_deposit(dptvidd_                          ,  --p_vidd        IN  dpt_deposit.vidd%type,   вклад АСВО
                                       rnk_                              ,  --p_rnk         IN  dpt_deposit.rnk%type,
--                                     ND_                               ,  --p_nd          IN  dpt_deposit.nd%type,     idkart_tvbv_(nsc)
                                       kkmark_||'_'||p_tvbv||'_'||id_||
                                       '_'||upper(k.FFFACTUAL)||'_'||nsc_,
                                       ost_                              ,  --p_sum         IN  dpt_deposit.limit%type,  ost
                                       0                                 ,  --p_nocash      IN  number,                  0
                                       dato_                             ,  --p_datz        IN  dpt_deposit.datz%type,   DATP
                                       null                              ,  --p_namep       IN  dpt_deposit.name_p%type,
                                       null                              ,  --p_okpop       IN  dpt_deposit.okpo_p%type,
                                       null                              ,  --p_nlsp        IN  dpt_deposit.nls_p%type,
                                       null                              ,  --p_mfop        IN  dpt_deposit.mfo_p%type,
                                       0                                 ,  --p_fl_perekr   IN  dpt_vidd.fl_2620%type,
                                       null                              ,  --p_name_perekr IN  dpt_deposit.nms_d%type,
                                       null                              ,  --p_okpo_perekr IN  dpt_deposit.okpo_p%type,
                                       null                              ,  --p_nls_perekr  IN  dpt_deposit.nls_d%type,
                                       null                              ,  --p_mfo_perekr  IN  dpt_deposit.mfo_d%type,
                                       'Imported from ASVO6.3'           ,  --p_comment     IN  dpt_deposit.comments%type,
                                       dptid_                            ,  --p_dpt_id      OUT dpt_deposit.deposit_id%type,
                                       dato_);                              --p_datbegin    IN  dpt_deposit.dat_begin%type default gl.bdate
              else
--              bars_audit.info('create_dpstsAS - (create_contract)'||
--                                'typeid_='  ||typeid_             ||
--                              ', agencyid_='||agencyid_           ||
--                              ', kkmark_+=' ||kkmark_||'_'||p_tvbv||'_'||nsc_||
--                              ', dato_='    ||dato_);
                dpt_social.create_contract(rnk_                              ,  --p_custid        IN   social_contracts.rnk%type
                                           typeid_                           ,  --p_soctypeid     IN   social_contracts.type_id%type
                                           agencyid_                         ,  --p_agencyid      IN   social_contracts.agency_id%type
--                                         kkmark_||'_'||p_tvbv||'_'||nsc_   ,  --p_contractnum   IN   social_contracts.contract_num%type
                                           kkmark_||'_'||p_tvbv||'_'||id_||
                                           '_'||upper(k.FFFACTUAL)||'_'||nsc_,  --p_contractnum   IN   social_contracts.contract_num%type
                                           dato_                             ,  --p_contractdate  IN   social_contracts.contract_date%type
                                           null                              ,  --p_cardaccount   IN   social_contracts.card_account%type
                                           'N/A'                             ,  --p_pensionnum    IN   social_contracts.pension_num%type
                                           'Imported from ASVO6.3'           ,  --p_details       IN   social_contracts.details%type
                                           contractacc_                      ,  --p_contractacc   OUT  social_contracts.acc%type
                                           dptid_);                             --p_contractid    OUT  social_contracts.contract_id%type
              end if;
*/

--            if duration_+duration_days_!=0 then
              if duration_+duration_days_!=0 and term_type_=1 then
                srok_ := null;
              else
                if dDatEnd_ is null then
                  if dptvidd_=110 then
                    srok_ := 184;
                  else
                    srok_ := null;
                  end if;
                else
                  srok_ := dDatEnd_-datp_;
                end if;
              end if;

              dptid_ := null;
              dpt_web.create_deposit(dptvidd_                          ,  --p_vidd          IN  dpt_deposit.vidd%type,   вклад АСВО
                                     rnk_                              ,  --p_rnk           IN  dpt_deposit.rnk%type,
--                                   ND_                               ,  --p_nd            IN  dpt_deposit.nd%type,     idkart_tvbv_(nsc)
                                     kkmark_||'_'||p_tvbv||'_'||id_||
                                     '_'||upper(k.FFFACTUAL)||'_'||nsc_,
                                     ost_                              ,  --p_sum           IN  dpt_deposit.limit%type,  ost
                                     0                                 ,  --p_nocash        IN  number,                  0
                                     dato_                             ,  --p_datz          IN  dpt_deposit.datz%type,   DATO
                                     null                              ,  --p_namep         IN  dpt_deposit.name_p%type,
                                     null                              ,  --p_okpop         IN  dpt_deposit.okpo_p%type,
                                     null                              ,  --p_nlsp          IN  dpt_deposit.nls_p%type,
                                     null                              ,  --p_mfop          IN  dpt_deposit.mfo_p%type,
                                     0                                 ,  --p_fl_perekr     IN  dpt_vidd.fl_2620%type,
                                     null                              ,  --p_name_perekr   IN  dpt_deposit.nms_d%type,
                                     null                              ,  --p_okpo_perekr   IN  dpt_deposit.okpo_p%type,
                                     null                              ,  --p_nls_perekr    IN  dpt_deposit.nls_d%type,
                                     null                              ,  --p_mfo_perekr    IN  dpt_deposit.mfo_d%type,
                                     'Imported from ASVO6.3'           ,  --p_comment       IN  dpt_deposit.comments%type,
                                     dptid_                            ,  --p_dpt_id        OUT dpt_deposit.deposit_id%type,
                                     datp_                             ,  --p_datbegin      IN  dpt_deposit.dat_begin%type default gl.bdate
                                     null                              ,  --p_duration      IN  dpt_vidd.duration%type default null
                                     srok_);                              --p_duration_days IN  dpt_vidd.duration_days%type default null
--            bars_audit.info('create_dpstsAS - after dpt_web.create_deposit');
            exception when OTHERS then
              rollback to sp_openrnk;
              bc.set_context;
              p_code := p_code+1;
              gl.bdate := glbd_;
              gl.aUid  := glauid_;
--            if typeid_ is null then
              text_ := 'Ошибка при выполнении create_deposit: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--            else
--              text_ := 'Ошибка при выполнении create_contract: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--            end if;
              migraAS.asvo_log_write(kkmark_      ,
                                     dptvidd_     ,
                                     dptkv_       ,
                                     p_tvbv       ,
                                     k.KKFFFACTUAL,
                                     branch_      ,
                                     nlsKOTLOdepo_,
                                     nlsKOTLOperc_,
                                     nlsKOTLOperz_,
                                     id_          ,
                                     nsc_         ,
                                     fio_         ,
                                     icod_        ,
                                     seria_       ,
                                     nomer_       ,
                                     ost_         ,
                                     prv_         ,
                                     npr_         ,
                                     zpr_         ,
                                     -1           ,
                                     text_        ,
                                     sysdate      ,
                                     rnk_         ,
                                     dptid_);
              toroot;
              bars_audit.error(p_errmask                ||'(3): '      ||
                               'код ТВБВ АСВО='         ||k.FFF        ||
                               ', файл='                ||k.KKFFFACTUAL||
                               ', код картотеки='       ||kkmark_      ||
                               ', код вида вклада БАРС='||dptvidd_     ||
                               ', номер вклада='        ||nsc_         ||
                               ', код ОКПО='            ||icod_ ||' - '||text_);
              fl_     := 1;
              flkart_ := flkart_+1;
            end;

--<<kapecsocial>> null;

            If fl_=0 then
              gl.bdate := glbd_;

--            вычищаем INT_RATN по новом ACC и
--            записываем свои %%-ные ставки из вклада
--            для этого идём по массиву и
--            пишем последнюю процентную ставку в INT_RATN

--            if typeid_ is null then
              select acc
              into   accdepo_
              from   dpt_deposit
              where  deposit_id=dptid_;

              update dpt_deposit
              set    comments='Imported from ASVO6.3',
                     DAT_BEGIN=datp_                 ,
                     DAT_END=dDatEnd_   -- ставим принудительно дату
              where  deposit_id=dptid_; -- завершения вклада (из АСВО)

              update dpt_deposit_clos
              set    dat_begin=datp_,
                     dat_end=dDatEnd_
              where  deposit_id=dptid_;

--            bars_audit.info('dDatEnd_           = '||to_char(dDatEnd_,'DD/MM/YYYY'));
--            bars_audit.info('dato_              = '||to_char(dato_   ,'DD/MM/YYYY'));
--            bars_audit.info('fl_dubl_           = '||to_char(fl_dubl_));
--            bars_audit.info('term_type_         = '||to_char(term_type_));
--            bars_audit.info('duration_max_      = '||to_char(duration_max_));
--            bars_audit.info('duration_days_max_ = '||to_char(duration_days_max_));

--            пролонгации депозитов (проставляю количество оных +
--                                   изменяю дату начала вклада)

-- было так   if fl_dubl_>0 and dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ then
              if fl_dubl_>0                                                         and
                 ((term_type_=2 and
                   dDatEnd_>dpt.f_duration(datp_,duration_max_,duration_days_max_)) or
                  (term_type_=1 and
                   dDatEnd_!=dpt.f_duration(datp_,duration_,duration_days_))) then
                datb_    := datp_;
                numdays_ := dDatEnd_-datb_;
--              bars_audit.info('numdays_ = '||to_char(numdays_));
                cnt_     := 0;
-- было так     date_    := dpt.f_duration(dato_,duration_,duration_days_);
                if term_type_=1 then
                  date_ := dpt.f_duration(datp_,duration_,duration_days_);
                else
                  date_ := dpt.f_duration(datp_,0,numdays_);
                end if;
--              while date_<dDatEnd_
                while date_<dDatEnd_-5 -- возможно АСВО учитывает выходные дни
                loop
                  cnt_  := cnt_+1;
                  datb_ := date_;
-- было так       date_ := dpt.f_duration(datb_,duration_,duration_days_);
                  if term_type_=1 then
                    date_ := dpt.f_duration(datb_,duration_,duration_days_);
                  else
                    date_ := dpt.f_duration(datb_,0,numdays_);
                  end if;
                end loop;
                if cnt_>0 then
                  if date_>datb_ then
                    update dpt_deposit
                    set    dat_begin=datb_,
                           DAT_END=date_  ,
                           cnt_dubl=cnt_
                    where  deposit_id=dptid_;
--                  аналогично и в Архиве депозитов
                    update dpt_deposit_clos
                    set    dat_begin=datb_,
                           DAT_END=date_  ,
                           cnt_dubl=cnt_
                    where  deposit_id=dptid_;

                    begin
                      select nullif(e.indv_rate,0)
                      into   prbonus_
                      from   dpt_deposit      d,
                             dpt_vidd         v,
                             dpt_vidd_extdesc e
                      where  d.deposit_id=dptid_      and
--                           d.cnt_dubl>=1            and
                             d.vidd=v.vidd            and
                             v.extension_id=e.type_id and
                             e.ext_num=1              and
                             e.base_rate is not null  and
                             e.oper_id=1              and
                             e.indv_rate is not null;
                    exception when no_data_found then
                      prbonus_ := null;
                    end;
                  end if;
                end if;
              end if;

--            else
--              accdepo_ := contractacc_;
--            end if;

--            здесь "замочить" наследников и доверенных лиц
--            причём и для обычных депозитов и для социальных !!!

--            наследники

              if length(nasledniki_)>3 then
                bars_audit.info('create_dpstsAS - nasledniki_='||nasledniki_);
                tmp_ := nasledniki_;
                naslelist_ := varchar2_list();
                if substr(tmp_,1,2)='{{' then -- несколько наследников
                  tmp_ := substr(tmp_,2,length(tmp_)-2);
                  j_ := 0;
                  k_ := 1;
                  loop
                    i_ := instr(tmp_,'}',k_);
                    if i_=0 then
                      exit;
                    end if;
                    s_ := substr(tmp_,1,i_);
                    if aminc(s_,'{')-aminc(s_,'}')=0 then -- yes
                      j_ := j_+1;
                      naslelist_.extend(1);
                      naslelist_(j_) := substr(s_,2,length(s_)-2);
                      bars_audit.info('create_dpstsAS - naslelist_('||j_||')='||naslelist_(j_));
                      tmp_ := substr(tmp_,i_+1);
                      if substr(tmp_,1,1)=',' then
                        tmp_ := substr(tmp_,2);
                      end if;
                      if tmp_ is null or length(tmp_)<3 then
                        exit; -- больше наследников нет
                      else
                        k_ := 1;
                      end if;
                    else
                      k_ := k_+1;
                    end if;
                  end loop;
                else
                  j_ := 1;
                  naslelist_.extend(1);
                  naslelist_(1) := substr(tmp_,2,length(tmp_)-2);
                  bars_audit.info('create_dpstsAS - naslelist_(1)='||naslelist_(1));
                end if;

--              разбор списка наследников

                for l_ in 1..j_
                loop
                  tmp_ := naslelist_(l_);
                  i_ := instr(tmp_,''',')+1;
                  y_ := instr(tmp_,'",')+1;
                  if y_>1 then
                    if i_=1 then
                      i_ := y_;
                    else
                      i_ := least(i_,y_);
                    end if;
                  end if;
--                nmkn_ := trim(substr(trim(replace(substr(tmp_,1,i_-1),'''')),1,70));
                  nmkn_ := trim(substr(trim(substr(tmp_,2,i_-3)),1,70));
                  tmp_ := substr(tmp_,i_+1);
                  i_ := instr(tmp_,',');
--                какое-то число 1 - пропускаю
                  tmp_ := substr(tmp_,i_+1);
                  i_ := instr(tmp_,',');
                  FiliT_ := substr(tmp_,1,3);
                  tmp_ := substr(tmp_,i_+1);
                  if upper(FiliT_)='.T.' then -- обработать реквизиты наследника
                    sdayn_ := trim(substr(tmp_,7,8)); -- дата рождения дов.лица
                    if length(sdayd_)=8 then
                      begin
                        bdayn_ := to_date(sdayd_,'YYYYMMDD');
                      exception when OTHERS then
                        bdayn_ := null;
                      end;
                    else
                      bdayn_ := null;
                    end if;
                    i_ := instr(tmp_,',');
                    tmp_ := substr(tmp_,i_+1);
                    i_ := instr(tmp_,''',')+1;
                    y_ := instr(tmp_,'",')+1;
                    if y_>1 then
                      i_ := least(i_,y_);
                    end if;
                    adrn_ := trim(substr(trim(replace(substr(tmp_,1,i_-1),'''')),1,70)); -- адрес
                    tmp_ := substr(tmp_,i_+1);
                    i_ := instr(tmp_,''',')+1;
                    y_ := instr(tmp_,'",')+1;
                    if y_>1 then
                      i_ := least(i_,y_);
                    end if;
                    okpon_ := trim(replace(substr(tmp_,1,i_-1),'''')); -- ОКПО
                    tmp_ := substr(tmp_,i_+1);
                    begin
                      m_ := to_number(okpon_);
                    exception when OTHERS then
                      okpon_ := '000000000';
                    end;
                    if length(okpon_)=0 or okpon_ is null then
                      okpon_ := '000000000';
                    end if;
                    i_ := instr(tmp_,''',')+1;
                    y_ := instr(tmp_,'",')+1;
                    if y_>1 then
                      i_ := least(i_,y_);
                    end if;
                    teldn_ := trim(replace(substr(tmp_,1,i_-1),'''')); -- телефон
                    tmp_ := substr(tmp_,i_+1);

--                  "рихтовка" даты рождения
                    bdayn_ := CorrectBdayOkpo(bdayn_,okpon_);

                    rekv5_ := trim(substr(tmp_,2,length(tmp_)-2));

--                  bars_audit.info('create_dpstsAS - rekv5_='||rekv5_);

--                  if length(rekv5_)>7 then
                    if length(rekv5_)>0 then
                      tmp_ := rekv5_;
                      i_ := instr(tmp_,''',')+1;
                      y_ := instr(tmp_,'",')+1;
                      if y_>1 then
                        i_ := least(i_,y_);
                      end if;
                      serin_ := substr(tmp_,1,i_-1);
                      tmp_ := substr(tmp_,i_+1);
                      i_ := instr(tmp_,''',')+1;
                      y_ := instr(tmp_,'",')+1;
                      if y_>1 then
                        i_ := least(i_,y_);
                      end if;
                      serin_ := trim(replace(serin_,''''));
                      serin_ := replace(serin_,'-');
                      serin_ := replace(serin_,'.');
                      serin_ := replace(serin_,'0');
                      serin_ := replace(serin_,'1');
                      serin_ := replace(serin_,'2');
                      serin_ := replace(serin_,'3');
                      serin_ := replace(serin_,'4');
                      serin_ := replace(serin_,'5');
                      serin_ := replace(serin_,'6');
                      serin_ := replace(serin_,'7');
                      serin_ := replace(serin_,'8');
                      serin_ := replace(serin_,'9');
                      serin_ := substr(serin_,1,2);

                      if length(serin_)=2 then
                        begin
                          serin_ := kl.recode_passport_serial(serin_);
                        exception when OTHERS then
                          serin_ := null;
                        end;
                      else
                        serin_ := null;
                      end if;

                      nomen_ := substr(tmp_,1,i_-1);
                      tmp_ := substr(tmp_,i_+1);
                      i_ := instr(tmp_,''',')+1;
                      y_ := instr(tmp_,'",')+1;
                      if y_>1 then
                        i_ := least(i_,y_);
                      end if;

                      begin
                        nomen_ := trim(replace(nomen_,''''));
                      exception when OTHERS then
                        bars_audit.warning('create_dpstsAS - картотека='           ||
                                           substr(k.KKFFFACTUAL,1,2)||nvl(mark_,'')||
                                           ' файл='||k.KKFFFACTUAL                 ||
                                           ' nsc_='||nsc_                          ||
                                           ' id_=' ||id_                           ||
                                           ': отсутствует или ошибочна анкета клиента (4)');
                        nomen_ := null;
                        goto fucn;
                      end;

                      nomen_ := replace(nomen_,'-');
                      nomen_ := replace(nomen_,'.');
                      nomen_ := substr(nomen_,1,6);

                      if length(nomen_)=6 then
                        begin
                          nomen_ := kl.recode_passport_number(nomen_);
                        exception when OTHERS then
                          nomen_ := null;
                        end;
                      else
                        nomen_ := null;
                      end if;
<<fucn>> null;

                      vidan_ := substr(tmp_,1,i_-1);
                      tmp_ := substr(tmp_,i_+1);
                      i_ := instr(tmp_,',');

                      vidan_ := trim(substr(trim(replace(vidan_,'''')),1,50));
                      if i_>0 then
                        sdavn_ := trim(replace(tmp_,''''));
                      else
                        sdavn_ := tmp_;
                      end if;
                      sdavn_ := trim(replace(sdavn_,''''));

                      if substr(sdavn_,1,4)='STOD' and
                         length(sdavn_)=length(replace(sdavn_,' ')) then
                        begin
                          ddavn_ := to_date(substr(ddavn_,7,8),'YYYYMMDD');
                        exception when others then
                          ddavn_ := null;
                        end;
                        if ddavn_<to_date('19000101','YYYYMMDD') then
                          ddavn_ := null;
                        end if;
                      else
                        ddavn_ := null;
                      end if;
                    else
                      serin_ := null;
                      nomen_ := null;
                      vidan_ := null;
                      ddavn_ := null;
                    end if;

                  else
--                  присвоить умолчательные значения реквизитам наследника
                    bdayn_ := null;
                    adrn_  := null;
                    okpon_ := '000000000';
                    teldn_ := null;
                    serin_ := null;
                    nomen_ := null;
                    vidan_ := null;
                    ddavn_ := null;
                  end if;

                  RNKnasle_ := null;

                  begin
                    dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'     ,
                                             p_clientname       => nmkn_    ,  --p_clientname       IN  customer.nmk%type,
                                             p_client_name      => null     ,  --p_client_name      IN  varchar2 default null,
                                             p_client_surname   => null     ,  --p_client_surname   IN  varchar2 default null,
                                             p_client_patr      => null     ,  --p_client_patr      IN  varchar2 default null,
                                             p_country          => 804      ,  --p_country          IN  customer.country%type,
                                             p_index            => null     ,  --p_index            IN  varchar2,
                                             p_obl              => null     ,  --p_obl              IN  varchar2,
                                             p_district         => null     ,  --p_district         IN  varchar2,
                                             p_settlement       => null     ,  --p_settlement       IN  varchar2,
                                             p_adress           => null     ,  --p_adress           IN  varchar2,
                                             p_fulladdress      => adrn_    ,  --p_fulladdress      IN  customer.adr%type,
                                             p_clientcodetype   => null     ,  --p_clientcodetype   IN  customer.tgr%type,
                                             p_clientcode       => okpon_   ,  --p_clientcode       IN  customer.okpo%type,
                                             p_doctype          => 1        ,  --p_doctype          IN  person.passp%type,
                                             p_docserial        => serin_   ,  --p_docserial        IN  person.ser%type,
                                             p_docnumber        => nomen_   ,  --p_docnumber        IN  person.numdoc%type,
                                             p_docorg           => vidan_   ,  --p_docorg           IN  person.organ%type,
                                             p_docdate          => ddavn_   ,  --p_docdate          IN  person.pdate%type,
                                             p_clientbdate      => bdayn_   ,  --p_clientbdate      IN  person.bday%type,
                                             p_clientbplace     => null     ,  --p_clientbplace     IN  person.bplace%type,
                                             p_clientsex        => 0        ,  --p_clientsex        IN  person.sex%type,
                                             p_clientHomePh     => teldn_   ,  --p_clienthomeph     IN  person.teld%type,
                                             p_clientWorkPh     => null     ,  --p_clientworkph     IN  person.telw%type,
                                             p_clientname_gc    => null     ,  --p_clientname_gc    IN  customerw.value%type,
                                             p_resid_code       => 1        ,  --p_resid_code       IN  number,
                                             p_resid_index      => null     ,  --p_resid_index      IN  varchar2,
                                             p_resid_obl        => null     ,  --p_resid_obl        IN  varchar2,
                                             p_resid_district   => null     ,  --p_resid_district   IN  varchar2,
                                             p_resid_settlement => null     ,  --p_resid_settlement IN  varchar2,
                                             p_resid_adress     => null     ,  --p_resid_adress     IN  varchar2,
                                             p_clientid         => RNKnasle_,  --p_clientid     IN OUT  number,
                                  /* null */ p_registrydate     => glbd_);     --p_registrydate     IN  date default null

                    update customer
                    set    notes='Наследник по вкладу '||nsc_
                    where  rnk=RNKnasle_;
/*
                    kl.setCustomerAttr(RNKnasle_,                     -- Rnk_    IN OUT customer.rnk%type,        -- Customer number
                                       3,                             -- Custtype_      customer.custtype%type,   -- Тип клиента: 1-банк, 2-юр.лицо, 3-физ.лицо
                                       null,                          -- Nd_            customer.nd%type,         -- № договора
                                       nmkn_,                         -- Nmk_           customer.nmk%type,        -- Наименование клиента
                                       null,                          -- Nmkv_          customer.nmkv%type,       -- Наименование клиента международное
                                       null,                          -- Nmkk_          customer.nmkk%type,       -- Наименование клиента краткое
                                       adrn_,                         -- Adr_           customer.adr%type,        -- Адрес клиента
                                       5,                             -- Codcagent_     customer.codcagent%type,  -- Характеристика
                                       804,                           -- Country_       customer.country%type,    -- Страна
                                       99,                            -- Prinsider_     customer.prinsider%type,  -- Признак инсайдера
                                       2,                             -- Tgr_           customer.tgr%type,        -- Тип гос.реестра
                                       okpon_,                        -- Okpo_          customer.okpo%type,       -- ОКПО
                                       null,                          -- Stmt_          customer.stmt%type,       -- Формат выписки
                                       null,                          -- Sab_           customer.sab%type,        -- Эл.код
                                       trunc(sysdate),                -- DateOn_        customer.date_on%type,    -- Дата регистрации
                                       null,                          -- Taxf_          customer.taxf%type,       -- Налоговый код
                                       null,                          -- CReg_          customer.c_reg%type,      -- Код обл.НИ
                                       null,                          -- CDst_          customer.c_dst%type,      -- Код район.НИ
                                       null,                          -- Adm_           customer.adm%type,        -- Админ.орган
                                       null,                          -- RgTax_         customer.rgtax%type,      -- Рег номер в НИ
                                       null,                          -- RgAdm_         customer.rgadm%type,      -- Рег номер в Адм.
                                       trunc(sysdate),                -- DateT_         customer.datet%type,      -- Дата рег в НИ
                                       trunc(sysdate),                -- DateA_         customer.datea%type,      -- Дата рег. в администрации
                                       null,                          -- Ise_           customer.ise%type,        -- Инст. сек. экономики
                                       null,                          -- Fs_            customer.fs%type,         -- Форма собственности
                                       null,                          -- Oe_            customer.oe%type,         -- Отрасль экономики
                                       null,                          -- Ved_           customer.ved%type,        -- Вид эк. деятельности
                                       null,                          -- Sed_           customer.sed%type,        -- Форма хозяйствования
                                       'Наследник по вкладу '||nsc_,  -- Notes_         customer.notes%type,      -- Примечание
                                       null,                          -- Notesec_       customer.notesec%type,    -- Примечание для службы безопасности
                                       null,                          -- CRisk_         customer.crisk%type,      -- Категория риска
                                       null,                          -- Pincode_       customer.pincode%type,    --
                                       null,                          -- RnkP_          customer.rnkp%type,       -- Рег. номер холдинга
                                       null,                          -- Lim_           customer.lim%type,        -- Лимит кассы
                                       null,                          -- NomPDV_        customer.nompdv%type,     -- № в реестре плат. ПДВ
                                       null,                          -- MB_            customer.mb%type,         -- Принадл. малому бизнесу
                                       1,                             -- BC_            customer.bc%type,         -- Признак НЕклиента банка
                                       branch_,                       -- Tobo_          customer.tobo%type,       -- Код безбалансового отделения
                                       null);                         -- Isp_           customer.isp%type         -- Менеджер клиента (ответ. исполнитель)
                    kl.setPersonAttr(RNKnasle_,  -- Rnk_    NUMBER,
                                     0        ,  -- Sex_    CHAR,
                                     1        ,  -- Passp_  NUMBER,
                                     serin_   ,  -- Ser_    VARCHAR2,
                                     nomen_   ,  -- Numdoc_ VARCHAR2,
                                     ddavn_   ,  -- PDate_  DATE,
                                     vidan_   ,  -- Organ_  VARCHAR2,
                                     bdayn_   ,  -- BDay_   DATE,
                                     null     ,  -- BPlace_ VARCHAR2,
                                     teldn_   ,  -- TelD_   VARCHAR2,
                                     null);      -- TelW_   VARCHAR2
*/
--                  if typeid_ is null then
                    dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                             8        ,   -- l_agrtype
                                             rnk_     ,   -- p_initcustid
                                             RNKnasle_,   -- p_trustcustid
                                             null     ,   -- p_trustid
                                             null     ,   -- p_transferdpt
                                             null     ,   -- p_transferint
                                             null     ,   -- p_amountcash
                                             null     ,   -- p_amountcashless
                                             null     ,   -- p_datbegin
                                             null     ,   -- p_datend
                                             null     ,   -- p_ratereqid
                                             null     ,   -- p_ratevalue
                                             null     ,   -- p_ratedate
                                             null     ,   -- p_denomamount
                                             null     ,   -- p_denomcount
                                             null     ,   -- p_denomref
                                             null     ,   -- p_comissref
                                             null     ,   -- p_docref
                                             -13      ,   -- p_comissreqid
                                             agrmntid_);  -- p_agrmntid
--                  else
--                    dpt_social.p_supplementary_agreement(dptid_   ,
--                                                         23       , -- наследник
--                                                         RNKnasle_,
--                                                         trustid_);
--                  end if;
                  exception when OTHERS then
                    if sqlerrm like '%DPT-00228%' then
                      null;
                    else
                      p_code := p_code+1;
                      text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                      toroot;
                      bars_audit.error(p_errmask                ||'(7): '      ||
                                       'код ТВБВ АСВО='         ||k.FFF        ||
                                       ', файл='                ||k.KKFFFACTUAL||
                                       ', код картотеки='       ||kkmark_      ||
                                       ', код вида вклада БАРС='||dptvidd_     ||
                                       ', номер вклада='        ||nsc_         ||
                                       ', код ОКПО='            ||icod_ ||' - '||text_);
                      bc.subst_branch(branch_);
                    end if;
                  end;
                end loop;
              end if;

--            доверенные лица

              if length(doverennie_)>3 then
                bars_audit.info('create_dpstsAS - doverennie_='||doverennie_);
                tmp_ := doverennie_;
                doverlist_ := varchar2_list();
                if substr(tmp_,1,2)='{{' then -- несколько доверенных
                  tmp_ := substr(tmp_,2,length(tmp_)-2);
                  j_ := 0;
                  k_ := 1;
                  loop
                    i_ := instr(tmp_,'}',k_);
                    if i_=0 then
                      exit;
                    end if;
                    s_ := substr(tmp_,1,i_);
                    if aminc(s_,'{')-aminc(s_,'}')=0 then -- yes
                      j_ := j_+1;
                      doverlist_.extend(1);
                      doverlist_(j_) := substr(s_,2,length(s_)-2);
                      bars_audit.info('create_dpstsAS - doverlist_('||j_||')='||doverlist_(j_));
                      tmp_ := substr(tmp_,i_+1);
                      if substr(tmp_,1,1)=',' then
                        tmp_ := substr(tmp_,2);
                      end if;
                      if tmp_ is null or length(tmp_)<3 then
                        exit; -- больше доверенных лиц нет
                      else
                        k_ := 1;
                      end if;
                    else
                      k_ := k_+1;
                    end if;
                  end loop;
                else
                  j_ := 1;
                  doverlist_.extend(1);
                  doverlist_(1) := substr(tmp_,2,length(tmp_)-2);
                  bars_audit.info('create_dpstsAS - doverlist_(1)='||doverlist_(1));
                end if;

--              разбор списка доверенных лиц

                begin
                  execute immediate 'drop table asvo_dover';
                exception when OTHERS then
                  null;
                end;

                execute immediate 'create table asvo_dover (nmkd  varchar2(70),
                                                            dddov date        ,
                                                            sddov varchar2(8) ,
                                                            adrd  varchar2(70),
                                                            okpod varchar2(14),
                                                            teldd varchar2(20),
                                                            bdayd date        ,
                                                            serid varchar2(10),
                                                            nomed varchar2(20),
                                                            vidad varchar2(70),
                                                            ddavd date)';

--              for l_ in 1..j_
                for l_ in reverse 1..j_
                loop
                  tmp_ := doverlist_(l_);
--                bars_audit.info('create_dpstsAS - tmp_='||tmp_);
                  i_ := instr(tmp_,''',')+1;
                  y_ := instr(tmp_,'",')+1;
                  if y_>1 then
                    if i_=1 then
                      i_ := y_;
                    else
                      i_ := least(i_,y_);
                    end if;
                  end if;
                  nmkd_ := trim(substr(trim(substr(tmp_,2,i_-3)),1,70));
--                bars_audit.info('create_dpstsAS - nmkd_='||nmkd_);
                  tmp_ := substr(tmp_,i_+1);
                  i_ := instr(tmp_,',');
--                номер доверенного лица пропускаю (не нужен)
                  tmp_ := substr(tmp_,i_+1);
                  i_ := instr(tmp_,',');
                  if i_=0 then
                    dddov_ := null;
                    sddov_ := null;
                    bdayd_ := null;
                    adrd_  := null;
                    okpod_ := '000000000';
                    teldd_ := null;
                    serid_ := null;
                    nomed_ := null;
                    vidad_ := null;
                    ddavd_ := null;
                    goto fuck;
                  end if;
                  sddov_ := trim(substr(tmp_,7,8)); -- дата действия доверенности
--                bars_audit.info('create_dpstsAS - sddov_='||sddov_);
                  if length(sddov_)=8 then
                    begin
                      dddov_ := to_date(sddov_,'YYYYMMDD');
                    exception when OTHERS then
                      dddov_ := null;
                    end;
                  else
                    dddov_ := null;
                  end if;
                  tmp_ := substr(tmp_,i_+1);
--                bars_audit.info('create_dpstsAS - tmp_='||tmp_);
                  i_ := instr(tmp_,',');
                  sdayd_ := trim(substr(tmp_,7,8)); -- дата рождения дов.лица
--                bars_audit.info('create_dpstsAS - sdayd_='||sdayd_);
                  if length(sdayd_)=8 then
                    begin
                      bdayd_ := to_date(sdayd_,'YYYYMMDD');
                    exception when OTHERS then
                      bdayd_ := null;
                    end;
                  else
                    bdayd_ := null;
                  end if;
                  tmp_ := substr(tmp_,i_+1);
                  i_ := instr(tmp_,''',')+1;
                  y_ := instr(tmp_,'",')+1;
                  if y_>1 then
                    i_ := least(i_,y_);
                  end if;
                  adrd_ := trim(substr(trim(replace(substr(tmp_,1,i_-1),'''')),1,70)); -- адрес
--                bars_audit.info('create_dpstsAS - adrd_='||adrd_);
                  tmp_ := substr(tmp_,i_+1);
                  i_ := instr(tmp_,''',')+1;
                  y_ := instr(tmp_,'",')+1;
                  if y_>1 then
                    i_ := least(i_,y_);
                  end if;
                  okpod_ := trim(replace(substr(tmp_,1,i_-1),'''')); -- ОКПО
--                bars_audit.info('create_dpstsAS - okpod_='||okpod_);
                  tmp_ := substr(tmp_,i_+1);
                  begin
                    m_ := to_number(okpod_);
                  exception when OTHERS then
                    okpod_ := '000000000';
                  end;
                  if length(okpod_)=0 or okpod_ is null then
                    okpod_ := '000000000';
                  end if;
                  i_ := instr(tmp_,''',')+1;
                  y_ := instr(tmp_,'",')+1;
                  if y_>1 then
                    i_ := least(i_,y_);
                  end if;
                  teldd_ := trim(replace(substr(tmp_,1,i_-1),'''')); -- телефон
--                bars_audit.info('create_dpstsAS - teldd_='||teldd_);
                  tmp_ := substr(tmp_,i_+1);

--                "рихтовка" даты рождения
                  bdayd_ := CorrectBdayOkpo(bdayd_,okpod_);

                  rekv5_ := trim(substr(tmp_,2,length(tmp_)-2));

--                bars_audit.info('create_dpstsAS - rekv5_='||rekv5_);

                  if length(rekv5_)>0 then
                    tmp_ := rekv5_;
                    i_ := instr(tmp_,''',')+1;
                    y_ := instr(tmp_,'",')+1;
                    if y_>1 then
                      i_ := least(i_,y_);
                    end if;
                    serid_ := substr(tmp_,1,i_-1);
                    tmp_ := substr(tmp_,i_+1);
                    i_ := instr(tmp_,''',')+1;
                    y_ := instr(tmp_,'",')+1;
                    if y_>1 then
                      i_ := least(i_,y_);
                    end if;
                    serid_ := trim(replace(serid_,''''));
                    serid_ := replace(serid_,'-');
                    serid_ := replace(serid_,'.');
                    serid_ := replace(serid_,'0');
                    serid_ := replace(serid_,'1');
                    serid_ := replace(serid_,'2');
                    serid_ := replace(serid_,'3');
                    serid_ := replace(serid_,'4');
                    serid_ := replace(serid_,'5');
                    serid_ := replace(serid_,'6');
                    serid_ := replace(serid_,'7');
                    serid_ := replace(serid_,'8');
                    serid_ := replace(serid_,'9');
                    serid_ := substr(serid_,1,2);

                    if length(serid_)=2 then
                      begin
                        serid_ := kl.recode_passport_serial(serid_);
                      exception when OTHERS then
                        serid_ := null;
                      end;
                    else
                      serid_ := null;
                    end if;
--                  bars_audit.info('create_dpstsAS - serid_='||serid_);

                    nomed_ := substr(tmp_,1,i_-1);
                    tmp_ := substr(tmp_,i_+1);
                    i_ := instr(tmp_,''',')+1;
                    y_ := instr(tmp_,'",')+1;
                    if y_>1 then
                      i_ := least(i_,y_);
                    end if;

                    begin
                      nomed_ := trim(replace(nomed_,''''));
                    exception when OTHERS then
                      bars_audit.warning('create_dpstsAS - картотека='           ||
                                         substr(k.KKFFFACTUAL,1,2)||nvl(mark_,'')||
                                         ' файл='||k.KKFFFACTUAL                 ||
                                         ' nsc_='||nsc_                          ||
                                         ' id_=' ||id_                           ||
                                         ': отсутствует или ошибочна анкета клиента (4)');
                      nomed_ := null;
                      goto fuck;
                    end;

                    if length(nomed_)=6 then
                      begin
                        nomed_ := kl.recode_passport_number(nomed_);
                      exception when OTHERS then
                        nomed_ := null;
                      end;
                    else
                      nomed_ := null;
                    end if;
--                  bars_audit.info('create_dpstsAS - nomed_='||nomed_);

                    vidad_ := substr(tmp_,1,i_-1);
                    tmp_ := substr(tmp_,i_+1);
                    i_ := instr(tmp_,',');

                    vidad_ := trim(substr(trim(replace(vidad_,'''')),1,50));
--                  bars_audit.info('create_dpstsAS - vidad_='||vidad_);
                    if i_>0 then
                      sdavd_ := substr(tmp_,1,i_-1);
                    else
                      sdavd_ := tmp_;
                    end if;
                    sdavd_ := trim(replace(sdavd_,''''));
--                  bars_audit.info('create_dpstsAS - sdavd_='||sdavd_);

                    if substr(sdavd_,1,4)='STOD' and
                       length(sdavd_)=length(replace(sdavd_,' ')) then
                      begin
                        ddavd_ := to_date(substr(ddavd_,7,8),'YYYYMMDD');
                      exception when others then
                        ddavd_ := null;
                      end;
                      if ddavd_<to_date('19000101','YYYYMMDD') then
                        ddavd_ := null;
                      end if;
                    else
                      ddavd_ := null;
                    end if;
                  else
                    serid_ := null;
                    nomed_ := null;
                    vidad_ := null;
                    ddavd_ := null;
                  end if;
<<fuck>> null;
                  execute immediate 'insert
                                     into   asvo_dover (nmkd ,
                                                        dddov,
                                                        sddov,
                                                        adrd ,
                                                        okpod,
                                                        teldd,
                                                        bdayd,
                                                        serid,
                                                        nomed,
                                                        vidad,
                                                        ddavd)
                                                values ('''||replace(nmkd_,'''','''''')||''' ,
                                                        to_date('''||dddov_||''')            ,
                                                        '''||replace(sddov_,'''','''''')||''',
                                                        '''||replace(adrd_,'''','''''')||''' ,
                                                        '''||replace(okpod_,'''','''''')||''',
                                                        '''||replace(teldd_,'''','''''')||''',
                                                        to_date('''||bdayd_||''')            ,
                                                        '''||replace(serid_,'''','''''')||''',
                                                        '''||replace(nomed_,'''','''''')||''',
                                                        '''||replace(vidad_,'''','''''')||''',
                                                        to_date('''||ddavd_||'''))';

                end loop;

                sql2_:='select nmkd ,
                               dddov,
                               sddov,
                               adrd ,
                               okpod,
                               teldd,
                               bdayd,
                               serid,
                               nomed,
                               vidad,
                               ddavd
                        from   asvo_dover
                        order by 3 desc';

                open cur2_ for sql2_;

                loop
                  fetch cur2_ into nmkd_ ,
                                   dddov_,
                                   sddov_,
                                   adrd_ ,
                                   okpod_,
                                   teldd_,
                                   bdayd_,
                                   serid_,
                                   nomed_,
                                   vidad_,
                                   ddavd_;
                  exit when cur2_%notfound;

                  dddov_ := to_date(sddov_,'YYYYMMDD');

                  RNKdover_ := null;

                  begin
                    dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'     ,
                                             p_clientname       => nmkd_    ,  --p_clientname       IN  customer.nmk%type,
                                             p_client_name      => null     ,  --p_client_name      IN  varchar2 default null,
                                             p_client_surname   => null     ,  --p_client_surname   IN  varchar2 default null,
                                             p_client_patr      => null     ,  --p_client_patr      IN  varchar2 default null,
                                             p_country          => 804      ,  --p_country          IN  customer.country%type,
                                             p_index            => null     ,  --p_index            IN  varchar2,
                                             p_obl              => null     ,  --p_obl              IN  varchar2,
                                             p_district         => null     ,  --p_district         IN  varchar2,
                                             p_settlement       => null     ,  --p_settlement       IN  varchar2,
                                             p_adress           => null     ,  --p_adress           IN  varchar2,
                                             p_fulladdress      => adrd_    ,  --p_fulladdress      IN  customer.adr%type,
                                             p_clientcodetype   => null     ,  --p_clientcodetype   IN  customer.tgr%type,
                                             p_clientcode       => okpod_   ,  --p_clientcode       IN  customer.okpo%type,
                                             p_doctype          => 1        ,  --p_doctype          IN  person.passp%type,
                                             p_docserial        => serid_   ,  --p_docserial        IN  person.ser%type,
                                             p_docnumber        => nomed_   ,  --p_docnumber        IN  person.numdoc%type,
                                             p_docorg           => vidad_   ,  --p_docorg           IN  person.organ%type,
                                             p_docdate          => ddavd_   ,  --p_docdate          IN  person.pdate%type,
                                             p_clientbdate      => bdayd_   ,  --p_clientbdate      IN  person.bday%type,
                                             p_clientbplace     => null     ,  --p_clientbplace     IN  person.bplace%type,
                                             p_clientsex        => 0        ,  --p_clientsex        IN  person.sex%type,
                                             p_clientHomePh     => teldd_   ,  --p_clienthomeph     IN  person.teld%type,
                                             p_clientWorkPh     => null     ,  --p_clientworkph     IN  person.telw%type,
                                             p_clientname_gc    => null     ,  --p_clientname_gc    IN  customerw.value%type,
                                             p_resid_code       => 1        ,  --p_resid_code       IN  number,
                                             p_resid_index      => null     ,  --p_resid_index      IN  varchar2,
                                             p_resid_obl        => null     ,  --p_resid_obl        IN  varchar2,
                                             p_resid_district   => null     ,  --p_resid_district   IN  varchar2,
                                             p_resid_settlement => null     ,  --p_resid_settlement IN  varchar2,
                                             p_resid_adress     => null     ,  --p_resid_adress     IN  varchar2,
                                             p_clientid         => RNKdover_,  --p_clientid     IN OUT  number,
                                  /* null */ p_registrydate     => glbd_);     --p_registrydate     IN  date default null

                    update customer
                    set    notes='Доверенное лицо по вкладу '||nsc_
                    where  rnk=RNKdover_;
/*
                    kl.setCustomerAttr(RNKdover_,                           -- Rnk_    IN OUT customer.rnk%type,        -- Customer number
                                       3,                                   -- Custtype_      customer.custtype%type,   -- Тип клиента: 1-банк, 2-юр.лицо, 3-физ.лицо
                                       null,                                -- Nd_            customer.nd%type,         -- № договора
                                       nmkd_,                               -- Nmk_           customer.nmk%type,        -- Наименование клиента
                                       null,                                -- Nmkv_          customer.nmkv%type,       -- Наименование клиента международное
                                       null,                                -- Nmkk_          customer.nmkk%type,       -- Наименование клиента краткое
                                       adrd_,                               -- Adr_           customer.adr%type,        -- Адрес клиента
                                       5,                                   -- Codcagent_     customer.codcagent%type,  -- Характеристика
                                       804,                                 -- Country_       customer.country%type,    -- Страна
                                       99,                                  -- Prinsider_     customer.prinsider%type,  -- Признак инсайдера
                                       2,                                   -- Tgr_           customer.tgr%type,        -- Тип гос.реестра
                                       okpod_,                              -- Okpo_          customer.okpo%type,       -- ОКПО
                                       null,                                -- Stmt_          customer.stmt%type,       -- Формат выписки
                                       null,                                -- Sab_           customer.sab%type,        -- Эл.код
                                       trunc(sysdate),                      -- DateOn_        customer.date_on%type,    -- Дата регистрации
                                       null,                                -- Taxf_          customer.taxf%type,       -- Налоговый код
                                       null,                                -- CReg_          customer.c_reg%type,      -- Код обл.НИ
                                       null,                                -- CDst_          customer.c_dst%type,      -- Код район.НИ
                                       null,                                -- Adm_           customer.adm%type,        -- Админ.орган
                                       null,                                -- RgTax_         customer.rgtax%type,      -- Рег номер в НИ
                                       null,                                -- RgAdm_         customer.rgadm%type,      -- Рег номер в Адм.
                                       trunc(sysdate),                      -- DateT_         customer.datet%type,      -- Дата рег в НИ
                                       trunc(sysdate),                      -- DateA_         customer.datea%type,      -- Дата рег. в администрации
                                       null,                                -- Ise_           customer.ise%type,        -- Инст. сек. экономики
                                       null,                                -- Fs_            customer.fs%type,         -- Форма собственности
                                       null,                                -- Oe_            customer.oe%type,         -- Отрасль экономики
                                       null,                                -- Ved_           customer.ved%type,        -- Вид эк. деятельности
                                       null,                                -- Sed_           customer.sed%type,        -- Форма хозяйствования
                                       'Доверенное лицо по вкладу '||nsc_,  -- Notes_         customer.notes%type,      -- Примечание
                                       null,                                -- Notesec_       customer.notesec%type,    -- Примечание для службы безопасности
                                       null,                                -- CRisk_         customer.crisk%type,      -- Категория риска
                                       null,                                -- Pincode_       customer.pincode%type,    --
                                       null,                                -- RnkP_          customer.rnkp%type,       -- Рег. номер холдинга
                                       null,                                -- Lim_           customer.lim%type,        -- Лимит кассы
                                       null,                                -- NomPDV_        customer.nompdv%type,     -- № в реестре плат. ПДВ
                                       null,                                -- MB_            customer.mb%type,         -- Принадл. малому бизнесу
                                       1,                                   -- BC_            customer.bc%type,         -- Признак НЕклиента банка
                                       branch_,                             -- Tobo_          customer.tobo%type,       -- Код безбалансового отделения
                                       null);                               -- Isp_           customer.isp%type         -- Менеджер клиента (ответ. исполнитель)
                    kl.setPersonAttr(RNKdover_,  -- Rnk_    NUMBER,
                                     0        ,  -- Sex_    CHAR,
                                     1        ,  -- Passp_  NUMBER,
                                     serid_   ,  -- Ser_    VARCHAR2,
                                     nomed_   ,  -- Numdoc_ VARCHAR2,
                                     ddavd_   ,  -- PDate_  DATE,
                                     vidad_   ,  -- Organ_  VARCHAR2,
                                     bdayd_   ,  -- BDay_   DATE,
                                     null     ,  -- BPlace_ VARCHAR2,
                                     teldd_   ,  -- TelD_   VARCHAR2,
                                     null);      -- TelW_   VARCHAR2
*/
--                  if typeid_ is null then
                    dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                             12       ,   -- l_agrtype
                                             rnk_     ,   -- p_initcustid
                                             RNKdover_,   -- p_trustcustid
                                             null     ,   -- p_trustid
                                             null     ,   -- p_transferdpt
                                             null     ,   -- p_transferint
                                             null     ,   -- p_amountcash
                                             null     ,   -- p_amountcashless
                                             null     ,   -- p_datbegin
                                             dddov_   ,   -- p_datend
                                             null     ,   -- p_ratereqid
                                             null     ,   -- p_ratevalue
                                             null     ,   -- p_ratedate
                                             null     ,   -- p_denomamount
                                             null     ,   -- p_denomcount
                                             null     ,   -- p_denomref
                                             null     ,   -- p_comissref
                                             null     ,   -- p_docref
                                             -13      ,   -- p_comissreqid
                                             agrmntid_);  -- p_agrmntid
--                  else
--                    dpt_social.p_supplementary_agreement(dptid_   ,
--                                                         21       , -- доверенное лицо
--                                                         RNKdover_,
--                                                         trustid_);
--                  end if;
                  exception when OTHERS then
                    if sqlerrm like '%DPT-00228%' then
                      null;
                    else
                      p_code := p_code+1;
                      text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                      toroot;
                      bars_audit.error(p_errmask                ||'(6): '      ||
                                       'код ТВБВ АСВО='         ||k.FFF        ||
                                       ', файл='                ||k.KKFFFACTUAL||
                                       ', код картотеки='       ||kkmark_      ||
                                       ', код вида вклада БАРС='||dptvidd_     ||
                                       ', номер вклада='        ||nsc_         ||
                                       ', код ОКПО='            ||icod_ ||' - '||text_);
                      bc.subst_branch(branch_);
                    end if;
                  end;
                end loop;

                close cur2_;

                begin
                  execute immediate 'drop table asvo_dover';
                exception when OTHERS then
                  null;
                end;

              end if;

--            здесь УЖЕ "замочены" наследники и доверенные лица

              delete
              from   INT_RATN
              where  acc=accdepo_;

--            проставляем дату, по которую были начислены проценты (datn_-1)?
--            добавлено 30.03: в INT_ACCN поле STP_DAT --> dDatEnd_-1 !!!

--            update INT_ACCN
--            set    acr_dat=datn_,     -- datn_-1 (было так, это НЕПРАВИЛЬНО)
--                   stp_dat=dDatEnd_-1 -- однако правильнее (!!!) чем datn_-1
--            where  acc=accdepo_;

-- было так   if fl_dubl_>0                                               and
-- было так      dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ and
-- было так      cnt_>0 and date_>datb_ then
              if fl_dubl_>0                                                         and
                 ((term_type_=2 and
                   dDatEnd_>dpt.f_duration(dato_,duration_max_,duration_days_max_)) or
                  (term_type_=1 and
                   dDatEnd_!=dpt.f_duration(dato_,duration_,duration_days_)))       and
                 cnt_>0                                                             and
                 date_>datb_ then
                update INT_ACCN
                set    stp_dat=date_-1,
                       acr_dat=gl.bdate  -- дату последнего начисления %% берём
                where  acc=accdepo_;     -- НЕ из АСВО, а СТРОГО банковскую
              else
                update INT_ACCN
                set    stp_dat=dDatEnd_-1,
                       acr_dat=gl.bdate  -- дату последнего начисления %% берём
                where  acc=accdepo_;     -- НЕ из АСВО, а СТРОГО банковскую
              end if;

--            если шкала=null (т.е. шкал НЕТ), то берём percent_
--            иначе последнюю в зависимости от суммы остатка ost_
--            (если ost_>=шкалы то берём соответствующий процент)

/*
              if l_array.count>0 then
                for i_ in 1..l_array.count
                loop
                  if l_array(i_).prcskalm_ is null then
                    prcdate_ := l_array(i_).prcdatem_;
                  elsif ost_>l_array(i_).prcskalm_ then
                    percent_ := l_array(i_).prcstavm_;
                    prcdate_ := l_array(i_).prcdatem_;
                  end if;
                end loop;
              else
                prcdate_ := trunc(sysdate);
              end if;
*/

--            prcdate_ := trunc(sysdate);
              prcdate_ := datp_;

              insert
              into int_ratn (acc ,
                             id  ,
                             bdat,
                             ir  ,
                             idu)
                     values (accdepo_                ,
                             1                       ,
                             prcdate_                ,
--                           percent_                ,
                             percent_+nvl(prbonus_,0),
                             1);

--            пишем доп. параметры по счёту депозита

--            bc.subst_branch(branch_);

--            добавлено 30.03: в ACCOUNTS поле MDATE --> dDatEnd_ !!!

--            if fl_dubl_>0                                               and
--               dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ and
--               cnt_>0 and date_>datb_ then
              if fl_dubl_>0                                                         and
                 ((term_type_=2 and
                   dDatEnd_>dpt.f_duration(dato_,duration_max_,duration_days_max_)) or
                  (term_type_=1 and
                   dDatEnd_!=dpt.f_duration(dato_,duration_,duration_days_)))       and
                 cnt_>0                                                             and
                 date_>datb_ then
                update accounts
                set    nlsalt=nsc_,
                       mdate=date_
                where  acc=accdepo_;
              else
                update accounts
                set    nlsalt=nsc_,
                       mdate=dDatEnd_
                where  acc=accdepo_;
              end if;

              if npr_>0 then
                select acra
                into   accperc_
                from   int_accn
                where  acc=accdepo_ and
                       id=1;
              else
                select acrb
                into   accperc_
                from   int_accn
                where  acc=accdepo_ and
                       id=1;

                select nbs
                into   nbsacrb_
                from   accounts
                where  acc=accperc_;

                if nbsacrb_<>'3500' then
                  select acra
                  into   accperc_
                  from   int_accn
                  where  acc=accdepo_ and
                         id=1;
                end if;
              end if;

--            if fl_dubl_>0                                               and
--               dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ and
--               cnt_>0 and date_>datb_ then
              if fl_dubl_>0                                                         and
                 ((term_type_=2 and
                   dDatEnd_>dpt.f_duration(datp_,duration_max_,duration_days_max_)) or
                  (term_type_=1 and
                   dDatEnd_!=dpt.f_duration(datp_,duration_,duration_days_)))       and
                 cnt_>0                                                             and
                 date_>datb_ then
                update accounts
                set    nlsalt=nsc_,
                       mdate=date_
                where  acc=accperc_;
              else
                update accounts
                set    nlsalt=nsc_,
                       mdate=dDatEnd_
                where  acc=accperc_;
              end if;

              if substr(attr_,1,1)='h' then -- Заарештований
                update accounts
                set    blkd=10,
                       blkk=10
                where  acc=accdepo_;
                update accounts
                set    blkd=10,
                       blkk=10
                where  acc=accperc_;
              end if;

              if substr(attr_,1,1)='Q' then -- Блоковані всі
                update accounts
                set    blkd=2,
                       blkk=2
                where  acc=accdepo_;
                update accounts
                set    blkd=2,
                       blkk=2
                where  acc=accperc_;
              end if;

              if instr(attr_,'R')>0 then -- ставим счёт капитализации вклада
                begin
                  select nls,
                         trim(substr(nms,1,38))
                  into   nlsb_,
                         namb_
                  from   accounts
                  where  acc=accdepo_;
                exception when others then
                  nlsb_ := null;
                end;

                if nlsb_ is not null then
                  update int_accn
                  set    kvb=dptkv_,
                         nlsb=nlsb_,
                         namb=namb_,
                         mfob=gl.amfo
                  where  acc=accdepo_;
                end if;
              end if;

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'NSC_A' ,
                              nsc_);                 -- номер сберкнижки АСВО

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'KKASV' ,
                              kkmark_);              -- код картотеки АСВО

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'KKFFA' ,
                              k.KKFFFACTUAL);        -- реальное имя DBF-файлов вклада

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              '%ASVO' ,
                              to_char(percent_));    -- процент АСВО по вкладу

              if prbonus_ is not null then
                insert
                into accountsw (acc,
                                tag,
                                value)
                        values (accdepo_,
                                '%BONU' ,
                                to_char(prbonus_));  -- бонус к проценту по вкладу
              end if;

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'KOTLD' ,
                              nlsKOTLOdepo_);        -- котловой счёт картотеки депозита

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'KOTLN' ,
                              nlsKOTLOperc_);        -- котловой счёт картотеки начисленных %%

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'KOTLZ' ,
                              nlsKOTLOperz_);        -- котловой счёт картотеки зачисленных %%

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'OST_D' ,
                              to_char(ost_));        -- остаток АСВО по вкладу (в коп.)

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'PRV_D' ,
                              to_char(prv_));        -- сумма выплаченных %% (в коп.)

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'NPR_D' ,
                              to_char(npr_));        -- сумма начисленных %% (в коп.)

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'ZPR_D' ,
                              to_char(zpr_));        -- сумма зачисленных %% (в коп.)

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'NBS_D' ,
                              to_char(nbsdepo_));    -- балансовый счёт депозита

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'NBS_N' ,
                              to_char(nbsperc_));    -- балансовый счёт начисленных %%

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'NBS_Z' ,
                              to_char(nbsperz_));    -- балансовый счёт зачисленных %%

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'OB22D' ,
                              to_char(ob22depo_));   -- ОБ22 счёта депозита

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'OB22N' ,
                              to_char(ob22perc_));   -- ОБ22 счёта начисленных %%

              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              'OB22Z' ,
                              to_char(ob22perz_));   -- ОБ22 счёта зачисленных %%

--            ещё обязательно проставить OB22 в SPRECPARAM_INT по
--            открытым счетам депозита и начисленных процентов!!! -- ЭТО ХЕРНЯ
--                                                                !! надо брать
--                                                                   из вида
--                                                                   вклада
--                                    (поэтому ниже закомментарено)  АБС БАРС

--            begin
--              insert
--              into   specparam_int (acc,
--                                    ob22)
--                            values (accdepo_,
--                                    ob22depo_);
--            EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
--              update specparam_int
--              set    ob22=ob22depo_
--              where  acc=accdepo_;
--            end;

--            begin
--              insert
--              into   specparam_int (acc,
--                                    ob22)
--                            values (accperc_,
--                                    ob22perc_);
--            EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
--              update specparam_int
--              set    ob22=ob22perc_
--              where  acc=accperc_;
--            end;

              commit;

              bc.set_context;

              text_ := 'Открыт депозит (без загрузки счёта суммой вклада АСВО)';
              if prbonus_ is not null then
                 text_ := text_||' + бонус';
              end if;
              migraAS.asvo_log_write(kkmark_      ,
                                     dptvidd_     ,
                                     dptkv_       ,
                                     p_tvbv       ,
                                     k.KKFFFACTUAL,
                                     branch_      ,
                                     nlsKOTLOdepo_,
                                     nlsKOTLOperc_,
                                     nlsKOTLOperz_,
                                     id_          ,
                                     nsc_         ,
                                     fio_         ,
                                     icod_        ,
                                     seria_       ,
                                     nomer_       ,
                                     ost_         ,
                                     prv_         ,
                                     npr_         ,
                                     zpr_         ,
                                     0            ,
                                     text_        ,
                                     sysdate      ,
                                     rnk_         ,
                                     dptid_);
              p_open := p_open+1;

              if mod(p_open,10000)=1 then

--              сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

                BEGIN
                  DBMS_JOB.SUBMIT (job       => Job_                    ,
                                   what      => 'migraAS.tableDP_stats;',
                                   next_date => sysdate                 ,
                                   interval  => null                    ,
                                   no_parse  => FALSE);
                exception when others then
                  bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
                END;

              end if;

            end if;
          end if;
          goto normgeroiobxod;

<<kkmarkmnogovidd>> null;

          if nvl(instr(kkmarkm_,','||kkmark_||','),0)=0 then
            p_code := p_code+1;
            text_  := 'У кода картотеки АСВО более одного соответствия виду вклада БАРС';
            toroot;
            bars_audit.error(p_errmask         ||'(19): '      ||
                             'код ТВБВ АСВО='  ||k.FFF         ||
                             ', файл='         ||k.KKFFFACTUAL ||
                             ', код картотеки='||kkmark_||' - '||text_);
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            kkmarkm_ := kkmarkm_||kkmark_||',';
          end if;
          flkart_ := 9999999;
          goto normgeroiobxod;

<<netvidadeposita>> null;

          if nvl(instr(netvida_,','||kkmark_||','),0)=0 then
            p_code := p_code+1;
            text_  := 'Нет соответствия кода картотеки АСВО виду вклада БАРС';
            toroot;
            bars_audit.error(p_errmask         ||'(1): '       ||
                             'код ТВБВ АСВО='  ||k.FFF         ||
                             ', файл='         ||k.KKFFFACTUAL ||
                             ', код картотеки='||kkmark_||' - '||text_);
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            netvida_ := netvida_||kkmark_||',';
          end if;
          flkart_ := 9999999;
          goto normgeroiobxod;

<<datbegbordatend>> null;

          p_code := p_code+1;
          text_  := 'Дата открытия вклада больше или равна даты окончания';
          toroot;
          bars_audit.error(p_errmask                ||'(18): '     ||
                           'код ТВБВ АСВО='         ||k.FFF        ||
                           ', файл='                ||k.KKFFFACTUAL||
                           ', код картотеки='       ||kkmark_      ||
                           ', код вида вклада БАРС='||dptvidd_     ||
                           ', номер вклада='        ||nsc_         ||
                           ', код ОКПО='            ||icod_ ||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
                                 k.KKFFFACTUAL,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          flkart_ := 9999999;
          goto normgeroiobxod;

<<netdatiotkritia>> null;

          p_code := p_code+1;
          text_  := 'Отсутствует дата открытия вклада АСВО';
          toroot;
          bars_audit.error(p_errmask                ||'(5): '      ||
                           'код ТВБВ АСВО='         ||k.FFF        ||
                           ', файл='                ||k.KKFFFACTUAL||
                           ', код картотеки='       ||kkmark_      ||
                           ', код вида вклада БАРС='||dptvidd_     ||
                           ', номер вклада='        ||nsc_         ||
                           ', код ОКПО='            ||icod_ ||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
                                 k.KKFFFACTUAL,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          flkart_ := 9999999;
          goto normgeroiobxod;

<<baddataotkritia>> null;

          p_code := p_code+1;
          text_  := 'Дата открытия вклада АСВО больше текущей банковской даты';
          bc.set_context;
          bars_audit.error(p_errmask                ||'(17): '     ||
                           'код ТВБВ АСВО='         ||k.FFF        ||
                           ', файл='                ||k.KKFFFACTUAL||
                           ', код картотеки='       ||kkmark_      ||
                           ', код вида вклада БАРС='||dptvidd_     ||
                           ', номер вклада='        ||nsc_         ||
                           ', код ОКПО='            ||icod_ ||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
                                 k.KKFFFACTUAL,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          flkart_ := 9999999;
          goto normgeroiobxod;

<<razniekodivalut>> null;

          if nvl(instr(raznkod_,','||kkmark_||','),0)=0 then
            p_code := p_code+1;
            text_  := 'Код валюты вклада АСВО не соответствует коду валюты вида вклада БАРС';
            bc.set_context;
            bars_audit.error(p_errmask                ||'(8): '        ||
                             'код ТВБВ АСВО='         ||k.FFF          ||
                             ', файл='                ||k.KKFFFACTUAL  ||
                             ', код картотеки='       ||kkmark_        ||
                             ', код вида вклада БАРС='||dptvidd_||' - '||text_);
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            raznkod_ := raznkod_||kkmark_||',';
          end if;
          flkart_ := 9999999;
          goto normgeroiobxod;

<<razniebalscheta>> null;

          if nvl(instr(raznbal_,','||kkmark_||','),0)=0 then
            p_code := p_code+1;
            text_  := 'Балансовый счёт вклада АСВО не равен балансовому счёту вида вклада БАРС';
            bc.set_context;
            bars_audit.error(p_errmask                ||'(21): '       ||
                             'код ТВБВ АСВО='         ||k.FFF          ||
                             ', файл='                ||k.KKFFFACTUAL  ||
                             ', код картотеки='       ||kkmark_        ||
                             ', код вида вклада БАРС='||dptvidd_||' - '||text_);
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
                                   k.KKFFFACTUAL,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            raznbal_ := raznbal_||kkmark_||',';
          end if;
          flkart_ := 9999999;

<<normgeroiobxod>> null;

        END;

<<ugezaimpotili>> null;

      end loop;
      close cur_;

      dbms_application_info.set_client_info(' ');

      if    flkart_=9999999 then
          flkart_ := 0;
      elsif flkart_>0       then
        if flkart_=flkall_  then
          flkart_ := 0;
        else
          flkart_ := 1;
        end if;
      elsif flkart_=0       then
          flkart_ := 2;
      end if;

      update ASVO_FFF_LOAD
      set    fl=flkart_
      where  KKFFFACTUAL=k.KKFFFACTUAL;
      commit;

    end loop;

--  for k in 1..vidd_flag.count
--  loop
--    update dpt_vidd
--    set    flag=0
--    where  vidd=vidd_flag(k).vidd;
--  end loop;

    bc.set_context;
    begin
      execute immediate 'update dpt_vidd
                         set    flag=0
                         where  vidd in (select vidd
                                         from   ASVO_TEMP_dpt_vidd_flag0)';
      commit;
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_vidd_flag0';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG enable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 enable';
    exception when OTHERS then
      null;
    end;

--  сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

    BEGIN
      DBMS_JOB.SUBMIT (job       => Job_                    ,
                       what      => 'migraAS.tableDP_stats;',
                       next_date => sysdate                 ,
                       interval  => null                    ,
                       no_parse  => FALSE);
    exception when others then
      bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
    END;

<<proverkineprosli>> null;

    bars_alerter(1);

--  execute immediate 'alter session set events ''10046 trace name context off''';

  exception when others then
    bars_audit.error(p_errmask||'(Z): неожиданная ошибка - '||sqlerrm||' '||dbms_utility.format_error_backtrace||' ('||migraas.header_version||' '||migraas.body_version||')');
    p_code := p_code+1;

  end create_dpstsAS;

/*
  -- 1) вычитать строку всех FFF для p_tvbv (otype='BRANCH' из ASVO_OBJ)
     1) в цикле идти по FFFAKTUAL и выбирать информацию из
        ASVO_AkkFFFAKTUAL и ASVO_SkkFFFAKTUAL
        kk - код картотеки + поле MARK таблицы ASVO_S
        a) для картотеки kk+MARK вычитать из ASVO_OBJ (oname='CFDictR')
           идентификатор картотеки
        b) вычитать вид депозита из DPT_VIDD_ASVO для kk+MARK
           если нет - выдать сообщение о невозможности импорта ...
        c) определить КОТЛОВОЙ счёт для kk+MARK
           (из НОВОГО справочника, который сделать)
           код ТВБВ - код подразделения
        d) дял otype='CFTILE' and oname='идентификатор картотеки' из ASVO_OBJ
           из поля TILE выбрать (распарсить)
           - бал.счёт депосчёта
           - код OB22 для депосчёта
           - бал.счёт начисл.%%
           - код OB22 для счёта начисл.%%
        e) выбрать из ASVO_A... и ASVO_S... реквизиты для карточки клиента
           и реквизиты для открываемых счетов
           A --> NSC + распарсить TILE (адрес, паспорт ...)
           S --> NSC, FIO, DATO, OST, PRV, NPR, ZPR, ICOD, DATP
        f) искать клиента по серии и номеру паспорта
           (если нет, открыть клиента), получить RNK клиента
        g) cформировать минимум два счёта для открытия (по маске)
           открыть счета, сформировать %% карточку,
           записать в поле accounts.NLSALT=NSC
           записать в ACCOUNTSW
           депо счёт  : NSC   - номер сберкнижки
                      : KOTEL - КОТЛОВОЙ счёт
                      : SUMMA - остаток на счёте (OST)
                      : ASVO6 - Imported from ASVO6.3
           счёт нач%% : SUMMA - остаток на счёте (NPR)

           сформировать номер договора депозита по следующему правилу:
           - для ТВБВ ищу бранч,
           - для бранча ищу его RNK (branch_parameters, tag='RNK')    = rnkbr_
           - для этого же бранча ищу номер текущего депозита+1 в бранче
                                    (branch_parameters, tag='DPTNUM') = dpnbr_
           - составляю dpt_deposit.ND=lpad(rnkbr_,6,'0')||'/'||dpnbr_

        h) открыть депозит
           - если нормально: update branch_parameters
                             set val=to_char(to_number(val)+1)
                             where tag='DPTNUM' and branch=бранч
*/

-- загрузка депозитов и процентов с котловых счетов (коза отвязанная)

  procedure load_ostcdptAS (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is
    TT_        oper.TT%type  :='АСВ';
    VOB_       oper.VOB%type :=6;
    REF_       oper.REF%type;
    KOTLD_     varchar2(14);
    KOTLN_     varchar2(14);
    KOTLZ_     varchar2(14);
    sumOSTD_   number;
    sumNPRD_   number;
    sumZPRD_   number;
    nlsNP_     varchar2(14);
    nmkd_      varchar2(38);
    nmsd_      varchar2(38);
    nmsn_      varchar2(38);
    nmsz_      varchar2(38);
    branch_    varchar2(32);
    kktokens_  varchar2_list;
    text_      varchar2(512);
    pd_        int;
    pn_        int;
    pz_        int;
    daos_      date;
    acc_       accounts.acc%type;

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;
    pd_    := 0;
    pn_    := 0;
    pz_    := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  bars_audit.info('load_ostcdptAS - @ branch_='||branch_);

--  депозиты

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

    for k in (select a.nls                 ,
                     a.kv                  ,
                     substr(a.nms,1,38) nms,
                     d.acc                 ,
                     d.limit               ,
                     d.deposit_id          ,
                     d.vidd                ,
                     d.nd                  ,
                     d.rnk
              from   dpt_deposit d,
                     accounts    a
              where  d.comments='Imported from ASVO6.3' and
                     d.acc=a.acc                        and
                     d.branch=branch_                   and
                     length(d.nd)-length(replace(d.nd,'_'))>=4)
    loop

--    bars_audit.info('load_ostcdptAS - 0 k.acc='||k.acc||', k.kv='||k.kv);

      begin
        select value
        into   KOTLD_
        from   accountsw
        where  tag='KOTLD' and
               acc=k.acc;
      exception when no_data_found then
        bars_audit.error(p_errmask||'(10): не найден котловой счёт для вклада '||
                         k.nd||' '||k.nls||'('||k.kv||') - '||sqlerrm||' '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofound;
      end;

      begin
        select trim(substr(nms,1,38)),
               daos                  ,
               acc
        into   nmsd_,
               daos_,
               acc_
        from   accounts
        where  nls=KOTLD_ and
               kv=k.kv    and
               DAZS is null;
      exception when OTHERS then
        if pd_=0 then
          bars_audit.error(p_errmask||'(1): не найден или закрыт счёт '||KOTLD_||'('||k.kv||') - '||
                           sqlerrm||' '||dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          pd_ := 1;
        end if;
--      rollback;
        goto nofound;
      end;

      if daos_>p_dasvox then
        update accounts
        set    daos=p_dasvox
        where  acc=acc_;
      end if;

--    bars_audit.info('load_ostcdptAS - 1 k.acc='||k.acc);

      GL.REF
           (REF_);

--    bars_audit.info('load_ostcdptAS - 2');

      GL.IN_DOC3
           (REF_ , TT_    , VOB_   , REF_   , SYSDATE, GL.BDATE, 1,
            k.KV , k.limit, k.KV   , k.limit, NULL   , GL.BDATE, GL.BDATE,
            nmsd_, KOTLD_ , gl.AMFO,
            k.NMS, k.NLS  , gl.AMFO,
            'Розкриття депозитного рахунку з АСВО',
            NULL, null, null, NULL, NULL, 0, NULL, null);

--    bars_audit.info('load_ostcdptAS - 3');

      begin
        GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLD_, k.limit,
                                         k.KV, k.NLS , k.limit);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(5): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofound;
      end;

--    bars_audit.info('load_ostcdptAS - 4');

      begin
        select to_number(value)
        into   sumNPRD_
        from   accountsw
        where  tag='NPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumNPRD_ := 0;
      end;

      if sumNPRD_>0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;

        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(2): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofound;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdptAS - 5a');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLN_, sumNPRD_,
                                         k.KV, nlsNP_, sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(6): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofound;
        end;
      end if;

      if sumNPRD_<0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;

        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(3): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofound;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acrb=a.acc;

--      bars_audit.info('load_ostcdptAS - 5b');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 0, k.KV, KOTLN_, -sumNPRD_,
                                         k.KV, nlsNP_, -sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(7): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofound;
        end;

      end if;

--    bars_audit.info('load_ostcdptAS - 6  k.acc='||k.acc);

      begin
        select to_number(value)
        into   sumZPRD_
        from   accountsw
        where  tag='ZPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumZPRD_ := 0;
      end;

      if sumZPRD_>0 then

        select value
        into   KOTLZ_
        from   accountsw
        where  tag='KOTLZ' and
               acc=k.acc;

        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsz_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLZ_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pz_=0 then
            bars_audit.error(p_errmask||'(4): не найден или закрыт счёт '||KOTLZ_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pz_ := 1;
          end if;
          rollback;
          goto nofound;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdptAS - 7');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLZ_, sumZPRD_,
                                         k.KV, nlsNP_, sumZPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(8): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofound;
        end;

      end if;

--    bars_audit.info('load_ostcdptAS - 8');

      begin
        GL.PAY
             (2, REF_, GL.BDATE);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(9): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofound;
      end;

--    bars_audit.info('load_ostcdptAS - 9');

      insert
      into   operw (ref,
                    tag,
                    value)
            values (REF_   ,
                    'ND   ',
                    k.deposit_id);

      update dpt_deposit
      set    comments='*Imported from ASVO6.3'
      where  deposit_id=k.deposit_id;

      delete
      from   oper_ext
      where  ref=REF_;

      commit;

--    kkmark_||'_'||p_tvbv||'_'||id_||'_'||nsc_

--    bars_audit.info('load_ostcdptAS - k.nd='||k.nd);

      migraAS.get_tokens(k.nd,'_',kktokens_);
      text_ := 'Счёт депозита загружен';
      migraAS.asvo_log_write(kktokens_(1),
                             k.vidd      ,
                             k.kv        ,
                             p_tvbv      ,
                             null        ,
                             branch_     ,
                             KOTLD_      ,
                             KOTLN_      ,
                             KOTLZ_      ,
                             kktokens_(3),
                             kktokens_(4),
                             null        ,
                             null        ,
                             null        ,
                             null        ,
                             k.limit     ,
                             null        ,
                             sumNPRD_    ,
                             sumZPRD_    ,
                             1           ,
                             text_       ,
                             sysdate     ,
                             k.rnk       ,
                             k.deposit_id);
      p_open := p_open+1;

<<nofound>> null;

      dbms_application_info.set_client_info('load='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

--  dbms_application_info.set_client_info('pereocenka');

--  migraAS.pereocenka(p_tvbv,p_open,p_code,p_errmask,p_dasvox);
--  commit;

    bc.set_context;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end load_ostcdptAS;

--

  procedure drop_depositAS (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    i_       int;
--  pdpt_    dpt_deposit.deposit_id%type;

    type     t_otkat is record (deposit_id  dpt_deposit.deposit_id%type,
                                branch      dpt_deposit.branch%type,
                                acc         accounts.acc%type,
                                acra        accounts.acc%type,
                                rnk         customer.rnk%type,
                                rnk_tr      customer.rnk%type);
    type     t_listo is table of t_otkat;
    otkat    t_listo;
    sid_     number;
    serial_  number;
    job_     number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;
--  pdpt_  := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  убиение СВОЕЙ сессии сбора статистики (JOB)

    begin
      select job
      into   job_
      from   user_jobs
      where  what='migraAS.tableDP_stats;' and
             rownum<2;
      begin
        DBMS_JOB.REMOVE(job_);
        commit;
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

    begin
      select s.sid,
             s.serial#
      into   sid_,
             serial_
      from   V$OPEN_CURSOR c,
             V$SESSION     s
      where  rownum<2          and
             s.status='ACTIVE' and
             c.sid=s.sid       and
             c.sql_text like 'SELECT 3711 FROM DUAL%';
      begin
        execute immediate 'ALTER SYSTEM KILL SESSION '''||to_char(sid_)||','||to_char(serial_)||''' IMMEDIATE';
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

--  выключение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' DISABLE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(1): '||k.table_name||' '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_migr (dpt NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acc_migr (acc NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acr_migr (acr NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnk_migr (rnk NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnt_migr (rnt NUMBER)';
    exception when OTHERS then
      null;
    end;

    bc.subst_branch(branch_);

    begin
      select * bulk collect
      into   otkat
      from   (select d.deposit_id,
                     d.branch    ,
                     a.acc       ,
                     i.acra      ,
                     a.rnk       ,
                     t.rnk_tr
              from   dpt_deposit d,
                     dpt_trustee t,
                     int_accn    i,
                     accounts    a
              where  d.comments='Imported from ASVO6.3'        and
                     d.acc=i.acc                               and
                     d.branch=branch_                          and
                     length(d.nd)-length(replace(d.nd,'_'))>=4 and
                     replace(substr(d.nd,4,4),'_')=p_tvbv      and
                     a.acc=d.acc                               and
                     t.dpt_id(+)=d.deposit_id                  and
                     a.ostc=0)
      for    update nowait
      order  by deposit_id;
    exception when OTHERS then
      bars_audit.error(p_errmask||'(1): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      goto maybelock;
    end;

    for k in 1..otkat.count
    loop
      execute immediate 'insert
                         into   ASVO_TEMP_dpt_migr (dpt)
                                            values ('||to_char(otkat(k).deposit_id)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acc_migr (acc)
                                            values ('||to_char(otkat(k).acc)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acr_migr (acr)
                                            values ('||to_char(otkat(k).acra)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_rnk_migr (rnk)
                                            values ('||to_char(otkat(k).rnk)||')';
      if otkat(k).rnk_tr is not null then
        execute immediate 'insert
                           into   ASVO_TEMP_rnt_migr (rnt)
                                              values ('||to_char(otkat(k).rnk_tr)||')';
      end if;
    end loop;

    begin
      execute immediate 'select count(1) from (select distinct dpt from ASVO_TEMP_dpt_migr)' into p_open;
    exception when OTHERS then
      p_open := 0;
    end;

    begin

--    execute immediate 'delete from dpt_jobs_log       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_blank          where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_inheritors     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_payments       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_depositw       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_agreements     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_trustee        where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_bonus_requests where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_requests       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit        where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_accounts       where dptid      in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_clos   where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_all    where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_techaccounts   where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';

      execute immediate 'delete from tmp_intarc          where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn_arc        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from acr_docs            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_accn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accountsw           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldob              where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldoa              where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts            where acc in (select acc from ASVO_TEMP_acc_migr)';

      execute immediate 'delete from acr_docs            where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accountsw           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldob              where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldoa              where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts            where acc in (select acr from ASVO_TEMP_acr_migr)';

--    здесь добавить удаление клиентов без счетов (otkat(k).RNK+otkat(k).RNK_TR)

      execute immediate 'select (select count(*) from accounts    where rnk    in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from customer    where rnkp   in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from dpt_trustee where rnk_tr in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from cc_deal     where rnk    in (select rnk from ASVO_TEMP_rnk_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from person             where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(2): delete from customer where rnk in (select rnk from ASVO_TEMP_rnk_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

      execute immediate 'select (select count(*) from accounts    where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from customer    where rnkp in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from dpt_trustee where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from cc_deal     where rnk  in (select rnt from ASVO_TEMP_rnt_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from person             where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(3): delete from customer where rnk in (select rnt from ASVO_TEMP_rnt_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

    exception when OTHERS then
      bars_audit.error(p_errmask||'(2): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      p_open := 0;
      rollback;
      goto maybelock;
    end;

    bc.set_context;

--  execute immediate 'delete
--                     from   ACCM_AGG_MONBALS
--                     where  acc in (select acc
--                                    from   ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_QUEUE_BALANCES
--                     where  acc in (select acc
--                                    from   ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_SNAP_BALANCES
--                     where  acc in (select acc
--                                    from   ASVO_TEMP_ACC)';

--  begin
--    execute immediate 'DROP TABLE ASVO_TEMP_ACC';
--  exception when OTHERS then
--    null;
--  end;

--  dbms_application_info.set_client_info(' ');

    update ASVO_FFF_LOAD
    set    fl=0
    where  FFF=p_tvbv;

    delete
    from   asvo_log
    where  FFF=p_tvbv;

    commit;

<<maybelock>> null;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

--  включение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' ENABLE NOVALIDATE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(4): '||k.table_name||' '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    bars_alerter(1);

  end drop_depositAS;

--

  procedure drop_ostcdptAS (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    TT_      oper.TT%type := 'АСВ';

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  откат документов по развороту вкладов (BAK)

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

    for k in (select o.ref,
                     w.value dptid
              from   oper  o,
                     operw w
              where  o.tt=TT_         and
                     o.ref=w.ref      and
                     w.tag='ND   '    and
                     o.sos=5          and
                     o.vdat=gl.bdate  and
                     o.branch=branch_ and
                     substr(o.nam_b,instr(o.nam_b,'_')+1,
                            instr(o.nam_b,'_',1,2)-instr(o.nam_b,'_')-1)=p_tvbv
              )
    loop

      ful_bak(k.ref);

      bars_audit.info(substr(p_errmask,length(p_errmask)-6)||': ful_bak '||k.ref);

      update dpt_deposit
      set    comments=substr(comments,2)
      where  deposit_id=k.dptid;

--    update social_contracts
--    set    details=substr(details,2)
--    where  contract_id=k.dptid;

      commit;

      p_open := p_open+1;

      dbms_application_info.set_client_info('drop='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

    bc.set_context;

    delete
    from   asvo_log
    where  FFF=p_tvbv and fl=1;

    commit;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end drop_ostcdptAS;

--

  procedure load_pay_asvoK (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  IS

    branch_  BRANCH.BRANCH%TYPE;
    TT_      oper.TT%type := 'АСВ';
    nms_     accounts.NMS%type;
    BRA_     accounts.BRANCH%type;
    REF_     int;
    s_       number;
    isp_     INT;

--  разбор котловых счетов по мигрированным картотекам

  begin

    bars_alerter(0);

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

    p_open := 0;
    p_code := 0;

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

    for k in (select rowid              RI,
                     NVL(kv,GL.BASEVAL) KV,
                     kk                   ,
                     ref_DEPO             ,
                     NLS0_DEPO            ,
                     NLS_DEPO             ,
                     ref_PROCN            ,
                     NLS0_PROCN           ,
                     NLS_PROCN            ,
                     ref_PROCZ            ,
                     NLS0_PROCZ           ,
                     NLS_PROCZ
              from   asvo_nls
              where  tvbv=p_tvbv
             )
    loop

--    ТЕЛО
      if k.ref_DEPO is null and k.NLS0_DEPO is not null then
        begin
          select ostc            ,
                 substr(nms,1,38),
                 branch          ,
                 isp
          into   s_  ,
                 nms_,
                 BRA_,
                 isp_
          from   accounts
          where  kv=K.KV         and
                 nls=k.NLS0_DEPO and
                 ostc>0          and
                 ostc=ostb;
          GL.REF(REF_);
          GL.IN_DOC3(REF_,tt_,6,REF_,SYSDATE,GL.BDATE,1,K.KV,S_,K.KV,S_,null,
                     GL.BDATE,GL.BDATE,NMs_,k.NLS0_DEPO,gl.AMFO,
                     'Котловий по вкладу',k.NLS_DEPO,gl.AMFO,
                     'Мiграцiя карт.№ '||k.KK||' Вклад. Бранч '||BRA_,NULL,
                     null,null,null,null,0,null,null);
          GL.PAYV(0,REF_,GL.BDATE,TT_,1,K.KV,k.NLS0_DEPO,S_,K.KV,k.NLS_DEPO,S_);
          update asvo_nls
          set    ref_DEPO=REF_
          where  rowid=k.RI;
          GL.PAY(2,REF_,GL.BDATE);
          p_open := p_open+1;
        EXCEPTION WHEN no_data_found THEN
--        p_code := p_code+1;
          bars_audit.warning(substr(p_errmask,1,length(p_errmask)-3)||'warn(1): котловой '
                             ||k.NLS0_DEPO||'('||k.kv||
                             ') не найден или остаток на счёте<=0 или плановый остаток не равен фактическому - '||
                             sqlerrm||' - '||dbms_utility.format_error_backtrace);
          null;
                  WHEN OTHERS THEN
          p_code := p_code+1;
          bars_audit.error(p_errmask||'(2): котловой '||k.NLS0_DEPO||'('||k.kv||') '||
                           sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

--    ПРОЦЕНТЫ НАЧИСЛЕННЫЕ
      if k.ref_PROCN is null and k.NLS0_PROCN is not null then
        begin
          select ostc            ,
                 substr(nms,1,38),
                 branch          ,
                 isp
          into   s_  ,
                 nms_,
                 BRA_,
                 isp_
          from   accounts
          where  kv=K.KV          and
                 nls=k.NLS0_PROCN and
                 ostc>0           and
                 ostc=ostb;
          GL.REF(REF_);
          GL.IN_DOC3(REF_,tt_,6,REF_,SYSDATE,GL.BDATE,1,K.KV,S_,K.KV,S_,null,
                     GL.BDATE,GL.BDATE,NMs_,k.NLS0_PROCN,gl.AMFO,
                     'Котловий по НАР.%%',k.NLS_PROCN,gl.AMFO,
                     'Мiграцiя карт.№ '||k.KK||' НАР.% Бранч '||BRA_,NULL,
                     null,null,null,null,0,null,null);
          GL.PAYV(0,REF_,GL.BDATE,TT_,1,K.KV,k.NLS0_PROCN,S_,K.KV,k.NLS_PROCN,S_);
          update asvo_nls
          set    ref_PROCN=REF_
          where  rowid=k.RI;
          GL.PAY(2,REF_,GL.BDATE);
          p_open := p_open+1;
        EXCEPTION WHEN no_data_found THEN
--        p_code := p_code+1;
          bars_audit.warning(substr(p_errmask,1,length(p_errmask)-3)||'warn(3): котловой '
                             ||k.NLS0_PROCN||'('||k.kv||
                             ') не найден или остаток на счёте<=0 или плановый остаток не равен фактическому - '||
                             sqlerrm||' - '||dbms_utility.format_error_backtrace);
          null;
                  WHEN OTHERS THEN
          p_code := p_code+1;
          bars_audit.error(p_errmask||'(4): котловой '||k.NLS0_PROCN||'('||k.kv||') '||
                           sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

--    ПРОЦЕНТЫ ЗАЧИСЛЕННЫЕ
      if k.ref_PROCZ is null and k.NLS0_PROCZ is not null then
        begin
          select ostc            ,
                 substr(nms,1,38),
                 branch          ,
                 isp
          into   s_  ,
                 nms_,
                 BRA_,
                 isp_
          from   accounts
          where  kv=K.KV          and
                 nls=k.NLS0_PROCZ and
                 ostc>0           and
                 ostc=ostb;
          GL.REF(REF_);
          GL.IN_DOC3(REF_,tt_,6,REF_,SYSDATE,GL.BDATE,1,K.KV,S_,K.KV,S_,null,
                     GL.BDATE,GL.BDATE,NMs_,k.NLS0_PROCZ,gl.AMFO,
                     'Котловий по ЗАР.%%',k.NLS_PROCZ,gl.AMFO,
                     'Мiграцiя карт.№ '||k.KK||' ЗАР.% Бранч '||BRA_,NULL,
                     null,null,null,null,0,null,null);
          GL.PAYV(0,REF_,GL.BDATE,TT_,1,K.KV,k.NLS0_PROCZ,S_,K.KV,k.NLS_PROCZ,S_);
          update asvo_nls
          set    ref_PROCZ=REF_
          where  rowid=k.RI;
          GL.PAY(2,REF_,GL.BDATE);
          p_open := p_open+1;
        EXCEPTION WHEN no_data_found THEN
--        p_code := p_code+1;
          bars_audit.warning(substr(p_errmask,1,length(p_errmask)-3)||'warn(5): котловой '
                             ||k.NLS0_PROCZ||'('||k.kv||
                             ') не найден или остаток на счёте<=0 или плановый остаток не равен фактическому - '||
                             sqlerrm||' - '||dbms_utility.format_error_backtrace);
          null;
                  WHEN OTHERS THEN
          p_code := p_code+1;
          bars_audit.error(p_errmask||'(6): котловой '||k.NLS0_PROCZ||'('||k.kv||') '||
                           sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;
      dbms_application_info.set_client_info('load='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;
    COMMIT;
--  dbms_application_info.set_client_info('pereocenka');
--  migraAS.pereocenka(p_tvbv,p_open,p_code,p_errmask,p_dasvox);
--  commit;
    bc.set_context;
    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end load_pay_asvoK;

--

  procedure drop_pay_asvoK (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    TT_      oper.TT%type := 'АСВ';

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  откат документов по сворачиванию КОТЛОВЫХ счетов (BAK)

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

    for k in (select ref
              from   oper
              where  tt=TT_                                                                                                                      and
                     sos=5                                                                                                                       and
                     branch=branch_                                                                                                              and
                     vdat=gl.bdate                                                                                                               and
                     (substr(nlsb,1,length(nlsb)-1)=(select distinct substr(nls_depo, 1,length(nls_depo) -1) from asvo_nls where tvbv=p_tvbv) or
                      substr(nlsb,1,length(nlsb)-1)=(select distinct substr(nls_procn,1,length(nls_procn)-1) from asvo_nls where tvbv=p_tvbv))   and
                     nazn like 'Мiграцiя карт.№ %'
             )
    loop
      ful_bak(k.ref);
      bars_audit.info(substr(p_errmask,length(p_errmask)-6)||': ful_bak '||k.ref);
      commit;
      p_open := p_open+1;
      dbms_application_info.set_client_info('drop='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

    bc.set_context;

    update asvo_nls
    set    REF_DEPO =null,
           REF_PROCN=null,
           REF_PROCZ=null
    where  tvbv=p_tvbv;
    commit;
    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end drop_pay_asvoK;

--

  procedure get_tokens (p_tokenlist  varchar2,
                        p_separator  char    ,
                        p_tokens out varchar2_list)
  is
    l_tokenlist  varchar2(4096);
    l_tmp        varchar2(4096);
    l_indx       number;
    l_pos        number;
    i            number:=1;
  begin
--  убрать переводы каретки, табуляцию
    l_tokenlist := replace(replace(replace(p_tokenlist,chr(10),' '),chr(13),' '),chr(9),' ');
    p_tokens    := varchar2_list();

    while (instr(l_tokenlist,p_separator)>0)
    loop
      p_tokens.extend(1);

      l_indx := 1;
      l_pos  := instr(l_tokenlist,p_separator,1,l_indx);
      l_tmp  := substr(l_tokenlist,1,l_pos-1);

--    пока разделитель заключен в скобки
--    while (instr(l_tmp,'(')>0 and instr(l_tmp,')')<=0)
--    loop
--      l_indx := l_indx+1;
--      l_pos  := instr(l_tokenlist,p_separator,1,l_indx);
--      l_tmp  := substr(l_tokenlist,1,l_pos-1);
--    end loop;

      p_tokens(i) := trim(l_tmp);
      i           := i+1;
      l_tokenlist := substr(l_tokenlist,l_pos+1);
    end loop;
    p_tokens.extend(1);
    p_tokens(i) := trim(l_tokenlist);
  end get_tokens;

--

  procedure asvo_log_write (p_KKMARK      in varchar2,
                            p_DPTVIDD     in number  ,
                            p_DPTKV       in number  ,
                            p_FFF         in varchar2,
                            p_KKFFFACTUAL in varchar2,
                            p_BRANCH      in varchar2,
                            p_KOTLODEPO   in varchar2,
                            p_KOTLOPERC   in varchar2,
                            p_KOTLOPERZ   in varchar2,
                            P_ID          in varchar2,
                            p_NSC         in varchar2,
                            p_FIO         in varchar2,
                            p_OKPO        in varchar2,
                            p_SERPASP     in varchar2,
                            p_NUMPASP     in varchar2,
                            p_OST         in number  ,
                            p_PRV         in number  ,
                            p_NPR         in number  ,
                            p_ZPR         in number  ,
                            p_FL          in number  ,
                            p_TEXT        in varchar2,
                            p_datlog      in date    ,
                            p_rnk         in number  ,
                            p_dptid       in number)
  is
  pragma autonomous_transaction;

  begin
    begin
      insert
      into asvo_log (KKMARK     ,
                     DPTVIDD    ,
                     DPTKV      ,
                     FFF        ,
                     KKFFFACTUAL,
                     BRANCH     ,
                     KOTLODEPO  ,
                     KOTLOPERC  ,
                     KOTLOPERZ  ,
                     IDASVO     ,
                     NSC        ,
                     FIO        ,
                     OKPO       ,
                     SERPASP    ,
                     NUMPASP    ,
                     OST        ,
                     PRV        ,
                     NPR        ,
                     ZPR        ,
                     FL         ,
                     TEXT       ,
                     datlog     ,
                     rnk        ,
                     dptid)
             values (p_KKMARK     ,
                     p_DPTVIDD    ,
                     p_DPTKV      ,
                     p_FFF        ,
                     p_KKFFFACTUAL,
                     p_BRANCH     ,
                     p_KOTLODEPO  ,
                     p_KOTLOPERC  ,
                     p_KOTLOPERZ  ,
                     p_ID         ,
                     p_NSC        ,
                     p_FIO        ,
                     p_OKPO       ,
                     p_SERPASP    ,
                     p_NUMPASP    ,
                     p_OST        ,
                     p_PRV        ,
                     p_NPR        ,
                     p_ZPR        ,
                     p_FL         ,
                     p_TEXT       ,
                     p_datlog     ,
                     p_rnk        ,
                     p_dptid);
      commit;
    exception when OTHERS then
      bars_audit.warning('asvo_log_write - warn(1): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
    end;
  end asvo_log_write;

--

  function header_version return varchar2
  is
  begin
    return 'Package header migraAS '||version_header;
  end header_version;

--

  function body_version return varchar2
  is
  begin
    return 'Package body migraAS '||version_body;
  end body_version;

--

  procedure copy_as65_tables (p_tvbv in char)
  is
  begin

    if p_tvbv is not null and length(p_tvbv)=3 then
      for k in (select table_name
                from   user_tables
                where  table_name like 'ASVO_65_'||p_tvbv||'_%'              and
                       (length(table_name)-length(replace(table_name,'_'))=3 or
                       (length(table_name)-length(replace(table_name,'_'))=4 and
                        substr(table_name,-8)='CFP_GACC')))
      loop
        begin
          execute immediate 'drop table '||k.table_name;
        exception when OTHERS then
          null;
        end;
      end loop;

      for k in (select table_name
                from   user_tables
                where  table_name like 'ASVO_65_%'                           and
                       (length(table_name)-length(replace(table_name,'_'))=2 or
                       (length(table_name)-length(replace(table_name,'_'))=3 and
                        substr(table_name,-8)='CFP_GACC'))
                )
      loop
        begin
          execute immediate
                  'create table '||substr(k.table_name,1,8)||p_tvbv||
                                   substr(k.table_name,8)||
                  ' as select * from '||k.table_name;
        exception when OTHERS then
          null;
        end;
      end loop;

--    индекс по клиентам

      begin
        execute immediate 'DROP INDEX PK_ASVO_65_CLIENT';
      exception when OTHERS then
        bars_audit.warning('copy_as65_tables - warn(0): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
      end;

      begin
        execute immediate 'CREATE INDEX PK_ASVO_65_CLIENT ON ASVO_65_CLIENT
                           (ID_CL)
                           LOGGING
                           NOPARALLEL';
      exception when OTHERS then
        bars_audit.warning('copy_as65_tables - warn(1): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
      end;
    end if;

  end copy_as65_tables;

--

  procedure NLStoSPR65 (p_open in out number  ,
                        p_code in out number  ,
                        p_errmask     varchar2,
                        p_nlsmask     varchar2,
                        p_dfNLS       varchar2)
  is

    fff_               char(3);
    cnt_               number;
    mfo_               varchar2(12);
    nls_depo_          varchar2(15);
    nls_procn_         varchar2(15);
    nls_procz_         varchar2(15);

    type               cur is ref cursor;
    cur_               cur;
    sql_               varchar2(1024);

    deposit_cod_       varchar2(18);
    deposit_name_      varchar2(50);
    vidd_              number;
    type_name_         varchar2(70);
    kv_                number;
    nls0_depo_         varchar2(15);
    nls0_procn_        varchar2(15);
    nls0_procz_        varchar2(15);

    nlsmask_           varchar2(15);
    podr_              char(2);

    len_DEPOSIT_NAME_  number;
    len_TYPE_NAME_     number;

  begin

    select val
    into   mfo_
    from   params
    where  par='GLB-MFO';

    select data_length
    into   len_DEPOSIT_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='DEPOSIT_NAME';

    select data_length
    into   len_TYPE_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='TYPE_NAME';

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMP65_NLS' and
             column_name in ('NAMEV'  ,
                             'KODASVO',
                             'KODBAR' ,
                             'NAMEBAR',
                             'VAL'    ,
                             'TVBV'   ,
                             'VKLAD'  ,
                             'NARAXP' ,
                             'ZARAXP');
      if cnt_<>9 then
        bars_audit.error(p_errmask||'(7): неверна структура '||p_dfNLS);
        p_code := p_code+1;
        goto konec6;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMP65_NLS'
               )
      loop
        if (k.column_name='NAMEV'   and (k.data_type<>'VARCHAR2' or k.data_length>len_DEPOSIT_NAME_))                              or
           (k.column_name='KODASVO' and (k.data_type<>'VARCHAR2' or k.data_length>18))                                             or
           (k.column_name='KODBAR'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision>3   or k.data_scale<>0)) or
           (k.column_name='NAMEBAR' and (k.data_type<>'VARCHAR2' or k.data_length>len_TYPE_NAME_))                                 or
           (k.column_name='VAL'     and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision>3   or k.data_scale<>0)) or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3))                                              or
           (k.column_name='VKLAD'   and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='NARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='ZARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) then
          bars_audit.error(p_errmask||'(8): неверна структура '||p_dfNLS);
          p_code := p_code+1;
          goto konec6;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_temp65_nls'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(22): в '||p_dfNLS||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec6;
      end;

      delete
      from    DPT_VIDD_ASVO
      where   fff=fff_;

      delete
      from    asvo_nls
      where   tvbv=fff_;

      if p_nlsmask is null then
        begin
          select p.podr
          into   podr_
          from   asvo_fff_branch b,
                 asvo_fff_podr   p
          where  b.fff=fff_ and
                 p.fff=substr(b.branch,12,3);
          nlsmask_ := '3739K9'||podr_||'000FFFN';
        exception when OTHERS then
          if    mfo_='333368' then
            nlsmask_ := '3739K916000FFFN';
          elsif mfo_='303398' then
            nlsmask_ := '3739K900000FFFN';
          else
            nlsmask_ := '3739K000000FFFN';
          end if;
        end;
      else
        nlsmask_ := p_nlsmask;
      end if;

      nls_depo_  := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','0'));
      nls_procn_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));
      nls_procz_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));

--    for k in (select distinct
--                     namev             deposit_name,
--                     to_char(kodasvo)  deposit_cod ,
--                     kodbar            vidd        ,
--                     namebar           type_name   ,
--                     val               kv          ,
--                     substr(tvbv,1,3)  fff         ,
--                     to_char(vklad)    nls0_depo   ,
--                     to_char(naraxp)   nls0_procn  ,
--                     to_char(zaraxp)   nls0_procz
--              from   asvo_temp65_nls
--             )
--    loop

      sql_:='select distinct
                    namev           ,
                    kodasvo         ,
                    kodbar          ,
                    namebar         ,
                    val             ,
                    substr(tvbv,1,3),
                    to_char(vklad)  ,
                    to_char(naraxp) ,
                    to_char(zaraxp)
             from   asvo_temp65_nls';

      open cur_ for sql_;

      loop
        fetch cur_ into deposit_name_,
                        deposit_cod_ ,
                        vidd_        ,
                        type_name_   ,
                        kv_          ,
                        fff_         ,
                        nls0_depo_   ,
                        nls0_procn_  ,
                        nls0_procz_;
        exit when cur_%notfound;

        if type_name_ is null then
          begin
            select type_name
            into   type_name_
            from   dpt_vidd
            where  vidd=vidd_ and
                   rownum<2;
          exception when no_data_found then
            type_name_ :=null;
          end;
        end if;

        if nls0_depo_  is not null and length(nls0_depo_)<5 then
          nls0_depo_ :=null;
        end if;
        if nls0_procn_ is not null and length(nls0_procn_)<5 then
          nls0_procn_:=null;
        end if;
        if nls0_procz_ is not null and length(nls0_procz_)<5 then
          nls0_procz_:=null;
        end if;

        insert
        into   DPT_VIDD_ASVO (VIDD        ,
                              TYPE_NAME   ,
                              DEPOSIT_COD ,
                              DEPOSIT_NAME,
                              KV          ,
                              FFF)
                      values (vidd_        ,
                              type_name_   ,
                              deposit_cod_ ,
                              deposit_name_,
                              kv_          ,
                              fff_);
        p_open := p_open+1;

        delete
        from   asvo_nls
        where  TVBV               =fff_                 and
               KK                 =deposit_cod_         and
               NLS_DEPO           =nls_depo_            and
               NLS_PROCN          =nls_procn_           and
               NLS_PROCZ          =nls_procz_           and
               NLS0_DEPO          =nls0_depo_           and
               nvl(NLS0_PROCN,'0')=nvl(nls0_procn_,'0') and
               nvl(NLS0_PROCZ,'0')=nvl(nls0_procz_,'0') and
               KV                 =kv_;

        insert
        into   asvo_nls (TVBV      ,
                         KK        ,
                         NLS_DEPO  ,
                         NLS_PROCN ,
                         NLS_PROCZ ,
                         NLS0_DEPO ,
                         NLS0_PROCN,
                         NLS0_PROCZ,
                         KV)
                 values (fff_        ,
                         deposit_cod_,
                         nls_depo_   ,
                         nls_procn_  ,
                         nls_procz_  ,
                         nls0_depo_  ,
                         nls0_procn_ ,
                         nls0_procz_ ,
                         kv_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(9): ошибка обработки '||p_dfNLS||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(10): ошибка обработки '||p_dfNLS||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(11): ошибка обработки '||p_dfNLS||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec6>> null;

  end NLStoSPR65;

--

  procedure NOTtoSPR65 (p_open in out number  ,
                        p_code in out number  ,
                        p_errmask     varchar2,
                        p_dfNOT       varchar2)
  is

    fff_    char(3);
    cnt_    number;

    type    cur is ref cursor;
    cur_    cur;
    sql_    varchar2(1024);

    kknot_  varchar2(18);

  begin

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMP65_NOT' and
             column_name in ('KODASVO',
                             'TVBV');
      if cnt_<>2 then
        bars_audit.error(p_errmask||'(17): неверна структура '||p_dfNOT);
        p_code := p_code+1;
        goto konec4;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMP65_NOT'
               )
      loop
        if (k.column_name='KODASVO' and (k.data_type<>'VARCHAR2' or k.data_length>18)) or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3)) then
          bars_audit.error(p_errmask||'(18): неверна структура '||p_dfNOT);
          p_code := p_code+1;
          goto konec4;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_temp65_NOT'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(23): в '||p_dfNOT||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec4;
                when no_data_found then
        begin
          execute immediate 'select distinct
                                    substr(TVBV,1,3)
                             from   asvo_temp65_nls'
                             into   fff_;
        exception when TOO_MANY_ROWS then
          bars_audit.error(p_errmask||'(24): '||p_dfNOT||' невозможно определить ТВБВ для загрузки данных...');
          p_code := p_code+1;
          goto konec4;
        end;
      end;

      delete
      from    ASVO_FFF_NOT
      where   fff=fff_;

--    for k in (select distinct
--                     substr(tvbv,1,3) fff,
--                     to_char(kodasvo) kknot
--              from   asvo_temp65_NOT
--             )
--    loop

      sql_:='select distinct
                    substr(tvbv,1,3),
                    kodasvo
             from   asvo_temp65_NOT';

      open cur_ for sql_;

      loop
        fetch cur_ into fff_  ,
                        kknot_;
        exit when cur_%notfound;

        insert
        into   ASVO_FFF_NOT (FFF,
                             KKNOT)
                     values (fff_,
                             kknot_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(19): ошибка обработки '||p_dfNOT||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(20): ошибка обработки '||p_dfNOT||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(21): ошибка обработки '||p_dfNOT||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec4>> null;

  end NOTtoSPR65;

--

  procedure PRCtoSPR65 (p_open in out number  ,
                        p_code in out number  ,
                        p_errmask     varchar2,
                        p_dfPRC       varchar2)
  is

    fff_      char(3);
    cnt_      number;

    type      cur is ref cursor;
    cur_      cur;
    sql_      varchar2(1024);

    kkmark_   varchar2(18);
    shkala_   number(10,2);
    datperc_  date;
    percent_  number(10,4);

  begin

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMP65_PRC' and
             column_name in ('KODASVO',
                             'TVBV'   ,
                             'SHKALA' ,
                             'DATPRC' ,
                             'PERCN');
      if cnt_<5 then
        bars_audit.error(p_errmask||'(12): неверна структура '||p_dfPRC);
        p_code := p_code+1;
        goto konec5;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMP65_PRC'
               )
      loop
        if (k.column_name='KODASVO' and (k.data_type<>'VARCHAR2' or k.data_length>18))                     or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3))                      or
           (k.column_name='SHKALA'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_scale<>2)) or
           (k.column_name='DATPRC'  and (k.data_type<>'DATE'))                                             or
           (k.column_name='PERCN'   and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_scale<2 or k.data_scale>4)) then
          bars_audit.error(p_errmask||'(13): неверна структура '||p_dfPRC);
          p_code := p_code+1;
          goto konec5;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_temp65_prc'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(23): в '||p_dfPRC||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec5;
      end;

      delete
      from    ASVO_FFF_PERCENT
      where   fff=fff_;

--    for k in (select distinct
--                     substr(tvbv,1,3) fff    ,
--                     kodasvo          kkmark ,
--                     shkala                  ,
--                     datprc           datperc,
--                     percn            percent
--              from   asvo_temp_prc
--             )
--    loop

      sql_:='select distinct
                    substr(tvbv,1,3),
                    to_char(kodasvo),
                    shkala          ,
                    datprc          ,
                    percn
             from   asvo_temp65_prc';

      open cur_ for sql_;

      loop
        fetch cur_ into fff_    ,
                        kkmark_ ,
                        shkala_ ,
                        datperc_,
                        percent_;
        exit when cur_%notfound;

        insert
        into   ASVO_FFF_PERCENT (FFF    ,
                                 KKMARK ,
                                 SHKALA ,
                                 DATPERC,
                                 PERCENT)
                         values (fff_    ,
                                 kkmark_ ,
                                 shkala_ ,
                                 datperc_,
                                 percent_);

        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(14): ошибка обработки '||p_dfPRC||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(15): ошибка обработки '||p_dfPRC||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(16): ошибка обработки '||p_dfPRC||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec5>> null;

  end PRCtoSPR65;

--

  procedure create_dptAS65 (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    type                cur is ref cursor;
    cur_                cur;
    curn_               cur;
    curd_               cur;
    sql_                varchar2(4000);
    sqln_               varchar2(4000);
    sqld_               varchar2(4000);
    nsc_                varchar2(14);
    fio_                varchar2(50);
    dato_               date;
    ost_                number;
    prv_                number;
    npr_                number;
    zpr_                number;
    mark_               varchar2(1);
    attr_               varchar2(64);
--  ver_                number;
    id_                 varchar2(8);
    icod_               varchar2(14);
    datp_               date;
--  datn_               date;
--  tile_               varchar2(32764);
--  kkall_              varchar2(32764);
--  kkallG_             varchar2(32764);
--  kkallZ_             varchar2(32764);
--  kkel_               varchar2(1000);
--  kkidtile_           varchar2(32764);
--  kktemp_             varchar2(32764);
    branch_             varchar2(30);
    i_                  int;
--  y_                  int;
--  z_                  int;
--  j_                  int;
--  k_                  int;
--  l_                  int;
--  m_                  int;
--  o_                  int;
--  nls6pos_            char(1);
--  podr_               char(2);
--  kktokens_           varchar2_list;
--  doverlist_          varchar2_list;
--  naslelist_          varchar2_list;
--  FiliT_              varchar2(32);
    nlsKOTLOdepo_       varchar2(14);
    nlsKOTLOperc_       varchar2(14);
    nlsKOTLOperz_       varchar2(14);
--  kkid_               varchar2(12);
    kkmark_             varchar2(18);
    nbsdepo_            varchar2(4);
    ob22depo_           varchar2(2);
    dptvidd_            number;
    dptkv_              number;
    nbsperc_            varchar2(4);
    ob22perc_           varchar2(2);
    nbsperz_            varchar2(4);
    ob22perz_           varchar2(2);
    prcdate_            date;
    prcdateTEK_         date;
    prcstav_            number;
    prcskal_            number;
    prcskalTEK_         number;
--  percent_            varchar2(20);
    percent_            number;
    percenz_            number;
    prbonus_            number;

--  type                t_rec is record (prcdatem_ date,
--                                       prcstavm_ number,
--                                       prcskalm_ number);
--  type                t_array is table of t_rec index by binary_integer;
--  l_array             t_array;

    fl_                 number;
--  flkart_             number;
    flkall_             number;
    tmp_                varchar2(32764);
    prcdats_            varchar2(20);
    uliza_              varchar2(64);
    phone_              varchar2(1028);
    prcskas_            varchar2(32);
    s_                  varchar2(2048);
    sday_               varchar2(32);
    seria_              varchar2(32);
    nomer_              varchar2(32);
    seria_nomer_        varchar2(32);
    kevid_              varchar2(96);
    sdvid_              varchar2(32);
    tidok_              varchar2(16);
    city_               varchar2(256);
    bday_               date;
    david_              date;
    nPASP_              number;
    dom_                varchar2(1024);
    kvar_               varchar2(1024);
    kvarkvar_           varchar2(1024);
    index_              varchar2(1024);
    obl_                varchar2(1024);
    rajon_              varchar2(1024);
    rnk_                number;
    accdepo_            number;
    accperc_            number;
    text_               varchar2(1024);
    address_            varchar2(1024);
    fulladdress_        varchar2(1024);
    glbd_               date;
    sex_                int;

    dptid_              number;
--  typeid_             number;
--  agencyid_           number;
--  contractacc_        number;

--  sDatEnd_            varchar2(128);
    dDatEnd_            date;
    dDatEnd1_           date;
    dDatEnd2_           date;

--  nasledniki_         varchar2(32764);
--  doverennie_         varchar2(32764);
--  nasle_              varchar2(32764);
--  dover_              varchar2(32764);
--  rekv5_              varchar2(32764);

    nmkn_               varchar2(70);
    nmkd_               varchar2(70);
    okpon_              varchar2(64);
    okpod_              varchar2(64);

    RNKdover_           number;
--  sdayd_              varchar2(64);
--  sdavd_              varchar2(64);
    bdayd_              date;
    ddavd_              date;
    adrd_               varchar2(128);
    teldd_              varchar2(64);
    serid_              varchar2(64);
    nomed_              varchar2(64);
    vidad_              varchar2(64);
    fulladdressd_       varchar2(256);
    kvard_              varchar2(1024);
    kvardkvard_         varchar2(1024);
    sexd_               int;
    serid_nomed_        varchar2(32);
    id_cld_             number;
    ulizd_              varchar2(64);
    rajnd_              varchar2(1024);
    cityd_              varchar2(256);
    inded_              varchar2(1024);
    domd_               varchar2(1024);

    RNKnasle_           number;
--  sdayn_              varchar2(64);
--  sdavn_              varchar2(64);
    bdayn_              date;
    ddavn_              date;
    adrn_               varchar2(128);
    teldn_              varchar2(64);
    serin_              varchar2(64);
    nomen_              varchar2(64);
    vidan_              varchar2(64);
    fulladdressn_       varchar2(256);
    kvarn_              varchar2(1024);
    kvarnkvarn_         varchar2(1024);
    sexn_               int;
    serin_nomen_        varchar2(32);
    id_cln_             number;
    ulizn_              varchar2(64);
    rajnn_              varchar2(1024);
    cityn_              varchar2(256);
    inden_              varchar2(1024);
    domn_               varchar2(1024);

--  pensTIPosz_         char(1);
--  TIPosz_             char(1);

--  ND_                 varchar2(35);
--  trustid_            number;

    agrmntid_           dpt_agreements.agrmnt_id%type;
    duration_           dpt_vidd.duration%type;
    duration_days_      dpt_vidd.duration_days%type;
    term_type_          dpt_vidd.term_type%type;
    fl_dubl_            dpt_vidd.fl_dubl%type;
    cnt_                number;
    datb_               date;
    date_               date;
    type_cod_           dpt_vidd.type_cod%type;
--  diti_               number;

    nbsacrb_            char(4);
    oszfind_            int;
    sddov_              varchar2(64);
    dddov_              date;

    auid_               number;
    glauid_             number;

    netvida_            varchar2(32764);
    kkmarkm_            varchar2(32764);
    raznkod_            varchar2(32764);
    raznbal_            varchar2(32764);

--  j1_                 number;
--  j2_                 number;
--  j3_                 number;

    ID_CL_              number;
    typv_               number;
    ID_RH_              number;
    kv_                 number;
    bsd_                char(4);
    srok_               number;

    datmet_             date;
    method_id_          dpt_vidd_extdesc.method_id%type;
    Job_                number;

    ls_attr_            varchar2(64);
    agrtype_            number;
    nlsb_               varchar2(14);
    namb_               varchar2(38);

    duration_max_       dpt_vidd.duration_max%type;
    duration_days_max_  dpt_vidd.duration_days_max%type;
    numdays_            number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;

    begin
      select branch
      into   branch_
      from   ASVO_FFF_BRANCH
      where  FFF=p_tvbv and
             rownum<2;
    exception when no_data_found then
      select '/'||val||'/'
      into   branch_
      from   params
      where  par='GLB-MFO';
    end;

--  проверки

--1.select * from asvo_nls where tvbv='060' and NLS_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(9): не описан в справочнике транзитный счёт депозита для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--2.select * from asvo_nls where tvbv='060' and NLS_PROCN is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCN is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(10): не описан в справочнике транзитный счёт начисленных %% для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--3.select * from asvo_nls where tvbv='060' and NLS_PROCZ is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCZ is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(11): не описан в справочнике транзитный счёт зачисленных %% для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--4.select * from asvo_nls where tvbv='060' and NLS0_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS0_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(12): не описан в справочнике КОТЛОВОЙ счёт депозитов для вида вклада (картотеки) АСВО - '||
                       k.kk);
    end loop;

--5.select n.tvbv, n.kk, n.nls0_depo, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_DEPO,'0')<>'0'
--   and n.nls0_depo=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_DEPO
--           and kv=n.kv and branch='/333368/000000/000060/')
--order by kk;

    for k in (select n.kk       ,
                     n.nls0_depo,
                     n.kv       ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv             and
                     nvl(n.NLS0_DEPO,'0')<>'0' and
                     n.nls0_depo=a.nls         and
                     n.kv=a.kv                 and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_DEPO      and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(13): КОТЛОВОЙ счёт депозитов ('||
                       k.nls0_depo||'('||to_char(k.kv)||
                       ') для вида вклада (картотеки) АСВО - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--6.select n.tvbv, n.kk, n.nls0_procn, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCN,'0')<>'0'
--   and n.nls0_procn=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCN
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procn,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCN,'0')<>'0' and
                     n.nls0_procn=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCN     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(14): КОТЛОВОЙ счёт начисленных %% ('||
                       k.nls0_procn||'('||to_char(k.kv)||
                       ') для вида вклада (картотеки) АСВО - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--7.select n.tvbv, n.kk, n.nls0_procz, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCZ,'0')<>'0'
--   and n.nls0_procz=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCZ
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procz,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCZ,'0')<>'0' and
                     n.nls0_procz=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCZ     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(15): КОТЛОВОЙ счёт зачисленных %% ('||
                       k.nls0_procz||'('||to_char(k.kv)||
                       ') для вида вклада (картотеки) АСВО - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

    if p_code>0 then
      goto proverkineprosli65; -- даже не начинать создание вкладов в АБС БАРС
    end if;

--8.проверка остатков на реальных котловых (ostc>0 and ostc=ostb)
--  возможно в будущем будет сделана, пока же ниже при ОПЛАТЕ(2) выдаётся

--9.наличие видов вкладов АСВО, описанных в DPT_VIDD_ASVO, в ASVO_NLS

    for k in (select deposit_cod kk
              from   dpt_vidd_asvo
              where  fff=p_tvbv and
                     deposit_cod not in (select kk
                                         from   asvo_nls
                                         where  tvbv=p_tvbv)
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(16): вид вклада (картотека) АСВО - '||
                       k.kk||' не описан в справочнике ASVO_NLS');
    end loop;

    if p_code>0 then
      goto proverkineprosli65; -- даже не начинать создание вкладов в АБС БАРС
    end if;

--  begin
--    select podr
--    into   podr_
--    from   ASVO_FFF_PODR
--    where  FFF=p_tvbv and
--           rownum<2;
--  exception when no_data_found then
--    podr_ := '16';
--  end;

/*
    if    substr(branch_,2,6)='333368' then
      nls6pos_ := '9';
--  elsif substr(branch_,2,6)='xxxxxx' then
--    nls6pos_ := 'y';
    end if;
*/
    netvida_ := ',';
    kkmarkm_ := ',';
    raznkod_ := ',';
    raznbal_ := ',';

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG enable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_vidd_flag0 (vidd NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'INSERT
                         INTO   ASVO_TEMP_dpt_vidd_flag0
                         select vidd
                         FROM   dpt_vidd
                         where  flag=0';
    exception when OTHERS then
      null;
    end;

    toroot;
    update dpt_vidd
    set    flag=1
    where  flag=0;
    commit;

    tokf;
    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;
    toroot;

    sql_:='select to_char(l.nsc)                                                   ,  -- nsc_
                  c.fio                                                            ,  -- fio_
                  l.dato                                                           ,  -- dato_
                  l.ost*100                                                        ,  -- ost_
                  l.prv*100                                                        ,  -- prv_
                  l.npr*100                                                        ,  -- npr_
                  l.zpr*100                                                        ,  -- zpr_
                  to_char(l.ID_LS)                                                 ,  -- id_
                  l.ID_CL                                                          ,  -- ID_CL_
                  c.inn                                                            ,  -- icod_
                  l.datp                                                           ,  -- datp_
                  nullif(l.datf,to_date(''30/12/1899'',''DD/MM/YYYY''))            ,  -- dDatEnd_
                  c.gender                                                         ,  -- sex_
                  c.passport                                                       ,  -- seria_nomer_
                  c.ps_type                                                        ,  -- tidok_
                  c.ps_given                                                       ,  -- kevid_
                  c.ps_datg                                                        ,  -- david_
                  c.phone                                                          ,  -- phone_
                  c.datb                                                           ,  -- bday_
                  c.adres                                                          ,  -- uliza_
                  c.ipost                                                          ,  -- index_
                  c.npunkt                                                         ,  -- city_
                  c.r_n                                                            ,  -- rajon_
                  c.home                                                           ,  -- dom_
                  c.appt                                                           ,  -- kvar_
                  l.typv                                                           ,  -- typv_
                  l.ID_RH                                                          ,  -- ID_RH_
                  to_char(l.typv)||''.''||to_char(l.id_cf)||''.''||to_char(l.id_rh),  -- kkmark_
                  co.i_va                                                          ,  -- kv_
                  l.ls_attr                                                           -- ls_attr_
           from   ASVO_65_LS     l,
                  ASVO_65_CLIENT c,
                --ASVO_65_SYMB   s,
                  ASVO_65_CONDV  co
           where  ((nvl(l.ost,0)>0 and nvl(l.ls_attr,'' '') not like ''%D%'' and
                                       nvl(l.ls_attr,'' '') not like ''%Z%'') or
                   (nvl(l.ost,0)=0 and nvl(l.ls_attr,'' '')=''Я'')) and
                  c.ID_CL=l.ID_CL                                   and
                  co.typv=l.typv                                    and
                  to_char(l.typv)||''.''||to_char(l.id_cf)||''.''||to_char(l.id_rh) not in (select nvl(kknot,''--'')
                                                                                            from   asvo_fff_not
                                                                                            where  fff='''||p_tvbv||''')';
    open cur_ for sql_;

--  flkart_ := 0;
    flkall_ := 0;
    loop

      fetch cur_ into nsc_        ,
                      fio_        ,
                      dato_       ,
                      ost_        ,
                      prv_        ,
                      npr_        ,
                      zpr_        ,
                      id_         ,
                      ID_CL_      ,
                      icod_       ,
                      datp_       ,
                      dDatEnd_    ,
                      sex_        ,
                      seria_nomer_,
                      tidok_      ,
                      kevid_      ,
                      david_      ,
                      phone_      ,
                      bday_       ,
                      uliza_      ,
                      index_      ,
                      city_       ,
                      rajon_      ,
                      dom_        ,
                      kvar_       ,
                      typv_       ,
                      ID_RH_      ,
                      kkmark_     ,
                      kv_         ,
                      ls_attr_;
      exit when cur_%notfound;

--    kkmark_ := to_char(typv_);

      dbms_application_info.set_client_info('open='||to_char(p_open)||
                                         ', error='||to_char(p_code));

      bars_audit.info(substr(p_errmask,1,length(p_errmask)-3)||'картотека='||kkmark_ ||
                                                    ' nsc_=' ||nsc_                  ||
                                                    ' ost_=' ||ost_                  ||
                                                    ' prv_=' ||prv_                  ||
                                                    ' npr_=' ||npr_                  ||
                                                    ' zpr_=' ||zpr_                  ||
                                                    ' icod_='||nvl(icod_,'000000000')||
                                                    ' fio_=' ||fio_);
      percent_      := null;
      prbonus_      := null;
      nbsdepo_      := null;
      ob22depo_     := null;
      nbsperc_      := null;
      ob22perc_     := null;
      nbsperz_      := null;
      ob22perz_     := null;
      nlsKOTLOdepo_ := null;
      nlsKOTLOperc_ := null;
      nlsKOTLOperz_ := null;
      seria_        := null;
      nomer_        := null;
      nPASP_        := 1;
      obl_          := null;
      fulladdress_  := null;
      address_      := null;
      dptvidd_      := null;
      dptkv_        := null;
      dptid_        := null;
--    nasledniki_   := null;
--    doverennie_   := null;
      rnk_          := null;

      flkall_ := flkall_+1;

      if datp_ is null then
        datp_ := dato_;
      end if;

      if dato_ is null then
        dato_ := datp_;
      end if;

      BEGIN

        if nvl(instr(kkmarkm_,','||kkmark_||','),0)>0 then
          goto kkmarkmnogovidd65;
        end if;

        if nvl(instr(netvida_,','||kkmark_||','),0)>0 then
          goto netvidadeposita65;
        end if;

        if nvl(instr(raznkod_,','||kkmark_||','),0)>0 then
          goto razniekodivalut65;
        end if;

        if nvl(instr(raznbal_,','||kkmark_||','),0)>0 then
          goto razniebalscheta65;
        end if;

        if datp_ is null then
          goto netdatiotkritia65;
        end if;

        begin
          select d.deposit_id
          into   dptid_
          from   accounts    a,
                 dpt_deposit d,
                 accountsw   w
          where  a.nlsalt=nsc_                                    and
                 d.nd=kkmark_||'_'||p_tvbv||'_'||id_||'_0_'||nsc_ and
--               d.dat_begin=dato_                                and
                 a.branch=branch_                                 and
                 a.branch=d.branch                                and
                 a.acc=d.acc                                      and
                 w.acc=a.acc                                      and
                 d.comments like '%Imported from ASVO6.5'         and
                 w.tag='KKASV'                                    and
                 w.value=kkmark_;
          goto ugezaimpotili65;
        exception when no_data_found then
          null;
        end;

        fl_ := 0;

        icod_  := TRIM(icod_);

        begin
          i_ := to_number(icod_);
        exception when OTHERS then
          icod_ := '000000000';
        end;
        if length(icod_)=0 or icod_ is null then
          icod_ := '000000000';
        end if;

        begin
          select distinct
                 d.vidd                ,
                 d.kv                  ,
                 d.bsd                 ,
                 nvl(d.duration,0)     ,
                 nvl(d.duration_days,0),
                 d.term_type           ,
                 d.fl_dubl             ,
                 d.type_cod            ,
                 nvl(de.method_id,1)   ,
                 d.duration_max        ,
                 d.duration_days_max
          into   dptvidd_      ,
                 dptkv_        ,
                 bsd_          ,
                 duration_     ,
                 duration_days_,
                 term_type_    ,
                 fl_dubl_      ,
                 type_cod_     ,
                 method_id_    ,
                 duration_max_ ,
                 duration_days_max_
          from   dpt_vidd_asvo    da,
                 dpt_vidd         d ,
                 dpt_vidd_extdesc de
          where  da.deposit_cod=kkmark_ and
                 da.vidd=d.vidd         and
                 da.fff=p_tvbv          and
                 de.type_id(+)=d.extension_id;
        exception when too_many_rows then
          goto kkmarkmnogovidd65;
                  when no_data_found then
          goto netvidadeposita65;
        end;

--      проверка на соответствие валюты вклада АСВО валюте вида вклада БАРС

        if (dptkv_=980 and kv_ is null) or  --гривна
           (dptkv_=980 and kv_=980)     or  --гривна
           (dptkv_=978 and kv_=978)     or  --евро
           (dptkv_=840 and kv_=840)     or  --доллар
           (dptkv_=124 and kv_=124)     or  --канадский доллар
           (dptkv_=985 and kv_=985)     or  --польские злотые
           (dptkv_=643 and kv_=643)     or  --рубль
           (dptkv_=826 and kv_=826)   then  --фунт
          null;
        else
          goto razniekodivalut65;
        end if;

        begin
          execute immediate 'select to_char(nsc),
                                    (case when subnsc>99 then
                                       chr(trunc(subnsc)/10+55)||
                                       to_char(mod(subnsc,10))
                                     else
                                       to_char(subnsc)
                                     end)
                             from   ASVO_65_CFP_GACC
                             where  typv='||to_char(typv_)||'   and
                                    ID_RH='||to_char(ID_RH_)||' and
                                    id_gacc=2                   and
                                    rownum<2'
                             into   nbsdepo_,
                                    ob22depo_;
        exception when no_data_found then
          nbsdepo_  := null;  -- балансовый счёт депозита
          ob22depo_ := null;  -- OB22  для счёта депозита
        end;

        begin
          execute immediate 'select to_char(nsc),
                                    (case when subnsc>99 then
                                       chr(trunc(subnsc)/10+55)||
                                       to_char(mod(subnsc,10))
                                     else
                                       to_char(subnsc)
                                     end)
                             from   ASVO_65_CFP_GACC
                             where  typv='||to_char(typv_)||'   and
                                    ID_RH='||to_char(ID_RH_)||' and
                                    id_gacc=3                   and
                                    rownum<2'
                             into   nbsperc_,
                                    ob22perc_;
        exception when no_data_found then
          nbsperc_  := null;  -- балансовый счёт начисл%%
          ob22perc_ := null;  -- OB22  для счёта начисл%%
        end;

        begin
          execute immediate 'select to_char(nsc),
                                    (case when subnsc>99 then
                                       chr(trunc(subnsc)/10+55)||
                                       to_char(mod(subnsc,10))
                                     else
                                       to_char(subnsc)
                                     end)
                             from   ASVO_65_CFP_GACC
                             where  typv='||to_char(typv_)||'   and
                                    ID_RH='||to_char(ID_RH_)||' and
                                    id_gacc=4                   and
                                    rownum<2'
                             into   nbsperz_,
                                    ob22perz_;
        exception when no_data_found then
          nbsperz_  := null;  -- балансовый счёт зачисл%%
          ob22perz_ := null;  -- OB22  для счёта зачисл%%
        end;

--      проверка на соответствие бал. счетов вклада АСВО и вида вклада БАРС

        if bsd_<>nbsdepo_ then
          goto razniebalscheta65;
        end if;

--      определение котловых счетов по таблице ASVO_NLS

        begin
          select NLS_DEPO ,
                 NLS_PROCN,
                 NLS_PROCZ
          into   nlsKOTLOdepo_,
                 nlsKOTLOperc_,
                 nlsKOTLOperz_
          from   ASVO_NLS
          where  TVBV=p_tvbv and
                 rownum<2    and
                 KK=kkmark_;
        exception when no_data_found then
          nlsKOTLOdepo_ := null;
          nlsKOTLOperc_ := null;
          nlsKOTLOperz_ := null;
        end;

--      определение процентной ставки по конкретному вкладу

        select decode(method_id_,0,dato_,datp_)
        into   datmet_
        from   dual;

--      if instr(ls_attr_,'n')>0 or instr(ls_attr_,'N')>0 then
        if instr(upper(ls_attr_),'N')>0 then
          percent_ := 0;
        else
          select max(percent) -- защита от баранячих %% (distinct не годится - max годится)
          into   percenz_
          from   ASVO_FFF_PERCENT
          where  FFF=p_tvbv     and
                 KKMARK=kkmark_ and
                 (nvl(datperc,to_date('01/01/1990','DD/MM/YYYY')),decode(nvl(shkala,0),1,0,nvl(shkala,0)))=
                 (select max(nvl(datperc,to_date('01/01/1990','DD/MM/YYYY'))),decode(nvl(shkala,0),1,0,nvl(shkala,0))
                  from   ASVO_FFF_PERCENT
                  where  FFF=p_tvbv                                               and
                         KKMARK=kkmark_                                           and
                         datmet_>=nvl(datperc,to_date('01/01/1990','DD/MM/YYYY')) and
                         decode(nvl(shkala,0),1,0,nvl(shkala,0))=(select max(decode(nvl(shkala,0),1,0,nvl(shkala,0)))
                                        from   ASVO_FFF_PERCENT
                                        where  ost_/100>=decode(nvl(shkala,0),1,0,nvl(shkala,0))        and
                                               datmet_>=nvl(datperc,to_date('01/01/1990','DD/MM/YYYY')) and
                                               FFF=p_tvbv                                               and
                                               KKMARK=kkmark_)
                  group by decode(nvl(shkala,0),1,0,nvl(shkala,0)));
          if percenz_ is null then
            begin
              select percent
              into   percenz_
              from   ASVO_FFF_PERCENT
              where  FFF=p_tvbv                     and
                     KKMARK=kkmark_                 and
                     nvl(datperc,to_date('01/01/1990','DD/MM/YYYY'))=
                     (select min(nvl(datperc,to_date('01/01/1990','DD/MM/YYYY')))
                             from   ASVO_FFF_PERCENT
                             where  FFF=p_tvbv and
                                    KKMARK=kkmark_) and
                     rownum<2;
            exception when no_data_found then
              percenz_ := null;
            end;
          end if;

          if percenz_ is not null then
            percent_ := percenz_;
          end if;
        end if;

--      корректировка даты рождения
        bday_ := CorrectBdayOkpo(bday_,icod_);

--      рихтовка даты завершения вклада для
--      видов вкладов "Дитячий" (картотека 20 и подобные)

        if type_cod_='CHIL' then
          if datp_ is not null then
            dDatEnd1_ := dpt.f_duration(datp_,duration_,duration_days_);
          else
            dDatEnd1_ := add_months(trunc(sysdate),-1200);
          end if;
          if bday_ is not null then
            dDatEnd2_ := add_months(bday_,192);
            dDatEnd_  := greatest(dDatEnd1_,dDatEnd2_);
          else
            dDatEnd_  := dDatEnd1_;
          end if;
        end if;

--      проверка на соответствие дат начала и окончания вклада

        if datp_>=dDatEnd_ then
          goto datbegbordatend65;
        end if;

--      серия и номер паспорта

        seria_nomer_ := replace(nvl(seria_nomer_,''),' ');
        if length(seria_nomer_)>=8 then
          seria_ := substr(substr(seria_nomer_,-8),1,2);
          nomer_ := substr(substr(seria_nomer_,-8),-6);
        end if;

--      пол (мужской - 1, женский - 2, неопределённый - 0)

        sex_ := greatest(least(nvl(sex_,0),2),0);

--      адрес

        if kvar_ is null or length(kvar_)=0 then
          kvarkvar_ := '';
        else
          kvarkvar_ := ' кв.'||kvar_;
        end if;
        fulladdress_     := replace(trim(obl_||' '||rajon_||' '||city_||' '||uliza_||','||dom_||kvarkvar_),'  ',' ');
        if length(fulladdress_)>70 then
          fulladdress_   := replace(trim(rajon_||' '||city_||' '||uliza_||','||dom_||kvarkvar_),'  ',' ');
          if length(fulladdress_)>70 then
            fulladdress_ := replace(trim(city_||' '||uliza_||','||dom_||kvarkvar_),'  ',' ');
          end if;
        end if;
        address_ := trim(uliza_||','||dom_||kvarkvar_);

--      dpt_web.p_open_vklad_rnk

        begin
          bc.subst_branch(branch_);
          rnk_     := null;
          savepoint sp_openrnk;
          dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'        ,
                                   p_clientname       => fio_        ,  --p_clientname       IN  customer.nmk%type,
                                   p_client_name      => null        ,  --p_client_name      IN  varchar2 default null,
                                   p_client_surname   => null        ,  --p_client_surname   IN  varchar2 default null,
                                   p_client_patr      => null        ,  --p_client_patr      IN  varchar2 default null,
                                   p_country          => 804         ,  --p_country          IN  customer.country%type,
                                   p_index            => index_      ,  --p_index            IN  varchar2,
                        /* obl_ */ p_obl              => null        ,  --p_obl              IN  varchar2,
                                   p_district         => rajon_      ,  --p_district         IN  varchar2,
                                   p_settlement       => city_       ,  --p_settlement       IN  varchar2,
                                   p_adress           => address_    ,  --p_adress           IN  varchar2,
                                   p_fulladdress      => fulladdress_,  --p_fulladdress      IN  customer.adr%type,
                                   p_clientcodetype   => null        ,  --p_clientcodetype   IN  customer.tgr%type,
                                   p_clientcode       => icod_       ,  --p_clientcode       IN  customer.okpo%type,
                                   p_doctype          => nPASP_      ,  --p_doctype          IN  person.passp%type,
                                   p_docserial        => seria_      ,  --p_docserial        IN  person.ser%type,
                                   p_docnumber        => nomer_      ,  --p_docnumber        IN  person.numdoc%type,
                                   p_docorg           => kevid_      ,  --p_docorg           IN  person.organ%type,
                                   p_docdate          => david_      ,  --p_docdate          IN  person.pdate%type,
                                   p_clientbdate      => bday_       ,  --p_clientbdate      IN  person.bday%type,
                                   p_clientbplace     => null        ,  --p_clientbplace     IN  person.bplace%type,
                                   p_clientsex        => sex_        ,  --p_clientsex        IN  person.sex%type,
                                   p_clientHomePh     => phone_      ,  --p_clienthomeph     IN  person.teld%type,
                                   p_clientWorkPh     => null        ,  --p_clientworkph     IN  person.telw%type,
                                   p_clientname_gc    => null        ,  --p_clientname_gc    IN  customerw.value%type,
                                   p_resid_code       => 1           ,  --p_resid_code       IN  number,
                                   p_resid_index      => index_      ,  --p_resid_index      IN  varchar2,
                        /* obl_ */ p_resid_obl        => null        ,  --p_resid_obl        IN  varchar2,
                                   p_resid_district   => rajon_      ,  --p_resid_district   IN  varchar2,
                                   p_resid_settlement => city_       ,  --p_resid_settlement IN  varchar2,
                                   p_resid_adress     => address_    ,  --p_resid_adress     IN  varchar2,
                                   p_clientid         => rnk_        ,  --p_clientid     IN OUT  number,
                        /* null */ p_registrydate     => datp_);        --p_registrydate     IN  date default null

          bc.set_context;
        exception when OTHERS then
          rollback to sp_openrnk;
          bc.set_context;
          p_code := p_code+1;
          text_ := 'Ошибка при выполнении p_open_vklad_rnk: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          bars_audit.error(p_errmask                ||'(2): ' ||
                           'код ТВБВ АСВО='         ||p_tvbv  ||
                           ', код картотеки='       ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||
                           ', номер вклада='        ||nsc_    ||
                           ', код ОКПО='            ||icod_   ||' - '||text_);
          fl_     := 1;
--        flkart_ := flkart_+1;
        end;

        if fl_=0 then
          begin

            bc.subst_branch(branch_);

            gl.pl_dat(p_dasvox);
            gl.amfo := f_ourmfo_g;

--          if gl.bdate is null then
--            gl.bdate := bankdate_g;
--          end if;

            if datp_>gl.bdate then
              goto baddataotkritia65;
            end if;

            glbd_    := gl.bdate; -- bankdate_g может надо
            gl.bdate := datp_;

            glauid_  := gl.aUid;
            select max(id)
            into   auid_
            from   staff
            where  tabn is not null and
                   bax=1;
            if auid_ is null then
              select max(id)
              into   auid_
              from   staff
              where  tabn is not null;
              if auid_ is null then
                select max(id)
                into   auid_
                from   staff;
                if auid_ is null then
                  auid_ := gl.aUid;
                end if;
              end if;
            end if;
            gl.aUid := auid_;

--          if duration_+duration_days_!=0 then
            if duration_+duration_days_!=0 and term_type_=1 then
              srok_ := null;
            else
              if dDatEnd_ is null then
                if dptvidd_=110 then
                  srok_ := 184;
                else
                  srok_ := null;
                end if;
              else
                srok_ := dDatEnd_-datp_;
              end if;
            end if;

            dptid_ := null;
            dpt_web.create_deposit(dptvidd_               ,  --p_vidd          IN  dpt_deposit.vidd%type,   вклад АСВО
                                   rnk_                   ,  --p_rnk           IN  dpt_deposit.rnk%type,
--                                 ND_                    ,  --p_nd            IN  dpt_deposit.nd%type,     idkart_tvbv_(nsc)
                                   kkmark_||'_'||p_tvbv||
                                   '_'||id_||'_0_'||nsc_  ,
                                   ost_                   ,  --p_sum           IN  dpt_deposit.limit%type,  ost
                                   0                      ,  --p_nocash        IN  number,                  0
                                   dato_                  ,  --p_datz          IN  dpt_deposit.datz%type,   DATO
                                   null                   ,  --p_namep         IN  dpt_deposit.name_p%type,
                                   null                   ,  --p_okpop         IN  dpt_deposit.okpo_p%type,
                                   null                   ,  --p_nlsp          IN  dpt_deposit.nls_p%type,
                                   null                   ,  --p_mfop          IN  dpt_deposit.mfo_p%type,
                                   0                      ,  --p_fl_perekr     IN  dpt_vidd.fl_2620%type,
                                   null                   ,  --p_name_perekr   IN  dpt_deposit.nms_d%type,
                                   null                   ,  --p_okpo_perekr   IN  dpt_deposit.okpo_p%type,
                                   null                   ,  --p_nls_perekr    IN  dpt_deposit.nls_d%type,
                                   null                   ,  --p_mfo_perekr    IN  dpt_deposit.mfo_d%type,
                                   'Imported from ASVO6.5',  --p_comment       IN  dpt_deposit.comments%type,
                                   dptid_                 ,  --p_dpt_id        OUT dpt_deposit.deposit_id%type,
                                   datp_                  ,  --p_datbegin      IN  dpt_deposit.dat_begin%type default gl.bdate
                                   null                   ,  --p_duration      IN  dpt_vidd.duration%type default null
                                   srok_);                   --p_duration_days IN  dpt_vidd.duration_days%type default null
          exception when OTHERS then
            rollback to sp_openrnk;
            bc.set_context;
            p_code := p_code+1;
            gl.bdate := glbd_;
            gl.aUid  := glauid_;
--          if typeid_ is null then
            text_ := 'Ошибка при выполнении create_deposit: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--          else
--            text_ := 'Ошибка при выполнении create_contract: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--          end if;
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
               /* k.KKFFFACTUAL */ null         ,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            bars_audit.error(p_errmask                ||'(3): ' ||
                             'код ТВБВ АСВО='         ||p_tvbv  ||
                             ', код картотеки='       ||kkmark_ ||
                             ', код вида вклада БАРС='||dptvidd_||
                             ', номер вклада='        ||nsc_    ||
                             ', код ОКПО='            ||icod_   ||' - '||text_);
            fl_     := 1;
--          flkart_ := flkart_+1;
          end;

          If fl_=0 then
            gl.bdate := glbd_;

--          вычищаем INT_RATN по новом ACC и
--          записываем свои %%-ные ставки из вклада
--          для этого идём по массиву и
--          пишем последнюю процентную ставку в INT_RATN

--          if typeid_ is null then
            select acc
            into   accdepo_
            from   dpt_deposit
            where  deposit_id=dptid_;

            update dpt_deposit
            set    comments='Imported from ASVO6.5',
                   DAT_BEGIN=datp_                 ,
                   DAT_END=dDatEnd_   -- ставим принудительно дату
            where  deposit_id=dptid_; -- завершения вклада (из АСВО)

            update dpt_deposit_clos
            set    dat_begin=datp_,
                   dat_end=dDatEnd_
            where  deposit_id=dptid_;

--          пролонгации депозитов (проставляю количество оных +
--                                 изменяю дату начала вклада)

--          if fl_dubl_>0 and dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ then
            if fl_dubl_>0                                                         and
               ((term_type_=2 and
                 dDatEnd_>dpt.f_duration(datp_,duration_max_,duration_days_max_)) or
                (term_type_=1 and
                 dDatEnd_!=dpt.f_duration(datp_,duration_,duration_days_))) then
              numdays_ := dDatEnd_-datb_;
              cnt_  := 0;
              datb_ := dato_;
--            date_ := dpt.f_duration(dato_,duration_,duration_days_);
              if term_type_=1 then
                date_ := dpt.f_duration(datp_,duration_,duration_days_);
              else
                date_ := dpt.f_duration(datp_,0,numdays_);
              end if;
--            while date_<dDatEnd_
              while date_<dDatEnd_-5 -- возможно АСВО учитывает выходные дни
              loop
                cnt_  := cnt_+1;
                datb_ := date_;
--              date_ := dpt.f_duration(datb_,duration_,duration_days_);
                if term_type_=1 then
                  date_ := dpt.f_duration(datb_,duration_,duration_days_);
                else
                  date_ := dpt.f_duration(datb_,0,numdays_);
                end if;
              end loop;
              if cnt_>0 then
                if date_>datb_ then
                  update dpt_deposit
                  set    dat_begin=datb_,
                         DAT_END=date_  ,
                         cnt_dubl=cnt_
                  where  deposit_id=dptid_;
--                аналогично и в Архиве депозитов
                  update dpt_deposit_clos
                  set    dat_begin=datb_,
                         DAT_END=date_  ,
                         cnt_dubl=cnt_
                  where  deposit_id=dptid_;

                  begin
                    select nullif(nvl(e.indv_rate,0),0)
                    into   prbonus_
                    from   dpt_deposit      d,
                           dpt_vidd         v,
                           dpt_vidd_extdesc e
                    where  d.deposit_id=dptid_      and
--                         d.cnt_dubl>=1            and
                           d.vidd=v.vidd            and
                           v.extension_id=e.type_id and
                           e.ext_num=1              and
                           e.base_rate is not null  and
                           e.oper_id=1              and
                           e.indv_rate is not null;
                  exception when no_data_found then
                    prbonus_ := null;
                  end;
                end if;
              end if;
            end if;

--          else
--            accdepo_ := contractacc_;
--          end if;

--          здесь "замочить" наследников и доверенных лиц

--          наследники

            sqln_:='select id_cl
                    from   asvo_65_will
                    where  id_ls='||id_;

            open curn_ for sqln_;

            loop
              fetch curn_ into id_cln_;
              exit when curn_%notfound;

--            выборка нужных параметров наследников из CLIENT

              begin
                execute immediate 'select fio     ,  --   nmkn_         --
                                          datb    ,  --   bdayn_        --
                                          adres   ,  --   ulizn_        --  адрес (улица)
                                          inn     ,  --   okpon_        --
                                          phone   ,  --   teldn_        --
                                          passport,  --   serin_nomen_  --
                                          ps_given,  --   vidan_        --
                                          ps_datg ,  --   ddavn_        --
                                          ipost   ,  -- + inden_        --  индекс
                                          gender  ,  --   sexn_         --
                                          r_n     ,  --   rajnn_        --  district
                                          npunkt  ,  --   cityn_        --  settlement
                                          home    ,  --   domn_         --  дом
                                          appt       --   kvarn_        --  квартира
                                   from   asvo_65_client
                                   where  id_cl='||to_char(id_cln_)
                                   into   nmkn_       ,
                                          bdayn_      ,
                                          ulizn_      ,
                                          okpon_      ,
                                          teldn_      ,
                                          serin_nomen_,
                                          vidan_      ,
                                          ddavn_      ,
                                          inden_      ,
                                          sexn_       ,
                                          rajnn_      ,
                                          cityn_      ,
                                          domn_       ,
                                          kvarn_;
              exception when no_data_found then
                goto closecurn;
              end;

--            серия и номер паспорта

              serin_nomen_ := replace(nvl(serin_nomen_,''),' ');
              if length(serin_nomen_)>=8 then
                serin_ := substr(substr(serin_nomen_,-8),1,2);
                nomen_ := substr(substr(serin_nomen_,-8),-6);
              end if;

--            пол (мужской - 1, женский - 2, неопределённый - 0)
              sexn_ := greatest(least(nvl(sexn_,0),2),0);

--            "рихтовка" даты рождения
              bdayn_ := CorrectBdayOkpo(bdayn_,okpon_);

--            адрес

              if kvarn_ is null or length(kvarn_)=0 then
                kvarnkvarn_ := '';
              else
                kvarnkvarn_ := ' кв.'||kvard_;
              end if;
              fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||ulizn_||','||domn_||kvarnkvarn_),'  ',' ');
              if length(fulladdressn_)>70 then
                fulladdressn_ := replace(trim(cityn_||' '||ulizn_||','||domn_||kvarnkvarn_),'  ',' ');
              end if;
              adrn_ := trim(ulizn_||','||domn_||kvarnkvarn_);

              RNKnasle_ := null;

              begin
                dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                         p_clientname       => nmkn_        ,  --p_clientname       IN  customer.nmk%type,
                                         p_client_name      => null         ,  --p_client_name      IN  varchar2 default null,
                                         p_client_surname   => null         ,  --p_client_surname   IN  varchar2 default null,
                                         p_client_patr      => null         ,  --p_client_patr      IN  varchar2 default null,
                                         p_country          => 804          ,  --p_country          IN  customer.country%type,
                                         p_index            => inden_       ,  --p_index            IN  varchar2,
                                         p_obl              => null         ,  --p_obl              IN  varchar2,
                                         p_district         => rajnn_       ,  --p_district         IN  varchar2,
                                         p_settlement       => cityn_       ,  --p_settlement       IN  varchar2,
                                         p_adress           => adrn_        ,  --p_adress           IN  varchar2,
                                         p_fulladdress      => fulladdressn_,  --p_fulladdress      IN  customer.adr%type,
                                         p_clientcodetype   => null         ,  --p_clientcodetype   IN  customer.tgr%type,
                                         p_clientcode       => okpon_       ,  --p_clientcode       IN  customer.okpo%type,
                                         p_doctype          => 1            ,  --p_doctype          IN  person.passp%type,
                                         p_docserial        => serin_       ,  --p_docserial        IN  person.ser%type,
                                         p_docnumber        => nomen_       ,  --p_docnumber        IN  person.numdoc%type,
                                         p_docorg           => vidan_       ,  --p_docorg           IN  person.organ%type,
                                         p_docdate          => ddavn_       ,  --p_docdate          IN  person.pdate%type,
                                         p_clientbdate      => bdayn_       ,  --p_clientbdate      IN  person.bday%type,
                                         p_clientbplace     => null         ,  --p_clientbplace     IN  person.bplace%type,
                                         p_clientsex        => sexn_        ,  --p_clientsex        IN  person.sex%type,
                                         p_clientHomePh     => teldn_       ,  --p_clienthomeph     IN  person.teld%type,
                                         p_clientWorkPh     => null         ,  --p_clientworkph     IN  person.telw%type,
                                         p_clientname_gc    => null         ,  --p_clientname_gc    IN  customerw.value%type,
                                         p_resid_code       => 1            ,  --p_resid_code       IN  number,
                                         p_resid_index      => inden_       ,  --p_resid_index      IN  varchar2,
                                         p_resid_obl        => null         ,  --p_resid_obl        IN  varchar2,
                                         p_resid_district   => rajnn_       ,  --p_resid_district   IN  varchar2,
                                         p_resid_settlement => cityn_       ,  --p_resid_settlement IN  varchar2,
                                         p_resid_adress     => adrn_        ,  --p_resid_adress     IN  varchar2,
                                         p_clientid         => RNKnasle_    ,  --p_clientid     IN OUT  number,
                              /* null */ p_registrydate     => glbd_);         --p_registrydate     IN  date default null

                update customer
                set    notes='Наследник по вкладу '||nsc_
                where  rnk=RNKnasle_;

                dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                         8        ,   -- l_agrtype
                                         rnk_     ,   -- p_initcustid
                                         RNKnasle_,   -- p_trustcustid
                                         null     ,   -- p_trustid
                                         null     ,   -- p_transferdpt
                                         null     ,   -- p_transferint
                                         null     ,   -- p_amountcash
                                         null     ,   -- p_amountcashless
                                         null     ,   -- p_datbegin
                                         null     ,   -- p_datend
                                         null     ,   -- p_ratereqid
                                         null     ,   -- p_ratevalue
                                         null     ,   -- p_ratedate
                                         null     ,   -- p_denomamount
                                         null     ,   -- p_denomcount
                                         null     ,   -- p_denomref
                                         null     ,   -- p_comissref
                                         null     ,   -- p_docref
                                         -13      ,   -- p_comissreqid
                                         agrmntid_);  -- p_agrmntid

              exception when OTHERS then
                if sqlerrm like '%DPT-00228%' then
                  null;
                else
                  p_code := p_code+1;
                  text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                  toroot;
                  bars_audit.error(p_errmask                ||'(7): ' ||
                                   'код ТВБВ АСВО='         ||p_tvbv  ||
                                   ', код картотеки='       ||kkmark_ ||
                                   ', код вида вклада БАРС='||dptvidd_||
                                   ', номер вклада='        ||nsc_    ||
                                   ', код ОКПО='            ||icod_   ||' - '||text_);
                  bc.subst_branch(branch_);
                end if;
              end;
            end loop;

<<closecurn>> null;

            close curn_;

--          доверенные лица

            sqld_:='select id_cl,
                           datt
                    from   asvo_65_trust
                    where  id_ls='||id_;

            open curd_ for sqld_;

            loop
              fetch curd_ into id_cld_,
                               dddov_;
              exit when curd_%notfound;

--            выборка нужных параметров доверенных лиц из CLIENT

              begin
                execute immediate 'select fio     ,  --   nmkd_         --
                                          datb    ,  --   bdayd_        --
                                          adres   ,  --   ulizd_        --  адрес (улица)
                                          inn     ,  --   okpod_        --
                                          phone   ,  --   teldd_        --
                                          passport,  --   serid_nomed_  --
                                          ps_given,  --   vidad_        --
                                          ps_datg ,  --   ddavd_        --
                                          ipost   ,  -- + inded_        --  индекс
                                          gender  ,  --   sexd_         --
                                          r_n     ,  --   rajnd_        --  district
                                          npunkt  ,  --   cityd_        --  settlement
                                          home    ,  --   domd_         --  дом
                                          appt       --   kvard_        --  квартира
                                   from   asvo_65_client
                                   where  id_cl='||to_char(id_cld_)
                                   into   nmkd_       ,
                                          bdayd_      ,
                                          ulizd_      ,
                                          okpod_      ,
                                          teldd_      ,
                                          serid_nomed_,
                                          vidad_      ,
                                          ddavd_      ,
                                          inded_      ,
                                          sexd_       ,
                                          rajnd_      ,
                                          cityd_      ,
                                          domd_       ,
                                          kvard_;
              exception when no_data_found then
                goto closecurd;
              end;

--            серия и номер паспорта

              serid_nomed_ := replace(nvl(serid_nomed_,''),' ');
              if length(serid_nomed_)>=8 then
                serid_ := substr(substr(serid_nomed_,-8),1,2);
                nomed_ := substr(substr(serid_nomed_,-8),-6);
              end if;

--            пол (мужской - 1, женский - 2, неопределённый - 0)

              sexd_  := greatest(least(nvl(sexd_,0),2),0);
              bdayd_ := CorrectBdayOkpo(bdayd_,okpon_);

--            адрес

              if kvard_ is null or length(kvard_)=0 then
                kvardkvard_ := '';
              else
                kvardkvard_ := ' кв.'||kvard_;
              end if;
              fulladdressd_ := replace(trim(rajnd_||' '||cityd_||' '||ulizd_||','||domd_||kvardkvard_),'  ',' ');
              if length(fulladdressd_)>70 then
                fulladdressd_ := replace(trim(cityd_||' '||ulizd_||','||domd_||kvardkvard_),'  ',' ');
              end if;
              adrd_ := trim(ulizd_||','||domd_||kvardkvard_);

              RNKdover_ := null;

              begin
                dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                         p_clientname       => nmkd_        ,  --p_clientname       IN  customer.nmk%type,
                                         p_client_name      => null         ,  --p_client_name      IN  varchar2 default null,
                                         p_client_surname   => null         ,  --p_client_surname   IN  varchar2 default null,
                                         p_client_patr      => null         ,  --p_client_patr      IN  varchar2 default null,
                                         p_country          => 804          ,  --p_country          IN  customer.country%type,
                                         p_index            => inded_       ,  --p_index            IN  varchar2,
                                         p_obl              => null         ,  --p_obl              IN  varchar2,
                                         p_district         => rajnd_       ,  --p_district         IN  varchar2,
                                         p_settlement       => cityd_       ,  --p_settlement       IN  varchar2,
                                         p_adress           => adrd_        ,  --p_adress           IN  varchar2,
                                         p_fulladdress      => fulladdressd_,  --p_fulladdress      IN  customer.adr%type,
                                         p_clientcodetype   => null         ,  --p_clientcodetype   IN  customer.tgr%type,
                                         p_clientcode       => okpod_       ,  --p_clientcode       IN  customer.okpo%type,
                                         p_doctype          => 1            ,  --p_doctype          IN  person.passp%type,
                                         p_docserial        => serid_       ,  --p_docserial        IN  person.ser%type,
                                         p_docnumber        => nomed_       ,  --p_docnumber        IN  person.numdoc%type,
                                         p_docorg           => vidad_       ,  --p_docorg           IN  person.organ%type,
                                         p_docdate          => ddavd_       ,  --p_docdate          IN  person.pdate%type,
                                         p_clientbdate      => bdayd_       ,  --p_clientbdate      IN  person.bday%type,
                                         p_clientbplace     => null         ,  --p_clientbplace     IN  person.bplace%type,
                                         p_clientsex        => sexd_        ,  --p_clientsex        IN  person.sex%type,
                                         p_clientHomePh     => teldd_       ,  --p_clienthomeph     IN  person.teld%type,
                                         p_clientWorkPh     => null         ,  --p_clientworkph     IN  person.telw%type,
                                         p_clientname_gc    => null         ,  --p_clientname_gc    IN  customerw.value%type,
                                         p_resid_code       => 1            ,  --p_resid_code       IN  number,
                                         p_resid_index      => inded_       ,  --p_resid_index      IN  varchar2,
                                         p_resid_obl        => null         ,  --p_resid_obl        IN  varchar2,
                                         p_resid_district   => rajnd_       ,  --p_resid_district   IN  varchar2,
                                         p_resid_settlement => cityd_       ,  --p_resid_settlement IN  varchar2,
                                         p_resid_adress     => adrd_        ,  --p_resid_adress     IN  varchar2,
                                         p_clientid         => RNKdover_    ,  --p_clientid     IN OUT  number,
                              /* null */ p_registrydate     => glbd_);         --p_registrydate     IN  date default null

                update customer
                set    notes='Доверенное лицо по вкладу '||nsc_
                where  rnk=RNKdover_;

                if instr(ls_attr_,'o')>0 then
                  agrtype_ := 5;
                else
                  agrtype_ := 12;
                end if;

                dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                         agrtype_ ,   -- l_agrtype
                                         rnk_     ,   -- p_initcustid
                                         RNKdover_,   -- p_trustcustid
                                         null     ,   -- p_trustid
                                         null     ,   -- p_transferdpt
                                         null     ,   -- p_transferint
                                         null     ,   -- p_amountcash
                                         null     ,   -- p_amountcashless
                                         null     ,   -- p_datbegin
                                         dddov_   ,   -- p_datend
                                         null     ,   -- p_ratereqid
                                         null     ,   -- p_ratevalue
                                         null     ,   -- p_ratedate
                                         null     ,   -- p_denomamount
                                         null     ,   -- p_denomcount
                                         null     ,   -- p_denomref
                                         null     ,   -- p_comissref
                                         null     ,   -- p_docref
                                         -13      ,   -- p_comissreqid
                                         agrmntid_);  -- p_agrmntid
              exception when OTHERS then
                if sqlerrm like '%DPT-00228%' then
                  null;
                else
                  p_code := p_code+1;
                  text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                  toroot;
                  bars_audit.error(p_errmask                ||'(6): ' ||
                                   'код ТВБВ АСВО='         ||p_tvbv  ||
                                   ', код картотеки='       ||kkmark_ ||
                                   ', код вида вклада БАРС='||dptvidd_||
                                   ', номер вклада='        ||nsc_    ||
                                   ', код ОКПО='            ||icod_   ||' - '||text_);
                  bc.subst_branch(branch_);
                end if;
              end;
            end loop;

<<closecurd>> null;

            close curd_;

--          здесь УЖЕ "замочены" наследники и доверенные лица

            delete
            from   INT_RATN
            where  acc=accdepo_;

--          if fl_dubl_>0                                               and
--             dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ and
--             cnt_>0 and date_>datb_ then
            if fl_dubl_>0                                                         and
               ((term_type_=2 and
                 dDatEnd_>dpt.f_duration(datp_,duration_max_,duration_days_max_)) or
                (term_type_=1 and
                 dDatEnd_!=dpt.f_duration(datp_,duration_,duration_days_)))       and
               cnt_>0                                                             and
               date_>datb_ then
              update INT_ACCN
              set    stp_dat=date_-1,
                     acr_dat=gl.bdate  -- дату последнего начисления %% берём
              where  acc=accdepo_;     -- НЕ из АСВО, а СТРОГО банковскую
            else
              update INT_ACCN
              set    stp_dat=dDatEnd_-1,
                     acr_dat=gl.bdate  -- дату последнего начисления %% берём
              where  acc=accdepo_;     -- НЕ из АСВО, а СТРОГО банковскую
            end if;

            prcdate_ := datp_;

            insert
            into int_ratn (acc ,
                           id  ,
                           bdat,
                           ir  ,
                           idu)
                   values (accdepo_                ,
                           1                       ,
                           prcdate_                ,
--                         percent_                ,
                           percent_+nvl(prbonus_,0),
                           1);

--          if fl_dubl_>0                                               and
--             dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ and
--             cnt_>0 and date_>datb_ then
          if fl_dubl_>0                                                         and
             ((term_type_=2 and
               dDatEnd_>dpt.f_duration(datp_,duration_max_,duration_days_max_)) or
              (term_type_=1 and
               dDatEnd_!=dpt.f_duration(datp_,duration_,duration_days_)))       and
             cnt_>0                                                             and
             date_>datb_ then
              update accounts
              set    nlsalt=nsc_,
                     mdate=date_
              where  acc=accdepo_;
            else
              update accounts
              set    nlsalt=nsc_,
                     mdate=dDatEnd_
              where  acc=accdepo_;
            end if;

            if npr_>0 then
              select acra
              into   accperc_
              from   int_accn
              where  acc=accdepo_ and
                     id=1;
            else
              select acrb
              into   accperc_
              from   int_accn
              where  acc=accdepo_ and
                     id=1;

              select nbs
              into   nbsacrb_
              from   accounts
              where  acc=accperc_;

              if nbsacrb_<>'3500' then
                select acra
                into   accperc_
                from   int_accn
                where  acc=accdepo_ and
                       id=1;
              end if;
            end if;

--          if fl_dubl_>0                                               and
--             dpt.f_duration(dato_,duration_,duration_days_)!=dDatEnd_ and
--             cnt_>0 and date_>datb_ then
        if fl_dubl_>0                                                         and
           ((term_type_=2 and
             dDatEnd_>dpt.f_duration(datp_,duration_max_,duration_days_max_)) or
            (term_type_=1 and
             dDatEnd_!=dpt.f_duration(datp_,duration_,duration_days_)))       and
           cnt_>0                                                             and
           date_>datb_ then
              update accounts
              set    nlsalt=nsc_,
                     mdate=date_
              where  acc=accperc_;
            else
              update accounts
              set    nlsalt=nsc_,
                     mdate=dDatEnd_
              where  acc=accperc_;
            end if;

            if substr(attr_,1,1)='h' then -- Заарештований
              update accounts
              set    blkd=10,
                     blkk=10
              where  acc=accdepo_;
              update accounts
              set    blkd=10,
                     blkk=10
              where  acc=accperc_;
            end if;

            if substr(attr_,1,1)='Q' then -- Блоковані всі
              update accounts
              set    blkd=2,
                     blkk=2
              where  acc=accdepo_;
              update accounts
              set    blkd=2,
                     blkk=2
              where  acc=accperc_;
            end if;

            if instr(attr_,'R')>0 then -- ставим счёт капитализации вклада
              begin
                select nls,
                       trim(substr(nms,1,38))
                into   nlsb_,
                       namb_
                from   accounts
                where  acc=accdepo_;
              exception when others then
                nlsb_ := null;
              end;

              if nlsb_ is not null then
                update int_accn
                set    kvb=dptkv_,
                       nlsb=nlsb_,
                       namb=namb_,
                       mfob=gl.amfo
                where  acc=accdepo_;
              end if;
            end if;

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NSC_A' ,
                            nsc_);                 -- номер сберкнижки АСВО

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KKASV' ,
                            kkmark_);              -- код картотеки АСВО

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            '%ASVO' ,
                            to_char(percent_));    -- процент АСВО по вкладу

            if prbonus_ is not null then
              insert
              into accountsw (acc,
                              tag,
                              value)
                      values (accdepo_,
                              '%BONU' ,
                              to_char(prbonus_));  -- бонус к проценту по вкладу
            end if;

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLD' ,
                            nlsKOTLOdepo_);        -- котловой счёт картотеки депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLN' ,
                            nlsKOTLOperc_);        -- котловой счёт картотеки начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLZ' ,
                            nlsKOTLOperz_);        -- котловой счёт картотеки зачисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'OST_D' ,
                            to_char(ost_));        -- остаток АСВО по вкладу (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'PRV_D' ,
                            to_char(prv_));        -- сумма выплаченных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NPR_D' ,
                            to_char(npr_));        -- сумма начисленных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'ZPR_D' ,
                            to_char(zpr_));        -- сумма зачисленных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_D' ,
                            to_char(nbsdepo_));    -- балансовый счёт депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_N' ,
                            to_char(nbsperc_));    -- балансовый счёт начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_Z' ,
                            to_char(nbsperz_));    -- балансовый счёт зачисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'OB22D' ,
                            to_char(ob22depo_));   -- ОБ22 счёта депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'OB22N' ,
                            to_char(ob22perc_));   -- ОБ22 счёта начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'OB22Z' ,
                            to_char(ob22perz_));   -- ОБ22 счёта зачисленных %%

            commit;

            bc.set_context;

            text_ := 'Открыт депозит (без загрузки счёта суммой вклада АСВО)';
            if prbonus_ is not null then
               text_ := text_||' + бонус';
            end if;
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
               /* k.KKFFFACTUAL */ null         ,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   prv_         ,
                                   npr_         ,
                                   zpr_         ,
                                   0            ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            p_open := p_open+1;

            if mod(p_open,10000)=1 then

--            сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

              BEGIN
                DBMS_JOB.SUBMIT (job       => Job_                    ,
                                 what      => 'migraAS.tableDP_stats;',
                                 next_date => sysdate                 ,
                                 interval  => null                    ,
                                 no_parse  => FALSE);
              exception when others then
                bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
              END;

            end if;

          end if;
        end if;
        goto normgeroiobxod65;

<<kkmarkmnogovidd65>> null;

        if nvl(instr(kkmarkm_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'У кода картотеки АСВО более одного соответствия виду вклада БАРС';
          toroot;
          bars_audit.error(p_errmask         ||'(19): '||
                           'код ТВБВ АСВО='  ||p_tvbv  ||
                           ', код картотеки='||kkmark_ ||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          kkmarkm_ := kkmarkm_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxod65;

<<netvidadeposita65>> null;

        if nvl(instr(netvida_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Нет соответствия кода картотеки АСВО виду вклада БАРС';
          toroot;
          bars_audit.error(p_errmask||'(1): '||
                           'код ТВБВ АСВО='  ||p_tvbv ||
                           ', код картотеки='||kkmark_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          netvida_ := netvida_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxod65;

<<datbegbordatend65>> null;

        p_code := p_code+1;
        text_  := 'Дата открытия вклада больше или равна даты окончания';
        toroot;
        bars_audit.error(p_errmask                ||'(18): '||
                         'код ТВБВ АСВО='         ||p_tvbv  ||
                         ', код картотеки='       ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               prv_         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxod65;

<<netdatiotkritia65>> null;

        p_code := p_code+1;
        text_  := 'Отсутствует дата открытия вклада АСВО';
        toroot;
        bars_audit.error(p_errmask                ||'(5): ' ||
                         'код ТВБВ АСВО='         ||p_tvbv  ||
                         ', код картотеки='       ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               prv_         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxod65;

<<baddataotkritia65>> null;

        p_code := p_code+1;
        text_  := 'Дата открытия вклада АСВО больше текущей банковской даты';
        bc.set_context;
        bars_audit.error(p_errmask                ||'(17): '||
                         'код ТВБВ АСВО='         ||p_tvbv  ||
                         ', код картотеки='       ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               prv_         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxod65;

<<razniekodivalut65>> null;

        if nvl(instr(raznkod_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Код валюты вклада АСВО не соответствует коду валюты вида вклада БАРС';
          bc.set_context;
          bars_audit.error(p_errmask||'(8): '       ||
                           'код ТВБВ АСВО='         ||p_tvbv  ||
                           ', код картотеки='       ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          raznkod_ := raznkod_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxod65;

<<razniebalscheta65>> null;

        if nvl(instr(raznbal_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Балансовый счёт вклада АСВО не равен балансовому счёту вида вклада БАРС';
          bc.set_context;
          bars_audit.error(p_errmask||'(9): '       ||
                           'код ТВБВ АСВО='         ||p_tvbv  ||
                           ', код картотеки='       ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 prv_         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          raznbal_ := raznbal_||kkmark_||',';
        end if;
--      flkart_ := 9999999;

<<normgeroiobxod65>> null;

      END;

<<ugezaimpotili65>> null;

    end loop;
    close cur_;

    dbms_application_info.set_client_info(' ');

--  if    flkart_=9999999 then
--      flkart_ := 0;
--  elsif flkart_>0       then
--    if flkart_=flkall_  then
--      flkart_ := 0;
--    else
--      flkart_ := 1;
--    end if;
--  elsif flkart_=0       then
--      flkart_ := 2;
--  end if;

    toroot;
    begin
      execute immediate 'update dpt_vidd
                         set    flag=0
                         where  vidd in (select vidd
                                         from   ASVO_TEMP_dpt_vidd_flag0)';
      commit;
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_vidd_flag0';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG enable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 enable';
    exception when OTHERS then
      null;
    end;

--  сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

    BEGIN
      DBMS_JOB.SUBMIT (job       => Job_                    ,
                       what      => 'migraAS.tableDP_stats;',
                       next_date => sysdate                 ,
                       interval  => null                    ,
                       no_parse  => FALSE);
    exception when others then
      bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
    END;

<<proverkineprosli65>> null;

    bars_alerter(1);

  exception when others then
    bars_audit.error(p_errmask||'(Z): неожиданная ошибка - '||sqlerrm||' '||dbms_utility.format_error_backtrace||' ('||migraas.header_version||' '||migraas.body_version||')');
    p_code := p_code+1;

  end create_dptAS65;

--

  procedure load_ostcdAS65 (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is
    TT_        oper.TT%type  :='АСВ';
    VOB_       oper.VOB%type :=6;
    REF_       oper.REF%type;
    KOTLD_     varchar2(14);
    KOTLN_     varchar2(14);
    KOTLZ_     varchar2(14);
    sumOSTD_   number;
    sumNPRD_   number;
    sumZPRD_   number;
    nlsNP_     varchar2(14);
    nmkd_      varchar2(38);
    nmsd_      varchar2(38);
    nmsn_      varchar2(38);
    nmsz_      varchar2(38);
    branch_    varchar2(32);
    kktokens_  varchar2_list;
    text_      varchar2(512);
    pd_        int;
    pn_        int;
    pz_        int;
    daos_      date;
    acc_       accounts.acc%type;

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;
    pd_    := 0;
    pn_    := 0;
    pz_    := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  bars_audit.info('load_ostcdptAS - @ branch_='||branch_);

--  депозиты

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

    for k in (select a.nls                 ,
                     a.kv                  ,
                     substr(a.nms,1,38) nms,
                     d.acc                 ,
                     d.limit               ,
                     d.deposit_id          ,
                     d.vidd                ,
                     d.nd                  ,
                     d.rnk
              from   dpt_deposit d,
                     accounts    a
              where  d.comments='Imported from ASVO6.5' and
                     d.acc=a.acc                        and
                     d.branch=branch_                   and
                     length(d.nd)-length(replace(d.nd,'_'))>=4)
    loop

--    bars_audit.info('load_ostcdptAS - 0 k.acc='||k.acc||', k.kv='||k.kv);

      begin
        select value
        into   KOTLD_
        from   accountsw
        where  tag='KOTLD' and acc=k.acc;
      exception when no_data_found then
        bars_audit.error(p_errmask||'(10): не найден котловой счёт для вклада '||
                         k.nd||' '||k.nls||'('||k.kv||') - '||sqlerrm||' '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofound65;
      end;

      begin
        select trim(substr(nms,1,38)),
               daos                  ,
               acc
        into   nmsd_,
               daos_,
               acc_
        from   accounts
        where  nls=KOTLD_ and
               kv=k.kv    and
               DAZS is null;
      exception when OTHERS then
        if pd_=0 then
          bars_audit.error(p_errmask||'(1): не найден или закрыт счёт '||KOTLD_||'('||k.kv||') - '||
                           sqlerrm||' '||dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          pd_ := 1;
        end if;
--      rollback;
        goto nofound65;
      end;

      if daos_>p_dasvox then
        update accounts
        set    daos=p_dasvox
        where  acc=acc_;
      end if;

--    bars_audit.info('load_ostcdptAS - 1 k.acc='||k.acc);

      GL.REF
           (REF_);

--    bars_audit.info('load_ostcdptAS - 2');

      GL.IN_DOC3
           (REF_ , TT_    , VOB_   , REF_   , SYSDATE, GL.BDATE, 1,
            k.KV , k.limit, k.KV   , k.limit, NULL   , GL.BDATE, GL.BDATE,
            nmsd_, KOTLD_ , gl.AMFO,
            k.NMS, k.NLS  , gl.AMFO,
            'Розкриття депозитного рахунку з АСВО',
            NULL, null, null, NULL, NULL, 0, NULL, null);

--    bars_audit.info('load_ostcdptAS - 3');

      begin
        GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLD_, k.limit,
                                         k.KV, k.NLS , k.limit);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(5): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofound65;
      end;

--    bars_audit.info('load_ostcdptAS - 4');

      begin
        select to_number(value)
        into   sumNPRD_
        from   accountsw
        where  tag='NPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumNPRD_ := 0;
      end;

      if sumNPRD_>0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(2): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofound65;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdptAS - 5a');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLN_, sumNPRD_,
                                         k.KV, nlsNP_, sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(6): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofound65;
        end;
      end if;

      if sumNPRD_<0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(3): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofound65;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acrb=a.acc;

--      bars_audit.info('load_ostcdptAS - 5b');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 0, k.KV, KOTLN_, -sumNPRD_,
                                         k.KV, nlsNP_, -sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(7): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofound65;
        end;

      end if;

--    bars_audit.info('load_ostcdptAS - 6  k.acc='||k.acc);

      begin
        select to_number(value)
        into   sumZPRD_
        from   accountsw
        where  tag='ZPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumZPRD_ := 0;
      end;

      if sumZPRD_>0 then

        select value
        into   KOTLZ_
        from   accountsw
        where  tag='KOTLZ' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsz_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLZ_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pz_=0 then
            bars_audit.error(p_errmask||'(4): не найден или закрыт счёт '||KOTLZ_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pz_ := 1;
          end if;
          rollback;
          goto nofound65;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdptAS - 7');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLZ_, sumZPRD_,
                                         k.KV, nlsNP_, sumZPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(8): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofound65;
        end;

      end if;

--    bars_audit.info('load_ostcdptAS - 8');

      begin
        GL.PAY
             (2, REF_, GL.BDATE);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(9): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofound65;
      end;

--    bars_audit.info('load_ostcdptAS - 9');

      insert
      into   operw (ref,
                    tag,
                    value)
            values (REF_   ,
                    'ND   ',
                    k.deposit_id);

      update dpt_deposit
      set    comments='*Imported from ASVO6.5'
      where  deposit_id=k.deposit_id;

      delete
      from   oper_ext
      where  ref=REF_;

      commit;

--    bars_audit.info('load_ostcdptAS - k.nd='||k.nd);

      migraAS.get_tokens(k.nd,'_',kktokens_);
      text_ := 'Счёт депозита загружен';
      migraAS.asvo_log_write(kktokens_(1),
                             k.vidd      ,
                             k.kv        ,
                             p_tvbv      ,
                             null        ,
                             branch_     ,
                             KOTLD_      ,
                             KOTLN_      ,
                             KOTLZ_      ,
                             kktokens_(3),
                             kktokens_(4),
                             null        ,
                             null        ,
                             null        ,
                             null        ,
                             k.limit     ,
                             null        ,
                             sumNPRD_    ,
                             sumZPRD_    ,
                             1           ,
                             text_       ,
                             sysdate     ,
                             k.rnk       ,
                             k.deposit_id);
      p_open := p_open+1;

<<nofound65>> null;

      dbms_application_info.set_client_info('load='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

--  dbms_application_info.set_client_info('pereocenka');

--  migraAS.pereocenka(p_tvbv,p_open,p_code,p_errmask,p_dasvox);
--  commit;

    bc.set_context;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end load_ostcdAS65;

--

  procedure drop_deposAS65 (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    i_       int;
--  pdpt_    dpt_deposit.deposit_id%type;

    type     t_otkat is record (deposit_id  dpt_deposit.deposit_id%type,
                                branch      dpt_deposit.branch%type,
                                acc         accounts.acc%type,
                                acra        accounts.acc%type,
                                rnk         customer.rnk%type,
                                rnk_tr      customer.rnk%type);
    type     t_listo is table of t_otkat;
    otkat    t_listo;
    sid_     number;
    serial_  number;
    job_     number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;
--  pdpt_  := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  убиение СВОЕЙ сессии сбора статистики (JOB)

    begin
      select job
      into   job_
      from   user_jobs
      where  what='migraAS.tableDP_stats;' and
             rownum<2;
      begin
        DBMS_JOB.REMOVE(job_);
        commit;
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

    begin
      select s.sid,
             s.serial#
      into   sid_,
             serial_
      from   V$OPEN_CURSOR c,
             V$SESSION     s
      where  rownum<2          and
             s.status='ACTIVE' and
             c.sid=s.sid       and
             c.sql_text like 'SELECT 3711 FROM DUAL%';
      begin
        execute immediate 'ALTER SYSTEM KILL SESSION '''||to_char(sid_)||','||to_char(serial_)||''' IMMEDIATE';
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

--  выключение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' DISABLE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(1): '||k.table_name||' '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_migr (dpt NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acc_migr (acc NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acr_migr (acr NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnk_migr (rnk NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnt_migr (rnt NUMBER)';
    exception when OTHERS then
      null;
    end;

    bc.subst_branch(branch_);

    begin
      select * bulk collect
      into   otkat
      from   (select d.deposit_id,
                     d.branch    ,
                     a.acc       ,
                     i.acra      ,
                     a.rnk       ,
                     t.rnk_tr
              from   dpt_deposit d,
                     dpt_trustee t,
                     int_accn    i,
                     accounts    a
              where  d.comments='Imported from ASVO6.5'        and
                     d.acc=i.acc                               and
                     d.branch=branch_                          and
                     length(d.nd)-length(replace(d.nd,'_'))>=4 and
                     substr(d.nd,instr(d.nd,'_')+1,3)=p_tvbv   and
                     a.acc=d.acc                               and
                     t.dpt_id(+)=d.deposit_id                  and
                     a.ostc=0)
      for    update nowait
      order  by deposit_id;
    exception when OTHERS then
      bars_audit.error(p_errmask||'(1): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      goto maybelock;
    end;

    for k in 1..otkat.count
    loop
      execute immediate 'insert
                         into   ASVO_TEMP_dpt_migr (dpt)
                                            values ('||to_char(otkat(k).deposit_id)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acc_migr (acc)
                                            values ('||to_char(otkat(k).acc)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acr_migr (acr)
                                            values ('||to_char(otkat(k).acra)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_rnk_migr (rnk)
                                            values ('||to_char(otkat(k).rnk)||')';
      if otkat(k).rnk_tr is not null then
        execute immediate 'insert
                           into   ASVO_TEMP_rnt_migr (rnt)
                                              values ('||to_char(otkat(k).rnk_tr)||')';
      end if;
    end loop;

    begin
      execute immediate 'select count(1) from (select distinct dpt from ASVO_TEMP_dpt_migr)' into p_open;
    exception when OTHERS then
      p_open := 0;
    end;

    begin

--    execute immediate 'delete from dpt_jobs_log       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_blank          where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_inheritors     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_payments       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_depositw       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_agreements     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_trustee        where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_bonus_requests where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_requests       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit        where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_accounts       where dptid      in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_clos   where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_all    where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_techaccounts   where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';

      execute immediate 'delete from tmp_intarc          where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn_arc        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from acr_docs            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_accn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accountsw           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldob              where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldoa              where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts            where acc in (select acc from ASVO_TEMP_acc_migr)';

      execute immediate 'delete from acr_docs            where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accountsw           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldob              where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldoa              where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts            where acc in (select acr from ASVO_TEMP_acr_migr)';

--    здесь добавить удаление клиентов без счетов (otkat(k).RNK+otkat(k).RNK_TR)

      execute immediate 'select (select count(*) from accounts    where rnk    in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from customer    where rnkp   in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from dpt_trustee where rnk_tr in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from cc_deal     where rnk    in (select rnk from ASVO_TEMP_rnk_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from person             where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(2): delete from customer where rnk in (select rnk from ASVO_TEMP_rnk_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

      execute immediate 'select (select count(*) from accounts    where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from customer    where rnkp in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from dpt_trustee where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from cc_deal     where rnk  in (select rnt from ASVO_TEMP_rnt_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from person             where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(3): delete from customer where rnk in (select rnt from ASVO_TEMP_rnt_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

    exception when OTHERS then
      bars_audit.error(p_errmask||'(2): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      p_open := 0;
      rollback;
    end;

    bc.set_context;

--  execute immediate 'delete
--                     from   ACCM_AGG_MONBALS
--                     where  acc in (select acc from ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_QUEUE_BALANCES
--                     where  acc in (select acc from ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_SNAP_BALANCES
--                     where  acc in (select acc from ASVO_TEMP_ACC)';

--  begin
--    execute immediate 'DROP TABLE ASVO_TEMP_ACC';
--  exception when OTHERS then
--    null;
--  end;

--  dbms_application_info.set_client_info(' ');

    update ASVO_FFF_LOAD
    set    fl=0
    where  FFF=p_tvbv;

    delete
    from   asvo_log
    where  FFF=p_tvbv;

    commit;

<<maybelock>> null;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

--  включение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' ENABLE NOVALIDATE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(4): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    bars_alerter(1);

  end drop_deposAS65;

--

  procedure pereocenka (p_tvbv in     char    ,
                        p_open in out number  ,
                        p_code in out number  ,
                        p_errmask     varchar2,
                        p_dasvox      date)
  is
  begin

    for k in (select distinct
                     kv
              from   asvo_nls
              where  tvbv=p_tvbv and
                     kv<>980)
    loop
      begin
        p_rev(k.kv,p_dasvox);
--      p_open := p_open+1;
        commit;
      exception when others then
        bars_audit.error(p_errmask||'(P1): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
      end;
    end loop;

    begin
      PVP_RRR(p_dasvox);
--    p_open := p_open+1;
      commit;
    exception when others then
      bars_audit.error(p_errmask||'(P2): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      rollback;
    end;

  end pereocenka;

--

  procedure NLStoSPRMEGA (p_open in out number  ,
                          p_code in out number  ,
                          p_errmask     varchar2,
                          p_nlsmask     varchar2,
                          p_dfNLS       varchar2)
  is

    fff_               char(3);
    cnt_               number;
    mfo_               varchar2(12);
    nls_depo_          varchar2(15);
    nls_procn_         varchar2(15);
    nls_procz_         varchar2(15);

    type               cur is ref cursor;
    cur_               cur;
    sql_               varchar2(1024);

    deposit_cod_       varchar2(18);
    deposit_name_      varchar2(50);
    vidd_              number;
    type_name_         varchar2(70);
    kv_                number;
    nls0_depo_         varchar2(15);
    nls0_procn_        varchar2(15);
    nls0_procz_        varchar2(15);

    nlsmask_           varchar2(15);
    podr_              char(2);

    len_DEPOSIT_NAME_  number;
    len_TYPE_NAME_     number;

  begin

    select val
    into   mfo_
    from   params
    where  par='GLB-MFO';

    select data_length
    into   len_DEPOSIT_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='DEPOSIT_NAME';

    select data_length
    into   len_TYPE_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='TYPE_NAME';

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMPMEGA_NLS' and
             column_name in ('NAMEV'  ,
                             'KODMEGA',
                             'KODBAR' ,
                             'NAMEBAR',
                             'VAL'    ,
                             'TVBV'   ,
                             'VKLAD'  ,
                             'NARAXP' ,
                             'ZARAXP');
      if cnt_<>9 then
        bars_audit.error(p_errmask||'(1): неверна структура '||p_dfNLS);
        p_code := p_code+1;
        goto konec6;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMPMEGA_NLS'
               )
      loop
        if (k.column_name='NAMEV'   and (k.data_type<>'VARCHAR2' or k.data_length>len_DEPOSIT_NAME_))                              or
           (k.column_name='KODMEGA' and (k.data_type<>'VARCHAR2' or k.data_length>18))                                             or
           (k.column_name='KODBAR'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision>4   or k.data_scale<>0)) or
           (k.column_name='NAMEBAR' and (k.data_type<>'VARCHAR2' or k.data_length>len_TYPE_NAME_))                                 or
           (k.column_name='VAL'     and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision>3   or k.data_scale<>0)) or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3))                                              or
           (k.column_name='VKLAD'   and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='NARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='ZARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) then
          bars_audit.error(p_errmask||'(2): неверна структура '||p_dfNLS);
          p_code := p_code+1;
          goto konec6;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_tempmega_nls'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(3): в '||p_dfNLS||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec6;
      end;

      delete
      from    DPT_VIDD_ASVO
      where   fff=fff_;

      delete
      from    asvo_nls
      where   tvbv=fff_;

      if p_nlsmask is null then
        begin
          select p.podr
          into   podr_
          from   asvo_fff_branch b,
                 asvo_fff_podr   p
          where  b.fff=fff_ and
                 p.fff=substr(b.branch,12,3);
          nlsmask_ := '3739K9'||podr_||'000FFFN';
        exception when OTHERS then
          if    mfo_='333368' then
            nlsmask_ := '3739K916000FFFN';
          elsif mfo_='303398' then
            nlsmask_ := '3739K900000FFFN';
          else
            nlsmask_ := '3739K000000FFFN';
          end if;
        end;
      else
        nlsmask_ := p_nlsmask;
      end if;

      nls_depo_  := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','0'));
      nls_procn_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));
      nls_procz_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));

      sql_:='select distinct
                    namev           ,
                    kodmega         ,
                    kodbar          ,
                    namebar         ,
                    val             ,
                    substr(tvbv,1,3),
                    to_char(vklad)  ,
                    to_char(naraxp) ,
                    to_char(zaraxp)
             from   asvo_tempmega_nls';

      open cur_ for sql_;

      loop
        fetch cur_ into deposit_name_,
                        deposit_cod_ ,
                        vidd_        ,
                        type_name_   ,
                        kv_          ,
                        fff_         ,
                        nls0_depo_   ,
                        nls0_procn_  ,
                        nls0_procz_;
        exit when cur_%notfound;

        if type_name_ is null then
          begin
            select type_name
            into   type_name_
            from   dpt_vidd
            where  vidd=vidd_ and
                   rownum<2;
          exception when no_data_found then
            type_name_ := null;
          end;
        end if;

        if nls0_depo_  is not null and length(nls0_depo_)<5 then
          nls0_depo_  := null;
        end if;
        if nls0_procn_ is not null and length(nls0_procn_)<5 then
          nls0_procn_ := null;
        end if;
        if nls0_procz_ is not null and length(nls0_procz_)<5 then
          nls0_procz_ := null;
        end if;

        insert
        into   DPT_VIDD_ASVO (VIDD        ,
                              TYPE_NAME   ,
                              DEPOSIT_COD ,
                              DEPOSIT_NAME,
                              KV          ,
                              FFF)
                      values (vidd_        ,
                              type_name_   ,
                              deposit_cod_ ,
                              deposit_name_,
                              kv_          ,
                              fff_);
        p_open := p_open+1;

        delete
        from   asvo_nls
        where  TVBV               =fff_                 and
               KK                 =deposit_cod_         and
               NLS_DEPO           =nls_depo_            and
               NLS_PROCN          =nls_procn_           and
               NLS_PROCZ          =nls_procz_           and
               NLS0_DEPO          =nls0_depo_           and
               nvl(NLS0_PROCN,'0')=nvl(nls0_procn_,'0') and
               nvl(NLS0_PROCZ,'0')=nvl(nls0_procz_,'0') and
               KV                 =kv_;

        insert
        into   asvo_nls (TVBV      ,
                         KK        ,
                         NLS_DEPO  ,
                         NLS_PROCN ,
                         NLS_PROCZ ,
                         NLS0_DEPO ,
                         NLS0_PROCN,
                         NLS0_PROCZ,
                         KV)
                 values (fff_        ,
                         deposit_cod_,
                         nls_depo_   ,
                         nls_procn_  ,
                         nls_procz_  ,
                         nls0_depo_  ,
                         nls0_procn_ ,
                         nls0_procz_ ,
                         kv_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(4): ошибка обработки '||p_dfNLS||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(5): ошибка обработки '||p_dfNLS||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(6): ошибка обработки '||p_dfNLS||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec6>> null;

  end NLStoSPRMEGA;

--

  procedure copy_mega_tables (p_tvbv in char)
  is
  begin

    if p_tvbv is not null and length(p_tvbv)=3 then
      begin
        execute immediate 'drop table ASVO_MEGA_'||p_tvbv;
      exception when OTHERS then
        null;
      end;

      begin
        execute immediate
                'create table ASVO_MEGA_'||p_tvbv||
                ' as select * from ASVO_MEGA';
      exception when OTHERS then
        null;
      end;
    end if;

  end copy_mega_tables;

--

  procedure drop_ostcdMEGA (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    TT_      oper.TT%type := 'АСВ';

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  откат документов по развороту вкладов (BAK)

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

    for k in (select o.ref,
                     w.value dptid
              from   oper  o,
                     operw w
              where  o.tt=TT_         and
                     o.ref=w.ref      and
                     w.tag='ND   '    and
                     o.sos=5          and
                     o.vdat=gl.bdate  and
                     o.branch=branch_ and
                     substr(o.nam_b,instr(o.nam_b,'_')+1,
                            instr(o.nam_b,'_',1,2)-instr(o.nam_b,'_')-1)=p_tvbv
              )
    loop

      ful_bak(k.ref);

      bars_audit.info(substr(p_errmask,length(p_errmask)-6)||': ful_bak '||k.ref);

      update dpt_deposit
      set    comments=substr(comments,2)
      where  deposit_id=k.dptid;

      commit;

      p_open := p_open+1;

      dbms_application_info.set_client_info('drop='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

    bc.set_context;

    delete
    from   asvo_log
    where  FFF=p_tvbv and fl=1;

    commit;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end drop_ostcdMEGA;

--

  procedure drop_deposMEGA (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    i_       int;
--  pdpt_    dpt_deposit.deposit_id%type;

    type     t_otkat is record (deposit_id  dpt_deposit.deposit_id%type,
                                branch      dpt_deposit.branch%type,
                                acc         accounts.acc%type,
                                acra        accounts.acc%type,
                                rnk         customer.rnk%type,
                                rnk_tr      customer.rnk%type);
    type     t_listo is table of t_otkat;
    otkat    t_listo;
    sid_     number;
    serial_  number;
    job_     number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;
--  pdpt_  := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  убиение СВОЕЙ сессии сбора статистики (JOB)

    begin
      select job
      into   job_
      from   user_jobs
      where  what='migraAS.tableDP_stats;' and
             rownum<2;
      begin
        DBMS_JOB.REMOVE(job_);
        commit;
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

    begin
      select s.sid,
             s.serial#
      into   sid_,
             serial_
      from   V$OPEN_CURSOR c,
             V$SESSION     s
      where  rownum<2          and
             s.status='ACTIVE' and
             c.sid=s.sid       and
             c.sql_text like 'SELECT 3711 FROM DUAL%';
      begin
        execute immediate 'ALTER SYSTEM KILL SESSION '''||to_char(sid_)||','||to_char(serial_)||''' IMMEDIATE';
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

--  выключение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' DISABLE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(1): '||k.table_name||' '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_migr (dpt NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acc_migr (acc NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acr_migr (acr NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnk_migr (rnk NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnt_migr (rnt NUMBER)';
    exception when OTHERS then
      null;
    end;

    bc.subst_branch(branch_);

    begin
      select * bulk collect
      into   otkat
      from   (select d.deposit_id,
                     d.branch    ,
                     a.acc       ,
                     i.acra      ,
                     a.rnk       ,
                     t.rnk_tr
              from   dpt_deposit d,
                     dpt_trustee t,
                     int_accn    i,
                     accounts    a
              where  d.comments='Imported from MEGABANK'       and
                     d.acc=i.acc                               and
                     d.branch=branch_                          and
                     length(d.nd)-length(replace(d.nd,'_'))>=4 and
                     substr(d.nd,instr(d.nd,'_')+1,3)=p_tvbv   and
                     a.acc=d.acc                               and
                     t.dpt_id(+)=d.deposit_id                  and
                     a.ostc=0)
      for    update nowait
      order  by deposit_id;
    exception when OTHERS then
      bars_audit.error(p_errmask||'(1): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      goto maybelock;
    end;

    for k in 1..otkat.count
    loop
      execute immediate 'insert
                         into   ASVO_TEMP_dpt_migr (dpt)
                                            values ('||to_char(otkat(k).deposit_id)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acc_migr (acc)
                                            values ('||to_char(otkat(k).acc)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acr_migr (acr)
                                            values ('||to_char(otkat(k).acra)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_rnk_migr (rnk)
                                            values ('||to_char(otkat(k).rnk)||')';
      if otkat(k).rnk_tr is not null then
        execute immediate 'insert
                           into   ASVO_TEMP_rnt_migr (rnt)
                                              values ('||to_char(otkat(k).rnk_tr)||')';
      end if;
    end loop;

    begin
      execute immediate 'select count(1) from (select distinct dpt from ASVO_TEMP_dpt_migr)' into p_open;
    exception when OTHERS then
      p_open := 0;
    end;

    begin

--    execute immediate 'delete from dpt_jobs_log       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_blank          where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_inheritors     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_payments       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_depositw       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_agreements     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_trustee        where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_bonus_requests where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_requests       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit        where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_accounts       where dptid      in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_clos   where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_all    where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_techaccounts   where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';

      execute immediate 'delete from tmp_intarc          where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn_arc        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from acr_docs            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_accn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accountsw           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldob              where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldoa              where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts            where acc in (select acc from ASVO_TEMP_acc_migr)';

      execute immediate 'delete from acr_docs            where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accountsw           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldob              where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldoa              where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts            where acc in (select acr from ASVO_TEMP_acr_migr)';

--    здесь добавить удаление клиентов без счетов (otkat(k).RNK+otkat(k).RNK_TR)

      execute immediate 'select (select count(*) from accounts    where rnk    in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from customer    where rnkp   in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from dpt_trustee where rnk_tr in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from cc_deal     where rnk    in (select rnk from ASVO_TEMP_rnk_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from person             where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(2): delete from customer where rnk in (select rnk from ASVO_TEMP_rnk_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

      execute immediate 'select (select count(*) from accounts    where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from customer    where rnkp in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from dpt_trustee where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from cc_deal     where rnk  in (select rnt from ASVO_TEMP_rnt_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from person             where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(3): delete from customer where rnk in (select rnt from ASVO_TEMP_rnt_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

    exception when OTHERS then
      bars_audit.error(p_errmask||'(2): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      p_open := 0;
      rollback;
    end;

    bc.set_context;

--  execute immediate 'delete
--                     from   ACCM_AGG_MONBALS
--                     where  acc in (select acc from ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_QUEUE_BALANCES
--                     where  acc in (select acc from ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_SNAP_BALANCES
--                     where  acc in (select acc from ASVO_TEMP_ACC)';

--  begin
--    execute immediate 'DROP TABLE ASVO_TEMP_ACC';
--  exception when OTHERS then
--    null;
--  end;

--  dbms_application_info.set_client_info(' ');

    update ASVO_FFF_LOAD
    set    fl=0
    where  FFF=p_tvbv;

    delete
    from   asvo_log
    where  FFF=p_tvbv;

    commit;

<<maybelock>> null;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

--  включение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' ENABLE NOVALIDATE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(4): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    bars_alerter(1);

  end drop_deposMEGA;

--

  procedure create_dptMEGA (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    type            cur is ref cursor;
    cur_            cur;
    curn_           cur;
    curd_           cur;
    sql_            varchar2(32767);

    fio_            varchar2(60);
    icod_           varchar2(14);
    tidok_          int;
    nsc_            varchar2(20);
    ost_            number;
    npr_            number;
    zpr_            number;
    datp_           date;
    branch_         varchar2(30);
    i_              int;
    nlsKOTLOdepo_   varchar2(14);
    nlsKOTLOperc_   varchar2(14);
    nlsKOTLOperz_   varchar2(14);
    kkmark_         varchar2(18);
    nbsdepo_        varchar2(4);
    ob22depo_       varchar2(2);
    dptvidd_        number;
    dptkv_          number;
    nbsperc_        varchar2(4);
    ob22perc_       varchar2(2);
    nbsperz_        varchar2(4);
    ob22perz_       varchar2(2);
    prcdate_        date;
    percent_        number;

    fl_             number;
    flkall_         number;
    tmp_            varchar2(32764);
    phone_          varchar2(1028);
    seria_          varchar2(10);
    nomer_          varchar2(20);
    kevid_          varchar2(70);
    sdvid_          varchar2(32);
    city_           varchar2(256);
    bday_           date;
    david_          date;
--  nPASP_          number;
    index_          varchar2(1024);
    obl_            varchar2(1024);
    rajon_          varchar2(1024);
    rnk_            number;
    accdepo_        number;
    accperc_        number;
    text_           varchar2(1024);
    address_        varchar2(128);
    fulladdress_    varchar2(256);
    glbd_           date;
    sex_            int;

    dptid_          number;

    dDatEnd_        date;

    nmkn_           varchar2(70);
    okpon_          varchar2(64);

    RNKdover_       number;
    RNKbenef_       number;
    RNKnasle_       number;
    bdayn_          date;
    ddavn_          date;
    adrn_           varchar2(128);
    teldn_          varchar2(64);
    serin_          varchar2(10);
    nomen_          varchar2(20);
    vidan_          varchar2(70);
    fulladdressn_   varchar2(256);
    sexn_           int;
    rajnn_          varchar2(1024);
    cityn_          varchar2(256);
    inden_          varchar2(1024);
    obln_           varchar2(1024);
    tidokn_         int;

    agrmntid_       dpt_agreements.agrmnt_id%type;
    duration_       dpt_vidd.duration%type;
    duration_days_  dpt_vidd.duration_days%type;
    term_type_      dpt_vidd.term_type%type;
    fl_dubl_        dpt_vidd.fl_dubl%type;
    cnt_            number;
    type_cod_       dpt_vidd.type_cod%type;

    nbsacrb_        char(4);

    auid_           number;
    glauid_         number;

    netvida_        varchar2(32764);
    kkmarkm_        varchar2(32764);
    raznkod_        varchar2(32764);
    raznbal_        varchar2(32764);

    kv_             number;
    bsd_            char(4);
    srok_           number;

--  datmet_         date;
    method_id_      dpt_vidd_extdesc.method_id%type;

    country_        number;
    countryn_       number;
    D_FACETYPE_     int;
    REGDATE_        date;
    REGDATEn_       date;
    DEPNAME_        varchar2(120);
    BEGINSUM_       number;
    dzpr_           date;
    dnpr_           date;
    BRANCHMEGA_     varchar2(30);
    id_             varchar2(8);
    Job_            number;
    begn_           date;
    endn_           date;
    naslonly_       boolean;

    sqlt1_          varchar2(256);
    sqlt2_          varchar2(256);
    sqltw_          varchar2(256);

    resid_code_     number;
    resid_coden_    number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;

    begin
      select branch
      into   branch_
      from   ASVO_FFF_BRANCH
      where  FFF=p_tvbv and
             rownum<2;
    exception when no_data_found then
      select '/'||val||'/'
      into   branch_
      from   params
      where  par='GLB-MFO';
    end;

--  проверки

--1.select * from asvo_nls where tvbv='060' and NLS_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(9): не описан в справочнике транзитный счёт депозита для вида вклада МЕГАБАНК - '||
                       k.kk);
    end loop;

--2.select * from asvo_nls where tvbv='060' and NLS_PROCN is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCN is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(10): не описан в справочнике транзитный счёт начисленных %% для вида вклада МЕГАБАНК - '||
                       k.kk);
    end loop;

--3.select * from asvo_nls where tvbv='060' and NLS_PROCZ is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCZ is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(11): не описан в справочнике транзитный счёт зачисленных %% для вида вклада МЕГАБАНК - '||
                       k.kk);
    end loop;

--4.select * from asvo_nls where tvbv='060' and NLS0_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS0_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(12): не описан в справочнике КОТЛОВОЙ счёт депозитов для вида вклада МЕГАБАНК - '||
                       k.kk);
    end loop;

--5.select n.tvbv, n.kk, n.nls0_depo, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_DEPO,'0')<>'0'
--   and n.nls0_depo=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_DEPO
--           and kv=n.kv and branch='/333368/000000/000060/')
--order by kk;

    for k in (select n.kk       ,
                     n.nls0_depo,
                     n.kv       ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv             and
                     nvl(n.NLS0_DEPO,'0')<>'0' and
                     n.nls0_depo=a.nls         and
                     n.kv=a.kv                 and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_DEPO      and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(13): КОТЛОВОЙ счёт депозитов ('||
                       k.nls0_depo||'('||to_char(k.kv)||
                       ') для вида вклада МЕГАБАНК - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--6.select n.tvbv, n.kk, n.nls0_procn, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCN,'0')<>'0'
--   and n.nls0_procn=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCN
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procn,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCN,'0')<>'0' and
                     n.nls0_procn=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCN     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(14): КОТЛОВОЙ счёт начисленных %% ('||
                       k.nls0_procn||'('||to_char(k.kv)||
                       ') для вида вклада МЕГАБАНК - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--7.select n.tvbv, n.kk, n.nls0_procz, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCZ,'0')<>'0'
--   and n.nls0_procz=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCZ
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procz,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCZ,'0')<>'0' and
                     n.nls0_procz=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCZ     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(15): КОТЛОВОЙ счёт зачисленных %% ('||
                       k.nls0_procz||'('||to_char(k.kv)||
                       ') для вида вклада МЕГАБАНК - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

    if p_code>0 then
      goto proverkineprosliMEGA; -- даже не начинать создание вкладов в АБС БАРС
    end if;

--8.проверка остатков на реальных котловых (ostc>0 and ostc=ostb)
--  возможно в будущем будет сделана, пока же ниже при ОПЛАТЕ(2) выдаётся

--9.наличие видов вкладов МЕГАБАНК, описанных в DPT_VIDD_ASVO, в ASVO_NLS

    for k in (select deposit_cod kk
              from   dpt_vidd_asvo
              where  fff=p_tvbv and
                     deposit_cod not in (select kk
                                         from   asvo_nls
                                         where  tvbv=p_tvbv)
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(16): вид вклада МЕГАБАНК - '||
                       k.kk||' не описан в справочнике ASVO_NLS');
    end loop;

    if p_code>0 then
      goto proverkineprosliMEGA; -- даже не начинать создание вкладов в АБС БАРС
    end if;

    netvida_ := ',';
    kkmarkm_ := ',';
    raznkod_ := ',';
    raznbal_ := ',';

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_vidd_flag0 (vidd NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'INSERT
                         INTO   ASVO_TEMP_dpt_vidd_flag0
                         select vidd
                         FROM   dpt_vidd
                         where  flag=0';
    exception when OTHERS then
      null;
    end;

    toroot;
    update dpt_vidd
    set    flag=1
    where  flag=0;
    commit;

    tokf;
    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;
    toroot;

--  id_ := '0';

    if FieldInTable('D_FIL','ASVO_MEGA')=0 then
      sqlt1_ := 'trim(DEPCODE||substr(BALNLS,8,2))';
      sqlt2_ := 'substr(BALNLS,-2)';
      sqltw_ := 'where balance>0';
    else
      sqlt1_ := 'trim(DEPCODE||substr(BALNLS,-2))';
      sqlt2_ := 'nvl(d_fil,'''||p_tvbv||''')';
      sqltw_ := '';
    end if;

    sql_:='select FIO                                    ,  --fio_
                  IDCODE                                 ,  --icod_
                  decode(nvl(DOCTYPE,1),1,1,2,3,3,2,-1)  ,  --tidok_
                  PASP_S                                 ,  --seria_
                  PASP_N                                 ,  --nomer_
                  trim(substr(PASP_W,1,70))              ,  --kevid_
                  PASP_D                                 ,  --david_
                  BIRTHDAT                               ,  --bday_
--                0 /* SEX */                            ,  --sex_
                  decode(SEX,1,1,2,2,0)                  ,  --sex_
                  POSTIDX                                ,  --index_
                  REGION                                 ,  --obl_
                  DISTRICT                               ,  --rajon_
                  CITY                                   ,  --city_
                  ADDRESS                                ,  --address_
                  trim(substr(PHONE_H,1,20))             ,  --phone_
                  nvl(nullif(LANDCOD,0),804)             ,  --country_
                  REGDATE                                ,  --REGDATE_
--                trim(DEPCODE||substr(BALNLS,8,2))      ,  --kkmark_
--                trim(DEPCODE||substr(BALNLS,-2))       ,  --kkmark_
                  '||sqlt1_||'                           ,  --kkmark_
                  DEPNAME                                ,  --DEPNAME_
                  NUMBOOK                                ,  --nsc_
                  BEGINDATE                              ,  --datp_
                  ENDDATE                                ,  --dDatEnd_
                  BEGINSUM                               ,  --BEGINSUM_
                  BALANCE                                ,  --ost_
                  PROCSTAVKA                             ,  --percent_
                  SUMPROC                                ,  --zpr_
                  ENDPROCDAT                             ,  --dzpr_
                  COUNTPEREO                             ,  --cnt_
                  KODVAL                                 ,  --kv_
                  substr(BALNLS,1,4)                     ,  --nbsdepo_
                  BRANCH                                 ,  --BRANCHMEGA_
                  SUMPROCN                               ,  --npr_
                  ENDPRODATN                             ,  --dnpr_
                  D_FACETYPE                             ,  --D_FACETYPE_
                  D_FIO                                  ,  --nmkn_
                  D_IDCODE                               ,  --okpon_
                  decode(nvl(D_DOCTYPE,1),1,1,2,3,3,2,-1),  --tidok_
                  D_PASP_S                               ,  --serin_
                  D_PASP_N                               ,  --nomen_
                  trim(substr(D_PASP_W,1,70))            ,  --vidan_
                  D_PASP_D                               ,  --ddavn_
                  D_BIRTHDAT                             ,  --bdayn_
--                0 /* D_SEX */                          ,  --sexn_
                  decode(D_SEX,1,1,2,2,0)                ,  --sexn_
                  D_POSTIDX                              ,  --inden_
                  D_REGION                               ,  --obln_
                  D_DISTRICT                             ,  --rajnn_
                  D_CITY                                 ,  --cityn_
                  D_ADDRESS                              ,  --adrn_
                  trim(substr(D_PHONE_H,1,20))           ,  --teldn_
                  nvl(nullif(D_LANDCOD,0),804)           ,  --countryn_
                  nvl(D_REGDATE,BEGINDATE)               ,  --REGDATEn_
                  D_BEG                                  ,  --begn_
                  D_END                                  ,  --endn_
--                substr(BALNLS,-2)                         --id_
--                nvl(d_fil,'''||p_tvbv||''')               --id_
                  '||sqlt2_||'                              --id_
           from   ASVO_MEGA
--         where  balance>0
           '||sqltw_||'
           order  by DEPCODE,NUMBOOK,D_END desc';

    open cur_ for sql_;

    flkall_ := 0;
    loop

      fetch cur_ into fio_       ,
                      icod_      ,
                      tidok_     ,
                      seria_     ,
                      nomer_     ,
                      kevid_     ,
                      david_     ,
                      bday_      ,
                      sex_       ,
                      index_     ,
                      obl_       ,
                      rajon_     ,
                      city_      ,
                      address_   ,
                      phone_     ,
                      country_   ,
                      REGDATE_   ,
                      kkmark_    ,
                      DEPNAME_   ,
                      nsc_       ,
                      datp_      ,
                      dDatEnd_   ,
                      BEGINSUM_  ,
                      ost_       ,
                      percent_   ,
                      zpr_       ,
                      dzpr_      ,
                      cnt_       ,
                      kv_        ,
                      nbsdepo_   ,
                      BRANCHMEGA_,
                      npr_       ,
                      dnpr_      ,
                      D_FACETYPE_,
                      nmkn_      ,
                      okpon_     ,
                      tidokn_    ,
                      serin_     ,
                      nomen_     ,
                      vidan_     ,
                      ddavn_     ,
                      bdayn_     ,
                      sexn_      ,
                      inden_     ,
                      obln_      ,
                      rajnn_     ,
                      cityn_     ,
                      adrn_      ,
                      teldn_     ,
                      countryn_  ,
                      REGDATEn_  ,
                      begn_      ,
                      endn_      ,
                      id_;
      exit when cur_%notfound;

      dbms_application_info.set_client_info('open='||to_char(p_open)||
                                         ', error='||to_char(p_code));

      bars_audit.info(substr(p_errmask,1,length(p_errmask)-3)||'вид вклада='||kkmark_||
                                                    ' nsc_=' ||nsc_                  ||
                                                    ' ost_=' ||ost_                  ||
                                                    ' npr_=' ||npr_                  ||
                                                    ' zpr_=' ||zpr_                  ||
                                                    ' icod_='||nvl(icod_,'000000000')||
                                                    ' fio_=' ||fio_);
      nlsKOTLOdepo_ := null;
      nlsKOTLOperc_ := null;
      nlsKOTLOperz_ := null;
      fulladdress_  := null;
--    address_      := null;
      dptvidd_      := null;
      dptkv_        := null;
      dptid_        := null;
      rnk_          := null;

--    resid_code_   := to_number(iif_n(country_,804,'0','1','0'));
--    resid_coden_  := to_number(iif_n(countryn_,804,'0','1','0'));

      resid_code_   := case when country_=804 then
                         1
                       else
                         0
                       end;
      resid_coden_  := case when countryn_=804 then
                         1
                       else
                         0
                       end;

      flkall_       := flkall_+1;

      BEGIN

        if nvl(instr(kkmarkm_,','||kkmark_||','),0)>0 then
          goto kkmarkmnogoviddMEGA;
        end if;

        if nvl(instr(netvida_,','||kkmark_||','),0)>0 then
          goto netvidadepositaMEGA;
        end if;

        if nvl(instr(raznkod_,','||kkmark_||','),0)>0 then
          goto razniekodivalutMEGA;
        end if;

        if nvl(instr(raznbal_,','||kkmark_||','),0)>0 then
          goto razniebalschetaMEGA;
        end if;

        if datp_ is null then
          goto netdatiotkritiaMEGA;
        end if;

        begin
          select d.deposit_id,
                 a.rnk
          into   dptid_,
                 rnk_
          from   accounts    a,
                 dpt_deposit d,
                 accountsw   w
          where  a.nlsalt=nsc_                                    and
                 d.nd=kkmark_||'_'||p_tvbv||'_0_'||id_||'_'||nsc_ and
                 a.branch=branch_                                 and
                 a.branch=d.branch                                and
                 a.acc=d.acc                                      and
                 w.acc=a.acc                                      and
                 d.comments like '%Imported from MEGABANK'        and
                 w.tag='KKASV'                                    and
                 w.value=kkmark_;
--        goto ugezaimpotiliMEGA;
          naslonly_ := true;
          fl_       := 0;
          goto vozmojninsledniki;
        exception when no_data_found then
          naslonly_ := false;
        end;

        fl_ := 0;

        icod_ := TRIM(icod_);

        begin
          i_ := to_number(icod_);
        exception when OTHERS then
          icod_ := '000000000';
        end;
        if length(icod_)=0 or icod_ is null then
          icod_ := '000000000';
        end if;

        begin
          select distinct
                 d.vidd                ,
                 d.kv                  ,
                 d.bsd                 ,
                 nvl(d.duration,0)     ,
                 nvl(d.duration_days,0),
                 d.term_type           ,
                 d.fl_dubl             ,
                 d.type_cod            ,
                 nvl(de.method_id,1)
          into   dptvidd_      ,
                 dptkv_        ,
                 bsd_          ,
                 duration_     ,
                 duration_days_,
                 term_type_    ,
                 fl_dubl_      ,
                 type_cod_     ,
                 method_id_
          from   dpt_vidd_asvo    da,
                 dpt_vidd         d ,
                 dpt_vidd_extdesc de
          where  da.deposit_cod=kkmark_ and
                 da.vidd=d.vidd         and
                 da.fff=p_tvbv          and
                 de.type_id(+)=d.extension_id;
        exception when too_many_rows then
          goto kkmarkmnogoviddMEGA;
                  when no_data_found then
          goto netvidadepositaMEGA;
        end;

--      проверка на соответствие валюты вклада MEGA валюте вида вклада БАРС

        if (dptkv_=980 and kv_ is null) or  --гривна
           (dptkv_=980 and kv_=980)     or  --гривна
           (dptkv_=978 and kv_=978)     or  --евро
           (dptkv_=840 and kv_=840)     or  --доллар
           (dptkv_=643 and kv_=643)     or  --рубль
           (dptkv_=826 and kv_=826)   then  --фунт
          null;
        else
          goto razniekodivalutMEGA;
        end if;

        ob22depo_ := null;  -- OB22  для счёта депозита
        nbsperc_  := null;  -- балансовый счёт начисл%%
        ob22perc_ := null;  -- OB22  для счёта начисл%%
        nbsperz_  := null;  -- балансовый счёт зачисл%%
        ob22perz_ := null;  -- OB22  для счёта зачисл%%

--      проверка на соответствие бал. счетов вклада АСВО и вида вклада БАРС

        if bsd_<>nbsdepo_ then
          goto razniebalschetaMEGA;
        end if;

--      проверка на соответствие дат начала и окончания вклада

        if datp_>=dDatEnd_ then
          goto datbegbordatendMEGA;
        end if;

--      определение котловых счетов по таблице ASVO_NLS

        begin
          select NLS_DEPO ,
                 NLS_PROCN,
                 NLS_PROCZ
          into   nlsKOTLOdepo_,
                 nlsKOTLOperc_,
                 nlsKOTLOperz_
          from   ASVO_NLS
          where  TVBV=p_tvbv and
                 rownum<2    and
                 KK=kkmark_;
        exception when no_data_found then
          nlsKOTLOdepo_ := null;
          nlsKOTLOperc_ := null;
          nlsKOTLOperz_ := null;
        end;

--      корректировка даты рождения
        bday_ := CorrectBdayOkpo(bday_,icod_);

--      рихтовка даты завершения вклада для видов вкладов "Дитячий"
--      (возможно надо будет вставить)

        fulladdress_     := replace(trim(obl_||' '||rajon_||' '||city_||' '||address_),'  ',' ');
        if length(fulladdress_)>70 then
          fulladdress_   := replace(trim(rajon_||' '||city_||' '||address_),'  ',' ');
          if length(fulladdress_)>70 then
            fulladdress_ := trim(substr(replace(city_||' '||address_,'  ',' '),1,70));
          end if;
        end if;
        address_ := trim(substr(address_,1,100));

--      dpt_web.p_open_vklad_rnk

        begin
          bc.subst_branch(branch_);
          rnk_     := null;
          savepoint sp_openrnk;
          dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'        ,
                                   p_clientname       => fio_        ,  --p_clientname       IN  customer.nmk%type,
                                   p_client_name      => null        ,  --p_client_name      IN  varchar2 default null,
                                   p_client_surname   => null        ,  --p_client_surname   IN  varchar2 default null,
                                   p_client_patr      => null        ,  --p_client_patr      IN  varchar2 default null,
                                   p_country          => country_    ,  --p_country          IN  customer.country%type,
                                   p_index            => index_      ,  --p_index            IN  varchar2,
                                   p_obl              => obl_        ,  --p_obl              IN  varchar2,
                                   p_district         => rajon_      ,  --p_district         IN  varchar2,
                                   p_settlement       => city_       ,  --p_settlement       IN  varchar2,
                                   p_adress           => address_    ,  --p_adress           IN  varchar2,
                                   p_fulladdress      => fulladdress_,  --p_fulladdress      IN  customer.adr%type,
                       /* null */  p_clientcodetype   => 2           ,  --p_clientcodetype   IN  customer.tgr%type,
                                   p_clientcode       => icod_       ,  --p_clientcode       IN  customer.okpo%type,
                   /* nPASP_ 1 */  p_doctype          => tidok_      ,  --p_doctype          IN  person.passp%type,
                                   p_docserial        => seria_      ,  --p_docserial        IN  person.ser%type,
                                   p_docnumber        => nomer_      ,  --p_docnumber        IN  person.numdoc%type,
                                   p_docorg           => kevid_      ,  --p_docorg           IN  person.organ%type,
                                   p_docdate          => david_      ,  --p_docdate          IN  person.pdate%type,
                                   p_clientbdate      => bday_       ,  --p_clientbdate      IN  person.bday%type,
                                   p_clientbplace     => null        ,  --p_clientbplace     IN  person.bplace%type,
                                   p_clientsex        => sex_        ,  --p_clientsex        IN  person.sex%type,
                                   p_clientHomePh     => phone_      ,  --p_clienthomeph     IN  person.teld%type,
                                   p_clientWorkPh     => null        ,  --p_clientworkph     IN  person.telw%type,
                                   p_clientname_gc    => null        ,  --p_clientname_gc    IN  customerw.value%type,
                                   p_resid_code       => resid_code_ ,  --p_resid_code       IN  number,
                                   p_resid_index      => index_      ,  --p_resid_index      IN  varchar2,
                                   p_resid_obl        => obl_        ,  --p_resid_obl        IN  varchar2,
                                   p_resid_district   => rajon_      ,  --p_resid_district   IN  varchar2,
                                   p_resid_settlement => city_       ,  --p_resid_settlement IN  varchar2,
                                   p_resid_adress     => address_    ,  --p_resid_adress     IN  varchar2,
                                   p_clientid         => rnk_        ,  --p_clientid     IN OUT  number,
                        /* null */ p_registrydate     => datp_);        --p_registrydate     IN  date default null

          bc.set_context;
        exception when OTHERS then
          rollback to sp_openrnk;
          bc.set_context;
          p_code := p_code+1;
          text_ := 'Ошибка при выполнении p_open_vklad_rnk: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          bars_audit.error(p_errmask                ||'(2): ' ||
                           'код ТВБВ='              ||p_tvbv  ||
                           ', код вида вклада='     ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||
                           ', номер вклада='        ||nsc_    ||
                           ', код ОКПО='            ||icod_   ||' - '||text_);
          fl_     := 1;
--        flkart_ := flkart_+1;
        end;

<<vozmojninsledniki>> null;

        if fl_=0 then

          if naslonly_ then
            goto naslonly;
          end if;

          begin

            bc.subst_branch(branch_);

            gl.pl_dat(p_dasvox);
            gl.amfo := f_ourmfo_g;

            if datp_>gl.bdate then
              goto baddataotkritiaMEGA;
            end if;

            glbd_    := gl.bdate;
            gl.bdate := datp_;

            glauid_  := gl.aUid;
            select max(id)
            into   auid_
            from   staff
            where  tabn is not null and
                   bax=1;
            if auid_ is null then
              select max(id)
              into   auid_
              from   staff
              where  tabn is not null;
              if auid_ is null then
                select max(id)
                into   auid_
                from   staff;
                if auid_ is null then
                  auid_ := gl.aUid;
                end if;
              end if;
            end if;
            gl.aUid := auid_;

--          if duration_+duration_days_!=0 then
            if duration_+duration_days_!=0 and term_type_=1 then
              srok_ := null;
            else
              if dDatEnd_ is null then
                if dptvidd_=110 then
                  srok_ := 184;
                else
                  srok_ := null;
                end if;
              else
                srok_ := dDatEnd_-datp_;
              end if;
            end if;

            dptid_ := null;
            dpt_web.create_deposit(dptvidd_                ,  --p_vidd          IN  dpt_deposit.vidd%type,   вклад АСВО
                                   rnk_                    ,  --p_rnk           IN  dpt_deposit.rnk%type,
--                                 ND_                     ,  --p_nd            IN  dpt_deposit.nd%type,     idkart_tvbv_(nsc)
                                   kkmark_||'_'||p_tvbv||
                                   '_0_'||id_||'_'||nsc_   ,
                                   ost_                    ,  --p_sum           IN  dpt_deposit.limit%type,  ost
                                   0                       ,  --p_nocash        IN  number,                  0
                                   datp_                   ,  --p_datz          IN  dpt_deposit.datz%type,   DATO
                                   null                    ,  --p_namep         IN  dpt_deposit.name_p%type,
                                   null                    ,  --p_okpop         IN  dpt_deposit.okpo_p%type,
                                   null                    ,  --p_nlsp          IN  dpt_deposit.nls_p%type,
                                   null                    ,  --p_mfop          IN  dpt_deposit.mfo_p%type,
                                   0                       ,  --p_fl_perekr     IN  dpt_vidd.fl_2620%type,
                                   null                    ,  --p_name_perekr   IN  dpt_deposit.nms_d%type,
                                   null                    ,  --p_okpo_perekr   IN  dpt_deposit.okpo_p%type,
                                   null                    ,  --p_nls_perekr    IN  dpt_deposit.nls_d%type,
                                   null                    ,  --p_mfo_perekr    IN  dpt_deposit.mfo_d%type,
                                   'Imported from MEGABANK',  --p_comment       IN  dpt_deposit.comments%type,
                                   dptid_                  ,  --p_dpt_id        OUT dpt_deposit.deposit_id%type,
                                   datp_                   ,  --p_datbegin      IN  dpt_deposit.dat_begin%type default gl.bdate
                                   null                    ,  --p_duration      IN  dpt_vidd.duration%type default null
                                   srok_);                    --p_duration_days IN  dpt_vidd.duration_days%type default null
          exception when OTHERS then
            rollback to sp_openrnk;
            bc.set_context;
            p_code := p_code+1;
            gl.bdate := glbd_;
            gl.aUid  := glauid_;
--          if typeid_ is null then
            text_ := 'Ошибка при выполнении create_deposit: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--          else
--            text_ := 'Ошибка при выполнении create_contract: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--          end if;
--          begin
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
               /* k.KKFFFACTUAL */ null         ,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   null         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
--          exception when OTHERS then
--            bars_audit.info('asvo_log_write: '||'  kkmark_      ='||kkmark_
--                                              ||', dptvidd_     ='||dptvidd_
--                                              ||', dptkv_       ='||dptkv_
--                                              ||', p_tvbv       ='||p_tvbv
--                                              ||', branch_      ='||branch_
--                                              ||', nlsKOTLOdepo_='||nlsKOTLOdepo_
--                                              ||', nlsKOTLOperc_='||nlsKOTLOperc_
--                                              ||', nlsKOTLOperz_='||nlsKOTLOperz_
--                                              ||', id_          ='||id_
--                                              ||', nsc_         ='||nsc_
--                                              ||', fio_         ='||fio_
--                                              ||', icod_        ='||icod_
--                                              ||', seria_       ='||seria_
--                                              ||', nomer_       ='||nomer_
--                                              ||', ost_         ='||ost_
--                                              ||', npr_         ='||npr_
--                                              ||', zpr_         ='||zpr_
--                                              ||', text_        ='||text_
--                                              ||', sysdate      ='||sysdate
--                                              ||', rnk_         ='||rnk_
--                                              ||', dptid_       ='||dptid_
--                           );
--          end;
            bars_audit.error(p_errmask                ||'(3): ' ||
                             'код ТВБВ='              ||p_tvbv  ||
                             ', код вида вклада='     ||kkmark_ ||
                             ', код вида вклада БАРС='||dptvidd_||
                             ', номер вклада='        ||nsc_    ||
                             ', код ОКПО='            ||icod_   ||' - '||text_);
            fl_     := 1;
--          flkart_ := flkart_+1;
          end;

<<naslonly>> null;

          If fl_=0 then

            if naslonly_ then
              goto tolkonsledniki123;
            end if;

            gl.bdate := glbd_;

--          вычищаем INT_RATN по новом ACC и
--          записываем свои %%-ные ставки из вклада
--          для этого идём по массиву и
--          пишем последнюю процентную ставку в INT_RATN

--          if typeid_ is null then
            select acc
            into   accdepo_
            from   dpt_deposit
            where  deposit_id=dptid_;

            update dpt_deposit
            set    comments='Imported from MEGABANK',
                   DAT_END=dDatEnd_   -- ставим принудительно дату
            where  deposit_id=dptid_; -- завершения вклада (из АСВО)

            update dpt_deposit_clos
            set    dat_end=dDatEnd_
            where  deposit_id=dptid_;

--          пролонгации депозитов (проставляю количество оных +
--                                 изменяю дату начала вклада)

            if fl_dubl_>0 and cnt_>0 then
              update dpt_deposit
              set    cnt_dubl=cnt_
              where  deposit_id=dptid_;
--            аналогично и в Архиве депозитов
              update dpt_deposit_clos
              set    cnt_dubl=cnt_
              where  deposit_id=dptid_;
            end if;

<<tolkonsledniki123>> null;

            if D_FACETYPE_ in (1,2,3) then

--            здесь "замочить" наследника

              bc.subst_branch(branch_);
              gl.bdate := glbd_;

              if D_FACETYPE_=2 then

                fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||adrn_),'  ',' ');
                if length(fulladdressn_)>70 then
                  fulladdressn_ := trim(substr(replace(cityn_||' '||adrn_,'  ',' '),1,70));
                end if;
                adrn_ := trim(substr(adrn_,1,70));

                RNKnasle_ := null;

                begin
                  dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                           p_clientname       => nmkn_        , --p_clientname       IN  customer.nmk%type,
                                           p_client_name      => null         , --p_client_name      IN  varchar2 default null,
                                           p_client_surname   => null         , --p_client_surname   IN  varchar2 default null,
                                           p_client_patr      => null         , --p_client_patr      IN  varchar2 default null,
                                           p_country          => countryn_    , --p_country          IN  customer.country%type,
                                           p_index            => inden_       , --p_index            IN  varchar2,
                                           p_obl              => obln_        , --p_obl              IN  varchar2,
                                           p_district         => rajnn_       , --p_district         IN  varchar2,
                                           p_settlement       => cityn_       , --p_settlement       IN  varchar2,
                                           p_adress           => adrn_        , --p_adress           IN  varchar2,
                                           p_fulladdress      => fulladdressn_, --p_fulladdress      IN  customer.adr%type,
                                /* null */ p_clientcodetype   => 2            , --p_clientcodetype   IN  customer.tgr%type,
                                           p_clientcode       => okpon_       , --p_clientcode       IN  customer.okpo%type,
                                           p_doctype          => tidokn_      , --p_doctype          IN  person.passp%type,
                                           p_docserial        => serin_       , --p_docserial        IN  person.ser%type,
                                           p_docnumber        => nomen_       , --p_docnumber        IN  person.numdoc%type,
                                           p_docorg           => vidan_       , --p_docorg           IN  person.organ%type,
                                           p_docdate          => ddavn_       , --p_docdate          IN  person.pdate%type,
                                           p_clientbdate      => bdayn_       , --p_clientbdate      IN  person.bday%type,
                                           p_clientbplace     => null         , --p_clientbplace     IN  person.bplace%type,
                                           p_clientsex        => sexn_        , --p_clientsex        IN  person.sex%type,
                                           p_clientHomePh     => teldn_       , --p_clienthomeph     IN  person.teld%type,
                                           p_clientWorkPh     => null         , --p_clientworkph     IN  person.telw%type,
                                           p_clientname_gc    => null         , --p_clientname_gc    IN  customerw.value%type,
                                           p_resid_code       => resid_coden_ , --p_resid_code       IN  number,
                                           p_resid_index      => inden_       , --p_resid_index      IN  varchar2,
                                           p_resid_obl        => obln_        , --p_resid_obl        IN  varchar2,
                                           p_resid_district   => rajnn_       , --p_resid_district   IN  varchar2,
                                           p_resid_settlement => cityn_       , --p_resid_settlement IN  varchar2,
                                           p_resid_adress     => adrn_        , --p_resid_adress     IN  varchar2,
                                           p_clientid         => RNKnasle_    , --p_clientid     IN OUT  number,
                                /* null */ p_registrydate     => REGDATEn_);    --p_registrydate     IN  date default null
--                              /* null */ p_registrydate     => glbd_);        --p_registrydate     IN  date default null

                  update customer
                  set    notes='Наследник по вкладу '||nsc_
                  where  rnk=RNKnasle_;

                  dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                           8        ,   -- l_agrtype
                                           rnk_     ,   -- p_initcustid
                                           RNKnasle_,   -- p_trustcustid
                                           null     ,   -- p_trustid
                                           null     ,   -- p_transferdpt
                                           null     ,   -- p_transferint
                                           null     ,   -- p_amountcash
                                           null     ,   -- p_amountcashless
                                           begn_    ,   -- p_datbegin
                                           endn_    ,   -- p_datend
                                           null     ,   -- p_ratereqid
                                           null     ,   -- p_ratevalue
                                           null     ,   -- p_ratedate
                                           null     ,   -- p_denomamount
                                           null     ,   -- p_denomcount
                                           null     ,   -- p_denomref
                                           null     ,   -- p_comissref
                                           null     ,   -- p_docref
                                           -13      ,   -- p_comissreqid
                                           agrmntid_);  -- p_agrmntid

                exception when OTHERS then
                  if sqlerrm like '%DPT-00228%' then
                    null;
                  else
                    p_code := p_code+1;
                    text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                    toroot;
                    bars_audit.error(p_errmask                ||'(7): ' ||
                                     'код ТВБВ='              ||p_tvbv  ||
                                     ', код вида вклада='     ||kkmark_ ||
                                     ', код вида вклада БАРС='||dptvidd_||
                                     ', номер вклада='        ||nsc_    ||
                                     ', код ОКПО='            ||icod_   ||' - '||text_);
                    bc.subst_branch(branch_);
                  end if;
                end;

              end if;

--            здесь "замочить" доверенное лицо

              if D_FACETYPE_=1 then

                fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||adrn_),'  ',' ');
                if length(fulladdressn_)>70 then
                  fulladdressn_ := trim(substr(replace(cityn_||' '||adrn_,'  ',' '),1,70));
                end if;
                adrn_ := trim(substr(adrn_,1,70));

                RNKdover_ := null;

                begin
                  dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                           p_clientname       => nmkn_        , --p_clientname       IN  customer.nmk%type,
                                           p_client_name      => null         , --p_client_name      IN  varchar2 default null,
                                           p_client_surname   => null         , --p_client_surname   IN  varchar2 default null,
                                           p_client_patr      => null         , --p_client_patr      IN  varchar2 default null,
                                           p_country          => countryn_    , --p_country          IN  customer.country%type,
                                           p_index            => inden_       , --p_index            IN  varchar2,
                                           p_obl              => obln_        , --p_obl              IN  varchar2,
                                           p_district         => rajnn_       , --p_district         IN  varchar2,
                                           p_settlement       => cityn_       , --p_settlement       IN  varchar2,
                                           p_adress           => adrn_        , --p_adress           IN  varchar2,
                                           p_fulladdress      => fulladdressn_, --p_fulladdress      IN  customer.adr%type,
                                /* null */ p_clientcodetype   => 2            , --p_clientcodetype   IN  customer.tgr%type,
                                           p_clientcode       => okpon_       , --p_clientcode       IN  customer.okpo%type,
                                           p_doctype          => tidokn_      , --p_doctype          IN  person.passp%type,
                                           p_docserial        => serin_       , --p_docserial        IN  person.ser%type,
                                           p_docnumber        => nomen_       , --p_docnumber        IN  person.numdoc%type,
                                           p_docorg           => vidan_       , --p_docorg           IN  person.organ%type,
                                           p_docdate          => ddavn_       , --p_docdate          IN  person.pdate%type,
                                           p_clientbdate      => bdayn_       , --p_clientbdate      IN  person.bday%type,
                                           p_clientbplace     => null         , --p_clientbplace     IN  person.bplace%type,
                                           p_clientsex        => sexn_        , --p_clientsex        IN  person.sex%type,
                                           p_clientHomePh     => teldn_       , --p_clienthomeph     IN  person.teld%type,
                                           p_clientWorkPh     => null         , --p_clientworkph     IN  person.telw%type,
                                           p_clientname_gc    => null         , --p_clientname_gc    IN  customerw.value%type,
                                           p_resid_code       => resid_coden_ , --p_resid_code       IN  number,
                                           p_resid_index      => inden_       , --p_resid_index      IN  varchar2,
                                           p_resid_obl        => obln_        , --p_resid_obl        IN  varchar2,
                                           p_resid_district   => rajnn_       , --p_resid_district   IN  varchar2,
                                           p_resid_settlement => cityn_       , --p_resid_settlement IN  varchar2,
                                           p_resid_adress     => adrn_        , --p_resid_adress     IN  varchar2,
                                           p_clientid         => RNKdover_    , --p_clientid     IN OUT  number,
                                /* null */ p_registrydate     => REGDATEn_);    --p_registrydate     IN  date default null
--                              /* null */ p_registrydate     => glbd_);        --p_registrydate     IN  date default null

                  update customer
                  set    notes='Доверенное лицо по вкладу '||nsc_
                  where  rnk=RNKdover_;

                  dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                           12       ,   -- l_agrtype
                                           rnk_     ,   -- p_initcustid
                                           RNKdover_,   -- p_trustcustid
                                           null     ,   -- p_trustid
                                           null     ,   -- p_transferdpt
                                           null     ,   -- p_transferint
                                           null     ,   -- p_amountcash
                                           null     ,   -- p_amountcashless
                                           begn_    ,   -- p_datbegin
                                           endn_    ,   -- p_datend
                                           null     ,   -- p_ratereqid
                                           null     ,   -- p_ratevalue
                                           null     ,   -- p_ratedate
                                           null     ,   -- p_denomamount
                                           null     ,   -- p_denomcount
                                           null     ,   -- p_denomref
                                           null     ,   -- p_comissref
                                           null     ,   -- p_docref
                                           -13      ,   -- p_comissreqid
                                           agrmntid_);  -- p_agrmntid
                exception when OTHERS then
                  if sqlerrm like '%DPT-00228%' then
                    null;
                  else
                    p_code := p_code+1;
                    text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                    toroot;
                    bars_audit.error(p_errmask                ||'(6): ' ||
                                     'код ТВБВ='              ||p_tvbv  ||
                                     ', код вида вклада='     ||kkmark_ ||
                                     ', код вида вклада БАРС='||dptvidd_||
                                     ', номер вклада='        ||nsc_    ||
                                     ', код ОКПО='            ||icod_   ||' - '||text_);
                    bc.subst_branch(branch_);
                  end if;
                end;

              end if;

--            здесь "замочить" бенецициара

              if D_FACETYPE_=3 then

                fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||adrn_),'  ',' ');
                if length(fulladdressn_)>70 then
                  fulladdressn_ := trim(substr(replace(cityn_||' '||adrn_,'  ',' '),1,70));
                end if;
                adrn_ := trim(substr(adrn_,1,70));

                RNKbenef_ := null;

                begin
                  dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                           p_clientname       => nmkn_        , --p_clientname       IN  customer.nmk%type,
                                           p_client_name      => null         , --p_client_name      IN  varchar2 default null,
                                           p_client_surname   => null         , --p_client_surname   IN  varchar2 default null,
                                           p_client_patr      => null         , --p_client_patr      IN  varchar2 default null,
                                           p_country          => countryn_    , --p_country          IN  customer.country%type,
                                           p_index            => inden_       , --p_index            IN  varchar2,
                                           p_obl              => obln_        , --p_obl              IN  varchar2,
                                           p_district         => rajnn_       , --p_district         IN  varchar2,
                                           p_settlement       => cityn_       , --p_settlement       IN  varchar2,
                                           p_adress           => adrn_        , --p_adress           IN  varchar2,
                                           p_fulladdress      => fulladdressn_, --p_fulladdress      IN  customer.adr%type,
                                /* null */ p_clientcodetype   => 2            , --p_clientcodetype   IN  customer.tgr%type,
                                           p_clientcode       => okpon_       , --p_clientcode       IN  customer.okpo%type,
                                           p_doctype          => tidokn_      , --p_doctype          IN  person.passp%type,
                                           p_docserial        => serin_       , --p_docserial        IN  person.ser%type,
                                           p_docnumber        => nomen_       , --p_docnumber        IN  person.numdoc%type,
                                           p_docorg           => vidan_       , --p_docorg           IN  person.organ%type,
                                           p_docdate          => ddavn_       , --p_docdate          IN  person.pdate%type,
                                           p_clientbdate      => bdayn_       , --p_clientbdate      IN  person.bday%type,
                                           p_clientbplace     => null         , --p_clientbplace     IN  person.bplace%type,
                                           p_clientsex        => sexn_        , --p_clientsex        IN  person.sex%type,
                                           p_clientHomePh     => teldn_       , --p_clienthomeph     IN  person.teld%type,
                                           p_clientWorkPh     => null         , --p_clientworkph     IN  person.telw%type,
                                           p_clientname_gc    => null         , --p_clientname_gc    IN  customerw.value%type,
                                           p_resid_code       => resid_coden_ , --p_resid_code       IN  number,
                                           p_resid_index      => inden_       , --p_resid_index      IN  varchar2,
                                           p_resid_obl        => obln_        , --p_resid_obl        IN  varchar2,
                                           p_resid_district   => rajnn_       , --p_resid_district   IN  varchar2,
                                           p_resid_settlement => cityn_       , --p_resid_settlement IN  varchar2,
                                           p_resid_adress     => adrn_        , --p_resid_adress     IN  varchar2,
                                           p_clientid         => RNKbenef_    , --p_clientid     IN OUT  number,
                                /* null */ p_registrydate     => REGDATEn_);    --p_registrydate     IN  date default null
--                              /* null */ p_registrydate     => glbd_);        --p_registrydate     IN  date default null

                  update customer
                  set    notes='Бенефициар по вкладу '||nsc_
                  where  rnk=RNKdover_;

                  dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                           5        ,   -- l_agrtype
                                           rnk_     ,   -- p_initcustid
                                           RNKbenef_,   -- p_trustcustid
                                           null     ,   -- p_trustid
                                           null     ,   -- p_transferdpt
                                           null     ,   -- p_transferint
                                           null     ,   -- p_amountcash
                                           null     ,   -- p_amountcashless
                                           begn_    ,   -- p_datbegin
                                           endn_    ,   -- p_datend
                                           null     ,   -- p_ratereqid
                                           null     ,   -- p_ratevalue
                                           null     ,   -- p_ratedate
                                           null     ,   -- p_denomamount
                                           null     ,   -- p_denomcount
                                           null     ,   -- p_denomref
                                           null     ,   -- p_comissref
                                           null     ,   -- p_docref
                                           -13      ,   -- p_comissreqid
                                           agrmntid_);  -- p_agrmntid
                exception when OTHERS then
                  if sqlerrm like '%DPT-00228%' then
                    null;
                  else
                    p_code := p_code+1;
                    text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                    toroot;
                    bars_audit.error(p_errmask                ||'(8): ' ||
                                     'код ТВБВ='              ||p_tvbv  ||
                                     ', код вида вклада='     ||kkmark_ ||
                                     ', код вида вклада БАРС='||dptvidd_||
                                     ', номер вклада='        ||nsc_    ||
                                     ', код ОКПО='            ||icod_   ||' - '||text_);
                    bc.subst_branch(branch_);
                  end if;
                end;

              end if;

            end if;

            if naslonly_ then
              goto ugezaimpotiliMEGA;
            end if;

--          здесь УЖЕ "замочены" наследники и доверенные лица

            tokf;

            delete
            from   INT_RATN
            where  acc=accdepo_;

            update INT_ACCN
            set    stp_dat=dDatEnd_-1,
                   acr_dat=gl.bdate  -- дату последнего начисления %% берём
            where  acc=accdepo_;     -- НЕ из АСВО, а СТРОГО банковскую

            prcdate_ := datp_;

            insert
            into int_ratn (acc ,
                           id  ,
                           bdat,
                           ir  ,
                           idu)
                   values (accdepo_,
                           1       ,
                           prcdate_,
                           percent_,
                           1);

            update accounts
            set    nlsalt=nsc_,
                   mdate=dDatEnd_
            where  acc=accdepo_;

            if npr_>0 then
              select acra
              into   accperc_
              from   int_accn
              where  acc=accdepo_ and
                     id=1;
            else
              select acrb
              into   accperc_
              from   int_accn
              where  acc=accdepo_ and
                     id=1;

              select nbs
              into   nbsacrb_
              from   accounts
              where  acc=accperc_;

              if nbsacrb_<>'3500' then
                select acra
                into   accperc_
                from   int_accn
                where  acc=accdepo_ and
                       id=1;
              end if;
            end if;

            update accounts
            set    nlsalt=nsc_,
                   mdate=dDatEnd_
            where  acc=accperc_;

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NSC_A' ,
                            nsc_);               -- номер сберкнижки АСВО/МЕГАБАНК

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KKASV' ,
                            kkmark_);            -- код картотеки АСВО/код вида вклада МЕГАБАНК

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            '%ASVO' ,
                            to_char(percent_));  -- процент АСВО/МЕГАБАНК по вкладу

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLD' ,
                            nlsKOTLOdepo_);      -- котловой счёт картотеки депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLN' ,
                            nlsKOTLOperc_);      -- котловой счёт картотеки начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLZ' ,
                            nlsKOTLOperz_);      -- котловой счёт картотеки зачисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'OST_D' ,
                            to_char(ost_));      -- остаток АСВО/МЕГАБАНК по вкладу (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NPR_D' ,
                            to_char(npr_));      -- сумма начисленных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'ZPR_D' ,
                            to_char(zpr_));      -- сумма зачисленных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_D' ,
                            to_char(nbsdepo_));  -- балансовый счёт депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_N' ,
                            to_char(nbsperc_));  -- балансовый счёт начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_Z' ,
                            to_char(nbsperz_));  -- балансовый счёт зачисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_TDOK',
                            to_char(tidok_));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_DEPN',
                            DEPNAME_);

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_BEGS',
                            to_char(BEGINSUM_));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_DZPR',
                            to_char(dzpr_,'DD/MM/YYYY'));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_DNPR',
                            to_char(dnpr_,'DD/MM/YYYY'));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_REGD',
                            to_char(REGDATEn_,'DD/MM/YYYY'));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'MEG_BRAO',
                            BRANCHMEGA_);

            commit;

            bc.set_context;

            text_ := 'Открыт депозит (без загрузки счёта суммой вклада МЕГАБАНК)';
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
               /* k.KKFFFACTUAL */ null         ,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   null         ,
                                   npr_         ,
                                   zpr_         ,
                                   0            ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            p_open    := p_open+1;
            if mod(p_open,10000)=1 then

--            сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

              BEGIN
                DBMS_JOB.SUBMIT (job       => Job_                    ,
                                 what      => 'migraAS.tableDP_stats;',
                                 next_date => sysdate                 ,
                                 interval  => null                    ,
                                 no_parse  => FALSE);
              exception when others then
                bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
              END;

            end if;

          end if;

        end if;

        goto normgeroiobxodMEGA;

<<kkmarkmnogoviddMEGA>> null;

        if nvl(instr(kkmarkm_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'У кода вида вклада МЕГАБАНК более одного соответствия виду вклада БАРС';
          toroot;
          bars_audit.error(p_errmask           ||'(19): '||
                           'код ТВБВ='         ||p_tvbv  ||
                           ', код вида вклада='||kkmark_ ||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          kkmarkm_ := kkmarkm_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxodMEGA;

<<netvidadepositaMEGA>> null;

        if nvl(instr(netvida_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Нет соответствия кода вида вклада МЕГАБАНК виду вклада БАРС';
          toroot;
          bars_audit.error(p_errmask||'(1): '  ||
                           'код ТВБВ='         ||p_tvbv ||
                           ', код вида вклада='||kkmark_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          netvida_ := netvida_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxodMEGA;

<<datbegbordatendMEGA>> null;

        p_code := p_code+1;
        text_  := 'Дата открытия вклада больше или равна даты окончания';
        toroot;
        bars_audit.error(p_errmask                ||'(18): '||
                         'код ТВБВ='              ||p_tvbv  ||
                         ', код вида вклада='     ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               null         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxodMEGA;

<<netdatiotkritiaMEGA>> null;

        p_code := p_code+1;
        text_  := 'Отсутствует дата открытия вклада МЕГАБАНК';
        toroot;
        bars_audit.error(p_errmask                ||'(5): ' ||
                         'код ТВБВ='              ||p_tvbv  ||
                         ', код вида вклада='     ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               null         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxodMEGA;

<<baddataotkritiaMEGA>> null;

        p_code := p_code+1;
        text_  := 'Дата открытия вклада МЕГАБАНК больше текущей банковской даты';
        bc.set_context;
        bars_audit.error(p_errmask                ||'(17): '||
                         'код ТВБВ='              ||p_tvbv  ||
                         ', код вида вклада='     ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               null         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxodMEGA;

<<razniekodivalutMEGA>> null;

        if nvl(instr(raznkod_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Код валюты вклада МЕГАБАНК не соответствует коду валюты вида вклада БАРС';
          bc.set_context;
          bars_audit.error(p_errmask||'(4): '       ||
                           'код ТВБВ='              ||p_tvbv  ||
                           ', код вида вклада='     ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          raznkod_ := raznkod_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxodMEGA;

<<razniebalschetaMEGA>> null;

        if nvl(instr(raznbal_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Балансовый счёт вклада МЕГАБАНК не равен балансовому счёту вида вклада БАРС';
          bc.set_context;
          bars_audit.error(p_errmask||'(20): '      ||
                           'код ТВБВ='              ||p_tvbv  ||
                           ', код вида вклада='     ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          raznbal_ := raznbal_||kkmark_||',';
        end if;
--      flkart_ := 9999999;

<<normgeroiobxodMEGA>> null;

      END;

<<ugezaimpotiliMEGA>> null;

    end loop;
    close cur_;

    dbms_application_info.set_client_info(' ');

    toroot;
    begin
      execute immediate 'update dpt_vidd
                         set    flag=0
                         where  vidd in (select vidd
                                         from   ASVO_TEMP_dpt_vidd_flag0)';
      commit;
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_vidd_flag0';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG enable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 enable';
    exception when OTHERS then
      null;
    end;

--  сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

    BEGIN
      DBMS_JOB.SUBMIT (job       => Job_                    ,
                       what      => 'migraAS.tableDP_stats;',
                       next_date => sysdate                 ,
                       interval  => null                    ,
                       no_parse  => FALSE);
    exception when others then
      bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
    END;

<<proverkineprosliMEGA>> null;

    bars_alerter(1);

  end create_dptMEGA;

--

  procedure load_ostcdMEGA (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is
    TT_        oper.TT%type  :='АСВ';
    VOB_       oper.VOB%type :=6;
    REF_       oper.REF%type;
    KOTLD_     varchar2(14);
    KOTLN_     varchar2(14);
    KOTLZ_     varchar2(14);
    sumOSTD_   number;
    sumNPRD_   number;
    sumZPRD_   number;
    nlsNP_     varchar2(14);
    nmkd_      varchar2(38);
    nmsd_      varchar2(38);
    nmsn_      varchar2(38);
    nmsz_      varchar2(38);
    branch_    varchar2(32);
    kktokens_  varchar2_list;
    text_      varchar2(512);
    pd_        int;
    pn_        int;
    pz_        int;
    daos_      date;
    acc_       accounts.acc%type;

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;
    pd_    := 0;
    pn_    := 0;
    pz_    := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  bars_audit.info('load_ostcdMEGA - @ branch_='||branch_);

--  депозиты

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

    for k in (select a.nls                 ,
                     a.kv                  ,
                     substr(a.nms,1,38) nms,
                     d.acc                 ,
                     d.limit               ,
                     d.deposit_id          ,
                     d.vidd                ,
                     d.nd                  ,
                     d.rnk
              from   dpt_deposit d,
                     accounts    a
              where  d.comments='Imported from MEGABANK' and
                     d.acc=a.acc                         and
                     d.branch=branch_                    and
                     length(d.nd)-length(replace(d.nd,'_'))>=4)
    loop

--    bars_audit.info('load_ostcdMEGA - 0 k.acc='||k.acc||', k.kv='||k.kv);

      begin
        select value
        into   KOTLD_
        from   accountsw
        where  tag='KOTLD' and acc=k.acc;
      exception when no_data_found then
        bars_audit.error(p_errmask||'(10): не найден котловой счёт для вклада '||
                         k.nd||' '||k.nls||'('||k.kv||') - '||sqlerrm||' '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofoundMEGA;
      end;

      begin
        select trim(substr(nms,1,38)),
               daos                  ,
               acc
        into   nmsd_,
               daos_,
               acc_
        from   accounts
        where  nls=KOTLD_ and
               kv=k.kv    and
               DAZS is null;
      exception when OTHERS then
        if pd_=0 then
          bars_audit.error(p_errmask||'(1): не найден или закрыт счёт '||KOTLD_||'('||k.kv||') - '||
                           sqlerrm||' '||dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          pd_ := 1;
        end if;
--      rollback;
        goto nofoundMEGA;
      end;

      if daos_>p_dasvox then
        update accounts
        set    daos=p_dasvox
        where  acc=acc_;
      end if;

--    bars_audit.info('load_ostcdMEGA - 1 k.acc='||k.acc);

      GL.REF
           (REF_);

--    bars_audit.info('load_ostcdMEGA - 2');

      GL.IN_DOC3
           (REF_ , TT_    , VOB_   , REF_   , SYSDATE, GL.BDATE, 1,
            k.KV , k.limit, k.KV   , k.limit, NULL   , GL.BDATE, GL.BDATE,
            nmsd_, KOTLD_ , gl.AMFO,
            k.NMS, k.NLS  , gl.AMFO,
            'Розкриття депозитного рахунку з МЕГАБАНК',
            NULL, null, null, NULL, NULL, 0, NULL, null);

--    bars_audit.info('load_ostcdMEGA - 3');

      begin
        GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLD_, k.limit,
                                         k.KV, k.NLS , k.limit);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(5): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofoundMEGA;
      end;

--    bars_audit.info('load_ostcdMEGA - 4');

      begin
        select to_number(value)
        into   sumNPRD_
        from   accountsw
        where  tag='NPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumNPRD_ := 0;
      end;

      if sumNPRD_>0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(2): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofoundMEGA;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdMEGA - 5a');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLN_, sumNPRD_,
                                         k.KV, nlsNP_, sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(6): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofoundMEGA;
        end;
      end if;

      if sumNPRD_<0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(3): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofoundMEGA;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acrb=a.acc;

--      bars_audit.info('load_ostcdMEGA - 5b');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 0, k.KV, KOTLN_, -sumNPRD_,
                                         k.KV, nlsNP_, -sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(7): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofoundMEGA;
        end;

      end if;

--    bars_audit.info('load_ostcdMEGA - 6  k.acc='||k.acc);

      begin
        select to_number(value)
        into   sumZPRD_
        from   accountsw
        where  tag='ZPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumZPRD_ := 0;
      end;

      if sumZPRD_>0 then

        select value
        into   KOTLZ_
        from   accountsw
        where  tag='KOTLZ' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsz_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLZ_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pz_=0 then
            bars_audit.error(p_errmask||'(4): не найден или закрыт счёт '||KOTLZ_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pz_ := 1;
          end if;
          rollback;
          goto nofoundMEGA;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdMEGA - 7');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLZ_, sumZPRD_,
                                         k.KV, nlsNP_, sumZPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(8): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofoundMEGA;
        end;

      end if;

--    bars_audit.info('load_ostcdMEGA - 8');

      begin
        GL.PAY
             (2, REF_, GL.BDATE);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(9): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofoundMEGA;
      end;

--    bars_audit.info('load_ostcdMEGA - 9');

      insert
      into   operw (ref,
                    tag,
                    value)
            values (REF_   ,
                    'ND   ',
                    k.deposit_id);

      update dpt_deposit
      set    comments='*Imported from MEGABANK'
      where  deposit_id=k.deposit_id;

      delete
      from   oper_ext
      where  ref=REF_;

      commit;

--    bars_audit.info('load_ostcdMEGA - k.nd='||k.nd);

      migraAS.get_tokens(k.nd,'_',kktokens_);
      text_ := 'Счёт депозита загружен';
      migraAS.asvo_log_write(kktokens_(1),
                             k.vidd      ,
                             k.kv        ,
                             p_tvbv      ,
                             null        ,
                             branch_     ,
                             KOTLD_      ,
                             KOTLN_      ,
                             KOTLZ_      ,
                             kktokens_(3),
                             kktokens_(4),
                             null        ,
                             null        ,
                             null        ,
                             null        ,
                             k.limit     ,
                             null        ,
                             sumNPRD_    ,
                             sumZPRD_    ,
                             1           ,
                             text_       ,
                             sysdate     ,
                             k.rnk       ,
                             k.deposit_id);
      p_open := p_open+1;

<<nofoundMEGA>> null;

      dbms_application_info.set_client_info('load='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

--  dbms_application_info.set_client_info('pereocenka');

--  migraAS.pereocenka(p_tvbv,p_open,p_code,p_errmask,p_dasvox);
--  commit;

    bc.set_context;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end load_ostcdMEGA;

--

--==============================================

  procedure NLStoSPRSBON (p_open in out number  ,
                          p_code in out number  ,
                          p_errmask     varchar2,
                          p_nlsmask     varchar2,
                          p_dfNLS       varchar2)
  is

    fff_               char(3);
    cnt_               number;
    mfo_               varchar2(12);
    nls_depo_          varchar2(15);
    nls_procn_         varchar2(15);
    nls_procz_         varchar2(15);

    type               cur is ref cursor;
    cur_               cur;
    sql_               varchar2(1024);

    deposit_cod_       varchar2(18);
    deposit_name_      varchar2(50);
    vidd_              number;
    type_name_         varchar2(70);
    kv_                number;
    nls0_depo_         varchar2(15);
    nls0_procn_        varchar2(15);
    nls0_procz_        varchar2(15);

    nlsmask_           varchar2(15);
    podr_              char(2);

    len_DEPOSIT_NAME_  number;
    len_TYPE_NAME_     number;

  begin

    select val
    into   mfo_
    from   params
    where  par='GLB-MFO';

    select data_length
    into   len_DEPOSIT_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='DEPOSIT_NAME';

    select data_length
    into   len_TYPE_NAME_
    from   user_tab_columns
    where  table_name='DPT_VIDD_ASVO' and
           column_name='TYPE_NAME';

    begin

      select count(1)
      into   cnt_
      from   user_tab_columns
      where  table_name='ASVO_TEMPSBON_NLS' and
             column_name in ('NAMEV'  ,
                             'KODSBON',
                             'KODBAR' ,
                             'NAMEBAR',
                             'VAL'    ,
                             'TVBV'   ,
                             'VKLAD'  ,
                             'NARAXP' ,
                             'ZARAXP');
      if cnt_<>9 then
        bars_audit.error(p_errmask||'(1): неверна структура '||p_dfNLS);
        p_code := p_code+1;
        goto konec6;
      end if;

      for k in (select column_name   ,
                       data_type     ,
                       data_length   ,
                       data_precision,
                       data_scale
                from   user_tab_columns
                where  table_name='ASVO_TEMPSBON_NLS'
               )
      loop
        if (k.column_name='NAMEV'   and (k.data_type<>'VARCHAR2' or k.data_length>len_DEPOSIT_NAME_))                              or
           (k.column_name='KODSBON' and (k.data_type<>'VARCHAR2' or k.data_length>18))                                             or
           (k.column_name='KODBAR'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision>4   or k.data_scale<>0)) or
           (k.column_name='NAMEBAR' and (k.data_type<>'VARCHAR2' or k.data_length>len_TYPE_NAME_))                                 or
           (k.column_name='VAL'     and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision>3   or k.data_scale<>0)) or
           (k.column_name='TVBV'    and (k.data_type<>'VARCHAR2' or k.data_length<3))                                              or
           (k.column_name='VKLAD'   and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='NARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) or
           (k.column_name='ZARAXP'  and (k.data_type<>'NUMBER'   or k.data_length<>22 or k.data_precision<>14 or k.data_scale<>0)) then
          bars_audit.error(p_errmask||'(2): неверна структура '||p_dfNLS);
          p_code := p_code+1;
          goto konec6;
        end if;
      end loop;

      begin
        execute immediate 'select distinct
                                  substr(TVBV,1,3)
                           from   asvo_tempSBON_nls'
                           into   fff_;
      exception when TOO_MANY_ROWS then
        bars_audit.error(p_errmask||'(3): в '||p_dfNLS||' должны быть данные для ОДНОГО ТВБВ...');
        p_code := p_code+1;
        goto konec6;
      end;

      delete
      from    DPT_VIDD_ASVO
      where   fff=fff_;

      delete
      from    asvo_nls
      where   tvbv=fff_;

      if p_nlsmask is null then
        begin
          select p.podr
          into   podr_
          from   asvo_fff_branch b,
                 asvo_fff_podr   p
          where  b.fff=fff_ and
                 p.fff=substr(b.branch,12,3);
          nlsmask_ := '3739K9'||podr_||'000FFFN';
        exception when OTHERS then
          if    mfo_='333368' then
            nlsmask_ := '3739K916000FFFN';
          elsif mfo_='303398' then
            nlsmask_ := '3739K900000FFFN';
          else
            nlsmask_ := '3739K000000FFFN';
          end if;
        end;
      else
        nlsmask_ := p_nlsmask;
      end if;

      nls_depo_  := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','0'));
      nls_procn_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));
      nls_procz_ := vkrzn(substr(mfo_,1,5),replace(replace(replace(upper(nlsmask_),'K','0'),'FFF',fff_),'N','1'));

      sql_:='select distinct
                    namev           ,
                    kodSBON         ,
                    kodbar          ,
                    namebar         ,
                    val             ,
                    substr(tvbv,1,3),
                    to_char(vklad)  ,
                    to_char(naraxp) ,
                    to_char(zaraxp)
             from   asvo_tempSBON_nls';

      open cur_ for sql_;

      loop
        fetch cur_ into deposit_name_,
                        deposit_cod_ ,
                        vidd_        ,
                        type_name_   ,
                        kv_          ,
                        fff_         ,
                        nls0_depo_   ,
                        nls0_procn_  ,
                        nls0_procz_;
        exit when cur_%notfound;

        if type_name_ is null then
          begin
            select type_name
            into   type_name_
            from   dpt_vidd
            where  vidd=vidd_ and
                   rownum<2;
          exception when no_data_found then
            type_name_ := null;
          end;
        end if;

        if nls0_depo_  is not null and length(nls0_depo_)<5 then
          nls0_depo_  := null;
        end if;
        if nls0_procn_ is not null and length(nls0_procn_)<5 then
          nls0_procn_ := null;
        end if;
        if nls0_procz_ is not null and length(nls0_procz_)<5 then
          nls0_procz_ := null;
        end if;

        insert
        into   DPT_VIDD_ASVO (VIDD        ,
                              TYPE_NAME   ,
                              DEPOSIT_COD ,
                              DEPOSIT_NAME,
                              KV          ,
                              FFF)
                      values (vidd_        ,
                              type_name_   ,
                              deposit_cod_ ,
                              deposit_name_,
                              kv_          ,
                              fff_);
        p_open := p_open+1;

        delete
        from   asvo_nls
        where  TVBV               =fff_                 and
               KK                 =deposit_cod_         and
               NLS_DEPO           =nls_depo_            and
               NLS_PROCN          =nls_procn_           and
               NLS_PROCZ          =nls_procz_           and
               NLS0_DEPO          =nls0_depo_           and
               nvl(NLS0_PROCN,'0')=nvl(nls0_procn_,'0') and
               nvl(NLS0_PROCZ,'0')=nvl(nls0_procz_,'0') and
               KV                 =kv_;

        insert
        into   asvo_nls (TVBV      ,
                         KK        ,
                         NLS_DEPO  ,
                         NLS_PROCN ,
                         NLS_PROCZ ,
                         NLS0_DEPO ,
                         NLS0_PROCN,
                         NLS0_PROCZ,
                         KV)
                 values (fff_        ,
                         deposit_cod_,
                         nls_depo_   ,
                         nls_procn_  ,
                         nls_procz_  ,
                         nls0_depo_  ,
                         nls0_procn_ ,
                         nls0_procz_ ,
                         kv_);
        p_open := p_open+1;

      end loop;
      close cur_;

      commit;

    exception when no_data_found then
      bars_audit.error(p_errmask||'(4): ошибка обработки '||p_dfNLS||' - отсутствуют данные');
      p_code := p_code+1;
              when TOO_MANY_ROWS then
      bars_audit.error(p_errmask||'(5): ошибка обработки '||p_dfNLS||' - должны быть данные только по одному ТВБВ');
      p_code := p_code+1;
              when OTHERS then
      bars_audit.error(p_errmask||'(6): ошибка обработки '||p_dfNLS||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
    end;

<<konec6>> null;

  end NLStoSPRSBON;

--

  procedure copy_SBON_tables (p_tvbv in char)
  is
  begin

    if p_tvbv is not null and length(p_tvbv)=3 then
      begin
        execute immediate 'drop table ASVO_SBON_'||p_tvbv;
      exception when OTHERS then
        null;
      end;

      begin
        execute immediate
                'create table ASVO_SBON_'||p_tvbv||
                ' as select * from ASVO_SBON';
      exception when OTHERS then
        null;
      end;
    end if;

  end copy_SBON_tables;

--

  procedure drop_ostcdSBON (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    TT_      oper.TT%type := 'АСВ';

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  откат документов по развороту вкладов (BAK)

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

    for k in (select o.ref,
                     w.value dptid
              from   oper  o,
                     operw w
              where  o.tt=TT_         and
                     o.ref=w.ref      and
                     w.tag='ND   '    and
                     o.sos=5          and
                     o.vdat=gl.bdate  and
                     o.branch=branch_ and
                     substr(o.nam_b,instr(o.nam_b,'_')+1,
                            instr(o.nam_b,'_',1,2)-instr(o.nam_b,'_')-1)=p_tvbv
              )
    loop

      ful_bak(k.ref);

      bars_audit.info(substr(p_errmask,length(p_errmask)-6)||': ful_bak '||k.ref);

      update dpt_deposit
      set    comments=substr(comments,2)
      where  deposit_id=k.dptid;

      commit;

      p_open := p_open+1;

      dbms_application_info.set_client_info('drop='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

    bc.set_context;

    delete
    from   asvo_log
    where  FFF=p_tvbv and fl=1;

    commit;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end drop_ostcdSBON;

--

  procedure drop_deposSBON (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    branch_  varchar2(32);
    i_       int;
--  pdpt_    dpt_deposit.deposit_id%type;

    type     t_otkat is record (deposit_id  dpt_deposit.deposit_id%type,
                                branch      dpt_deposit.branch%type,
                                acc         accounts.acc%type,
                                acra        accounts.acc%type,
                                rnk         customer.rnk%type,
                                rnk_tr      customer.rnk%type);
    type     t_listo is table of t_otkat;
    otkat    t_listo;
    sid_     number;
    serial_  number;
    job_     number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;
--  pdpt_  := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  убиение СВОЕЙ сессии сбора статистики (JOB)

    begin
      select job
      into   job_
      from   user_jobs
      where  what='migraAS.tableDP_stats;' and
             rownum<2;
      begin
        DBMS_JOB.REMOVE(job_);
        commit;
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

    begin
      select s.sid,
             s.serial#
      into   sid_,
             serial_
      from   V$OPEN_CURSOR c,
             V$SESSION     s
      where  rownum<2          and
             s.status='ACTIVE' and
             c.sid=s.sid       and
             c.sql_text like 'SELECT 3711 FROM DUAL%';
      begin
        execute immediate 'ALTER SYSTEM KILL SESSION '''||to_char(sid_)||','||to_char(serial_)||''' IMMEDIATE';
      exception when OTHERS then
        null;
      end;
    exception when no_data_found then
      null;
    end;

--  выключение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' DISABLE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(1): '||k.table_name||' '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_migr (dpt NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acc_migr (acc NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_acr_migr (acr NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnk_migr (rnk NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_rnt_migr (rnt NUMBER)';
    exception when OTHERS then
      null;
    end;

    bc.subst_branch(branch_);

    begin
      select * bulk collect
      into   otkat
      from   (select d.deposit_id,
                     d.branch    ,
                     a.acc       ,
                     i.acra      ,
                     a.rnk       ,
                     t.rnk_tr
              from   dpt_deposit d,
                     dpt_trustee t,
                     int_accn    i,
                     accounts    a
              where  d.comments='Imported from SBON'           and
                     d.acc=i.acc                               and
                     d.branch=branch_                          and
                     length(d.nd)-length(replace(d.nd,'_'))>=4 and
                     substr(d.nd,instr(d.nd,'_')+1,3)=p_tvbv   and
                     a.acc=d.acc                               and
                     t.dpt_id(+)=d.deposit_id                  and
                     a.ostc=0)
      for    update nowait
      order  by deposit_id;
    exception when OTHERS then
      bars_audit.error(p_errmask||'(1): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      goto maybelock;
    end;

    for k in 1..otkat.count
    loop
      execute immediate 'insert
                         into   ASVO_TEMP_dpt_migr (dpt)
                                            values ('||to_char(otkat(k).deposit_id)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acc_migr (acc)
                                            values ('||to_char(otkat(k).acc)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_acr_migr (acr)
                                            values ('||to_char(otkat(k).acra)||')';
      execute immediate 'insert
                         into   ASVO_TEMP_rnk_migr (rnk)
                                            values ('||to_char(otkat(k).rnk)||')';
      if otkat(k).rnk_tr is not null then
        execute immediate 'insert
                           into   ASVO_TEMP_rnt_migr (rnt)
                                              values ('||to_char(otkat(k).rnk_tr)||')';
      end if;
    end loop;

    begin
      execute immediate 'select count(1) from (select distinct dpt from ASVO_TEMP_dpt_migr)' into p_open;
    exception when OTHERS then
      p_open := 0;
    end;

    begin

--    execute immediate 'delete from dpt_jobs_log       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_blank          where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_inheritors     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_payments       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_depositw       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_agreements     where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_trustee        where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_bonus_requests where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_requests       where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit        where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_accounts       where dptid      in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_clos   where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
      execute immediate 'delete from dpt_deposit_all    where deposit_id in (select dpt from ASVO_TEMP_dpt_migr)';
--    execute immediate 'delete from dpt_techaccounts   where dpt_id     in (select dpt from ASVO_TEMP_dpt_migr)';

      execute immediate 'delete from tmp_intarc          where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_ratn_arc        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from acr_docs            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from int_accn            where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accountsw           where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldob              where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from saldoa              where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acc from ASVO_TEMP_acc_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acc from ASVO_TEMP_acc_migr)';
      execute immediate 'delete from accounts            where acc in (select acc from ASVO_TEMP_acc_migr)';

      execute immediate 'delete from acr_docs            where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_int       where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from specparam_update    where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accountsw           where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldob              where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from saldoa              where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_AGG_MONBALS    where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_QUEUE_BALANCES where acc in (select acr from ASVO_TEMP_acr_migr)';
--    execute immediate 'delete from ACCM_SNAP_BALANCES  where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_all        where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts_update     where acc in (select acr from ASVO_TEMP_acr_migr)';
      execute immediate 'delete from accounts            where acc in (select acr from ASVO_TEMP_acr_migr)';

--    здесь добавить удаление клиентов без счетов (otkat(k).RNK+otkat(k).RNK_TR)

      execute immediate 'select (select count(*) from accounts    where rnk    in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from customer    where rnkp   in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from dpt_trustee where rnk_tr in (select rnk from ASVO_TEMP_rnk_migr))+
                                (select count(*) from cc_deal     where rnk    in (select rnk from ASVO_TEMP_rnk_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from person             where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnk from ASVO_TEMP_rnk_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnk from ASVO_TEMP_rnk_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(2): delete from customer where rnk in (select rnk from ASVO_TEMP_rnk_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

      execute immediate 'select (select count(*) from accounts    where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from customer    where rnkp in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from dpt_trustee where rnk  in (select rnt from ASVO_TEMP_rnt_migr))+
                                (select count(*) from cc_deal     where rnk  in (select rnt from ASVO_TEMP_rnt_migr))
                         from   dual'
                         into   i_;

      if i_=0 then
        begin
          execute immediate 'delete from customerw          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customerw_update   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from person             where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps_acc          where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from corps              where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer_address   where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_DEAL            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CC_SWTRACE         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTBANK           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTCOUNT          where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_REL       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_NAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUST_ZAY           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_AGREEMENTS     where CUST_ID        in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_DEPOSIT_CLOS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_INHERITORS     where INHERIT_CUSTID in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_JOBS_LOG       where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
--        execute immediate 'delete from DPT_TECHACCOUNTS   where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPT_TRUSTEE        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from DPU_DEAL_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_A          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from FINMON_QUE         where RNK_B          in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from KL_CUSTOMER_PARAMS where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from RNK_REKV           where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SURVEY_SESSION     where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_REG_DIRS        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from SW_SB_TELEX        where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from TOP_CONTRACTS      where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAYAVKA            where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from ZAY_COMISS         where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from CUSTOMER_UPDATE    where RNK            in (select rnt from ASVO_TEMP_rnt_migr)';
          execute immediate 'delete from customer           where rnk            in (select rnt from ASVO_TEMP_rnt_migr)';
        exception when OTHERS then
          bars_audit.warning(p_errmask||'(3): delete from customer where rnk in (select rnt from ASVO_TEMP_rnt_migr) - '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        end;
      end if;

    exception when OTHERS then
      bars_audit.error(p_errmask||'(2): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      p_code := p_code+1;
      p_open := 0;
      rollback;
    end;

    bc.set_context;

--  execute immediate 'delete
--                     from   ACCM_AGG_MONBALS
--                     where  acc in (select acc from ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_QUEUE_BALANCES
--                     where  acc in (select acc from ASVO_TEMP_ACC)';
--  execute immediate 'delete
--                     from   ACCM_SNAP_BALANCES
--                     where  acc in (select acc from ASVO_TEMP_ACC)';

--  begin
--    execute immediate 'DROP TABLE ASVO_TEMP_ACC';
--  exception when OTHERS then
--    null;
--  end;

--  dbms_application_info.set_client_info(' ');

    update ASVO_FFF_LOAD
    set    fl=0
    where  FFF=p_tvbv;

    delete
    from   asvo_log
    where  FFF=p_tvbv;

    commit;

<<maybelock>> null;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acc_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_acr_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnk_migr';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_rnt_migr';
    exception when OTHERS then
      null;
    end;

--  включение CONSTRAINTов

    for k in (select distinct
                     u2.table_name,
                     u2.constraint_name
              from   user_constraints u1,
                     user_constraints u2
              where  u2.r_constraint_name=u1.constraint_name and
                     u1.table_name in ('ACCOUNTS','DPT_DEPOSIT','DPT_DEPOSIT_ALL','DPT_REQUESTS','DPT_TRUSTEE','CUSTOMER'))
    loop
      begin
        execute immediate 'ALTER TABLE '||k.table_name||' MODIFY CONSTRAINT '||k.constraint_name||' ENABLE NOVALIDATE';
      exception when OTHERS then
        bars_audit.warning(p_errmask||'(4): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
      end;
    end loop;

    bars_alerter(1);

  end drop_deposSBON;

--

  procedure create_dptSBON (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    type            cur is ref cursor;
    cur_            cur;
    curn_           cur;
    curd_           cur;
    sql_            varchar2(4000);

    fio_            varchar2(60);
    icod_           varchar2(14);
    tidok_          int;
    nsc_            varchar2(20);
    ost_            number;
    npr_            number;
    zpr_            number;
    datp_           date;
    branch_         varchar2(30);
    i_              int;
    nlsKOTLOdepo_   varchar2(14);
    nlsKOTLOperc_   varchar2(14);
    nlsKOTLOperz_   varchar2(14);
    kkmark_         varchar2(18);
    nbsdepo_        varchar2(4);
    ob22depo_       varchar2(2);
    dptvidd_        number;
    dptkv_          number;
    nbsperc_        varchar2(4);
    ob22perc_       varchar2(2);
    nbsperz_        varchar2(4);
    ob22perz_       varchar2(2);
    prcdate_        date;
    percent_        number;

    fl_             number;
    flkall_         number;
    tmp_            varchar2(32764);
    phone_          varchar2(1028);
    seria_          varchar2(32);
    nomer_          varchar2(32);
    kevid_          varchar2(70);
    sdvid_          varchar2(32);
    city_           varchar2(256);
    bday_           date;
    david_          date;
--  nPASP_          number;
    index_          varchar2(1024);
    obl_            varchar2(1024);
    rajon_          varchar2(1024);
    rnk_            number;
    accdepo_        number;
    accperc_        number;
    text_           varchar2(1024);
    address_        varchar2(128);
    fulladdress_    varchar2(256);
    glbd_           date;
    sex_            int;

    dptid_          number;

    dDatEnd_        date;

    nmkn_           varchar2(70);
    okpon_          varchar2(64);

    RNKdover_       number;
    RNKbenef_       number;
    RNKnasle_       number;
    bdayn_          date;
    ddavn_          date;
    adrn_           varchar2(128);
    teldn_          varchar2(64);
    serin_          varchar2(64);
    nomen_          varchar2(64);
    vidan_          varchar2(64);
    fulladdressn_   varchar2(256);
    sexn_           int;
    rajnn_          varchar2(1024);
    cityn_          varchar2(256);
    inden_          varchar2(1024);
    obln_           varchar2(1024);
    tidokn_         int;

    agrmntid_       dpt_agreements.agrmnt_id%type;
    duration_       dpt_vidd.duration%type;
    duration_days_  dpt_vidd.duration_days%type;
    term_type_      dpt_vidd.term_type%type;
    fl_dubl_        dpt_vidd.fl_dubl%type;
    cnt_            number;
    type_cod_       dpt_vidd.type_cod%type;

    nbsacrb_        char(4);

    auid_           number;
    glauid_         number;

    netvida_        varchar2(32764);
    kkmarkm_        varchar2(32764);
    raznkod_        varchar2(32764);
    raznbal_        varchar2(32764);

    kv_             number;
    bsd_            char(4);
    srok_           number;

--  datmet_         date;
    method_id_      dpt_vidd_extdesc.method_id%type;

    country_        number;
    countryn_       number;
    D_FACETYPE_     int;
    REGDATE_        date;
    REGDATEn_       date;
    DEPNAME_        varchar2(120);
    BEGINSUM_       number;
    dzpr_           date;
    dnpr_           date;
    BRANCHSBON_     varchar2(30);
    id_             varchar2(8);
    Job_            number;

    resid_code_     number;
    resid_coden_    number;

  begin

    bars_alerter(0);

    p_code := 0;
    p_open := 0;

    begin
      select branch
      into   branch_
      from   ASVO_FFF_BRANCH
      where  FFF=p_tvbv and
             rownum<2;
    exception when no_data_found then
      select '/'||val||'/'
      into   branch_
      from   params
      where  par='GLB-MFO';
    end;

--  проверки

--1.select * from asvo_nls where tvbv='060' and NLS_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(9): не описан в справочнике транзитный счёт депозита для вида вклада СБОН - '||
                       k.kk);
    end loop;

--2.select * from asvo_nls where tvbv='060' and NLS_PROCN is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCN is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(10): не описан в справочнике транзитный счёт начисленных %% для вида вклада СБОН - '||
                       k.kk);
    end loop;

--3.select * from asvo_nls where tvbv='060' and NLS_PROCZ is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS_PROCZ is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(11): не описан в справочнике транзитный счёт зачисленных %% для вида вклада СБОН - '||
                       k.kk);
    end loop;

--4.select * from asvo_nls where tvbv='060' and NLS0_DEPO is null;

    for k in (select kk
              from   asvo_nls
              where  tvbv=p_tvbv and
                     NLS0_DEPO is null
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||
                       '(12): не описан в справочнике КОТЛОВОЙ счёт депозитов для вида вклада МЕГАБАНК - '||
                       k.kk);
    end loop;

--5.select n.tvbv, n.kk, n.nls0_depo, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_DEPO,'0')<>'0'
--   and n.nls0_depo=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_DEPO
--           and kv=n.kv and branch='/333368/000000/000060/')
--order by kk;

    for k in (select n.kk       ,
                     n.nls0_depo,
                     n.kv       ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv             and
                     nvl(n.NLS0_DEPO,'0')<>'0' and
                     n.nls0_depo=a.nls         and
                     n.kv=a.kv                 and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_DEPO      and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(13): КОТЛОВОЙ счёт депозитов ('||
                       k.nls0_depo||'('||to_char(k.kv)||
                       ') для вида вклада СБОН - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--6.select n.tvbv, n.kk, n.nls0_procn, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCN,'0')<>'0'
--   and n.nls0_procn=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCN
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procn,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCN,'0')<>'0' and
                     n.nls0_procn=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCN     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(14): КОТЛОВОЙ счёт начисленных %% ('||
                       k.nls0_procn||'('||to_char(k.kv)||
                       ') для вида вклада СБОН - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

--7.select n.tvbv, n.kk, n.nls0_procz, n.kv, a.branch
--  from asvo_nls n, accounts a
-- where n.tvbv='060' and nvl(n.NLS0_PROCZ,'0')<>'0'
--   and n.nls0_procz=a.nls and n.kv=a.kv
--   and not exists
--       (select 1 from accounts where nls=n.NLS0_PROCZ
--           and kv=n.kv and branch='/333368/000000/000060/')
-- order by kk;

    for k in (select n.kk        ,
                     n.nls0_procz,
                     n.kv        ,
                     a.branch
              from   asvo_nls n,
                     accounts a
              where  n.tvbv=p_tvbv              and
                     nvl(n.NLS0_PROCZ,'0')<>'0' and
                     n.nls0_procz=a.nls         and
                     n.kv=a.kv                  and
                     not exists (select 1
                                 from   accounts
                                 where  nls=n.NLS0_PROCZ     and
                                        kv=n.kv              and
                                        substr(branch,1,8)=
                                        substr(branch_,1,8)  and
                                        substr(branch,-4,4)=
                                        substr(branch_,-4,4))
--  было так                            branch=branch_)
              order  by 1
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(15): КОТЛОВОЙ счёт зачисленных %% ('||
                       k.nls0_procz||'('||to_char(k.kv)||
                       ') для вида вклада СБОН - '||k.kk||
                       ' зарегистрирован на другое отделение'||k.branch);
    end loop;

    if p_code>0 then
      goto proverkineprosliSBON; -- даже не начинать создание вкладов в АБС БАРС
    end if;

--8.проверка остатков на реальных котловых (ostc>0 and ostc=ostb)
--  возможно в будущем будет сделана, пока же ниже при ОПЛАТЕ(2) выдаётся

--9.наличие видов вкладов МЕГАБАНК, описанных в DPT_VIDD_ASVO, в ASVO_NLS

    for k in (select deposit_cod kk
              from   dpt_vidd_asvo
              where  fff=p_tvbv and
                     deposit_cod not in (select kk
                                         from   asvo_nls
                                         where  tvbv=p_tvbv)
             )
    loop
      p_code := p_code+1;
      bars_audit.error(p_errmask||'(16): вид вклада СБОН - '||
                       k.kk||' не описан в справочнике ASVO_NLS');
    end loop;

    if p_code>0 then
      goto proverkineprosliSBON; -- даже не начинать создание вкладов в АБС БАРС
    end if;

    netvida_ := ',';
    kkmarkm_ := ',';
    raznkod_ := ',';
    raznbal_ := ',';

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG disable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'CREATE TABLE ASVO_TEMP_dpt_vidd_flag0 (vidd NUMBER)';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'INSERT
                         INTO   ASVO_TEMP_dpt_vidd_flag0
                         select vidd
                         FROM   dpt_vidd
                         where  flag=0';
    exception when OTHERS then
      null;
    end;

    toroot;
    update dpt_vidd
    set    flag=1
    where  flag=0;
    commit;

    tokf;
    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;
    toroot;

--  id_ := '0';

    sql_:='select FIO                              ,  --fio_
                  IDCODE                           ,  --icod_
                  DOCTYPE                          ,  --tidok_
                  PASP_S                           ,  --seria_
                  PASP_N                           ,  --nomer_
                  trim(substr(PASP_W,1,70))        ,  --kevid_
                  PASP_D                           ,  --david_
                  BIRTHDAT                         ,  --bday_
--                BIRTHPL                          ,  --BIRTHPL_
--                0 /* SEX */                      ,  --sex_
                  decode(SEX,1,1,2,2,0)            ,  --sex_
                  POSTIDX                          ,  --index_
                  REGION                           ,  --obl_
                  DISTRICT                         ,  --rajon_
                  CITY                             ,  --city_
                  ADDRESS                          ,  --address_
                  trim(substr(PHONE_H,1,20))       ,  --phone_
--                PHONE_J                          ,  --PHONE_J_
                  LANDCOD                          ,  --country_
                  REGDATE                          ,  --REGDATE_
                  DEPCODE||substr(BALNLS,-2)       ,  --kkmark_
--                trim(DEPCODE||substr(BALNLS,8,2)),  --kkmark_
                  DEPNAME                          ,  --DEPNAME_
                  NUMBOOK                          ,  --nsc_
                  BEGINDATE                        ,  --datp_
                  ENDDATE                          ,  --dDatEnd_
                  BEGINSUM                         ,  --BEGINSUM_
                  BALANCE                          ,  --ost_
                  PROCSTAVKA                       ,  --percent_
                  SUMPROC                          ,  --zpr_
                  ENDPROCDAT                       ,  --dzpr_
--                REKV_VYPL                        ,  --REKV_VYPL_
--                REKV_RET                         ,  --REKV_RET_
                  COUNTPEREO                       ,  --cnt_
                  KODVAL                           ,  --kv_
                  substr(BALNLS,1,4)               ,  --nbsdepo_
                  BRANCH                           ,  --BRANCHSBON_
                  SUMPROCN                         ,  --npr_
                  ENDPRODATN                       ,  --dnpr_
                  D_FACETYPE                       ,  --D_FACETYPE_
                  D_FIO                            ,  --nmkn_
                  D_IDCODE                         ,  --okpon_
                  D_DOCTYPE                        ,  --tidokn_
                  D_PASP_S                         ,  --serin_
                  D_PASP_N                         ,  --nomen_
                  trim(substr(D_PASP_W,1,70))      ,  --vidan_
                  D_PASP_D                         ,  --ddavn_
                  D_BIRTHDAT                       ,  --bdayn_
--                D_BIRTHPL                        ,  --D_BIRTHPL_
--                0 /* D_SEX */                    ,  --sexn_
                  decode(D_SEX,1,1,2,2,0)          ,  --sexn_
                  D_POSTIDX                        ,  --inden_
                  D_REGION                         ,  --obln_
                  D_DISTRICT                       ,  --rajnn_
                  D_CITY                           ,  --cityn_
                  D_ADDRESS                        ,  --adrn_
                  trim(substr(D_PHONE_H,1,20))     ,  --teldn_
--                D_PHONE_J                        ,  --D_PHONE_J_
                  D_LANDCOD                        ,  --countryn_
                  D_REGDATE                        ,  --REGDATEn_
                  substr(BALNLS,-2)                   --id_
           from   ASVO_SBON
           where  balance>0';
    open cur_ for sql_;

    flkall_ := 0;
    loop

      fetch cur_ into fio_       ,
                      icod_      ,
                      tidok_     ,
                      seria_     ,
                      nomer_     ,
                      kevid_     ,
                      david_     ,
                      bday_      ,
--                    BIRTHPL_   ,
                      sex_       ,
                      index_     ,
                      obl_       ,
                      rajon_     ,
                      city_      ,
                      address_   ,
                      phone_     ,
--                    PHONE_J_   ,
                      country_   ,
                      REGDATE_   ,
                      kkmark_    ,
                      DEPNAME_   ,
                      nsc_       ,
                      datp_      ,
                      dDatEnd_   ,
                      BEGINSUM_  ,
                      ost_       ,
                      percent_   ,
                      zpr_       ,
                      dzpr_      ,
--                    REKV_VYPL_ ,
--                    REKV_RET_  ,
                      cnt_       ,
                      kv_        ,
                      nbsdepo_   ,
                      BRANCHSBON_,
                      npr_       ,
                      dnpr_      ,
                      D_FACETYPE_,
                      nmkn_      ,
                      okpon_     ,
                      tidokn_    ,
                      serin_     ,
                      nomen_     ,
                      vidan_     ,
                      ddavn_     ,
                      bdayn_     ,
--                    D_BIRTHPL_ ,
                      sexn_      ,
                      inden_     ,
                      obln_      ,
                      rajnn_     ,
                      cityn_     ,
                      adrn_      ,
                      teldn_     ,
--                    D_PHONE_J_ ,
                      countryn_  ,
                      REGDATEn_  ,
                      id_;
      exit when cur_%notfound;

      dbms_application_info.set_client_info('open='||to_char(p_open)||
                                         ', error='||to_char(p_code));

      bars_audit.info(substr(p_errmask,1,length(p_errmask)-3)||'вид вклада='||kkmark_||
                                                    ' nsc_=' ||nsc_                  ||
                                                    ' ost_=' ||ost_                  ||
                                                    ' npr_=' ||npr_                  ||
                                                    ' zpr_=' ||zpr_                  ||
                                                    ' icod_='||nvl(icod_,'000000000')||
                                                    ' fio_=' ||fio_);
      nlsKOTLOdepo_ := null;
      nlsKOTLOperc_ := null;
      nlsKOTLOperz_ := null;
      fulladdress_  := null;
--    address_      := null;
      dptvidd_      := null;
      dptkv_        := null;
      dptid_        := null;
      rnk_          := null;

--    resid_code_   := to_number(iif_n(country_,804,'0','1','0'));
--    resid_coden_  := to_number(iif_n(countryn_,804,'0','1','0'));

      resid_code_   := case when country_=804 then
                         1
                       else
                         0
                       end;
      resid_coden_  := case when countryn_=804 then
                         1
                       else
                         0
                       end;

      flkall_       := flkall_+1;

      BEGIN

        if nvl(instr(kkmarkm_,','||kkmark_||','),0)>0 then
          goto kkmarkmnogoviddSBON;
        end if;

        if nvl(instr(netvida_,','||kkmark_||','),0)>0 then
          goto netvidadepositaSBON;
        end if;

        if nvl(instr(raznkod_,','||kkmark_||','),0)>0 then
          goto razniekodivalutSBON;
        end if;

        if nvl(instr(raznbal_,','||kkmark_||','),0)>0 then
          goto razniebalschetaSBON;
        end if;

        if datp_ is null then
          goto netdatiotkritiaSBON;
        end if;

        begin
          select d.deposit_id
          into   dptid_
          from   accounts    a,
                 dpt_deposit d,
                 accountsw   w
          where  a.nlsalt=nsc_                                    and
                 d.nd=kkmark_||'_'||p_tvbv||'_0_'||id_||'_'||nsc_ and
                 a.branch=branch_                                 and
                 a.branch=d.branch                                and
                 a.acc=d.acc                                      and
                 w.acc=a.acc                                      and
                 d.comments like '%Imported from SBON'            and
                 w.tag='KKASV'                                    and
                 w.value=kkmark_;
          goto ugezaimpotiliSBON;
        exception when no_data_found then
          null;
        end;

        fl_ := 0;

        icod_ := TRIM(icod_);

        begin
          i_ := to_number(icod_);
        exception when OTHERS then
          icod_ := '000000000';
        end;
        if length(icod_)=0 or icod_ is null then
          icod_ := '000000000';
        end if;

        begin
          select distinct
                 d.vidd                ,
                 d.kv                  ,
                 d.bsd                 ,
                 nvl(d.duration,0)     ,
                 nvl(d.duration_days,0),
                 d.term_type           ,
                 d.fl_dubl             ,
                 d.type_cod            ,
                 nvl(de.method_id,1)
          into   dptvidd_      ,
                 dptkv_        ,
                 bsd_          ,
                 duration_     ,
                 duration_days_,
                 term_type_    ,
                 fl_dubl_      ,
                 type_cod_     ,
                 method_id_
          from   dpt_vidd_asvo    da,
                 dpt_vidd         d ,
                 dpt_vidd_extdesc de
          where  da.deposit_cod=kkmark_ and
                 da.vidd=d.vidd         and
                 da.fff=p_tvbv          and
                 de.type_id(+)=d.extension_id;
        exception when too_many_rows then
          goto kkmarkmnogoviddSBON;
                  when no_data_found then
          goto netvidadepositaSBON;
        end;

--      проверка на соответствие валюты вклада SBON валюте вида вклада БАРС

        if (dptkv_=980 and kv_ is null) or  --гривна
           (dptkv_=980 and kv_=980)     or  --гривна
           (dptkv_=978 and kv_=978)     or  --евро
           (dptkv_=840 and kv_=840)     or  --доллар
           (dptkv_=643 and kv_=643)     or  --рубль
           (dptkv_=826 and kv_=826)   then  --фунт
          null;
        else
          goto razniekodivalutSBON;
        end if;

        ob22depo_ := null;  -- OB22  для счёта депозита
        nbsperc_  := null;  -- балансовый счёт начисл%%
        ob22perc_ := null;  -- OB22  для счёта начисл%%
        nbsperz_  := null;  -- балансовый счёт зачисл%%
        ob22perz_ := null;  -- OB22  для счёта зачисл%%

--      проверка на соответствие бал. счетов вклада АСВО и вида вклада БАРС

        if bsd_<>nbsdepo_ then
          goto razniebalschetaSBON;
        end if;

--      проверка на соответствие дат начала и окончания вклада

        if datp_>=dDatEnd_ then
          goto datbegbordatendSBON;
        end if;

--      определение котловых счетов по таблице ASVO_NLS

        begin
          select NLS_DEPO ,
                 NLS_PROCN,
                 NLS_PROCZ
          into   nlsKOTLOdepo_,
                 nlsKOTLOperc_,
                 nlsKOTLOperz_
          from   ASVO_NLS
          where  TVBV=p_tvbv and
                 rownum<2    and
                 KK=kkmark_;
        exception when no_data_found then
          nlsKOTLOdepo_ := null;
          nlsKOTLOperc_ := null;
          nlsKOTLOperz_ := null;
        end;

--      корректировка даты рождения
        bday_ := CorrectBdayOkpo(bday_,icod_);

--      рихтовка даты завершения вклада для видов вкладов "Дитячий"
--      (возможно надо будет вставить)

        fulladdress_     := replace(trim(obl_||' '||rajon_||' '||city_||' '||address_),'  ',' ');
        if length(fulladdress_)>70 then
          fulladdress_   := replace(trim(rajon_||' '||city_||' '||address_),'  ',' ');
          if length(fulladdress_)>70 then
            fulladdress_ := trim(substr(replace(city_||' '||address_,'  ',' '),1,70));
          end if;
        end if;
        address_ := trim(substr(address_,1,100));

--      dpt_web.p_open_vklad_rnk

        begin
          bc.subst_branch(branch_);
          rnk_     := null;
          savepoint sp_openrnk;
          dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'        ,
                                   p_clientname       => fio_        ,  --p_clientname       IN  customer.nmk%type,
                                   p_client_name      => null        ,  --p_client_name      IN  varchar2 default null,
                                   p_client_surname   => null        ,  --p_client_surname   IN  varchar2 default null,
                                   p_client_patr      => null        ,  --p_client_patr      IN  varchar2 default null,
                                   p_country          => country_    ,  --p_country          IN  customer.country%type,
                                   p_index            => index_      ,  --p_index            IN  varchar2,
                                   p_obl              => obl_        ,  --p_obl              IN  varchar2,
                                   p_district         => rajon_      ,  --p_district         IN  varchar2,
                                   p_settlement       => city_       ,  --p_settlement       IN  varchar2,
                                   p_adress           => address_    ,  --p_adress           IN  varchar2,
                                   p_fulladdress      => fulladdress_,  --p_fulladdress      IN  customer.adr%type,
                        /* null */ p_clientcodetype   => 2           ,  --p_clientcodetype   IN  customer.tgr%type,
                                   p_clientcode       => icod_       ,  --p_clientcode       IN  customer.okpo%type,
                      /* nPASP_ */ p_doctype          => 1           ,  --p_doctype          IN  person.passp%type,
                                   p_docserial        => seria_      ,  --p_docserial        IN  person.ser%type,
                                   p_docnumber        => nomer_      ,  --p_docnumber        IN  person.numdoc%type,
                                   p_docorg           => kevid_      ,  --p_docorg           IN  person.organ%type,
                                   p_docdate          => david_      ,  --p_docdate          IN  person.pdate%type,
                                   p_clientbdate      => bday_       ,  --p_clientbdate      IN  person.bday%type,
                                   p_clientbplace     => null        ,  --p_clientbplace     IN  person.bplace%type,
                                   p_clientsex        => sex_        ,  --p_clientsex        IN  person.sex%type,
                                   p_clientHomePh     => phone_      ,  --p_clienthomeph     IN  person.teld%type,
                                   p_clientWorkPh     => null        ,  --p_clientworkph     IN  person.telw%type,
                                   p_clientname_gc    => null        ,  --p_clientname_gc    IN  customerw.value%type,
                                   p_resid_code       => resid_code_ ,  --p_resid_code       IN  number,
                                   p_resid_index      => index_      ,  --p_resid_index      IN  varchar2,
                                   p_resid_obl        => obl_        ,  --p_resid_obl        IN  varchar2,
                                   p_resid_district   => rajon_      ,  --p_resid_district   IN  varchar2,
                                   p_resid_settlement => city_       ,  --p_resid_settlement IN  varchar2,
                                   p_resid_adress     => address_    ,  --p_resid_adress     IN  varchar2,
                                   p_clientid         => rnk_        ,  --p_clientid     IN OUT  number,
                        /* null */ p_registrydate     => datp_);        --p_registrydate     IN  date default null

          bc.set_context;
        exception when OTHERS then
          rollback to sp_openrnk;
          bc.set_context;
          p_code := p_code+1;
          text_ := 'Ошибка при выполнении p_open_vklad_rnk: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          bars_audit.error(p_errmask                ||'(2): ' ||
                           'код ТВБВ='              ||p_tvbv  ||
                           ', код вида вклада='     ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||
                           ', номер вклада='        ||nsc_    ||
                           ', код ОКПО='            ||icod_   ||' - '||text_);
          fl_     := 1;
--        flkart_ := flkart_+1;
        end;

        if fl_=0 then
          begin

            bc.subst_branch(branch_);

            gl.pl_dat(p_dasvox);
            gl.amfo := f_ourmfo_g;

            if datp_>gl.bdate then
              goto baddataotkritiaSBON;
            end if;

            glbd_    := gl.bdate;
            gl.bdate := datp_;

            glauid_  := gl.aUid;
            select max(id)
            into   auid_
            from   staff
            where  tabn is not null and
                   bax=1;
            if auid_ is null then
              select max(id)
              into   auid_
              from   staff
              where  tabn is not null;
              if auid_ is null then
                select max(id)
                into   auid_
                from   staff;
                if auid_ is null then
                  auid_ := gl.aUid;
                end if;
              end if;
            end if;
            gl.aUid := auid_;

--          if duration_+duration_days_!=0 then
            if duration_+duration_days_!=0 and term_type_=1 then
              srok_ := null;
            else
              if dDatEnd_ is null then
                if dptvidd_=110 then
                  srok_ := 184;
                else
                  srok_ := null;
                end if;
              else
                srok_ := dDatEnd_-datp_;
              end if;
            end if;

            dptid_ := null;
            dpt_web.create_deposit(dptvidd_             ,  --p_vidd          IN  dpt_deposit.vidd%type,   вклад АСВО
                                   rnk_                 ,  --p_rnk           IN  dpt_deposit.rnk%type,
--                                 ND_                  ,  --p_nd            IN  dpt_deposit.nd%type,     idkart_tvbv_(nsc)
                                   kkmark_||'_'||p_tvbv||
                                   '_0_'||id_||'_'||nsc_,
                                   ost_                 ,  --p_sum           IN  dpt_deposit.limit%type,  ost
                                   0                    ,  --p_nocash        IN  number,                  0
                                   datp_                ,  --p_datz          IN  dpt_deposit.datz%type,   DATO
                                   null                 ,  --p_namep         IN  dpt_deposit.name_p%type,
                                   null                 ,  --p_okpop         IN  dpt_deposit.okpo_p%type,
                                   null                 ,  --p_nlsp          IN  dpt_deposit.nls_p%type,
                                   null                 ,  --p_mfop          IN  dpt_deposit.mfo_p%type,
                                   0                    ,  --p_fl_perekr     IN  dpt_vidd.fl_2620%type,
                                   null                 ,  --p_name_perekr   IN  dpt_deposit.nms_d%type,
                                   null                 ,  --p_okpo_perekr   IN  dpt_deposit.okpo_p%type,
                                   null                 ,  --p_nls_perekr    IN  dpt_deposit.nls_d%type,
                                   null                 ,  --p_mfo_perekr    IN  dpt_deposit.mfo_d%type,
                                   'Imported from SBON' ,  --p_comment       IN  dpt_deposit.comments%type,
                                   dptid_               ,  --p_dpt_id        OUT dpt_deposit.deposit_id%type,
                                   datp_                ,  --p_datbegin      IN  dpt_deposit.dat_begin%type default gl.bdate
                                   null                 ,  --p_duration      IN  dpt_vidd.duration%type default null
                                   srok_);                 --p_duration_days IN  dpt_vidd.duration_days%type default null
          exception when OTHERS then
            rollback to sp_openrnk;
            bc.set_context;
            p_code := p_code+1;
            gl.bdate := glbd_;
            gl.aUid  := glauid_;
--          if typeid_ is null then
            text_ := 'Ошибка при выполнении create_deposit: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--          else
--            text_ := 'Ошибка при выполнении create_contract: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
--          end if;
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
               /* k.KKFFFACTUAL */ null         ,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   null         ,
                                   npr_         ,
                                   zpr_         ,
                                   -1           ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            bars_audit.error(p_errmask                ||'(3): ' ||
                             'код ТВБВ='              ||p_tvbv  ||
                             ', код вида вклада='     ||kkmark_ ||
                             ', код вида вклада БАРС='||dptvidd_||
                             ', номер вклада='        ||nsc_    ||
                             ', код ОКПО='            ||icod_   ||' - '||text_);
            fl_     := 1;
--          flkart_ := flkart_+1;
          end;

          If fl_=0 then
            gl.bdate := glbd_;

--          вычищаем INT_RATN по новом ACC и
--          записываем свои %%-ные ставки из вклада
--          для этого идём по массиву и
--          пишем последнюю процентную ставку в INT_RATN

--          if typeid_ is null then
            select acc
            into   accdepo_
            from   dpt_deposit
            where  deposit_id=dptid_;

            update dpt_deposit
            set    comments='Imported from SBON',
                   DAT_END=dDatEnd_   -- ставим принудительно дату
            where  deposit_id=dptid_; -- завершения вклада (из АСВО)

            update dpt_deposit_clos
            set    dat_end=dDatEnd_
            where  deposit_id=dptid_;

--          пролонгации депозитов (проставляю количество оных +
--                                 изменяю дату начала вклада)

            if fl_dubl_>0 and cnt_>0 then
              update dpt_deposit
              set    cnt_dubl=cnt_
              where  deposit_id=dptid_;
--            аналогично и в Архиве депозитов
              update dpt_deposit_clos
              set    cnt_dubl=cnt_
              where  deposit_id=dptid_;
            end if;

--          здесь "замочить" наследника

            if D_FACETYPE_=2 then

              fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||adrn_),'  ',' ');
              if length(fulladdressn_)>70 then
                fulladdressn_ := trim(substr(replace(cityn_||' '||adrn_,'  ',' '),1,70));
              end if;
              adrn_ := trim(substr(adrn_,1,70));

              RNKnasle_ := null;

              begin
                dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                         p_clientname       => nmkn_        ,  --p_clientname       IN  customer.nmk%type,
                                         p_client_name      => null         ,  --p_client_name      IN  varchar2 default null,
                                         p_client_surname   => null         ,  --p_client_surname   IN  varchar2 default null,
                                         p_client_patr      => null         ,  --p_client_patr      IN  varchar2 default null,
                                         p_country          => countryn_    ,  --p_country          IN  customer.country%type,
                                         p_index            => inden_       ,  --p_index            IN  varchar2,
                                         p_obl              => obln_        ,  --p_obl              IN  varchar2,
                                         p_district         => rajnn_       ,  --p_district         IN  varchar2,
                                         p_settlement       => cityn_       ,  --p_settlement       IN  varchar2,
                                         p_adress           => adrn_        ,  --p_adress           IN  varchar2,
                                         p_fulladdress      => fulladdressn_,  --p_fulladdress      IN  customer.adr%type,
                              /* null */ p_clientcodetype   => 2            ,  --p_clientcodetype   IN  customer.tgr%type,
                                         p_clientcode       => okpon_       ,  --p_clientcode       IN  customer.okpo%type,
                                         p_doctype          => 1            ,  --p_doctype          IN  person.passp%type,
                                         p_docserial        => serin_       ,  --p_docserial        IN  person.ser%type,
                                         p_docnumber        => nomen_       ,  --p_docnumber        IN  person.numdoc%type,
                                         p_docorg           => vidan_       ,  --p_docorg           IN  person.organ%type,
                                         p_docdate          => ddavn_       ,  --p_docdate          IN  person.pdate%type,
                                         p_clientbdate      => bdayn_       ,  --p_clientbdate      IN  person.bday%type,
                                         p_clientbplace     => null         ,  --p_clientbplace     IN  person.bplace%type,
                                         p_clientsex        => sexn_        ,  --p_clientsex        IN  person.sex%type,
                                         p_clientHomePh     => teldn_       ,  --p_clienthomeph     IN  person.teld%type,
                                         p_clientWorkPh     => null         ,  --p_clientworkph     IN  person.telw%type,
                                         p_clientname_gc    => null         ,  --p_clientname_gc    IN  customerw.value%type,
                                         p_resid_code       => resid_coden_ ,  --p_resid_code       IN  number,
                                         p_resid_index      => inden_       ,  --p_resid_index      IN  varchar2,
                                         p_resid_obl        => obln_        ,  --p_resid_obl        IN  varchar2,
                                         p_resid_district   => rajnn_       ,  --p_resid_district   IN  varchar2,
                                         p_resid_settlement => cityn_       ,  --p_resid_settlement IN  varchar2,
                                         p_resid_adress     => adrn_        ,  --p_resid_adress     IN  varchar2,
                                         p_clientid         => RNKnasle_    ,  --p_clientid     IN OUT  number,
                              /* null */ p_registrydate     => glbd_);         --p_registrydate     IN  date default null

                update customer
                set    notes='Наследник по вкладу '||nsc_
                where  rnk=RNKnasle_;

                dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                         8        ,   -- l_agrtype
                                         rnk_     ,   -- p_initcustid
                                         RNKnasle_,   -- p_trustcustid
                                         null     ,   -- p_trustid
                                         null     ,   -- p_transferdpt
                                         null     ,   -- p_transferint
                                         null     ,   -- p_amountcash
                                         null     ,   -- p_amountcashless
                                         null     ,   -- p_datbegin
                                         null     ,   -- p_datend
                                         null     ,   -- p_ratereqid
                                         null     ,   -- p_ratevalue
                                         null     ,   -- p_ratedate
                                         null     ,   -- p_denomamount
                                         null     ,   -- p_denomcount
                                         null     ,   -- p_denomref
                                         null     ,   -- p_comissref
                                         null     ,   -- p_docref
                                         -13      ,   -- p_comissreqid
                                         agrmntid_);  -- p_agrmntid

              exception when OTHERS then
                if sqlerrm like '%DPT-00228%' then
                  null;
                else
                  p_code := p_code+1;
                  text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                  toroot;
                  bars_audit.error(p_errmask                ||'(7): ' ||
                                   'код ТВБВ='              ||p_tvbv  ||
                                   ', код вида вклада='     ||kkmark_ ||
                                   ', код вида вклада БАРС='||dptvidd_||
                                   ', номер вклада='        ||nsc_    ||
                                   ', код ОКПО='            ||icod_   ||' - '||text_);
                  bc.subst_branch(branch_);
                end if;
              end;

            end if;

--          здесь "замочить" доверенное лицо

            if D_FACETYPE_=1 then

              fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||adrn_),'  ',' ');
              if length(fulladdressn_)>70 then
                fulladdressn_ := trim(substr(replace(cityn_||' '||adrn_,'  ',' '),1,70));
              end if;
              adrn_ := trim(substr(adrn_,1,70));

              RNKdover_ := null;

              begin
                dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                         p_clientname       => nmkn_        ,  --p_clientname       IN  customer.nmk%type,
                                         p_client_name      => null         ,  --p_client_name      IN  varchar2 default null,
                                         p_client_surname   => null         ,  --p_client_surname   IN  varchar2 default null,
                                         p_client_patr      => null         ,  --p_client_patr      IN  varchar2 default null,
                                         p_country          => countryn_    ,  --p_country          IN  customer.country%type,
                                         p_index            => inden_       ,  --p_index            IN  varchar2,
                                         p_obl              => obln_        ,  --p_obl              IN  varchar2,
                                         p_district         => rajnn_       ,  --p_district         IN  varchar2,
                                         p_settlement       => cityn_       ,  --p_settlement       IN  varchar2,
                                         p_adress           => adrn_        ,  --p_adress           IN  varchar2,
                                         p_fulladdress      => fulladdressn_,  --p_fulladdress      IN  customer.adr%type,
                              /* null */ p_clientcodetype   => 2            ,  --p_clientcodetype   IN  customer.tgr%type,
                                         p_clientcode       => okpon_       ,  --p_clientcode       IN  customer.okpo%type,
                                         p_doctype          => 1            ,  --p_doctype          IN  person.passp%type,
                                         p_docserial        => serin_       ,  --p_docserial        IN  person.ser%type,
                                         p_docnumber        => nomen_       ,  --p_docnumber        IN  person.numdoc%type,
                                         p_docorg           => vidan_       ,  --p_docorg           IN  person.organ%type,
                                         p_docdate          => ddavn_       ,  --p_docdate          IN  person.pdate%type,
                                         p_clientbdate      => bdayn_       ,  --p_clientbdate      IN  person.bday%type,
                                         p_clientbplace     => null         ,  --p_clientbplace     IN  person.bplace%type,
                                         p_clientsex        => sexn_        ,  --p_clientsex        IN  person.sex%type,
                                         p_clientHomePh     => teldn_       ,  --p_clienthomeph     IN  person.teld%type,
                                         p_clientWorkPh     => null         ,  --p_clientworkph     IN  person.telw%type,
                                         p_clientname_gc    => null         ,  --p_clientname_gc    IN  customerw.value%type,
                                         p_resid_code       => resid_coden_ ,  --p_resid_code       IN  number,
                                         p_resid_index      => inden_       ,  --p_resid_index      IN  varchar2,
                                         p_resid_obl        => obln_        ,  --p_resid_obl        IN  varchar2,
                                         p_resid_district   => rajnn_       ,  --p_resid_district   IN  varchar2,
                                         p_resid_settlement => cityn_       ,  --p_resid_settlement IN  varchar2,
                                         p_resid_adress     => adrn_        ,  --p_resid_adress     IN  varchar2,
                                         p_clientid         => RNKdover_    ,  --p_clientid     IN OUT  number,
                              /* null */ p_registrydate     => glbd_);         --p_registrydate     IN  date default null

                update customer
                set    notes='Доверенное лицо по вкладу '||nsc_
                where  rnk=RNKdover_;

                dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                         12       ,   -- l_agrtype
                                         rnk_     ,   -- p_initcustid
                                         RNKdover_,   -- p_trustcustid
                                         null     ,   -- p_trustid
                                         null     ,   -- p_transferdpt
                                         null     ,   -- p_transferint
                                         null     ,   -- p_amountcash
                                         null     ,   -- p_amountcashless
                                         null     ,   -- p_datbegin
                                         null     ,   -- p_datend
                                         null     ,   -- p_ratereqid
                                         null     ,   -- p_ratevalue
                                         null     ,   -- p_ratedate
                                         null     ,   -- p_denomamount
                                         null     ,   -- p_denomcount
                                         null     ,   -- p_denomref
                                         null     ,   -- p_comissref
                                         null     ,   -- p_docref
                                         -13      ,   -- p_comissreqid
                                         agrmntid_);  -- p_agrmntid
              exception when OTHERS then
                if sqlerrm like '%DPT-00228%' then
                  null;
                else
                  p_code := p_code+1;
                  text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                  toroot;
                  bars_audit.error(p_errmask                ||'(6): ' ||
                                   'код ТВБВ='              ||p_tvbv  ||
                                   ', код вида вклада='     ||kkmark_ ||
                                   ', код вида вклада БАРС='||dptvidd_||
                                   ', номер вклада='        ||nsc_    ||
                                   ', код ОКПО='            ||icod_   ||' - '||text_);
                  bc.subst_branch(branch_);
                end if;
              end;

            end if;

--          здесь "замочить" бенецициара

            if D_FACETYPE_=3 then

              fulladdressn_ := replace(trim(rajnn_||' '||cityn_||' '||adrn_),'  ',' ');
              if length(fulladdressn_)>70 then
                fulladdressn_ := trim(substr(replace(cityn_||' '||adrn_,'  ',' '),1,70));
              end if;
              adrn_ := trim(substr(adrn_,1,70));

              RNKbenef_ := null;

              begin
                dpt_web.p_open_vklad_rnk(p_usagemode        => 'IO'         ,
                                         p_clientname       => nmkn_        ,  --p_clientname       IN  customer.nmk%type,
                                         p_client_name      => null         ,  --p_client_name      IN  varchar2 default null,
                                         p_client_surname   => null         ,  --p_client_surname   IN  varchar2 default null,
                                         p_client_patr      => null         ,  --p_client_patr      IN  varchar2 default null,
                                         p_country          => countryn_    ,  --p_country          IN  customer.country%type,
                                         p_index            => inden_       ,  --p_index            IN  varchar2,
                                         p_obl              => obln_        ,  --p_obl              IN  varchar2,
                                         p_district         => rajnn_       ,  --p_district         IN  varchar2,
                                         p_settlement       => cityn_       ,  --p_settlement       IN  varchar2,
                                         p_adress           => adrn_        ,  --p_adress           IN  varchar2,
                                         p_fulladdress      => fulladdressn_,  --p_fulladdress      IN  customer.adr%type,
                              /* null */ p_clientcodetype   => 2            ,  --p_clientcodetype   IN  customer.tgr%type,
                                         p_clientcode       => okpon_       ,  --p_clientcode       IN  customer.okpo%type,
                                         p_doctype          => 1            ,  --p_doctype          IN  person.passp%type,
                                         p_docserial        => serin_       ,  --p_docserial        IN  person.ser%type,
                                         p_docnumber        => nomen_       ,  --p_docnumber        IN  person.numdoc%type,
                                         p_docorg           => vidan_       ,  --p_docorg           IN  person.organ%type,
                                         p_docdate          => ddavn_       ,  --p_docdate          IN  person.pdate%type,
                                         p_clientbdate      => bdayn_       ,  --p_clientbdate      IN  person.bday%type,
                                         p_clientbplace     => null         ,  --p_clientbplace     IN  person.bplace%type,
                                         p_clientsex        => sexn_        ,  --p_clientsex        IN  person.sex%type,
                                         p_clientHomePh     => teldn_       ,  --p_clienthomeph     IN  person.teld%type,
                                         p_clientWorkPh     => null         ,  --p_clientworkph     IN  person.telw%type,
                                         p_clientname_gc    => null         ,  --p_clientname_gc    IN  customerw.value%type,
                                         p_resid_code       => resid_coden_ ,  --p_resid_code       IN  number,
                                         p_resid_index      => inden_       ,  --p_resid_index      IN  varchar2,
                                         p_resid_obl        => obln_        ,  --p_resid_obl        IN  varchar2,
                                         p_resid_district   => rajnn_       ,  --p_resid_district   IN  varchar2,
                                         p_resid_settlement => cityn_       ,  --p_resid_settlement IN  varchar2,
                                         p_resid_adress     => adrn_        ,  --p_resid_adress     IN  varchar2,
                                         p_clientid         => RNKbenef_    ,  --p_clientid     IN OUT  number,
                              /* null */ p_registrydate     => glbd_);         --p_registrydate     IN  date default null

                update customer
                set    notes='Бенефициар по вкладу '||nsc_
                where  rnk=RNKdover_;

                dpt_web.create_agreement(dptid_   ,   -- p_dptid
                                         5        ,   -- l_agrtype
                                         rnk_     ,   -- p_initcustid
                                         RNKbenef_,   -- p_trustcustid
                                         null     ,   -- p_trustid
                                         null     ,   -- p_transferdpt
                                         null     ,   -- p_transferint
                                         null     ,   -- p_amountcash
                                         null     ,   -- p_amountcashless
                                         null     ,   -- p_datbegin
                                         null     ,   -- p_datend
                                         null     ,   -- p_ratereqid
                                         null     ,   -- p_ratevalue
                                         null     ,   -- p_ratedate
                                         null     ,   -- p_denomamount
                                         null     ,   -- p_denomcount
                                         null     ,   -- p_denomref
                                         null     ,   -- p_comissref
                                         null     ,   -- p_docref
                                         -13      ,   -- p_comissreqid
                                         agrmntid_);  -- p_agrmntid
              exception when OTHERS then
                if sqlerrm like '%DPT-00228%' then
                  null;
                else
                  p_code := p_code+1;
                  text_ := 'Ошибка заполнения справочника доверенных лиц: '||sqlerrm||' '||dbms_utility.format_error_backtrace;
                  toroot;
                  bars_audit.error(p_errmask                ||'(8): ' ||
                                   'код ТВБВ='              ||p_tvbv  ||
                                   ', код вида вклада='     ||kkmark_ ||
                                   ', код вида вклада БАРС='||dptvidd_||
                                   ', номер вклада='        ||nsc_    ||
                                   ', код ОКПО='            ||icod_   ||' - '||text_);
                  bc.subst_branch(branch_);
                end if;
              end;

            end if;

--          здесь УЖЕ "замочены" наследники и доверенные лица

            delete
            from   INT_RATN
            where  acc=accdepo_;

            update INT_ACCN
            set    stp_dat=dDatEnd_-1,
                   acr_dat=gl.bdate  -- дату последнего начисления %% берём
            where  acc=accdepo_;     -- НЕ из АСВО, а СТРОГО банковскую

            prcdate_ := datp_;

            insert
            into int_ratn (acc ,
                           id  ,
                           bdat,
                           ir  ,
                           idu)
                   values (accdepo_,
                           1       ,
                           prcdate_,
                           percent_,
                           1);

            update accounts
            set    nlsalt=nsc_,
                   mdate=dDatEnd_
            where  acc=accdepo_;

            if npr_>0 then
              select acra
              into   accperc_
              from   int_accn
              where  acc=accdepo_ and
                     id=1;
            else
              select acrb
              into   accperc_
              from   int_accn
              where  acc=accdepo_ and
                     id=1;

              select nbs
              into   nbsacrb_
              from   accounts
              where  acc=accperc_;

              if nbsacrb_<>'3500' then
                select acra
                into   accperc_
                from   int_accn
                where  acc=accdepo_ and
                       id=1;
              end if;
            end if;

            update accounts
            set    nlsalt=nsc_,
                   mdate=dDatEnd_
            where  acc=accperc_;

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NSC_A' ,
                            nsc_);               -- номер сберкнижки АСВО/МЕГАБАНК

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KKASV' ,
                            kkmark_);            -- код картотеки АСВО/код вида вклада МЕГАБАНК

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            '%ASVO' ,
                            to_char(percent_));  -- процент АСВО/МЕГАБАНК по вкладу

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLD' ,
                            nlsKOTLOdepo_);      -- котловой счёт картотеки депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLN' ,
                            nlsKOTLOperc_);      -- котловой счёт картотеки начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'KOTLZ' ,
                            nlsKOTLOperz_);      -- котловой счёт картотеки зачисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'OST_D' ,
                            to_char(ost_));      -- остаток АСВО/МЕГАБАНК по вкладу (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NPR_D' ,
                            to_char(npr_));      -- сумма начисленных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'ZPR_D' ,
                            to_char(zpr_));      -- сумма зачисленных %% (в коп.)

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_D' ,
                            to_char(nbsdepo_));  -- балансовый счёт депозита

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_N' ,
                            to_char(nbsperc_));  -- балансовый счёт начисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_,
                            'NBS_Z' ,
                            to_char(nbsperz_));  -- балансовый счёт зачисленных %%

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_TDOK',
                            to_char(tidok_));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_DEPN',
                            DEPNAME_);

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_BEGS',
                            to_char(BEGINSUM_));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_DZPR',
                            to_char(dzpr_,'DD/MM/YYYY'));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_DNPR',
                            to_char(dnpr_,'DD/MM/YYYY'));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_REGD',
                            to_char(REGDATEn_,'DD/MM/YYYY'));

            insert
            into accountsw (acc,
                            tag,
                            value)
                    values (accdepo_  ,
                            'SBO_BRAO',
                            BRANCHSBON_);

            commit;

            bc.set_context;

            text_ := 'Открыт депозит (без загрузки счёта суммой вклада МЕГАБАНК)';
            migraAS.asvo_log_write(kkmark_      ,
                                   dptvidd_     ,
                                   dptkv_       ,
                                   p_tvbv       ,
               /* k.KKFFFACTUAL */ null         ,
                                   branch_      ,
                                   nlsKOTLOdepo_,
                                   nlsKOTLOperc_,
                                   nlsKOTLOperz_,
                                   id_          ,
                                   nsc_         ,
                                   fio_         ,
                                   icod_        ,
                                   seria_       ,
                                   nomer_       ,
                                   ost_         ,
                                   null         ,
                                   npr_         ,
                                   zpr_         ,
                                   0            ,
                                   text_        ,
                                   sysdate      ,
                                   rnk_         ,
                                   dptid_);
            p_open := p_open+1;

            if mod(p_open,10000)=1 then

--            сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

              BEGIN
                DBMS_JOB.SUBMIT (job       => Job_                    ,
                                 what      => 'migraAS.tableDP_stats;',
                                 next_date => sysdate                 ,
                                 interval  => null                    ,
                                 no_parse  => FALSE);
              exception when others then
                bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
              END;

            end if;

          end if;
        end if;
        goto normgeroiobxodSBON;

<<kkmarkmnogoviddSBON>> null;

        if nvl(instr(kkmarkm_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'У кода вида вклада СБОН более одного соответствия виду вклада БАРС';
          toroot;
          bars_audit.error(p_errmask           ||'(19): '||
                           'код ТВБВ='         ||p_tvbv  ||
                           ', код вида вклада='||kkmark_ ||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          kkmarkm_ := kkmarkm_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxodSBON;

<<netvidadepositaSBON>> null;

        if nvl(instr(netvida_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Нет соответствия кода вида вклада СБОН виду вклада БАРС';
          toroot;
          bars_audit.error(p_errmask||'(1): '  ||
                           'код ТВБВ='         ||p_tvbv ||
                           ', код вида вклада='||kkmark_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          netvida_ := netvida_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxodSBON;

<<datbegbordatendSBON>> null;

        p_code := p_code+1;
        text_  := 'Дата открытия вклада больше или равна даты окончания';
        toroot;
        bars_audit.error(p_errmask                ||'(18): '||
                         'код ТВБВ='              ||p_tvbv  ||
                         ', код вида вклада='     ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               null         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxodSBON;

<<netdatiotkritiaSBON>> null;

        p_code := p_code+1;
        text_  := 'Отсутствует дата открытия вклада СБОН';
        toroot;
        bars_audit.error(p_errmask                ||'(5): ' ||
                         'код ТВБВ='              ||p_tvbv  ||
                         ', код вида вклада='     ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               null         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxodSBON;

<<baddataotkritiaSBON>> null;

        p_code := p_code+1;
        text_  := 'Дата открытия вклада СБОН больше текущей банковской даты';
        bc.set_context;
        bars_audit.error(p_errmask                ||'(17): '||
                         'код ТВБВ='              ||p_tvbv  ||
                         ', код вида вклада='     ||kkmark_ ||
                         ', код вида вклада БАРС='||dptvidd_||
                         ', номер вклада='        ||nsc_    ||
                         ', код ОКПО='            ||icod_   ||' - '||text_);
        migraAS.asvo_log_write(kkmark_      ,
                               dptvidd_     ,
                               dptkv_       ,
                               p_tvbv       ,
           /* k.KKFFFACTUAL */ null         ,
                               branch_      ,
                               nlsKOTLOdepo_,
                               nlsKOTLOperc_,
                               nlsKOTLOperz_,
                               id_          ,
                               nsc_         ,
                               fio_         ,
                               icod_        ,
                               seria_       ,
                               nomer_       ,
                               ost_         ,
                               null         ,
                               npr_         ,
                               zpr_         ,
                               -1           ,
                               text_        ,
                               sysdate      ,
                               rnk_         ,
                               dptid_);
--      flkart_ := 9999999;
        goto normgeroiobxodSBON;

<<razniekodivalutSBON>> null;

        if nvl(instr(raznkod_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Код валюты вклада СБОН не соответствует коду валюты вида вклада БАРС';
          bc.set_context;
          bars_audit.error(p_errmask||'(4): '       ||
                           'код ТВБВ='              ||p_tvbv  ||
                           ', код вида вклада='     ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          raznkod_ := raznkod_||kkmark_||',';
        end if;
--      flkart_ := 9999999;
        goto normgeroiobxodSBON;

<<razniebalschetaSBON>> null;

        if nvl(instr(raznbal_,','||kkmark_||','),0)=0 then
          p_code := p_code+1;
          text_  := 'Балансовый счёт вклада СБОН не равен балансовому счёту вида вклада БАРС';
          bc.set_context;
          bars_audit.error(p_errmask||'(20): '      ||
                           'код ТВБВ='              ||p_tvbv  ||
                           ', код вида вклада='     ||kkmark_ ||
                           ', код вида вклада БАРС='||dptvidd_||' - '||text_);
          migraAS.asvo_log_write(kkmark_      ,
                                 dptvidd_     ,
                                 dptkv_       ,
                                 p_tvbv       ,
             /* k.KKFFFACTUAL */ null         ,
                                 branch_      ,
                                 nlsKOTLOdepo_,
                                 nlsKOTLOperc_,
                                 nlsKOTLOperz_,
                                 id_          ,
                                 nsc_         ,
                                 fio_         ,
                                 icod_        ,
                                 seria_       ,
                                 nomer_       ,
                                 ost_         ,
                                 null         ,
                                 npr_         ,
                                 zpr_         ,
                                 -1           ,
                                 text_        ,
                                 sysdate      ,
                                 rnk_         ,
                                 dptid_);
          raznbal_ := raznbal_||kkmark_||',';
        end if;
--      flkart_ := 9999999;

<<normgeroiobxodSBON>> null;

      END;

<<ugezaimpotiliSBON>> null;

    end loop;
    close cur_;

    dbms_application_info.set_client_info(' ');

    toroot;
    begin
      execute immediate 'update dpt_vidd
                         set    flag=0
                         where  vidd in (select vidd
                                         from   ASVO_TEMP_dpt_vidd_flag0)';
      commit;
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'DROP TABLE ASVO_TEMP_dpt_vidd_flag0';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger TBIU_DPTVIDD_FLAG enable';
    exception when OTHERS then
      null;
    end;

    begin
      execute immediate 'alter trigger tbiu_specparamint_ob22 enable';
    exception when OTHERS then
      null;
    end;

--  сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

    BEGIN
      DBMS_JOB.SUBMIT (job       => Job_                    ,
                       what      => 'migraAS.tableDP_stats;',
                       next_date => sysdate                 ,
                       interval  => null                    ,
                       no_parse  => FALSE);
    exception when others then
      bars_audit.error(p_errmask||'(Jd): '||sqlerrm||' '||Chr(13)||Chr(10)||dbms_utility.format_error_backtrace);
    END;

<<proverkineprosliSBON>> null;

    bars_alerter(1);

  end create_dptSBON;

--

  procedure load_ostcdSBON (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is
    TT_        oper.TT%type  :='АСВ';
    VOB_       oper.VOB%type :=6;
    REF_       oper.REF%type;
    KOTLD_     varchar2(14);
    KOTLN_     varchar2(14);
    KOTLZ_     varchar2(14);
    sumOSTD_   number;
    sumNPRD_   number;
    sumZPRD_   number;
    nlsNP_     varchar2(14);
    nmkd_      varchar2(38);
    nmsd_      varchar2(38);
    nmsn_      varchar2(38);
    nmsz_      varchar2(38);
    branch_    varchar2(32);
    kktokens_  varchar2_list;
    text_      varchar2(512);
    pd_        int;
    pn_        int;
    pz_        int;
    daos_      date;
    acc_       accounts.acc%type;

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;
    pd_    := 0;
    pn_    := 0;
    pz_    := 0;

    select branch
    into   branch_
    from   ASVO_FFF_BRANCH
    where  FFF=p_tvbv and
           rownum<2;

--  bars_audit.info('load_ostcdSBON - @ branch_='||branch_);

--  депозиты

    bc.subst_branch(branch_);

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

    for k in (select a.nls                 ,
                     a.kv                  ,
                     substr(a.nms,1,38) nms,
                     d.acc                 ,
                     d.limit               ,
                     d.deposit_id          ,
                     d.vidd                ,
                     d.nd                  ,
                     d.rnk
              from   dpt_deposit d,
                     accounts    a
              where  d.comments='Imported from SBON' and
                     d.acc=a.acc                     and
                     d.branch=branch_                and
                     length(d.nd)-length(replace(d.nd,'_'))>=4)
    loop

--    bars_audit.info('load_ostcdSBON - 0 k.acc='||k.acc||', k.kv='||k.kv);

      begin
        select value
        into   KOTLD_
        from   accountsw
        where  tag='KOTLD' and acc=k.acc;
      exception when no_data_found then
        bars_audit.error(p_errmask||'(10): не найден котловой счёт для вклада '||
                         k.nd||' '||k.nls||'('||k.kv||') - '||sqlerrm||' '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofoundSBON;
      end;

      begin
        select trim(substr(nms,1,38)),
               daos                  ,
               acc
        into   nmsd_,
               daos_,
               acc_
        from   accounts
        where  nls=KOTLD_ and
               kv=k.kv    and
               DAZS is null;
      exception when OTHERS then
        if pd_=0 then
          bars_audit.error(p_errmask||'(1): не найден или закрыт счёт '||KOTLD_||'('||k.kv||') - '||
                           sqlerrm||' '||dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          pd_ := 1;
        end if;
--      rollback;
        goto nofoundSBON;
      end;

      if daos_>p_dasvox then
        update accounts
        set    daos=p_dasvox
        where  acc=acc_;
      end if;

--    bars_audit.info('load_ostcdSBON - 1 k.acc='||k.acc);

      GL.REF
           (REF_);

--    bars_audit.info('load_ostcdSBON - 2');

      GL.IN_DOC3
           (REF_ , TT_    , VOB_   , REF_   , SYSDATE, GL.BDATE, 1,
            k.KV , k.limit, k.KV   , k.limit, NULL   , GL.BDATE, GL.BDATE,
            nmsd_, KOTLD_ , gl.AMFO,
            k.NMS, k.NLS  , gl.AMFO,
            'Розкриття депозитного рахунку з МЕГАБАНК',
            NULL, null, null, NULL, NULL, 0, NULL, null);

--    bars_audit.info('load_ostcdSBON - 3');

      begin
        GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLD_, k.limit,
                                         k.KV, k.NLS , k.limit);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(5): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofoundSBON;
      end;

--    bars_audit.info('load_ostcdSBON - 4');

      begin
        select to_number(value)
        into   sumNPRD_
        from   accountsw
        where  tag='NPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumNPRD_ := 0;
      end;

      if sumNPRD_>0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(2): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofoundSBON;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdSBON - 5a');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLN_, sumNPRD_,
                                         k.KV, nlsNP_, sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(6): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofoundSBON;
        end;
      end if;

      if sumNPRD_<0 then

        select value
        into   KOTLN_
        from   accountsw
        where  tag='KOTLN' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsn_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLN_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pn_=0 then
            bars_audit.error(p_errmask||'(3): не найден или закрыт счёт '||KOTLN_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pn_ := 1;
          end if;
          rollback;
          goto nofoundSBON;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acrb=a.acc;

--      bars_audit.info('load_ostcdSBON - 5b');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 0, k.KV, KOTLN_, -sumNPRD_,
                                         k.KV, nlsNP_, -sumNPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(7): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofoundSBON;
        end;

      end if;

--    bars_audit.info('load_ostcdSBON - 6  k.acc='||k.acc);

      begin
        select to_number(value)
        into   sumZPRD_
        from   accountsw
        where  tag='ZPR_D' and
               acc=k.acc;
      exception when OTHERS then
        sumZPRD_ := 0;
      end;

      if sumZPRD_>0 then

        select value
        into   KOTLZ_
        from   accountsw
        where  tag='KOTLZ' and
               acc=k.acc;
        begin
          select trim(substr(nms,1,38)),
                 daos                  ,
                 acc
          into   nmsz_,
                 daos_,
                 acc_
          from   accounts
          where  nls=KOTLZ_ and
                 kv=k.kv    and
                 DAZS is null;
        exception when OTHERS then
          if pz_=0 then
            bars_audit.error(p_errmask||'(4): не найден или закрыт счёт '||KOTLZ_||'('||k.kv||') - '||
                             sqlerrm||' '||dbms_utility.format_error_backtrace);
            p_code := p_code+1;
            pz_ := 1;
          end if;
          rollback;
          goto nofoundSBON;
        end;

        if daos_>p_dasvox then
          update accounts
          set    daos=p_dasvox
          where  acc=acc_;
        end if;

        select a.nls
        into   nlsNP_
        from   accounts a,
               int_accn i
        where  i.acc=k.acc and
               id=1        and
               i.acra=a.acc;

--      bars_audit.info('load_ostcdSBON - 7');

        begin
          GL.PAYV
             (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTLZ_, sumZPRD_,
                                         k.KV, nlsNP_, sumZPRD_);
        exception when OTHERS then
          bars_audit.error(p_errmask||'(8): '||sqlerrm||' - '||
                           dbms_utility.format_error_backtrace);
          p_code := p_code+1;
          rollback;
          goto nofoundSBON;
        end;

      end if;

--    bars_audit.info('load_ostcdSBON - 8');

      begin
        GL.PAY
             (2, REF_, GL.BDATE);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(9): '||sqlerrm||' - '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofoundSBON;
      end;

--    bars_audit.info('load_ostcdSBON - 9');

      insert
      into   operw (ref,
                    tag,
                    value)
            values (REF_   ,
                    'ND   ',
                    k.deposit_id);

      update dpt_deposit
      set    comments='*Imported from SBON'
      where  deposit_id=k.deposit_id;

      delete
      from   oper_ext
      where  ref=REF_;

      commit;

--    bars_audit.info('load_ostcdSBON - k.nd='||k.nd);

      migraAS.get_tokens(k.nd,'_',kktokens_);
      text_ := 'Счёт депозита загружен';
      migraAS.asvo_log_write(kktokens_(1),
                             k.vidd      ,
                             k.kv        ,
                             p_tvbv      ,
                             null        ,
                             branch_     ,
                             KOTLD_      ,
                             KOTLN_      ,
                             KOTLZ_      ,
                             kktokens_(3),
                             kktokens_(4),
                             null        ,
                             null        ,
                             null        ,
                             null        ,
                             k.limit     ,
                             null        ,
                             sumNPRD_    ,
                             sumZPRD_    ,
                             1           ,
                             text_       ,
                             sysdate     ,
                             k.rnk       ,
                             k.deposit_id);
      p_open := p_open+1;

<<nofoundSBON>> null;

      dbms_application_info.set_client_info('load='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

--  dbms_application_info.set_client_info('pereocenka');

--  migraAS.pereocenka(p_tvbv,p_open,p_code,p_errmask,p_dasvox);
--  commit;

    bc.set_context;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end load_ostcdSBON;

--

  procedure copy_immo_table_dep (p_tvbv in char)
  is
  begin

    if p_tvbv is not null and length(p_tvbv)=3 then
      begin
        execute immediate 'drop table ASVO_'||p_tvbv||'_FDEP';
      exception when OTHERS then
        null;
      end;

      begin
        execute immediate 'create table ASVO_'||p_tvbv||'_FDEP as select * from ASVO_FDEP';
      exception when OTHERS then
        null;
      end;

    end if;

  end copy_immo_table_dep;

--

  procedure copy_immo_table_dpi (p_tvbv in char)
  is
  begin
    if p_tvbv is not null and length(p_tvbv)=3 then
      begin
        execute immediate 'drop table ASVO_'||p_tvbv||'_FDPI';
      exception when OTHERS then
        null;
      end;

      begin
        execute immediate 'create table ASVO_'||p_tvbv||'_FDPI as select * from ASVO_FDPI';
      exception when OTHERS then
        null;
      end;

    end if;

  end copy_immo_table_dpi;

--

  procedure create_dptASIM (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    FIO_         varchar2(60);
    IDCODE_      varchar2(10);
    DOCTYPE_     number(1);
    PASP_S_      varchar2(2);
    PASP_N_      varchar2(8);
    PASP_W_      varchar2(120);
    PASP_D_      date;
    BIRTHDAT_    date;
    BIRTHPL_     varchar2(120);
    SEX_         number(1);
    POSTIDX_     varchar2(10);
    REGION_      varchar2(30);
    DISTRICT_    varchar2(30);
    CITY_        varchar2(30);
    ADDRESS_     varchar2(120);
    PHONE_H_     varchar2(20);
    PHONE_J_     varchar2(20);
    LANDCOD_     number(5);
    REGDATE_     date;
    DEPCODE_     varchar2(16);
    DEPVIDNAME_  varchar2(120);
    ACC_CARD_    varchar2(10);
    DEPNAME_     varchar2(120);
    NLS_         varchar2(20);
    ID_          varchar2(7);
    DATO_        date;
    OST_         number(16);
    SUM_         number(16);
    DATN_        date;
    ATTR_        varchar2(16);
    MARK_        varchar2(1);
    VER_         number(4);
    KOD_OTD_     varchar2(10);
    BRANCH_      varchar2(30);
    BSD_         varchar2(7);
    OB22DE_      varchar2(2);
    BSN_         varchar2(7);
    OB22IE_      varchar2(7);
    BSD7_        varchar2(7);
    OB22D7_      varchar2(2);

    DZAGR_       date;
    tvbv_        char(3);
    fl_          int;
    DATPRC_      date;
    PRC_         number(6,4);

    type         cur is ref cursor;
    cur_         cur;
    sql_         varchar2(4000);

  begin

    p_open := 0;
    p_code := 0;

    sql_:='select FIO                 , --FIO_
                  IDCODE              , --IDCODE_
                  DOCTYPE             , --DOCTYPE_
                  PASP_S              , --PASP_S_
                  PASP_N              , --PASP_N_
                  PASP_W              , --PASP_W_
                  PASP_D              , --PASP_D_
                  BIRTHDAT            , --BIRTHDAT_
                  BIRTHPL             , --BIRTHPL_
                  SEX                 , --SEX_
                  POSTIDX             , --POSTIDX_
                  REGION              , --REGION_
                  DISTRICT            , --DISTRICT_
                  CITY                , --CITY_
                  ADDRESS             , --ADDRESS_
                  PHONE_H             , --PHONE_H_
                  PHONE_J             , --PHONE_J_
                  LANDCOD             , --LANDCOD_
                  REGDATE             , --REGDATE_
                  DEPCODE             , --DEPCODE_
                  DEPVIDNAME          , --DEPVIDNAME_
                  ACC_CARD            , --ACC_CARD_
                  DEPNAME             , --DEPNAME_
                  NLS                 , --NLS_
                  ID                  , --ID_
                  DATO                , --DATO_
                  OST                 , --OST_
                  SUM                 , --SUM_
                  DATN                , --DATN_
                  ATTR                , --ATTR_
                  MARK                , --MARK_
                  VER                 , --VER_
                  KOD_OTD             , --KOD_OTD_
                  BRANCH              , --BRANCH_
                  BSD                 , --BSD_
                  lpad(OB22DE,2,''0''), --OB22DE_
                  BSN                 , --BSN_
                  lpad(OB22IE,2,''0''), --OB22IE_
                  BSD7                , --BSD7_
                  lpad(OB22D7,2,''0'')  --OB22D7_
           from   ASVO_FDEP';
    open cur_ for sql_;

    loop

      fetch cur_ into FIO_       ,
                      IDCODE_    ,
                      DOCTYPE_   ,
                      PASP_S_    ,
                      PASP_N_    ,
                      PASP_W_    ,
                      PASP_D_    ,
                      BIRTHDAT_  ,
                      BIRTHPL_   ,
                      SEX_       ,
                      POSTIDX_   ,
                      REGION_    ,
                      DISTRICT_  ,
                      CITY_      ,
                      ADDRESS_   ,
                      PHONE_H_   ,
                      PHONE_J_   ,
                      LANDCOD_   ,
                      REGDATE_   ,
                      DEPCODE_   ,
                      DEPVIDNAME_,
                      ACC_CARD_  ,
                      DEPNAME_   ,
                      NLS_       ,
                      ID_        ,
                      DATO_      ,
                      OST_       ,
                      SUM_       ,
                      DATN_      ,
                      ATTR_      ,
                      MARK_      ,
                      VER_       ,
                      KOD_OTD_   ,
                      BRANCH_    ,
                      BSD_       ,
                      OB22DE_    ,
                      BSN_       ,
                      OB22IE_    ,
                      BSD7_      ,
                      OB22D7_;

      exit when cur_%notfound;

      dbms_application_info.set_client_info('open='||to_char(p_open)||
                                         ', error='||to_char(p_code));

      bars_audit.info(substr(p_errmask,1,length(p_errmask)-3)||'DEPCODE=' ||DEPCODE_ ||
                                                              ' BRANCH='  ||BRANCH_  ||
                                                              ' ACC_CARD='||ACC_CARD_||
                                                              ' NLS='     ||NLS_     ||
                                                              ' ID='      ||ID_      ||
                                                              ' ost='     ||ost_     ||
                                                              ' sum='     ||sum_     ||
                                                              ' ATTR='    ||ATTR_    ||
                                                              ' MARK='    ||MARK_    ||
                                                              ' KOD_OTD=' ||KOD_OTD_ ||
                                                              ' idcode='  ||IDCODE_  ||
                                                              ' fio='     ||FIO_);
      begin
        insert
        into   ASVO_IMMOBILE (TVBV      ,
                              FIO       ,
                              IDCODE    ,
                              DOCTYPE   ,
                              PASP_S    ,
                              PASP_N    ,
                              PASP_W    ,
                              PASP_D    ,
                              BIRTHDAT  ,
                              BIRTHPL   ,
                              SEX       ,
                              POSTIDX   ,
                              REGION    ,
                              DISTRICT  ,
                              CITY      ,
                              ADDRESS   ,
                              PHONE_H   ,
                              PHONE_J   ,
                              LANDCOD   ,
                              REGDATE   ,
                              DEPCODE   ,
                              DEPVIDNAME,
                              ACC_CARD  ,
                              DEPNAME   ,
                              NLS       ,
                              ID        ,
                              DATO      ,
                              OST       ,
                              SUM       ,
                              DATN      ,
                              ATTR      ,
                              MARK      ,
                              VER       ,
                              KOD_OTD   ,
                              BRANCH    ,
                              BSD       ,
                              OB22DE    ,
                              BSN       ,
                              OB22IE    ,
                              BSD7      ,
                              OB22D7    ,
                              FL        ,
                              DZAGR)
                      values (p_tvbv       ,
                              FIO_         ,
                              IDCODE_      ,
                              DOCTYPE_     ,
                              PASP_S_      ,
                              PASP_N_      ,
                              PASP_W_      ,
                              PASP_D_      ,
                              BIRTHDAT_    ,
                              BIRTHPL_     ,
                              SEX_         ,
                              POSTIDX_     ,
                              REGION_      ,
                              DISTRICT_    ,
                              CITY_        ,
                              ADDRESS_     ,
                              PHONE_H_     ,
                              PHONE_J_     ,
                              LANDCOD_     ,
                              REGDATE_     ,
                              DEPCODE_     ,
                              DEPVIDNAME_  ,
                              ACC_CARD_    ,
                              DEPNAME_     ,
                              NLS_         ,
                              ID_          ,
                              DATO_        ,
                              OST_         ,
                              SUM_         ,
                              DATN_        ,
                              ATTR_        ,
                              nvl(MARK_,' '),
                              VER_         ,
                              KOD_OTD_     ,
                              BRANCH_      ,
                              BSD_         ,
                              OB22DE_      ,
                              BSN_         ,
                              OB22IE_      ,
                              BSD7_        ,
                              OB22D7_      ,
                              -10          ,
                              sysdate);
        p_open := p_open+1;
        commit;
      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
        begin
          select DZAGR,
                 tvbv ,
                 fl
          into   DZAGR_,
                 tvbv_ ,
                 fl_
          from   asvo_immobile
          where  KOD_OTD =KOD_OTD_       and
                 BRANCH  =BRANCH_        and
                 ACC_CARD=ACC_CARD_      and
                 MARK    =nvl(MARK_,' ') and
                 NLS     =NLS_           and
                 ID      =ID_;
          p_code := p_code+1;
          bars_audit.error(p_errmask          ||'(1): '           ||
                           'код ТВБВ='        ||tvbv_             ||
                           ', код отделения=' ||KOD_OTD_          ||
                           ', бранч='         ||BRANCH_           ||
                           ', код картотеки=' ||ACC_CARD_         ||
                           ', учетный символ='||MARK_             ||
                           ', номер вклада='  ||NLS_              ||
                           ', ID='            ||ID_               ||
                           ', ФИО='           ||FIO_              ||
                           ', ид.код='        ||IDCODE_           ||
                           ' - вклад УЖЕ загружен ('              ||
                           to_char(DZAGR_,'dd.mm.yyyy hh24:mi:ss')||
                           '), флаг обработки='||to_char(fl_));
        EXCEPTION WHEN no_data_found THEN
          p_code := p_code+1;
          bars_audit.error(p_errmask                ||'(0): '           ||
                           'код ТВБВ='              ||tvbv_             ||
                           ', код отделения='       ||KOD_OTD_          ||
                           ', бранч='               ||BRANCH_           ||
                           ', код картотеки='       ||ACC_CARD_         ||
                           ', учетный символ='      ||MARK_             ||
                           ', номер вклада='        ||NLS_              ||
                           ', ID='                  ||ID_               ||
                           ', ФИО='                 ||FIO_              ||
                           ', ид.код='              ||IDCODE_           ||
                           ' - неизвестная ошибка: '||sqlerrm);
--        tvbv_  := p_tvbv;
--        DZAGR_ := sysdate;
        end;
      end;

    end loop;
    close cur_;

    dbms_application_info.set_client_info('Загрузка процентных ставок...');

--  загрузка процентных ставок

    sql_:='select BRANCH  , --BRANCH_
                  ACC_CARD, --ACC_CARD_
                  MARK    , --MARK_
                  DATPRC  , --DATPRC_
                  PRC       --PRC_
           from   ASVO_FDPI';
    open cur_ for sql_;

    loop

      fetch cur_ into BRANCH_  ,
                      ACC_CARD_,
                      MARK_    ,
                      DATPRC_  ,
                      PRC_;

      exit when cur_%notfound;

      bars_audit.info(substr(p_errmask,1,length(p_errmask)-3)||'BRANCH='  ||BRANCH_                      ||
                                                              ' ACC_CARD='||ACC_CARD_                    ||
                                                              ' MARK='    ||MARK_                        ||
                                                              ' DATPRC='  ||to_char(DATPRC_,'dd.mm.yyyy')||
                                                              ' PRC='     ||to_char(PRC_));

      begin
        insert
        into   ASVO_IMMOBILE_PERCENT (TVBV    ,
                                      BRANCH  ,
                                      ACC_CARD,
                                      MARK    ,
                                      DATPRC  ,
                                      PRC)
                              values (p_tvbv        ,
                                      BRANCH_       ,
                                      ACC_CARD_     ,
                                      nvl(MARK_,' '),
                                      DATPRC_       ,
                                      PRC_);
        commit;
      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
        begin
          select PRC,
                 tvbv
          into   PRC_,
                 tvbv_
          from   asvo_immobile_percent
          where  BRANCH  =BRANCH_        and
                 ACC_CARD=ACC_CARD_      and
                 MARK    =nvl(MARK_,' ') and
                 DATPRC  =DATPRC_;
        EXCEPTION WHEN others THEN
          tvbv_  := p_tvbv;
        end;
        p_code := p_code+1;
        bars_audit.error(p_errmask          ||'(2): '          ||
                         'код ТВБВ='        ||tvbv_            ||
                         ', бранч='         ||BRANCH_          ||
                         ', код картотеки=' ||ACC_CARD_        ||
                         ', учетный символ='||MARK_            ||
                         ' - процентная ставка УЖЕ загружена ('||
                         to_char(DATPRC_,'dd.mm.yyyy')         ||
                         '), ставка='||to_char(PRC_));
      end;

    end loop;
    close cur_;

    dbms_application_info.set_client_info(' ');

  end create_dptASIM;

--

  procedure drop_deposASIM (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

    type       cur is ref cursor;
    cur_       cur;
    sql_       varchar2(4000);

    KOD_OTD_   varchar2(10);
    BRANCH_    varchar2(30);
    ACC_CARD_  varchar2(10);
    MARK_      varchar2(1);
    NLS_       varchar2(20);
    ID_        varchar2(7);
    FIO_       varchar2(60);
    IDCODE_    varchar2(10);
    fl_        int;
    DATPRC_    date;

  begin

    p_open := 0;
    p_code := 0;

    sql_:='select KOD_OTD ,  --KOD_OTD_
                  BRANCH  ,  --BRANCH_
                  ACC_CARD,  --ACC_CARD_
                  MARK    ,  --MARK_
                  NLS     ,  --NLS_
                  ID      ,  --ID_
                  FIO     ,  --FIO_
                  IDCODE     --IDCODE_
           from   ASVO_FDEP';
    open cur_ for sql_;

    loop

      fetch cur_ into KOD_OTD_ ,
                      BRANCH_  ,
                      ACC_CARD_,
                      MARK_    ,
                      NLS_     ,
                      ID_      ,
                      FIO_     ,
                      IDCODE_;

      exit when cur_%notfound;

      dbms_application_info.set_client_info('open='||to_char(p_open)||
                                         ', error='||to_char(p_code));

      begin
        select fl
        into   fl_
        from   ASVO_IMMOBILE
        where  tvbv    =p_tvbv         and
               KOD_OTD =KOD_OTD_       and
               BRANCH  =BRANCH_        and
               ACC_CARD=ACC_CARD_      and
               MARK    =nvl(MARK_,' ') and
               NLS     =NLS_           and
               ID      =ID_;
        if fl_!=-10 then
          bars_audit.error(p_errmask          ||'(1): '  ||
                           'код ТВБВ='        ||p_tvbv   ||
                           ', код отделения=' ||KOD_OTD_ ||
                           ', бранч='         ||BRANCH_  ||
                           ', код картотеки=' ||ACC_CARD_||
                           ', учетный символ='||MARK_    ||
                           ', номер вклада='  ||NLS_     ||
                           ', ID='            ||ID_      ||
                           ', ФИО='           ||FIO_     ||
                           ', ид.код='        ||IDCODE_  ||
                           ' - ошибка при удалении вклада (флаг обработки не равен -10)');
          p_code := p_code+1;
        else
          begin
            delete
            from   asvo_immobile
            where  tvbv    =p_tvbv         and
                   KOD_OTD =KOD_OTD_       and
                   BRANCH  =BRANCH_        and
                   ACC_CARD=ACC_CARD_      and
                   MARK    =nvl(MARK_,' ') and
                   NLS     =NLS_           and
                   ID      =ID_;
            p_open := p_open+1;
            commit;
          EXCEPTION WHEN others THEN
            bars_audit.error(p_errmask          ||'(2): '  ||
                             'код ТВБВ='        ||p_tvbv   ||
                             ', код отделения=' ||KOD_OTD_ ||
                             ', бранч='         ||BRANCH_  ||
                             ', код картотеки=' ||ACC_CARD_||
                             ', учетный символ='||MARK_    ||
                             ', номер вклада='  ||NLS_     ||
                             ', ID='            ||ID_      ||
                             ', ФИО='           ||FIO_     ||
                             ', ид.код='        ||IDCODE_  ||
                             ' - ошибка при удалении вклада ('||sqlerrm||')');
            p_code := p_code+1;
          end;
        end if;
      exception when no_data_found then
--      bars_audit.error(p_errmask          ||'(3): '  ||
--                       'код ТВБВ='        ||p_tvbv   ||
--                       ', код отделения=' ||KOD_OTD_ ||
--                       ', бранч='         ||BRANCH_  ||
--                       ', код картотеки=' ||ACC_CARD_||
--                       ', учетный символ='||MARK_    ||
--                       ', номер вклада='  ||NLS_     ||
--                       ', ID='            ||ID_      ||
--                       ', ФИО='           ||FIO_     ||
--                       ', ид.код='        ||IDCODE_  ||
--                       ' - вклад НЕ загружен');
--      p_code := p_code+1;
        null;
                 when others then
        bars_audit.error(p_errmask          ||'(4): '  ||
                         'код ТВБВ='        ||p_tvbv   ||
                         ', код отделения=' ||KOD_OTD_ ||
                         ', бранч='         ||BRANCH_  ||
                         ', код картотеки=' ||ACC_CARD_||
                         ', учетный символ='||MARK_    ||
                         ', номер вклада='  ||NLS_     ||
                         ', ID='            ||ID_      ||
                         ', ФИО='           ||FIO_     ||
                         ', ид.код='        ||IDCODE_  ||
                         ' - ошибка при удалении вклада ('||sqlerrm||')');
        p_code := p_code+1;
      end;

    end loop;
    close cur_;

--  откат процентных ставок (удаление)

    dbms_application_info.set_client_info('Откат процентных ставок...');

    sql_:='select BRANCH  ,  --BRANCH_
                  ACC_CARD,  --ACC_CARD_
                  MARK    ,  --MARK_
                  DATPRC     --DATPRC_
           from   ASVO_FDPI';
    open cur_ for sql_;

    loop

      fetch cur_ into BRANCH_  ,
                      ACC_CARD_,
                      MARK_    ,
                      DATPRC_;

      exit when cur_%notfound;


      begin
        delete
        from   asvo_immobile_percent
        where  tvbv    =p_tvbv         and
               BRANCH  =BRANCH_        and
               ACC_CARD=ACC_CARD_      and
               MARK    =nvl(MARK_,' ') and
               DATPRC  =DATPRC_;
        if sql%rowcount=1 then
--        p_open := p_open+1;
          commit;
--      else
--        bars_audit.error(p_errmask          ||'(5): '                      ||
--                         'код ТВБВ='        ||p_tvbv                       ||
--                         ', бранч='         ||BRANCH_                      ||
--                         ', код картотеки=' ||ACC_CARD_                    ||
--                         ', учетный символ='||MARK_                        ||
--                         ', дата % ставки=' ||to_char(DATPRC_,'dd/mm/yyyy')||
--                         ' - ставка отсутствует');
--        p_code := p_code+1;
        end if;
      EXCEPTION WHEN others THEN
        bars_audit.error(p_errmask          ||'(6): '                      ||
                         'код ТВБВ='        ||p_tvbv                       ||
                         ', бранч='         ||BRANCH_                      ||
                         ', код картотеки=' ||ACC_CARD_                    ||
                         ', учетный символ='||MARK_                        ||
                         ', дата % ставки=' ||to_char(DATPRC_,'dd/mm/yyyy')||
                         ' - ошибка при удалении ставки ('||sqlerrm||')');
        p_code := p_code+1;
      end;

    end loop;
    close cur_;

    dbms_application_info.set_client_info(' ');

  end drop_deposASIM;

--

  procedure dpt2immobile (p_FIO      varchar2                ,
                          p_IDCODE   varchar2                ,
                          p_DOCTYPE  number                  ,
                          p_PASP_S   varchar2                ,
                          p_PASP_N   varchar2                ,
                          p_PASP_W   varchar2                ,
                          p_PASP_D   date                    ,
                          p_BIRTHDAT date                    ,
                          p_BIRTHPL  varchar2                ,
                          p_SEX      number                  ,
                          p_POSTIDX  varchar2                ,
                          p_REGION   varchar2                ,
                          p_DISTRICT varchar2                ,
                          p_CITY     varchar2                ,
                          p_ADDRESS  varchar2                ,
                          p_PHONE_H  varchar2                ,
                          p_PHONE_J  varchar2                ,
                          p_REGDATE  date                    ,
                          p_NLS      varchar2                ,
                          p_DATO     date                    ,
                          p_OST      number                  ,
                          p_SUM      number                  ,
                          p_DATN     date                    ,
                          p_BRANCH   varchar2                ,
                          p_BSD      varchar2                ,
                          p_OB22DE   varchar2                ,
                          p_BSN      varchar2                ,
                          p_OB22IE   varchar2                ,
                          p_BSD7     varchar2                ,
                          p_OB22D7   varchar2                ,
                          p_source   varchar2                ,
                          p_kv       number                  ,
                          p_nd       varchar2                ,
                          p_dptid    number                  ,
                          p_err  out varchar2                ,
                          p_LANDCOD  number   default 804    ,
                          p_FL       int      default 0      ,
                          p_DZAGR    date     default sysdate,
                          p_ref      number   default null,
                          p_acccard ASVO_IMMOBILE.ACC_CARD%type default ' ',
                          p_id ASVO_IMMOBILE.ID%type default ' ',
                          p_mark ASVO_IMMOBILE.MARK%type default ' ',
                          p_kod_otd ASVO_IMMOBILE.KOD_OTD%type default ' ',
                          p_tvbv ASVO_IMMOBILE.tvbv%type default ' ',
                          p_attr ASVO_IMMOBILE.attr%type default ' ',
                          p_batch_id ASVO_IMMOBILE.batch_id%type default null
                          )
  is

    fl_     int;
    DZAGR_  date;
    in_key     number;  
  begin

    begin
      insert
      into   ASVO_IMMOBILE (FIO       ,
                            IDCODE    ,
                            DOCTYPE   ,
                            PASP_S    ,
                            PASP_N    ,
                            PASP_W    ,
                            PASP_D    ,
                            BIRTHDAT  ,
                            BIRTHPL   ,
                            SEX       ,
                            POSTIDX   ,
                            REGION    ,
                            DISTRICT  ,
                            CITY      ,
                            ADDRESS   ,
                            PHONE_H   ,
                            PHONE_J   ,
                            LANDCOD   ,
                            REGDATE   ,
                            NLS       ,
                            DATO      ,
                            OST       ,
                            SUM       ,
                            DATN      ,
                            BRANCH    ,
                            BSD       ,
                            OB22DE    ,
                            BSN       ,
                            OB22IE    ,
                            BSD7      ,
                            OB22D7    ,
                            source    ,
                            kv        ,
                            nd        ,
                            dptid     ,
                            FL        ,
                            DZAGR     ,
                            ref,
                            acc_card,
                            id,
                            mark, 
                            kod_otd,
                            tvbv,
                            attr,
                            batch_id)
                    values (p_FIO     ,
                            p_IDCODE  ,
                            p_DOCTYPE ,
                            p_PASP_S  ,
                            p_PASP_N  ,
                            p_PASP_W  ,
                            p_PASP_D  ,
                            p_BIRTHDAT,
                            p_BIRTHPL ,
                            p_SEX     ,
                            p_POSTIDX ,
                            p_REGION  ,
                            p_DISTRICT,
                            p_CITY    ,
                            p_ADDRESS ,
                            p_PHONE_H ,
                            p_PHONE_J ,
                            p_LANDCOD ,
                            p_REGDATE ,
                            p_NLS     ,
                            p_DATO    ,
                            p_OST     ,
                            p_SUM     ,
                            p_DATN    ,
                            p_BRANCH  ,
                            p_BSD     ,
                            p_OB22DE  ,
                            p_BSN     ,
                            p_OB22IE  ,
                            p_BSD7    ,
                            p_OB22D7  ,
                            p_source  ,
                            p_kv      ,
                            p_nd      ,
                            p_dptid   ,
                            p_FL      ,
                            sysdate   ,
                            p_ref,
                            p_acccard,
                            p_id,
                            p_mark,
                            p_kod_otd,
                            p_tvbv,
                            p_attr,
                            p_batch_id);
      p_err := 'Ok';
--    commit;

    --згідно заявки COBUMMFO-5389---------
    if p_FL  = 12 then
    --знаходимо ключ
      select  a_im.key
        into   in_key 
        from   asvo_immobile a_im
       where   a_im.BRANCH=p_BRANCH and
               a_im.NLS   =p_NLS    and
               a_im.kv    =p_kv     and
               a_im.nd    =p_nd     and
               a_im.source=p_source and
               a_im.kod_otd=p_kod_otd and
               a_im.acc_card = p_acccard and
               a_im.mark=p_mark and 
               a_im.id=p_id;
    
    -- робимо вставку
       begin
        insert into part_pay_immobile(key, pdat, nls, sum, userid, status, mfob, fio, okpob,COMMENTS) 
         values(in_key, sysdate,null, p_OST, null, 2, null, null, null,'при міграції з ММФО для ASVO арештованих');
         exception when dup_val_on_index then null;
        end;
    --Помітка про те що накладено арешт на рахунок
        update   asvo_immobile a_im set comments = 'арештований в АСВО_' 
         where   a_im.BRANCH=p_BRANCH and
                 a_im.NLS   =p_NLS    and
                 a_im.kv    =p_kv     and
                 a_im.nd    =p_nd     and
                 a_im.source=p_source and
                 a_im.kod_otd=p_kod_otd and
                 a_im.acc_card = p_acccard and
                 a_im.mark=p_mark and 
                 a_im.id=p_id;
    end if; 
    --------------------------------------
    EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
      begin
        select DZAGR,
               fl
        into   DZAGR_,
               fl_
        from   asvo_immobile
        where  BRANCH=p_BRANCH and
               NLS   =p_NLS    and
               kv    =p_kv     and
               nd    =p_nd     and
               source=p_source and
               kod_otd=p_kod_otd and
               acc_card = p_acccard and
               mark=p_mark and 
               id=p_id;
               
               /* --Ключ--
               KOD_OTD
                BRANCH
                ACC_CARD
                MARK
                NLS
                ID
               */
      EXCEPTION WHEN no_data_found THEN
        DZAGR_ := sysdate;
        fl_    := 0;
      end;
      p_err := 'Вклад '||p_nd||' '||p_nls||'/'||to_char(p_kv)||' из ('||p_source||
               ') УЖЕ БЫЛ загружен '||to_char(DZAGR_)||', флаг обработки = '||to_char(fl_);
    end;

  end dpt2immobile;

--

--переброска остатков с котловых счетов неподвижных вкладов на счета РУ

  procedure load_IM4KOTL2S (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is
    TT_       oper.TT%type  := 'N24';
    VOB_      oper.VOB%type := 6;
    REF_      oper.REF%type;
    daos_ru_  accounts.daos%type;
    acc_ru_   accounts.acc%type;
    S_RU_     accounts.nls%type;
    nms_ru_   accounts.nms%type;
    KOTL_     accounts.nls%type;
    nms_      accounts.nms%type;

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;

--  select branch
--  into   branch_
--  from   ASVO_FFF_BRANCH
--  where  FFF=p_tvbv and
--         rownum<2;

--  bars_audit.info('load_ostcdptAS - @ branch_='||branch_);

--  депозиты

--  bc.subst_branch(branch_);

    tokf;

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
    gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

/*
    for k in (select i.ost                        ,
                     i.nls                    nsc ,
                     i.fio                        ,
                     i.key                        ,
                     i.branch                     ,
                     i.ob22de                 ob22,
                     i.bsd                        ,
                     i.kv                         ,
                     s.nls                    KOTL,
                     trim(substr(s.nms,1,38)) nms
--                   a.nls                    S_RU,
--                   a.kv                         ,
--                   trim(substr(a.nms,1,38)) nms
              from   asvo_immobile i,
--                   accounts      a,
                     accounts      s
              where  i.fl=-10                                               and
                     i.tvbv=p_tvbv                                          and
--                   a.nls=vkrzn(substr(gl.aMFO,1,5),i.bsd||'_30'||gl.aMFO) and
--                   a.kv=i.kv                                              and
--                   a.dazs is null                                         and
                     i.source='АСВО'                                        and
                     i.ost>0                                                and
                     s.branch(+)=i.branch                                   and
                     s.tip(+)='ODB'                                         and
                     s.dazs(+) is null                                      and
                     s.nbs(+)=i.bsd                                         and
                     s.ob22(+)=i.ob22de                                     and
                     s.kv(+)=i.kv)
*/

    for k in (select ost        ,
                     nls    nsc ,
                     fio        ,
                     key        ,
                     branch     ,
                     ob22de ob22,
                     bsd        ,
                     kv
              from   asvo_immobile
              where  fl=-10        and
                     tvbv=p_tvbv   and
                     source='АСВО' and
                     ost>0)
    loop

--    if k.KOTL is null then
--      bars_audit.error(p_errmask||'(1): не найден или закрыт котловой счёт для вклада '||
--                       k.nsc||' ('||k.fio||') вал.'||k.kv||' - '||sqlerrm||' '||
--                       dbms_utility.format_error_backtrace);
--      p_code := p_code+1;
--      goto nofoundi;
--    end if;

      begin
        select nls,
               trim(substr(nms,1,38))
        into   KOTL_,
               nms_
        from   accounts
        where  branch=k.branch and
               tip='ODB'       and
               dazs is null    and
               nbs=k.bsd       and
               ob22=k.ob22     and
               kv=k.kv         and
               rownum<2;
      exception when no_data_found then
        bars_audit.error(p_errmask||'(1): не найден или закрыт котловой счёт для вклада '||
                         k.nsc||' ('||k.fio||') вал.'||k.kv||', БС='||k.bsd||', ОБ22='||
                         k.ob22||' - '||sqlerrm||' '||dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofoundi;
      end;

--    S_RU_ := vkrzn(substr(gl.aMFO,1,5),k.bsd||'_30'||gl.aMFO);               -- буде по другому
--    S_RU_ := vkrzn(substr(gl.aMFO,1,5),k.bsd||'_30'||substr(k.branch,11,4)); -- ось так
      S_RU_ := vkrzn(substr(gl.aMFO,1,5),k.bsd||'_00'||case k.bsd when '2620' then
                                                         '30'
                                                                  when '2630' then
                                                         '46'
                                                                  when '2635' then
                                                         '38'
                                                       end||substr(k.branch,11,4));

      begin
        select trim(substr(nms,1,38)),
               daos                  ,
               acc
        into   nms_ru_ ,
               daos_ru_,
               acc_ru_
        from   accounts
        where  nls=S_RU_    and
               dazs is null and
               kv=k.kv;
      exception when no_data_found then
        bars_audit.error(p_errmask||'(2): не найден или закрыт счёт РУ для вклада '||
                         k.nsc||' ('||k.fio||') вал.'||k.kv||' - '||sqlerrm||' '||
                         dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofoundi;
      end;

      if daos_ru_>p_dasvox then
        update accounts
        set    daos=p_dasvox
        where  acc=acc_ru_;
      end if;

--    bars_audit.info('load_IM4KOTL2S - 1 k.nsc='||k.nsc);

      bc.subst_branch(k.branch);

      GL.REF (REF_);

--    bars_audit.info('load_IM4KOTL2S - 2');

      begin
        GL.IN_DOC3 (REF_   , TT_   , VOB_   , REF_ , SYSDATE, GL.BDATE, 1,
                    k.KV   , k.ost , k.KV   , k.ost, NULL   , GL.BDATE, GL.BDATE,
--                  k.nms  , k.KOTL, gl.AMFO,
                    nms_   , KOTL_ , gl.AMFO,
                    nms_ru_, S_RU_ , gl.AMFO,
                    'Розкриття рахунку в ЦРНВ по вкладу #'||k.nsc||', '||k.fio,
                    NULL, null, null, NULL, NULL, 0, NULL, null);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(0): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        goto nofoundi;
      end;

--    bars_audit.info('load_IM4KOTL2S - 3');

      begin
        GL.PAYV
--              (0, REF_, GL.BDATE, TT_, 1, k.KV, k.KOTL, k.ost,
                (0, REF_, GL.BDATE, TT_, 1, k.KV, KOTL_ , k.ost,
                                            k.KV, S_RU_ , k.ost);
      exception when OTHERS then
        bars_audit.error(p_errmask||'(3): '||sqlerrm||' - '||dbms_utility.format_error_backtrace);
        p_code := p_code+1;
        rollback;
        goto nofoundi;
      end;

--    begin
--      GL.PAY
--           (1, REF_, GL.BDATE);
--    exception when OTHERS then
--      bars_audit.error(p_errmask||'(4): '||sqlerrm||' - '||
--                       dbms_utility.format_error_backtrace);
--      p_code := p_code+1;
--      rollback;
--      goto nofoundi;
--    end;

      update asvo_immobile
      set    fl=0
      where  key=k.key;

      begin
        insert
        into   operw (ref,
                      tag,
                      value)
              values (REF_,
                      'ASVOI',
                      to_char(k.key));
      exception WHEN dup_val_on_index then
        update operw
        set    value=to_char(k.key)
        where  ref=REF_ and
               tag='ASVOI';
      end;

      p_open := p_open+1;

<<nofoundi>> null;

      dbms_application_info.set_client_info('load='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

    commit;

--  dbms_application_info.set_client_info('pereocenka');

--  migraAS.pereocenka(p_tvbv,p_open,p_code,p_errmask,p_dasvox);
--  commit;

    bc.set_context;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end load_IM4KOTL2S;

--

  procedure drop_IM4KOTL2S (p_tvbv in  char    ,
                            p_open out number  ,
                            p_code out number  ,
                            p_errmask  varchar2,
                            p_dasvox   date)
  is

--  branch_  varchar2(32);
    TT_      oper.TT%type := 'N24';

  begin

    bars_alerter(0);

    p_open := 0;
    p_code := 0;

--  select branch
--  into   branch_
--  from   ASVO_FFF_BRANCH
--  where  FFF=p_tvbv and
--         rownum<2;

--  откат документов по развороту вкладов (BAK)

--  bc.subst_branch(branch_);

    tokf;

    begin
      insert
      into   fdat (fdat)
           values (p_dasvox);
      commit;
    exception when OTHERS then
      null;
    end;

    gl.pl_dat(p_dasvox);
--  gl.amfo := f_ourmfo_g;

--  if gl.bdate is null then
--    gl.bdate := bankdate_g;
--  end if;

    for k in (select o.ref,
                     w.value key
              from   oper  o,
                     operw w
              where  o.tt=TT_      and
                     o.ref=w.ref   and
                     w.tag='ASVOI' and
                     o.sos=1)
    loop

      ful_bak(k.ref);

--    bars_audit.info(substr(p_errmask,length(p_errmask)-6)||': ful_bak '||k.ref);

      delete
      from   operw
      where  ref=k.ref;

      update asvo_immobile
      set    fl=-10
      where  fl=0 and
             key=to_number(k.key);

--    update social_contracts
--    set    details=substr(details,2)
--    where  contract_id=k.dptid;

      p_open := p_open+1;

      dbms_application_info.set_client_info('drop='||to_char(p_open)||
                                         ', error='||to_char(p_code));
    end loop;

    commit;

    bc.set_context;

    dbms_application_info.set_client_info(' ');

    bars_alerter(1);

  end drop_IM4KOTL2S;

--

  procedure tableDP_stats
  is
    c_  int;
  begin

--  сбор статистики по таблицам депозитов (DPT_DEPOSIT и связанные)

    select count(1)
    into   c_
    from   V$OPEN_CURSOR c,
           V$SESSION     s
    where  s.status='ACTIVE' and
           s.sid=c.sid       and
           c.sql_text like 'SELECT 3711 FROM DUAL%';

    if c_=0 then

      select 3711
      into   c_
      from   dual;

      begin
--      for k in (select distinct
--                       u1.table_name
--                from   user_constraints u1,
--                       user_constraints u2
--                where (u1.R_CONSTRAINT_NAME=u2.CONSTRAINT_NAME and
--                       upper(u2.TABLE_NAME)='DPT_DEPOSIT')     or
--                      (upper(u1.TABLE_NAME)='DPT_DEPOSIT'      and
--                       upper(u2.TABLE_NAME)='DPT_DEPOSIT'      and
--                       u1.R_CONSTRAINT_NAME is not null        and
--                       u1.R_CONSTRAINT_NAME=u2.R_CONSTRAINT_NAME))
        for k in (select distinct
                         u2.table_name
                  from   user_constraints u1,
                         user_constraints u2
                  where  u2.r_constraint_name=u1.constraint_name                                                                                               and
                         u1.table_name in ('ACCOUNTS','CUSTOMER','DPT_DEPOSIT')                                                                                and
                         substr(u2.table_name,1,16) not in ('DPT_DEPOSIT_CLOS','CUSTOMERW_UPDATE','DPT_ASVO_HISTORY','DPT_TECHACCOUNTS','SPECPARAM_UPDATE')    and
                         substr(u2.table_name,1,15) not in ('ACCOUNTS_UPDATE','CUSTOMER_UPDATE')                                                               and
                         substr(u2.table_name,1,12) not in ('DPT_JOBS_LOG','INT_RATN_ARC')                                                                     and
                         substr(u2.table_name,1,10) not in ('CUSTOMER_R')                                                                                      and
                         substr(u2.table_name,1,9)  not in ('CUSTCOUNT','CUSTOMERP','ACCOUNTSP')                                                               and
                         substr(u2.table_name,1,8)  not in ('SKRYNKA_','DPT_VIDD','CUSTBANK')                                                                  and
                         substr(u2.table_name,1,7)  not in ('FINMON_','SOCIAL_','SURVEY_','PEREKR_')                                                           and
                         substr(u2.table_name,1,5)  not in ('SALDO','PAWN_','RNKP_','CUST_')                                                                   and
                         substr(u2.table_name,1,4)  not in ('ACC_','CIG_','DPU_','GRT_','PKK_','RKO_','STO_','DCP_','ACCC','ACCE','ACCI','XOZ_','RNK_','CIM_') and
                         substr(u2.table_name,1,3)  not in ('INS','KLP','SW_','VP_','W4_','KL_','CM_')                                                         and
                         substr(u2.table_name,1,2)  not in ('CC','E_')                                                                                         and
                         substr(u2.table_name,1,1)  not in ('B','N','O','T','Z'))
        loop
          begin
            execute immediate 'Analyze Table "'||k.table_name||'" Estimate Statistics Sample 33 Percent';
--          dbms_stats.gather_table_stats(ownname=>'BARS'                 ,
--                                        tabname=>'"'||k.table_name||'"'',
--                                        cascade=>true);
          exception when others then
            null;
          end;
        end loop;
      end;

    end if;

  end tableDP_stats;

--

end migraAS;
/

